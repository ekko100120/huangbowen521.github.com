UTHOR: flysky
STATUS: publish
ALLOW COMMENTS: 1
ALLOW PINGS: 1
CONVERT BREAKS: 1
PRIMARY CATEGORY: WEB技术
DATE: 01/03/2008 08:34:43
-----
EXCERPT:
<p style="text-indent: 2em">在使用vss2005源代码管理工具进行团队开发时，总会遇到这样那样的问题。这篇文章将告诉你某些问题的解决方法。</p>
-----
BODY:
<p style="text-indent: 2em">其实这个很简单，首先保证你机子上装了vs2005和vss2005这两个软件。然后打开VS2005, 进入 &quot; 工具-&gt;选项&quot;，然后选择&quot;源代码管理-&gt;插件选择&quot;，&quot;在当前源代码管理插件&quot;的下拉选项中选择&quot;Microsoft visual sourceSafe&quot;.</p><p>&nbsp;</p><p style="text-indent: 2em">但是我今天在帮我一个同学配置的时候， 我在工具-&gt;选项后死活找不到源代码管理。这就奇怪了。我东整西整弄了10来分钟都没搞定。</p><p style="text-indent: 2em">后来我突然想到一点，问他第一次使用VS2005时候配置默认环境选的是什么语言？他说是 vb.net。我隐约感到问题应该出在这里。我将其默认环境改为常规后，再进入工具-&gt;选项中，赫然发现了源代码管理子项。</p><p style="text-indent: 2em">修改默认环境的方法是在工具-&gt;导入导出配置里面。选 重置所有设置 ，直接依次选下去就可以更改了。</p><p style="text-indent: 2em">还有一个问题，在用c#开发asp.net网站的时候，如果你默认环境选的是c#,在新建asp.net网站的时候你就会发现没有对应的项目。是不是比较郁闷啊？一个最简单的解决方法就是在左下角选择语言栏里有两个C#，你选择另外一个后，就可以新建网站了。</p>
-----
KEYWORDS:
vs2005,
vss2005,
关联
-----
--------
TITLE: 一些感悟（1年以前的）
AUTHOR: flysky
STATUS: publish
ALLOW COMMENTS: 1
ALLOW PINGS: 1
CONVERT BREAKS: 1
PRIMARY CATEGORY: 个人日记
DATE: 01/19/2008 20:18:05
-----
EXCERPT:
<p style="text-indent: 2em">大学上了三年多，你认真总结过自己吗？也许有的时候，思考十分钟比编1000行代码更为重要。</p>
-----
BODY:
<p style="text-indent: 2em">今天整理电脑，偶然翻出一篇写于去年的演讲稿。是在一次班级团组织生活上向大家介绍自己学习计算机的一些感悟。如今一年过去了，看到一年前我的感悟，百般滋味涌上心头。现贴出来，希望能给同学以启迪。</p><p style="text-indent: 2em">一下是演讲稿的内容。</p><p style="text-indent: 2em">我们学习计算机已经两年了。两年里大家到底学到多少东西，恐怕每个人的感受都不一样。无论你外表再花哨，肚子里有多少知识自己最清楚。我回顾以下自己的大学经历，并浅谈一下自己目前对学计算机的一点感受。</p><p style="text-indent: 2em">刚入大一，我对计算机了解很少，只会打游戏，和简单的OFFICE操作。但是我一向对计算机高手有种崇拜的感觉，老是幻想什么时候自己能成为其中一员。</p><p style="text-indent: 2em">大一的上半学期的时候，想自学 FLASH。自己就从图书馆借了好几本关于FLASH的书，找时间蹭机房钻研。恰逢那时侯要搞团组织生活，要我做个FLASH，我就带者压力开始钻研了。我发现自己钻研的好处是，我先是想实现某种效果，我才看书上是如何实现的，然后再操作实现，这样理解很深刻，能明白它的具体原理。</p><p style="text-indent: 2em">从第一次打开FLASH这个软件到作出第一个FLASH，不到两个月的时间。虽然它很丑，但是我很喜欢。可惜那时侯不知道把FLASH导成自带播放器的格式，结果在开团组织生活的时候由于机子上没装播放器而无法播放。</p><p style="text-indent: 2em">大一下半学期我们开了FLASH课，我渐渐明白不是所有的知识只有老师教了我们后，我们才能学会。上FLASH课的时候我基本没听过讲，因为感觉老师讲的好简单。后来就是那个第三届技能大赛开始了，我想自己既然学了FLASH，不如做个作品交上去吧。有好多人说就我那水平怎么可能获奖？我自己想贵在参与，得不得奖无所谓，就花了快一个月的时间做了个动画，在比赛截止的最后一天交过去了。最后竟然得了奖。看起来说的很轻松，做的过程中很辛苦。作动画要一层层的累加，一个场景一个场景的赶，有多少次都想放弃了，但是最终是坚持了下来。我从这个事情得出的结论是，如果你想好一件事情的话，你要付出更多的努力，要不厌其烦，想不劳而获只能让时间白白流逝。</p><p style="text-indent: 2em">后来放暑假了，计协要选一批人搞技术培训，我就参加了。那时侯培训分美工和编程两部分。我之所以没有选美工是发现我1没有艺术天分。就比如做FLASH动画，我懂的如何使用这个软件，但是却创作不出原始素材。2，鉴于我们这个专业我想往深层次钻。</p><p style="text-indent: 2em">师兄培训教我们的是ASP。在没培训之前我根本不知道ASP是什么东西，连dreamweaver也是第一次用。总共培训了5天，每天3个小时，其中一个半小时师兄讲，剩下的一个半小时自己上机操作，不会的问师兄。我给大家说下当时培训情况。第一天讲的是怎么配置IIS和建立站点。第二天讲dreamweaver的一些基本操作。第三天讲如何使用数据库，配数据源，并实现了登陆注册。第四天教我们做了个很简单的留言版。第五天没讲什么具体的东西，大概介绍了一个网站的开发过程。就这么短短的五天过后，师兄就让我们交个作品上来。</p><p style="text-indent: 2em">我做的是小型的魔兽论坛,被选中了成了协会的编程干部。</p><p style="text-indent: 2em">可是我来协会还没站稳，师兄给我们下达了一项任务，让我们几个搞编程的和搞美工的在开学前做个协会的新网站出来。我一听眼黑了。这个难度也太大了。但是心想有什么不会的可以问师兄，就硬者头皮做了。由于是第一次做网站，根本不懂什么规划，上去就编数据库写代码，结果给后来造成了不少的麻烦。</p><p style="text-indent: 2em">刚开始的时候，我们编程的还有不少人做，可是做着做着我发现好多都跑光了，只有我们班的几个还坚持在，我想可能是耐不住枯燥吧。暑假那段时间我相当于要同时学三门语言，HTML语言，ASP语言，外带个SQL查询语句。我经常碰到令人头痛的问题，刚开始，师兄还给我解答，后来干脆不耐烦说自己查书去，可能嫌我问的问题太幼稚了。我只好天天在BAIDU来BAIDU去的。</p><p style="text-indent: 2em">我们不是好多同学也选了网站建设课吗？不知道大家学的怎么样？这种东西就是入门有点痛苦，但是之后的路就好走多了，当你学的有感觉的时候，你就能感到你头脑中有一棵知识树，随着你知识的积累，那棵树越长越大，你越学越自信。我给大家建议个学习网站建设的方法，那网站建设课本后面不是有几个综合性的例子吗？你把那些代码都敲进去，调试运行成功，你就会发现你对ASP已经有了很深的了解了。这就是要先学会看别人的代码，要多思考。大家记得SESSION这个属性吧。老师给我们讲了如何用，但是好多人没整明白。我做协会网站的时候根本不知道有个SESSION这个属性。我在做会员专区的时候，遇到了一个问题，就是会员注册登陆后，进了会员专区要进行各种操作，可是我怎么能区别是那个会员在进行操作那，我想如果有一个变量传值能老跟着这个会员的操作多好。哪个时候我知道两种传值方式，表单传值和问号传值，但是这两种都只能传往一个页面，要在不同页面间传送很不方便。我从网上查资料，发现了SESSION这个属性，它很好的解决了我的问题。这样你就不会再犯糊涂它是干什么用的。</p><p style="text-indent: 2em">本来我们计划是开学前把网站做好挂出去的，可是我能力太差劲了，边学边做很慢，而且其他人都不知道跑那里去了。后来总算是都开学了一个多月才正式把网站做好，挂出来。通过做这个网站我学到了很多的东西。这对我以后的学习起到了很大的作用。</p><p style="text-indent: 2em">但在大二上半学期我走了弯路，那段时间我不知怎么想的，先弄了下XML，后来看了下ｊａｖａ的书，又编了好长时间的JSP代码，正是由于我学的太杂了，最后什么东西都没有学到，全是学一段时间觉的没什么收获就换了。我忘了当时刚开始学习ASP要吃好多的苦。而且我总想老师讲的课没用，不如自己学，忽略了对理论的学习，象数据结构，汇编我就学的不是很好。后来学期快结束时我才发现了问题的严重性，饿补了下，但是毕竟还有好多夹生的。</p><p style="text-indent: 2em">寒假里我看了点VC的书，LINUX方面的光盘，但是玩心太大，没掌握多少东西，感觉这个寒假是荒废了。</p><p style="text-indent: 2em">这个学期到现在，我加重了对理论的学习。这个学期的专业课我很少矿过，课上也大多认真听了。</p><p style="text-indent: 2em">我已经感觉到了学习理论的好处，使你能更地层的了解一个程序的运行。</p><p style="text-indent: 2em">我选了WINDOWS程序设计的课，恰巧我寒假里看了本VC的书，感觉能把书里的项目做出来。于是就花了些工夫，边看书，边听课，边做。不会了就从网上查资料，本来想问老师，可是问了一次老师后就不想问了。因为我的问题都太简单了，老师不好好给我说，不如看BAIDU来的快。</p><p style="text-indent: 2em">要知道当时我对VC++的MFC编程一无所知，甚至连建个工程都不会。没办法只好咬牙坚持了下来。由于这个学期时间很紧，为了赶进度，我就经常通宵。那个课本好烂，有好多错误的地方，我改的好痛苦.我这个人比较怪，白天很难静下心来写代码，只有晚上才能保持头脑清醒。终于在前几天是完成了程序大部分功能。</p><p style="text-indent: 2em">这个系统用了网络编程，数据库编程，对VC的涵盖还是很广的。我通过做这个学到了好多好多的东西。</p><p style="text-indent: 2em">比如说注册表编程。不知道有多少人能说出来WINDOWS的注册表是干什么用的，更别提对它的使用了。我这个系统就是需要把软件的一些基本配置保存在注册表中，看似很高深，其实用两个函数轻松搞定。有些东西根本没有你想象中的那么难，只要你做了一次就会发现。</p><p style="text-indent: 2em">说的这么乱，大家一定都晕了。</p><p style="text-indent: 2em">我本来想把我的感受总结成一，二，三等几个大点的。可是写作能力太差，搞不定。</p><p style="text-indent: 2em">简单说下吧。学计算机理论一定要抓好。千万不要忽略理论。理论不扎实的后果就是永远只能浮在很浅的层次上，想要深入就很难了。</p><p style="text-indent: 2em">学计算机要有钻劲，有恒心。</p><p style="text-indent: 2em">学计算机不能跟着老师走。如果你做东西时发现那里不会的时候，不要想老师没讲我就不会，就不去钻。这是很错误的。</p><p style="text-indent: 2em">学计算机要明确自己的方向，不能东学一块，西学一块。要让自己的知识成为一个完整的系统。我上个学期就吃了这个亏，浪费了半个多学期。</p><p style="text-indent: 2em">学计算机要学会取舍。人都是有惰性的。我的惰性就很大。现在我平常要上课，平时协会还有不少的日常事务要处理，有些空闲时间还想打会游戏，休闲下，这样很难有大的成就。我现在就在努力改观。</p><p style="text-indent: 2em">学计算机要多做项目。只有做项目是最快的途径，最好的途径。我们不是开了课程设计吗？相信只要认真做了课程设计的同学每人的收获一定不少。我们以前是站在软件使用者角度上的，如果我们站在开发者角度上，就会学到很多东西。我们的VB。NET课，老师整天讲那些空间怎么用，我觉的稍微难点的有点价值听外，其他的完全可以自己去摸索，用不了多久你就会用了。如果你在学VB。NET的时候是报着做一个什么图书管理系统啊的什么的话，你如果能坚持下来的话，你就会发现你进步很快。</p><p style="text-indent: 2em">学计算机要做学会思考。思考是小到对一个算法如何实现。大到对整个计算机编程的认识。这个我无法具体说，只能意会，不能言传。举个简单的例子，VC++与C++的区别，可能很多人还没搞不明白。</p><p style="text-indent: 2em">学计算机不能浮躁，不能自嗷，不能不懂装懂。浮躁是大敌，我这方面做的还不够，但是我最起码知道要克服他。还有千万不要骄傲，目中无人，无论你是不是搞计算机的，千万不要盲目自大，这是做人的基本原则。不能不懂装懂，如果有人问了你一个问题你不会，你要勇敢的说出来你不会，并马上查资料去找答案。</p><p style="text-indent: 2em">我只是一个普通的计算机科学与技术专业的学生。以前我梦想成为一名计算机高手，但是现在我甚至无法描绘一个真正的计算机高手是什么样的。</p><p style="text-indent: 2em">每当我做出一个东西，哪怕只有一个人去使用它，那也是有用的。我也会高兴的。</p>
-----
KEYWORDS:
感悟
-----
--------
TITLE: Asp.net网站开发中的三层架构
AUTHOR: flysky
STATUS: publish
ALLOW COMMENTS: 1
ALLOW PINGS: 1
CONVERT BREAKS: 1
PRIMARY CATEGORY: WEB技术
DATE: 02/19/2008 19:49:21
-----
EXCERPT:
<p style="text-indent: 2em">在开发网站过程中高效，方便的开发手段都是大家所追求的。我们通过三层架构能带来不少的方便。</p>
-----
BODY:
<p style="text-indent: 2em">三层架构是那三层那？分别是数据访问层 database access layer,业务逻辑层business logic layer,用户表现层（用户接口层） user interface layer.简称分别为DAL,BLL,UIL.</p><p style="text-indent: 2em">数据访问层主要是提供一些通用的对数据库进行操作的函数。业务逻辑层则调用这些函数完成某些功能，而用户表现层则又调用业务逻辑层的函数来使用这些功能。说起来比较简单，但是到底是怎么个实现法?不要着急，给你举个小例子就明白了。</p><p style="text-indent: 2em"><b>1，</b>打开VS2005,建立一空白解决方案。注意是建立空白解决方案，而不是一个项目或者网站。建立方式是 点击菜单栏的 新建&agrave;项目。项目类型选 其他项目类型-&gt;Visual Studio解决方案。右边的模板选择 空白解决方案，填写名称，选择位置，点击确定即可。</p><p style="text-indent: 2em"><b>2，</b>打开解决方案资源管理器，右键点击此解决方案名称&agrave;新建&agrave;新建项目，项目类型为类库，使用语言选C#,命名为DAL.用同样的方法再新建一个项目命名为BLL,然后再新建一个ASP.NET网站,使用语言为c#，命名为 UIL.</p><p style="text-indent: 2em"><b>3，</b>添加项目BLL对项目DAL的引用。以及网站UIL对项目BLL的引用。方法是在资源管理器中右击项目名称&agrave;添加引用。在弹出的对话框中选中项目标签，选择适当的项目点击确定。</p><p style="text-indent: 2em"><b>4，</b>在项目DAL中添加一个新的类文件，名称为dataaccess.cs.然后在此类文件中写入那些访问数据库或者xml文件的通用的方法，以供BLL层的调用。我通常使用的是一个微软企业库的组件，调用了里面操作数据库的方法。当然关于这个代码我会在以后的文章中拿出来给大家分享。</p><p style="text-indent: 2em">先举个简单的例子，假设下面这个函数是根据传来的查询语句，返回一个dataset对象。</p><p style="text-indent: 2em">&nbsp;/// &lt;summary&gt;</p><p style="text-indent: 2em">/// 执行查询,返回数据集</p><p style="text-indent: 2em">/// &lt;/summary&gt;</p><p style="text-indent: 2em">/// &lt;param name=&quot;connectionName&quot;&gt;连接字符串名&lt;/param&gt;</p><p style="text-indent: 2em">/// &lt;param name=&quot;commandType&quot;&gt;命令类型(存储过程或T-SQL查询语句)&lt;/param&gt;</p><p style="text-indent: 2em">/// &lt;param name=&quot;command&quot;&gt;存储过程名或T-Sql查询语句&lt;/param&gt;</p><p style="text-indent: 2em">/// &lt;returns&gt;数据集&lt;/returns&gt;</p><p style="text-indent: 2em">public static DataSet ExecuteDataSet(QueryType commandType, string command)</p><p style="text-indent: 2em">{</p><p style="text-indent: 2em">SqlConnection mysqlconnection = new SqlConnection(myconnectionstring);</p><p style="text-indent: 2em">&hellip;&hellip;</p><p style="text-indent: 2em">Mysqlconnection.close();</p><p style="text-indent: 2em">Return&nbsp; mydataset;</p><p style="text-indent: 2em">}</p><p style="text-indent: 2em"><b>5，</b>假设我们在用户表现层要实现一个功能，就是根据一个用户ID获取用户的详细信息。那么就要在业务逻辑层设计这个函数。</p><p style="text-indent: 2em">在BLL项目中添加一个新类TheUser.</p><p style="text-indent: 2em">其中部分代码为：</p><p style="text-indent: 2em">Public class TheUser</p><p style="text-indent: 2em">{&nbsp;</p><p style="text-indent: 2em">&hellip;</p><p style="text-indent: 2em">///&lt;summary&gt;</p><p style="text-indent: 2em">///根据用户Id返回用户详细信息</p><p style="text-indent: 2em">///&lt;/summary&gt;</p><p style="text-indent: 2em">/// &lt;param name=&quot;userid&quot;&gt;用户ID&lt;/param&gt;</p><p style="text-indent: 2em">/// &lt;returns&gt;数据集&lt;/returns&gt;</p><p style="text-indent: 2em">&nbsp;</p><p style="text-indent: 2em">Public static DataSet GetUserInfoById(string userid)&nbsp;&nbsp;&nbsp;&nbsp; //函数定义为静态函数可以不用声明新类而直接调用</p><p style="text-indent: 2em">{</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp; String strSql =&nbsp;&nbsp; &ldquo;select * from UserInfo where UserId = &rdquo; + userid;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp; Return&nbsp; DAL.DataAccess.ExecuteDataSet(commandType.Text,strSql);&nbsp; //调用数据访问层函数，DAL为其命名空间</p><p style="text-indent: 2em">}</p><p style="text-indent: 2em">&nbsp;</p><p style="text-indent: 2em">&hellip;</p><p style="text-indent: 2em">}</p><p style="text-indent: 2em">&nbsp;</p><p style="text-indent: 2em"><b>6，</b>在用户接口层来调用这个函数.</p><p style="text-indent: 2em">在UIL网站中建立一个页面，在其.cs文件中要调用的函数中加入如下代码：</p><p style="text-indent: 2em">&hellip;</p><p style="text-indent: 2em">String UserId = &ldquo;001&rdquo;;</p><p style="text-indent: 2em">DataSet dsUserInfo = BLL.TheUser.GetUeserInfoById(UserId); //调用业务逻辑层函数。BLL为命名空间</p><p style="text-indent: 2em">DataTabel dtUserInfo = dsUserInfo.Tables[0];</p><p style="text-indent: 2em">&hellip;</p><p style="text-indent: 2em">这就是三层结构大体的样子。它的好处是结构清楚，功能模块清晰，出现异常能迅速定位排除。这种模式开发出来的代码非常美观，简洁，别人阅读起来特别方便。</p><p style="text-indent: 2em">另外告诉大家一个vs2005使用中的小技巧，目前还不知道的可以尝试下。当你写完一个函数要加注释的时候，在此函数名的上面一行打三个/（c#语言是三个/,vb里是三个&rsquo;）。然后你会发现程序自动出现了层次清晰的注释代码。你只需要在该加注释的地方补充你的注释即可。这样的注释看起来很漂亮，而且你以后调用的时候能看到它的动态提示。&nbsp;</p>
-----
KEYWORDS:
asp.net,
三层架构
-----
--------
TITLE: 在asp.net网站开发中使用ajax技术
AUTHOR: flysky
STATUS: publish
ALLOW COMMENTS: 1
ALLOW PINGS: 1
CONVERT BREAKS: 1
PRIMARY CATEGORY: AJAX
DATE: 02/24/2008 20:00:27
-----
EXCERPT:
<p style="text-indent: 2em">使用ajax技术开发你的网站或者web应用程序，给用户提供更舒适的用户体验。让我们来揭开ajax的神秘面纱。</p>
-----
BODY:
<p style="text-indent: 2em">今天给大家讲下如何在asp.net开发中使用ajax实现动态无刷新过程。</p><p style="text-indent: 2em">在这里我们用的是微软提供的ajaxpro.2.dll；这个组件可以在网上直接下载。</p><p style="text-indent: 2em">首先我们打开vs2005,选择文件-&gt;新建-&gt;新建网站。开发语言暂且选择c#。要在项目中使用这个组件要先做两个事情。</p><p style="text-indent: 2em"><b>一</b>，在网站中添加对这个组件的引用。方法是右键点击此项目/添加引用/浏览.选中这个dll文件，点击确定即可。</p><p style="text-indent: 2em"><b>二</b>，新建一个config配置文件。在此配置文件的system.web中添加如下代码：</p><p style="text-indent: 2em">&lt;httpHandlers&gt;</p><p style="text-indent: 2em">&lt;add verb=&quot;POST,GET&quot; path=&quot;ajaxpro/*.ashx&quot; type=&quot;AjaxPro.AjaxHandlerFactory, AjaxPro.2&quot;/&gt;</p><p style="text-indent: 2em">&lt;/httpHandlers&gt;</p><p style="text-indent: 2em">这样我们就可以在开发过程中使用微软给我们提供的功能了。</p><p style="text-indent: 2em">我讲一个用户登陆的例子。通过这个小例子来初探ajax的功能。</p><p style="text-indent: 2em">新建一个web页面，选择将代码放在单独的文件中，并命名为login.aspx.插入一个表格，在表格中插入input,button等html控件。Login.aspx的全部代码为：</p><p style="text-indent: 2em">&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;true&quot; CodeFile=&quot;login.aspx.cs&quot; Inherits=&quot;login&quot; %&gt;</p><p style="text-indent: 2em">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;</p><p style="text-indent: 2em">&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;</p><p style="text-indent: 2em">&lt;head runat=&quot;server&quot;&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp; &lt;title&gt;用户登陆&lt;/title&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp; &lt;<a><font color="#3b5888">script</font></a> language=&quot;&quot; type=&quot;text/&quot;&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp; function check()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //点击登陆时响应此函数</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp; {</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var username = document.getElementById(&quot;txtname&quot;).value;&nbsp; //获取用户名文本框中的值</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var userpwd = document.getElementById(&quot;txtpwd&quot;).value;&nbsp;&nbsp;&nbsp; //获取密码文本框中的值</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var showmsg = document.getElementById(&quot;showmsg&quot;);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //获取id为 showmsg 的 div层</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; showmsg.innerHTML = &quot;&quot;;&nbsp;&nbsp;&nbsp;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(username.length &lt;=0 )&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //如果用户名为空，提示用户输入</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; showmsg.innerHTML = &quot;请输入用户名&quot;;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(userpwd.length &lt;=0)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //如果密码为空，提示用户输入</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; showmsg.innerHTML = &quot;请输入用户密码&quot;;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Web.DoLogin(username,userpwd,re_login);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //调用服务器端方法&nbsp; 其中第一个参数为用户名，第二个参数为密码，第三个参数为回调函数名</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp; }</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp; function re_login(re)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //回调函数</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp; {</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var showmsg = document.getElementById(&quot;showmsg&quot;);</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; switch(re.value)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //根据返回值的不同显示响应的提示信息</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case &quot;1&quot;: showmsg.innerHTML = &quot;没有此用户&quot;;break;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case &quot;2&quot;: showmsg.innerHTML = &quot;密码错误&quot;; break;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case &quot;3&quot;: showmsg.innerHTML = &quot;登陆成功&quot;; break;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; default: showmsg.innerHTML = &quot;程序异常，请与管理人员联系&quot; ; break;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp; }</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp; &lt;/<a><font color="#3b5888">script</font></a>&gt;</p><p style="text-indent: 2em">&lt;/head&gt;</p><p style="text-indent: 2em">&lt;body&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp; &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp; &lt;div&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;table&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;tr&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;td style=&quot;width: 100px&quot;&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 用户名&lt;/td&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;td style=&quot;width: 100px&quot;&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;input id=&quot;txtname&quot; type=&quot;text&quot; /&gt;&lt;/td&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;td style=&quot;width: 100px&quot;&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/td&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/tr&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;tr&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;td style=&quot;width: 100px&quot;&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 密码&lt;/td&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td style=&quot;width: 100px&quot;&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;input id=&quot;txtpwd&quot; type=&quot;text&quot; /&gt;&lt;/td&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;td style=&quot;width: 100px&quot;&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/td&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/tr&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;tr&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;td style=&quot;width: 100px&quot;&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/td&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td style=&quot;width: 100px&quot;&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;input id=&quot;btnok&quot; type=&quot;button&quot; value=&quot;提交&quot; <font color="#ff0000">onclick</font>=&quot;check()&quot; /&gt;&lt;/td&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;td style=&quot;width: 100px&quot;&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/td&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/tr&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/table&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp; &lt;div&nbsp; id=&quot;showmsg&quot;&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp; &lt;/div&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp; &lt;/div&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp; &lt;/form&gt;</p><p style="text-indent: 2em">&lt;/body&gt;</p><p style="text-indent: 2em">&lt;/html&gt;</p><p style="text-indent: 2em">这就是login.aspx 中全部代码。接下来是login.aspx.cs中的全部代码。</p><p style="text-indent: 2em">using System;</p><p style="text-indent: 2em">using System.Data;</p><p style="text-indent: 2em">using System.Configuration;</p><p style="text-indent: 2em">using System.Collections;</p><p style="text-indent: 2em">using System.Web;</p><p style="text-indent: 2em">using System.Web.Security;</p><p style="text-indent: 2em">using System.Web.UI;</p><p style="text-indent: 2em">using System.Web.UI.WebControls;</p><p style="text-indent: 2em">using System.Web.UI.WebControls.WebParts;</p><p style="text-indent: 2em">using System.Web.UI.HtmlControls;</p><p style="text-indent: 2em">&nbsp;</p><p style="text-indent: 2em">[AjaxPro.AjaxNamespace(&quot;Web&quot;)]&nbsp;&nbsp;&nbsp; //声明ajaxpro的命名空间为 Web</p><p style="text-indent: 2em">public partial class login : System.Web.UI.Page</p><p style="text-indent: 2em">{</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp; protected void Page_Load(object sender, EventArgs e)</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp; {</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AjaxPro.Utility.RegisterTypeForAjax(typeof(login));&nbsp;&nbsp;&nbsp;&nbsp; //对AjaxPro在页Page_Load事件中进行运行时注册这的login是指页面类的类名。如是放在命名空间，则需要写上完整的命名空间</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp; }</p><p style="text-indent: 2em">&nbsp;&nbsp;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp; /// 用户登陆&nbsp;&nbsp;&nbsp; by flysky 2008-02-16</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;username&quot;&gt;用户名&lt;/param&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;userpwd&quot;&gt;密码&lt;/param&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp; /// &lt;returns&gt;&lt;/returns&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp; [AjaxPro.AjaxMethod]&nbsp;&nbsp; //声明此函数为ajax方法</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp; public string DoLogin(string username, string userpwd)</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp; {</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //对前台传过来的值进行判断，并返回相应的结果</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (username != &quot;张三&quot;)</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return &quot;1&quot;;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (userpwd != &quot;123456&quot;)</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return &quot;2&quot;;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return &quot;3&quot;;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; catch</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return &quot;4&quot;;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp; }</p><p style="text-indent: 2em">}</p><p style="text-indent: 2em">在此程序中，各个函数是这样执行的。</p><p style="text-indent: 2em"><b>1，</b>用户输入用户名和密码，点击提交，响应了的 check函数。</p><p style="text-indent: 2em"><b>2，</b>在check函数中首先检查用户名和密码是否为空，如果为空则给出提示信息然后返回。如果不为空则调用服务器端方法 DoLogin.</p><p style="text-indent: 2em"><b>3，</b>服务器端方法DoLogin对前台传来的参数进行处理，并将处理结果返回给前台回调函数 re_login。</p><p style="text-indent: 2em"><b>4，</b>回调函数re_login在页面显示 相应的提示信息。</p><p style="text-indent: 2em">当然，我这里只是讲了ajax最简单的应用。在此起个抛砖引玉的作用。大家多给批评和建议。</p><p style="text-indent: 2em">微软的vs2008测试版已经发布好长时间了，听说最近中文版也出现了，可惜一直没有时间去体验。我想其中对ajax的集成一定会有的。那时就要和大家一起学习了。</p>
-----
KEYWORDS:
asp.net,
ajax,
技术
-----
--------
TITLE: 一个通用的数据库访问类(sql server数据库)
AUTHOR: flysky
STATUS: publish
ALLOW COMMENTS: 1
ALLOW PINGS: 1
CONVERT BREAKS: 1
PRIMARY CATEGORY: WEB技术
DATE: 02/25/2008 19:12:06
-----
EXCERPT:
<p style="text-indent: 2em">一个优秀的数据库访问类在开发应用程序的过程中往往能起到事半功倍的作用。使用得当的话，完全可以把我们从操作数据库的繁重，重复劳动中解脱出来。</p>
-----
BODY:
<p style="text-indent: 2em">我在开发中小型WEB网站或者WEB应用程序通常使用三层架构。有一个比较好的通用的数据访问类往往能大大加快项目的进度，并且如果以后维护，二次开发将相当的方便。</p><p style="text-indent: 2em">下面是一个通用的访问sql server数据库的访问类。它用到了微软企业开发库的组件Microsoft.Practices.EnterpriseLibrary.Data.dll。这个组件可以从网上下。</p><p style="text-indent: 2em">下面是详细的代码。我已经加了注释。</p><p style="text-indent: 2em">using System;</p><p style="text-indent: 2em">using System.Collections;</p><p style="text-indent: 2em">using System.Data;</p><p style="text-indent: 2em">using System.Web;</p><p style="text-indent: 2em">using System.Configuration;</p><p style="text-indent: 2em">using System.Data.Common;</p><p style="text-indent: 2em">using System.Data.SqlClient;</p><p style="text-indent: 2em">using Microsoft.Practices.EnterpriseLibrary.Data;</p><p style="text-indent: 2em">using Microsoft.Practices.EnterpriseLibrary.Data.Sql;</p><p style="text-indent: 2em">using System.Xml;</p><p style="text-indent: 2em">namespace DAL</p><p style="text-indent: 2em">{</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp; #region 实际客户端调用部分</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp; /// 提供通用的数据库访问操作,通过提供相应的存储过程名和参数集,来完成数据的SIUD操作.</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp; public class DataAccess</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp; {</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// 私有构造函数以阻止客户端的new DataAccess()形式调用</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private DataAccess() { }</p><p style="text-indent: 2em">&nbsp;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #region 查询执行部分</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// 执行查询,返回数据集</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;connectionName&quot;&gt;连接字符串名&lt;/param&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;commandType&quot;&gt;命令类型(存储过程或T-SQL查询语句)&lt;/param&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;command&quot;&gt;存储过程名或T-Sql查询语句&lt;/param&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;parameters&quot;&gt;参数集合(不需要参数则为null)&lt;/param&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;returns&gt;数据集&lt;/returns&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static DataSet ExecuteDataSet(string connectionString, QueryType commandType, string command, SqlParameter[] parameters)</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SqlDatabase database = new SqlDatabase(connectionString);</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SqlCommand sqlCommand = new SqlCommand();</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; switch (commandType)</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case QueryType.StorageProcedure:</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sqlCommand = (SqlCommand)database.GetStoredProcCommand(command);</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case QueryType.Text:</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sqlCommand = (SqlCommand)database.GetSqlStringCommand(command);</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AttachParameters(ref sqlCommand, parameters);</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return database.ExecuteDataSet((DbCommand)sqlCommand);</p><p style="text-indent: 2em">&nbsp;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p style="text-indent: 2em">&nbsp;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// 执行查询,返回受影响的行数</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;connectionName&quot;&gt;连接字符串名&lt;/param&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;commandType&quot;&gt;命令类型(存储过程或T-SQL查询语句)&lt;/param&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;command&quot;&gt;存储过程名或T-Sql查询语句&lt;/param&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;parameters&quot;&gt;参数集合(不需要参数则为null)&lt;/param&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;returns&gt;受影响的行数&lt;/returns&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static int ExecuteNonQuery(string connectionString, QueryType commandType, string command, SqlParameter[] parameters)</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SqlDatabase database = new SqlDatabase(connectionString);</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SqlCommand sqlCommand = new SqlCommand();</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; switch (commandType)</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case QueryType.StorageProcedure:</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sqlCommand = (SqlCommand)database.GetStoredProcCommand(command);</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case QueryType.Text:</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sqlCommand = (SqlCommand)database.GetSqlStringCommand(command);</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AttachParameters(ref sqlCommand, parameters);</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return database.ExecuteNonQuery((DbCommand)sqlCommand);</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p style="text-indent: 2em">&nbsp;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// 执行查询,返回SqlDataReader对象</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;connectionName&quot;&gt;连接字符串名&lt;/param&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;commandType&quot;&gt;命令类型(存储过程或T-SQL查询语句)&lt;/param&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;command&quot;&gt;存储过程名或T-Sql查询语句&lt;/param&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;parameters&quot;&gt;参数集合(不需要参数则为null)&lt;/param&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;returns&gt;SqlDataReader对象&lt;/returns&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static SqlDataReader ExecuteReader(string connectionString, QueryType commandType, string command, SqlParameter[] parameters)</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SqlDatabase database = new SqlDatabase(connectionString);</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SqlCommand sqlCommand = new SqlCommand();</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; switch (commandType)</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case QueryType.StorageProcedure:</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sqlCommand = (SqlCommand)database.GetStoredProcCommand(command);</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case QueryType.Text:</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sqlCommand = (SqlCommand)database.GetSqlStringCommand(command);</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AttachParameters(ref sqlCommand, parameters);</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return (SqlDataReader)database.ExecuteReader((DbCommand)sqlCommand);</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p style="text-indent: 2em">&nbsp;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// 执行查询,返回结果集中第一行第一列</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;connectionName&quot;&gt;连接字符串名&lt;/param&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;commandType&quot;&gt;命令类型(存储过程或T-SQL查询语句)&lt;/param&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;command&quot;&gt;存储过程名或T-Sql查询语句&lt;/param&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;parameters&quot;&gt;参数集合(不需要参数则为null)&lt;/param&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;returns&gt;object对象&lt;/returns&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static object ExecuteScalar(string connectionString, QueryType commandType, string command, SqlParameter[] parameters)</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SqlDatabase database = new SqlDatabase(connectionString);</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SqlCommand sqlCommand = new SqlCommand();</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; switch (commandType)</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case QueryType.StorageProcedure:</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sqlCommand = (SqlCommand)database.GetStoredProcCommand(command);</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case QueryType.Text:</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sqlCommand = (SqlCommand)database.GetSqlStringCommand(command);</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AttachParameters(ref sqlCommand, parameters);</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return database.ExecuteScalar((DbCommand)sqlCommand);</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p style="text-indent: 2em">&nbsp;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// 执行查询,返回XmlReader对象</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;connectionName&quot;&gt;连接字符串名&lt;/param&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;commandType&quot;&gt;命令类型(存储过程或T-SQL查询语句)&lt;/param&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;command&quot;&gt;存储过程名或T-Sql查询语句&lt;/param&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;parameters&quot;&gt;参数集合(不需要参数则为null)&lt;/param&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;returns&gt;XmlReader对象&lt;/returns&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static XmlReader ExecuteXmlReader(string connectionString, QueryType commandType, string command, SqlParameter[] parameters)</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SqlDatabase database = new SqlDatabase(connectionString);</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SqlCommand sqlCommand = new SqlCommand();</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; switch (commandType)</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case QueryType.StorageProcedure:</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sqlCommand = (SqlCommand)database.GetStoredProcCommand(command);</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case QueryType.Text:</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sqlCommand = (SqlCommand)database.GetSqlStringCommand(command);</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AttachParameters(ref sqlCommand, parameters);</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return database.ExecuteXmlReader((DbCommand)sqlCommand);</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p style="text-indent: 2em">&nbsp;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// 将参数关联到查询命令上</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;sqlCommand&quot;&gt;待添加查询参数的SqlCommand对象&lt;/param&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;parameters&quot;&gt;SqlParameter对象集合&lt;/param&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private static void AttachParameters(ref SqlCommand sqlCommand, SqlParameter[] parameters)</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (null == parameters)</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sqlCommand.Parameters.Clear();</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; foreach (SqlParameter parameter in parameters)</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sqlCommand.Parameters.Add(parameter);</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p style="text-indent: 2em">&nbsp;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #endregion</p><p style="text-indent: 2em">&nbsp;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #region 获取连接字符串或SqlConnection对象,在新项目中修改连接字符串名称</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// 获取连接字符串,默认节点名 &quot;POConnectionString&quot;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;returns&gt;&lt;/returns&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static string GetConnectionString()</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return ConnectionConfiguration.GetConnectionString(&quot;POConnectionString&quot;);</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p style="text-indent: 2em">&nbsp;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// 获取连接字符串,支持 ASP.NET 2.0 程序</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;nodeName&quot;&gt;节点中的name属性的值&lt;/param&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;returns&gt;连接字符串&lt;/returns&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private static string GetConnectionString(string NodeName)</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return ConnectionConfiguration.GetConnectionString(NodeName);</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p style="text-indent: 2em">&nbsp;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// 获取Sql连接对象,默认节点名 &quot;POConnectionString&quot;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;returns&gt;&lt;/returns&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static SqlConnection GetSqlConnectionObject()</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return ConnectionConfiguration.GetSqlConnectionObject(&quot;POConnectionString&quot;);</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p style="text-indent: 2em">&nbsp;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// 获取SqlConnection对象,支持 ASP.NET 2.0程序</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;nodeName&quot;&gt;节点中的name属性的值&lt;/param&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;returns&gt;SqlConnection对象&lt;/returns&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private static SqlConnection GetSqlConnectionObject(string NodeName)</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return ConnectionConfiguration.GetSqlConnectionObject(NodeName);</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p style="text-indent: 2em">&nbsp;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #endregion</p><p style="text-indent: 2em">&nbsp;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #region 参数生成器</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// 返回一个具有给定属性的SqlParameter对象</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;parameterName&quot;&gt;参数名&lt;/param&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;parameterType&quot;&gt;参数Sql类型&lt;/param&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;ParameterLength&quot;&gt;参数长度&lt;/param&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;parameterValue&quot;&gt;参数值&lt;/param&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;returns&gt;SqlParameter 对象&lt;/returns&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static SqlParameter ParameterMaker(string parameterName, SqlDbType parameterType, int ParameterLength, object parameterValue)</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return ParameterFactory.Make(parameterName, parameterType, ParameterLength, parameterValue);</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p style="text-indent: 2em">&nbsp;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// 返回一个具有给定属性的SqlParameter对象</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;parameterName&quot;&gt;参数名&lt;/param&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;parameterValue&quot;&gt;参数值&lt;/param&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;returns&gt;SqlParameter 对象&lt;/returns&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static SqlParameter ParameterMaker(string parameterName, object parameterValue)</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return ParameterFactory.Make(parameterName, parameterValue);</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #endregion</p><p style="text-indent: 2em">&nbsp;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp; }</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp; #endregion</p><p style="text-indent: 2em">&nbsp;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp; #region QueryType 枚举</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp; /// 查询类型</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp; public enum QueryType</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp; {</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// 文本查询语句</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Text,</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// 存储过程查询</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; StorageProcedure</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp; }</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp; #endregion</p><p style="text-indent: 2em">&nbsp;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp; #region 获取连接字符串或SqlConnection连接对象</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp; /// 提供获取连接字符串或连接对象的静态方法</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp; internal class ConnectionConfiguration</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp; {</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// 私有构造函数用来阻止客户端的new ConnectionConfiguration()调用</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private ConnectionConfiguration() { }</p><p style="text-indent: 2em">&nbsp;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// 获取连接字符串,用于ASP.NET 2.0 程序</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;nodeName&quot;&gt;节点中的name属性的值&lt;/param&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;returns&gt;连接字符串&lt;/returns&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static string GetConnectionString(string nodeName)</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return ConfigurationManager.ConnectionStrings[nodeName].ConnectionString;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p style="text-indent: 2em">&nbsp;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// 获取SqlConnection连接对象,用于ASP.NET 2.0 程序</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;nodeName&quot;&gt;节点中的name属性的值&lt;/param&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;returns&gt;SqlConnection对象&lt;/returns&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static SqlConnection GetSqlConnectionObject(string nodeName)</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return new SqlConnection(GetConnectionString(nodeName));</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp; }</p><p style="text-indent: 2em">&nbsp;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp; #endregion</p><p style="text-indent: 2em">&nbsp;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp; #region 参数生成器</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp; /// 参数生成器</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp; internal class ParameterFactory</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp; {</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// 私有构造函数用来阻止客户端的new ParameterMaker调用</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private ParameterFactory() { }</p><p style="text-indent: 2em">&nbsp;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// 返回一个具有给定属性的SqlParameter对象</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;parameterName&quot;&gt;参数名&lt;/param&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;parameterType&quot;&gt;参数Sql类型&lt;/param&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;ParameterLength&quot;&gt;参数长度&lt;/param&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;parameterValue&quot;&gt;参数值&lt;/param&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;returns&gt;SqlParameter 对象&lt;/returns&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static SqlParameter Make(string parameterName, SqlDbType parameterType, int ParameterLength, object parameterValue)</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SqlParameter parameter = new SqlParameter(parameterName, parameterType, ParameterLength);</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; parameter.Value = parameterValue;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return parameter;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p style="text-indent: 2em">&nbsp;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// 返回一个具有给定属性的SqlParameter对象</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;parameterName&quot;&gt;参数名&lt;/param&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;parameterValue&quot;&gt;参数值&lt;/param&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;returns&gt;SqlParameter 对象&lt;/returns&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static SqlParameter Make(string parameterName, object parameterValue)</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SqlParameter parameter = new SqlParameter(parameterName, parameterValue);</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return parameter;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp; }</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp; #endregion</p><p style="text-indent: 2em">&nbsp;</p><p style="text-indent: 2em">}</p><p style="text-indent: 2em">&nbsp;</p><p style="text-indent: 2em">这么多的代码是不是看起来有点晕。其实使用起来非常方便。我给大家将下使用方法。</p><p style="text-indent: 2em"><b>1，</b>&nbsp; 从网上下载Microsoft.Practices.EnterpriseLibrary.Data.dll组件。并添加引用到你的项目中。</p><p style="text-indent: 2em"><b>2，</b>&nbsp; 建立一个类文件DataAccess.cs,将上述代码copy到此类文件中。注意修改类名和命名空间。</p><p style="text-indent: 2em"><b>3，</b>&nbsp; 关于连接字符串你可以在网站的config配置文件中增加名称为. POConnectionString的connectionStrings节点。（获取连接字符串要用GetSqlConnectionObject()函数）。你也可以用自己的节点名称（获取连接字符串要用GetConnectionString(string nodeName)函数。nodeName为你自己取的节点名称）。</p><p style="text-indent: 2em"><b>4，</b>&nbsp; 手动添加System.Configuration的引用。方法是右键点击项目名称选择添加引用。在弹出的对话框中选择.net标签。然后找到System.Configuration点击确定。</p><p style="text-indent: 2em">大功告成。如何使用那。举几个简单的类子。</p><p style="text-indent: 2em">下面是一个函数。根据教师ID，学期ID返回教师的教授的课程。</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ///根据教师ID，学期ID返回教师的教授的课程</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;teaid&quot;&gt;&lt;/param&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;termid&quot;&gt;&lt;/param&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;returns&gt;&lt;/returns&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static DataTable SelectByTeaidTerm(string teaid, string termid)</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; string strSql = &quot;select * from T_Tea_Course where TeaId = @teaid and TermId = @termid&quot;;&nbsp; //构建的查询语句。@teaid,@termid是要传递的参数。</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SqlParameter[] paras =&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 构建参数队列</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DataAccess.ParameterMaker(&quot;@teaid&quot;,teaid),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //调用DataAccess类的参数构造</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DataAccess.ParameterMaker(&quot;@termid&quot;,termid)</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; };</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return DataAccess.ExecuteDataSet(DataAccess.GetConnectionString(), QueryType.Text, strSql, paras).Tables[0];&nbsp;&nbsp;&nbsp;&nbsp; //调用DataAccess类的函数，返回一个datatable对象 其中第一个参数为获取连接字符串，第二个参数为查询命令的类型，QueryType.Text为文本，QueryType.StorageProcedure为存储过程。第三个参数为sql查询文本或者存储过程名称。第四个参数为要传递的参数列表，没有就写null.</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p style="text-indent: 2em">&nbsp;</p><p style="text-indent: 2em">这个数据库访问类只能访问sql server数据库。但是前段时间我调到软件实验室开发一个军用保密项目，其中要使用oracle数据库。我想微软企业库肯定有oracledatabase。我试着把数据访问类中SqlParameter，SqlCommand，SqlDatabase...等全替换成OracleParameter,OracleCommand,OracleDataBase...然后调试运行，竟然成功了。大家可以照此把它改成连接oracle,access等数据库的数据访问类。</p><p style="text-indent: 2em">DataAccess类的其他函数大家可以效仿上面，举一反三。有什么不明白的可以参考我做的一个课程设计《高校教材管理系统》。代码下载地址以后会给出。索要请发邮件到<a href="mailto:huangbowen521@126.com">huangbowen521@126.com</a><br />&nbsp;</p>
-----
KEYWORDS:
数据库,
访问,
通用,
sql server
-----
--------
TITLE: AjaxControlToolkit的安装使用问题
AUTHOR: flysky
STATUS: publish
ALLOW COMMENTS: 1
ALLOW PINGS: 1
CONVERT BREAKS: 1
PRIMARY CATEGORY: AJAX
DATE: 02/26/2008 23:16:09
-----
EXCERPT:
<p style="text-indent: 2em">相信不少初学者在安装使用AjaxControlToolkit的过程中，大都会出现一些问题。让我们先把第一道坎迈过去。</p>
-----
BODY:
<p style="text-indent: 2em">星期一有个廖老师找我说有个项目需要一个对asp.net和ajax比较熟悉的同学。她问我熟悉ajax不，我说已经做过两个项目了。她说那好星期三之前用AjaxControlToolkit做个东西出来。她要求的是在一个文本框输入内容的时候，能根据输入的内容在文本框下方列出数据库中相似的内容，并且如果数据库中没有的内容还要存入数据库。我硬着头皮答应下来了。</p><p style="text-indent: 2em">说实话，以前我做ajax一直用的是ajaxpro.2.dll这个组件，用这个实现廖老师说的功能应该不难。但是廖老师让我用AjaxControlToolkit来做，我心里还没底。AjaxControlToolkit从来没用过，长啥子样都不知道。</p><p style="text-indent: 2em">回来后，我就上网baidu,发现不少人在安装使用AjaxControlToolkit都遇到了问题。我安装了半天，遇到了不少问题，但是最后终于搞定了。现在给大家讲下应该如何安装使用AjaxControlToolkit。</p><p style="text-indent: 2em"><b>一，</b>从网上下载最新的AjaxControlToolkit.rar包和ASPAJAXExtSetup.msi安装程序。注意一定要最新的哦。在<a target="_blank" href="http://ajax.asp.net/ajaxtoolkit/">http://ajax.asp.net/ajaxtoolkit/</a>应该可以下载。AjaxControlToolkit.rar有两种，一种是带源码的，另一种是不带源码的，最好下带源码的。</p><p style="text-indent: 2em"><b>二，</b>安装ASPAJAXExtSetup.msi程序。如果系统提示以前已经安装了，请先卸载再安装。卸载的方法是在我的电脑&mdash;&gt;控制面板添加或删除程序里面，找到 Microsoft .NET 2.0 AJAX Extensions卸载。</p><p style="text-indent: 2em"><b>三，</b>将AjaxControlToolkit.rar解压缩到AjaxControlToolkit文件夹中，在里面找到AjaxControlExtender文件夹，安装里面的AjaxControlExtender.vsi。</p><p style="text-indent: 2em"><b>四，</b>双击AjaxControlToolkit文件夹里面的AjaxControlToolkit.sln，用vs2005打开。你会看到里面有2个项目和两个网站。</p><p style="text-indent: 2em">AjaxControlToolkit&nbsp;&nbsp;&nbsp; 一套.net ajax 示例网站的控件和源代码</p><p style="text-indent: 2em">TemplateVSI&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;模板VSI</p><p style="text-indent: 2em">SampleWebSite&nbsp;&nbsp;&nbsp;&nbsp; 一个示例网站，介绍了所有的ajax控件</p><p style="text-indent: 2em">ToolkitTests&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 一个为所有控件提供自动化测试的网站</p><p style="text-indent: 2em">依次编译这两个项目，看是否有错误。如果有错，很可能是你安装的ASPAJAXExtSetup.msi不是最新的。</p><p style="text-indent: 2em"><b>五,</b>看vs2005工具栏中是否有&nbsp; AjaxControlToolkit选项卡，如果没有请建立。然后选中此选项卡右击&mdash;&gt;选择项。在弹出的对话框中选择浏览，找到SampleWebSite网站里的bin目录下的AjaxControlToolkit.dll，点击确定。如果添加出错说找不到此dll文件。那说明你的AjaxControlToolkit.dll版本有问题，.net framework 2.0的应该使用1.0.11119.0.。而.net framework 3.5应该使用 3.5.11119.0。</p><p style="text-indent: 2em">这时，你是否看到选项卡中出现了N多个ajax控件那？先不要急着摆弄。刚才不是说有个示例网站吗？你运行此网站，会看到它对每一个控件都做了演示和简单的使用说明。高手直接可以去看它的源代码慢慢钻研去吧。</p><p style="text-indent: 2em">怎么使用这些控件那？你选择文件--&gt;新建--&gt;新建网站。在弹出的对话框中选择 ASP.NET AJAX Enabled WebSite，选好存储路径和语言后点击确定。这样就可以使用我们新添加的那些控件了。</p><p style="text-indent: 2em">我今天摆弄了4个小时，把每个控件都试了下，廖老师提的要求我心里也有了谱。我感觉这些控件太强大了，如果能灵活的使用在web程序中那用户体验将大大的提高。</p><p style="text-indent: 2em">如果大家在安装的过程中有别的问题，请发邮件给我，我会尽力解决。</p>
-----
KEYWORDS:
AjaxControlToolkit,
安装
-----
--------
TITLE: toolkit控件使用的一个实例
AUTHOR: flysky
STATUS: publish
ALLOW COMMENTS: 1
ALLOW PINGS: 1
CONVERT BREAKS: 1
PRIMARY CATEGORY: AJAX
DATE: 02/27/2008 22:47:30
-----
EXCERPT:
<p style="text-indent: 2em">开始用toolkit实现ajax功能了。面对这完全陌生的30多个控件咋个下手那？不要着急，慢慢来。</p>
-----
BODY:
<p style="text-indent: 2em">我今天用ajaxcontroltoolkit做了一个关于ajax的小例子，跟大家分享下。这个例子共使用了toolkit的5种控件：TextBoxWatermark,PasswordStrength,Calendar,FilteredTextBox,AutoComplete。</p><p style="text-indent: 2em"><b>TextBoxWatermark</b>,顾名思义，就是文本框水印，比如以前有个qq版本你在登陆的时候，号码文本框中有 &ldquo;请输入qq号码&rdquo;,你点击了文本框后这字符就不见了。</p><p style="text-indent: 2em"><b>PasswordStrength</b>，显示当前密码强度。随着你输入密码的长度，字符不同，它会提示你当前密码的安全性级别。</p><p style="text-indent: 2em"><b>Calendar</b>,日期控件。当你单击一个文本框时，会弹出一个日历一样的div层，你可以随意选择你想填入的日期。</p><p style="text-indent: 2em"><b>FilteredTextBox</b>,,文本框过滤，使用这个控件你只能在文本框中输入指定的数字，字符或特殊符号。</p><p style="text-indent: 2em"><b>AutoComplete</b>，自动完成，实现的效果和google搜索非常类似。</p><p style="text-indent: 2em">这些控件的使用方法非常简单，如果你以前会使用.net里面的验证控件的，你将发现使用它们是多么的相似。</p><p style="text-indent: 2em">例如使用TextBoxWatermark，你只需要在页面中添加一个TextBoxWatermark控件,，并在TargetControlID属性里写上要绑定的文本框的ID,WatermarkText里写上你要显示的水印文本，WatermarkCssClass属性里写上文本框中显示的水印的样式名。注意使用这些控件的时候，有些被绑定的文本框的autocomplete属性要为off.</p><p style="text-indent: 2em">以下是default.aspx页面的源代码（此代码要在 ASP.NET AJAX Enabled WebSite站点中运行）</p><p>&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;true&quot; CodeFile=&quot;Default.aspx.cs&quot; Inherits=&quot;_Default&quot; %&gt;</p><p style="text-indent: 2em">&lt;%@ Register Assembly=&quot;AjaxControlToolkit&quot; Namespace=&quot;AjaxControlToolkit&quot; TagPrefix=&quot;ajaxToolkit&quot; %&gt;</p><p style="text-indent: 2em">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.1//EN&quot; &quot;<a href="http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd</a>&quot;&gt;<br />&lt;html xmlns=&quot;<a href="http://www.w3.org/1999/xhtml">http://www.w3.org/1999/xhtml</a>&quot;&gt;<br />&lt;head runat=&quot;server&quot;&gt;<br />&nbsp;&nbsp;&nbsp; &lt;title&gt;个人信息输入&lt;/title&gt;<br />&nbsp;&nbsp;&nbsp; &lt;style&gt;<br />&nbsp;&nbsp;&nbsp; .watermarked {<br />&nbsp;height:20px;<br />&nbsp;width:150px;<br />&nbsp;padding:2px 0 0 2px;<br />&nbsp;border:1px solid #BEBEBE;<br />&nbsp;background-color:#F0F8FF;<br />&nbsp;color:gray;<br />}&nbsp;<br />&nbsp;&nbsp;&nbsp; <br />&nbsp;&nbsp;&nbsp; &lt;/style&gt;<br />&lt;/head&gt;<br />&lt;body&gt;<br />&nbsp;&nbsp;&nbsp; &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;asp:ScriptManager ID=&quot;ScriptManager1&quot; runat=&quot;server&quot; /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;asp:UpdatePanel ID=&quot;updatepanel1&quot; runat=&quot;server&quot;&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ContentTemplate&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;div&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;div&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 请在下面的表中输入你的信息:<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/div&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;div&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;table&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;tr&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;td style=&quot;width: 100px&quot;&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 姓名&lt;/td&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;td style=&quot;width: 100px&quot;&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;asp:TextBox ID=&quot;txtname&quot; runat=&quot;server&quot;&nbsp; &gt;&lt;/asp:TextBox&gt;&lt;/td&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;td style=&quot;width: 100px&quot;&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/td&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/tr&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;tr&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;td style=&quot;width: 100px&quot;&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 密码&lt;/td&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;td style=&quot;width: 100px&quot;&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;asp:TextBox ID=&quot;txtpwd&quot; runat=&quot;server&quot; MaxLength=&quot;16&quot; autocomplete=&quot;off&quot; TextMode=&quot;Password&quot; Width=&quot;148px&quot;&gt;&lt;/asp:TextBox&gt;&lt;/td&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;td style=&quot;width: 100px&quot;&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/td&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/tr&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;tr&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;td style=&quot;width: 100px&quot;&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 出生年月&lt;/td&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;td style=&quot;width: 100px&quot;&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;asp:TextBox ID=&quot;txtbrith&quot; runat=&quot;server&quot; autocomplete=&quot;off&quot;&gt;&lt;/asp:TextBox&gt;&lt;/td&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;td style=&quot;width: 100px&quot;&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/td&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/tr&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;tr&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;td style=&quot;width: 100px&quot;&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 年龄&lt;/td&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;td style=&quot;width: 100px&quot;&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;asp:TextBox ID=&quot;txtage&quot; runat=&quot;server&quot; MaxLength=&quot;3&quot;&gt;&lt;/asp:TextBox&gt;&lt;/td&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;td style=&quot;width: 100px&quot;&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/td&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/tr&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;tr&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;td style=&quot;width: 100px&quot;&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 所在地区&lt;/td&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;td style=&quot;width: 100px&quot;&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;asp:TextBox ID=&quot;txtarea&quot; runat=&quot;server&quot; autocomplete=&quot;off&quot;&gt;&lt;/asp:TextBox&gt;&lt;/td&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;td style=&quot;width: 100px&quot;&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/td&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/tr&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;tr&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;td style=&quot;width: 100px&quot;&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/td&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;td style=&quot;width: 100px&quot;&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;asp:Button ID=&quot;Button1&quot; runat=&quot;server&quot; Text=&quot;提交&quot; OnClick=&quot;Button1_Click&quot; /&gt;&lt;/td&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;td style=&quot;width: 100px&quot;&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/td&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/tr&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;tr&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;td style=&quot;width: 100px&quot;&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/td&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;td style=&quot;width: 100px&quot;&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;asp:Label ID=&quot;Label1&quot; runat=&quot;server&quot;&gt;&lt;/asp:Label&gt;&lt;/td&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;td style=&quot;width: 100px&quot;&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/td&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/tr&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/table&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/div&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/div&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ajaxToolkit:CalendarExtender ID=&quot;CalendarExtender1&quot; runat=&quot;server&quot; TargetControlID=&quot;txtbrith&quot;&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/ajaxToolkit:CalendarExtender&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ajaxToolkit:PasswordStrength ID=&quot;PasswordStrength1&quot; runat=&quot;server&quot; TargetControlID=&quot;txtpwd&quot;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DisplayPosition=&quot;RightSide&quot;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; StrengthIndicatorType=&quot;Text&quot;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PreferredPasswordLength=&quot;10&quot; <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PrefixText=&quot;密码强度:&quot;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TextStrengthDescriptions=&quot;非常弱;弱;一般;强;良好&quot;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MinimumNumericCharacters=&quot;0&quot;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MinimumSymbolCharacters=&quot;0&quot;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RequiresUpperAndLowerCaseCharacters=&quot;false&quot; /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ajaxToolkit:FilteredTextBoxExtender ID=&quot;FilteredTextBoxExtender1&quot; runat=&quot;server&quot; TargetControlID=&quot;txtage&quot; FilterType=&quot;Numbers&quot;&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/ajaxToolkit:FilteredTextBoxExtender&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ajaxToolkit:AutoCompleteExtender ID=&quot;AutoCompleteExtender1&quot; runat=&quot;server&quot; ServiceMethod=&quot;GetCompletionList&quot;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MinimumPrefixLength=&quot;1&quot; <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FirstRowSelected=&quot;true&quot;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CompletionInterval=&quot;100&quot;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TargetControlID=&quot;txtarea&quot;&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/ajaxToolkit:AutoCompleteExtender&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ajaxToolkit:TextBoxWatermarkExtender ID=&quot;TextBoxWatermarkExtender1&quot; WatermarkText=&quot;请输入用户名&quot; runat=&quot;server&quot; TargetControlID=&quot;txtname&quot; WatermarkCssClass=&quot;watermarked&quot;&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/ajaxToolkit:TextBoxWatermarkExtender&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/ContentTemplate&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/asp:UpdatePanel&gt;<br />&nbsp;&nbsp;&nbsp; &lt;/form&gt;<br />&lt;/body&gt;<br />&lt;/html&gt;</p><p style="text-indent: 2em">下面是default.aspx.cs 中的全部代码。<br />using System;<br />using System.Data;<br />using System.Configuration;<br />using System.Web;<br />using System.Web.Security;<br />using System.Web.UI;<br />using System.Web.UI.WebControls;<br />using System.Web.UI.WebControls.WebParts;<br />using System.Web.UI.HtmlControls;<br />using System.Collections.Generic;</p><p style="text-indent: 2em">public partial class _Default : System.Web.UI.Page <br />{<br />&nbsp;&nbsp;&nbsp; protected void Page_Load(object sender, EventArgs e)<br />&nbsp;&nbsp;&nbsp; {</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp; }</p><p style="text-indent: 2em"><br />&nbsp;&nbsp; /// &lt;summary&gt;<br />&nbsp;&nbsp; /// 在输入框的文本后加三个随机字符&nbsp; by flysky 2008-2-28<br />&nbsp;&nbsp; /// &lt;/summary&gt;<br />&nbsp;&nbsp; /// &lt;param name=&quot;prefixText&quot;&gt;文本框中文本&lt;/param&gt;<br />&nbsp;&nbsp; /// &lt;param name=&quot;count&quot;&gt;条数&lt;/param&gt;<br />&nbsp;&nbsp; /// &lt;returns&gt;&lt;/returns&gt;<br />&nbsp;&nbsp;&nbsp; [System.Web.Services.WebMethodAttribute(), System.Web.Script.Services.ScriptMethodAttribute()]<br />&nbsp;&nbsp;&nbsp; public static string[] GetCompletionList(string prefixText, int count)<br />&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (count == 0)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; count = 10;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Random random = new Random();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; List&lt;string&gt; items = new List&lt;string&gt;(count);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 0; i &lt; count; i++)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; char c1 = (char)random.Next(65, 90);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; char c2 = (char)random.Next(97, 122);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; char c3 = (char)random.Next(97, 122);</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; items.Add(prefixText + c1 + c2 + c3);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return items.ToArray();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br />&nbsp;&nbsp;&nbsp; }</p><p style="text-indent: 2em">&nbsp;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;<br />&nbsp;&nbsp;&nbsp; /// 将所有文本框置空&nbsp; by flysky 2008-2-28<br />&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;<br />&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;sender&quot;&gt;&lt;/param&gt;<br />&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;e&quot;&gt;&lt;/param&gt;<br />&nbsp;&nbsp;&nbsp; protected void Button1_Click(object sender, EventArgs e)<br />&nbsp;&nbsp;&nbsp; {</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; txtname.Text = &quot;&quot;;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; txtage.Text = &quot;&quot;;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; txtarea.Text = &quot;&quot;;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; txtbrith.Text = &quot;&quot;;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; txtpwd.Text = &quot;&quot;;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Label1.Text = &quot;信息添加成功！&quot;;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp; }</p><p style="text-indent: 2em">}</p>
-----
KEYWORDS:
toolkiy,
实例
-----
--------
TITLE: WEB开发必备技术
AUTHOR: flysky
STATUS: publish
ALLOW COMMENTS: 1
ALLOW PINGS: 1
CONVERT BREAKS: 1
PRIMARY CATEGORY: WEB技术
DATE: 02/29/2008 22:44:54
-----
EXCERPT:
<p style="text-indent: 2em">新手初学web开发，应该从那些方面入手那？都要掌握那些知识那？我的一些想法建议希望能给大家有所引导。</p>
-----
BODY:
<p style="text-indent: 2em">经常有新手问我，做web开发都要学那些东西。我细细想来，要掌握的东西还真不少啊。趁有空总结了一下，列了个单子。</p><p style="text-indent: 2em"><b>一，</b>&nbsp;html语言。这个是最基本的。无论多么天花乱缀的代码，都要老老实实的转化为html语言呈现在客户端。你必须熟悉大部分常用的html标签。推荐新手直接学习xhtml.</p><p style="text-indent: 2em"><b>二，</b>&nbsp;css层叠样式表。有人认为这是美工应该掌握的方面，那是大错特错。试想一个编程人员如果连基本的布局都搞不定，开发过程将是多么的痛苦。</p><p style="text-indent: 2em"><b>三，</b>&nbsp;至少会一种主流数据库(如sql server,oracle&hellip;)的使用，能熟练驾驭sql语句。搞Web开发免不了数据库打交道。数据库使用，数据库设计，sql语句构建&hellip;哪个都够你喝一壶的了。</p><p style="text-indent: 2em"><b>四，</b>&nbsp;至少掌握一种客户端脚本语言，强烈推荐javascript.这几年大家对javascript的重视程度越来越高。它功能强大，直接在客户端执行，速度快等优点深受web开发人员的喜爱。</p><p style="text-indent: 2em"><b>五，</b>&nbsp;至少熟练运用一种动态服务器语言（如php,jsp,asp/asp.net等）。现在主要分为jsp和asp.net两大阵营，asp,php逐渐没落。</p><p style="text-indent: 2em">当然具备上面几点还只是最基本的。如果想把web站点布置的漂漂亮亮，有良好的浏览器兼容性，你必须对div+css特别精通。如果想让你的页面能排在搜索结果的前面，你必须懂得搜索引擎优化（SEO）。如果你想让你的web应用程序具有更好的用户体验，那么你必须得钻研AJAX......</p><p style="text-indent: 2em">总之，web开发没有你想像的那么简单，更不仅仅就是做网站。不过新手不要被上面列的那些给唬住了。我从事web开发有将近三年的时间，得出的最有用的学习方法就是&ldquo;沉下心来，认真的做好每一步&rdquo;。你不可能一夜之间成为编程高手，你需要的是经验而不是空谈。</p><p style="text-indent: 2em">如今随着web2.0概念的深入人心，web应用程序也越来越被大家看重。借用少林足球里的一句台词就是&ldquo;有搞头!&rdquo;</p>
-----
KEYWORDS:
Web开发,
必备
-----
--------
TITLE: char,varchar,nvarchar字段的区别
AUTHOR: flysky
STATUS: publish
ALLOW COMMENTS: 1
ALLOW PINGS: 1
CONVERT BREAKS: 1
PRIMARY CATEGORY: WEB技术
DATE: 03/02/2008 23:33:15
-----
EXCERPT:
<p style="text-indent: 2em">本文讲解了sql server数据库中char,varchar,nvarchar三个字段属性的区别，并且应该如何使用它们。</p>
-----
BODY:
<p style="text-indent: 2em">Char,varchar,nvarchar字段是sql server数据库中的三种字段类型。好多人在选择存储的时候不知道如何抉择，我给大家讲下这个三个字段类型的区别。</p><p style="text-indent: 2em">Char(n)是长度为n个字节的定长的非unicode的字符数据。N为一个介于1到8000之间的值。其存储大小为输入数据的实际字节长度，而不是n个字节。如果你输入的实际字节长度少于n,那么其他位置会被空格填充。在数据存储中英文字母和数字占一个字节，汉字占两个字节。那么char(n)最多可以存储n个英文字母或数字，或者n/2个汉字。</p><p style="text-indent: 2em">Varchar(n)是长度为n 个字节的可变长度且非 Unicode 的字符数据。n 必须是一个介于1 和8,000 之间的数值。存储大小为输入数据的字节的实际长度，而不是 n 个字节。注意它和char(n)的区别是char(n)是定长的，varchar(n)是变长的。如果你输入的字符的实际字节长度少于n,那么它的长度就是你实际输入的字节长度。在数据存储中英文字母和数字占一个字节，汉字占两个字节。Varchar(n)最多可以存储n个英文字母或数字，或者n/2个汉字。</p><p style="text-indent: 2em">Nvarchar(n) 包含 n 个字符的可变长度 Unicode 字符数据。n 的值必须介于 1 与 4,000 之间。字节的存储大小是所输入字符个数的两倍. 在数据存储中英文字母,数字,汉字都是占两个字节。Char(n)最多可以存储n个英文字母或数字，或者n个汉字。</p><p style="text-indent: 2em">在数据检索中，一般来说char型字段的数据是最快的，varchar,nvarchar型字段其次。</p><p style="text-indent: 2em">在所存数据长度不一的情况下，varcahr型字段所占空间最少，char,nvarchar其次。</p><p style="text-indent: 2em">那么到底在什么样的情况下使用什么样的数据类型那？</p><p style="text-indent: 2em">如果你所存数据长度基本一致，建议使用char型。这样检索速度快，但是提取的时候要注意用trim()函数剔除所存数据两边的空格。</p><p style="text-indent: 2em">如果你所存数据长度差异较大，可以使用varchar或者nvarchar。如果你想较好的支持多语言的话，最好使用nvarchar。使用nvarchar可以减少字符转换问题，防止某些情况下乱码的出现。</p><p style="text-indent: 2em">说了这么多，大家可能都晕了。列个表供大家参考。</p><p style="text-indent: 2em"><table>    <tbody>        <tr style="mso-yfti-irow: 0; mso-yfti-firstrow: yes">            <td style="border-right: windowtext 1pt solid; padding-right: 5.4pt; border-top: windowtext 1pt solid; padding-left: 5.4pt; padding-bottom: 0cm; border-left: windowtext 1pt solid; width: 106.5pt; padding-top: 0cm; border-bottom: windowtext 1pt solid; background-color: transparent; mso-border-alt: solid windowtext .5pt" valign="top" width="142">            <p class="MsoNormal" style="margin: 0cm 0cm 0pt"><span lang="EN-US"><o:p><font face="Times New Roman" size="3">&nbsp;</font></o:p></span></p>            </td>            <td style="border-right: windowtext 1pt solid; padding-right: 5.4pt; border-top: windowtext 1pt solid; padding-left: 5.4pt; padding-bottom: 0cm; border-left: #f4f4f4; width: 106.5pt; padding-top: 0cm; border-bottom: windowtext 1pt solid; background-color: transparent; mso-border-alt: solid windowtext .5pt; mso-border-left-alt: solid windowtext .5pt" valign="top" width="142">            <p class="MsoNormal" style="margin: 0cm 0cm 0pt"><span lang="EN-US"><font size="3"><font face="Times New Roman">Char(n)<o:p></o:p></font></font></span></p>            </td>            <td style="border-right: windowtext 1pt solid; padding-right: 5.4pt; border-top: windowtext 1pt solid; padding-left: 5.4pt; padding-bottom: 0cm; border-left: #f4f4f4; width: 106.55pt; padding-top: 0cm; border-bottom: windowtext 1pt solid; background-color: transparent; mso-border-alt: solid windowtext .5pt; mso-border-left-alt: solid windowtext .5pt" valign="top" width="142">            <p class="MsoNormal" style="margin: 0cm 0cm 0pt"><span lang="EN-US"><font size="3"><font face="Times New Roman">Varchar(n)<o:p></o:p></font></font></span></p>            </td>            <td style="border-right: windowtext 1pt solid; padding-right: 5.4pt; border-top: windowtext 1pt solid; padding-left: 5.4pt; padding-bottom: 0cm; border-left: #f4f4f4; width: 106.55pt; padding-top: 0cm; border-bottom: windowtext 1pt solid; background-color: transparent; mso-border-alt: solid windowtext .5pt; mso-border-left-alt: solid windowtext .5pt" valign="top" width="142">            <p class="MsoNormal" style="margin: 0cm 0cm 0pt"><span lang="EN-US"><font size="3"><font face="Times New Roman">Nvarchar(n)<o:p></o:p></font></font></span></p>            </td>        </tr>        <tr style="mso-yfti-irow: 1">            <td style="border-right: windowtext 1pt solid; padding-right: 5.4pt; border-top: #f4f4f4; padding-left: 5.4pt; padding-bottom: 0cm; border-left: windowtext 1pt solid; width: 106.5pt; padding-top: 0cm; border-bottom: windowtext 1pt solid; background-color: transparent; mso-border-alt: solid windowtext .5pt; mso-border-top-alt: solid windowtext .5pt" valign="top" width="142">            <p class="MsoNormal" style="margin: 0cm 0cm 0pt"><font size="3"><span lang="EN-US"><font face="Times New Roman">N </font></span><span style="font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman'">最大值</span><span lang="EN-US"><o:p></o:p></span></font></p>            </td>            <td style="border-right: windowtext 1pt solid; padding-right: 5.4pt; border-top: #f4f4f4; padding-left: 5.4pt; padding-bottom: 0cm; border-left: #f4f4f4; width: 106.5pt; padding-top: 0cm; border-bottom: windowtext 1pt solid; background-color: transparent; mso-border-alt: solid windowtext .5pt; mso-border-left-alt: solid windowtext .5pt; mso-border-top-alt: solid windowtext .5pt" valign="top" width="142">            <p class="MsoNormal" style="margin: 0cm 0cm 0pt"><span lang="EN-US"><font face="Times New Roman"><font size="3">8000<o:p></o:p></font></font></span></p>            </td>            <td style="border-right: windowtext 1pt solid; padding-right: 5.4pt; border-top: #f4f4f4; padding-left: 5.4pt; padding-bottom: 0cm; border-left: #f4f4f4; width: 106.55pt; padding-top: 0cm; border-bottom: windowtext 1pt solid; background-color: transparent; mso-border-alt: solid windowtext .5pt; mso-border-left-alt: solid windowtext .5pt; mso-border-top-alt: solid windowtext .5pt" valign="top" width="142">            <p class="MsoNormal" style="margin: 0cm 0cm 0pt"><span lang="EN-US"><font face="Times New Roman"><font size="3">8000<o:p></o:p></font></font></span></p>            </td>            <td style="border-right: windowtext 1pt solid; padding-right: 5.4pt; border-top: #f4f4f4; padding-left: 5.4pt; padding-bottom: 0cm; border-left: #f4f4f4; width: 106.55pt; padding-top: 0cm; border-bottom: windowtext 1pt solid; background-color: transparent; mso-border-alt: solid windowtext .5pt; mso-border-left-alt: solid windowtext .5pt; mso-border-top-alt: solid windowtext .5pt" valign="top" width="142">            <p class="MsoNormal" style="margin: 0cm 0cm 0pt"><span lang="EN-US"><font face="Times New Roman"><font size="3">4000<o:p></o:p></font></font></span></p>            </td>        </tr>        <tr style="mso-yfti-irow: 2">            <td style="border-right: windowtext 1pt solid; padding-right: 5.4pt; border-top: #f4f4f4; padding-left: 5.4pt; padding-bottom: 0cm; border-left: windowtext 1pt solid; width: 106.5pt; padding-top: 0cm; border-bottom: windowtext 1pt solid; background-color: transparent; mso-border-alt: solid windowtext .5pt; mso-border-top-alt: solid windowtext .5pt" valign="top" width="142">            <p class="MsoNormal" style="margin: 0cm 0cm 0pt"><font size="3"><span style="font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman'">数据长度</span><span lang="EN-US"><o:p></o:p></span></font></p>            </td>            <td style="border-right: windowtext 1pt solid; padding-right: 5.4pt; border-top: #f4f4f4; padding-left: 5.4pt; padding-bottom: 0cm; border-left: #f4f4f4; width: 106.5pt; padding-top: 0cm; border-bottom: windowtext 1pt solid; background-color: transparent; mso-border-alt: solid windowtext .5pt; mso-border-left-alt: solid windowtext .5pt; mso-border-top-alt: solid windowtext .5pt" valign="top" width="142">            <p class="MsoNormal" style="margin: 0cm 0cm 0pt"><font size="3"><span style="font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman'">固定（不足用空格填充）</span><span lang="EN-US"><o:p></o:p></span></font></p>            </td>            <td style="border-right: windowtext 1pt solid; padding-right: 5.4pt; border-top: #f4f4f4; padding-left: 5.4pt; padding-bottom: 0cm; border-left: #f4f4f4; width: 106.55pt; padding-top: 0cm; border-bottom: windowtext 1pt solid; background-color: transparent; mso-border-alt: solid windowtext .5pt; mso-border-left-alt: solid windowtext .5pt; mso-border-top-alt: solid windowtext .5pt" valign="top" width="142">            <p class="MsoNormal" style="margin: 0cm 0cm 0pt"><font size="3"><span style="font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman'">可变（实际数据长度）</span><span lang="EN-US"><o:p></o:p></span></font></p>            </td>            <td style="border-right: windowtext 1pt solid; padding-right: 5.4pt; border-top: #f4f4f4; padding-left: 5.4pt; padding-bottom: 0cm; border-left: #f4f4f4; width: 106.55pt; padding-top: 0cm; border-bottom: windowtext 1pt solid; background-color: transparent; mso-border-alt: solid windowtext .5pt; mso-border-left-alt: solid windowtext .5pt; mso-border-top-alt: solid windowtext .5pt" valign="top" width="142">            <p class="MsoNormal" style="margin: 0cm 0cm 0pt"><font size="3"><span style="font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman'">可变（实际数据长度）</span><span lang="EN-US"><o:p></o:p></span></font></p>            </td>        </tr>        <tr style="mso-yfti-irow: 3">            <td style="border-right: windowtext 1pt solid; padding-right: 5.4pt; border-top: #f4f4f4; padding-left: 5.4pt; padding-bottom: 0cm; border-left: windowtext 1pt solid; width: 106.5pt; padding-top: 0cm; border-bottom: windowtext 1pt solid; background-color: transparent; mso-border-alt: solid windowtext .5pt; mso-border-top-alt: solid windowtext .5pt" valign="top" width="142">            <p class="MsoNormal" style="margin: 0cm 0cm 0pt"><font size="3"><span style="font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman'">可存储最多英文（数字）</span><span lang="EN-US"><o:p></o:p></span></font></p>            </td>            <td style="border-right: windowtext 1pt solid; padding-right: 5.4pt; border-top: #f4f4f4; padding-left: 5.4pt; padding-bottom: 0cm; border-left: #f4f4f4; width: 106.5pt; padding-top: 0cm; border-bottom: windowtext 1pt solid; background-color: transparent; mso-border-alt: solid windowtext .5pt; mso-border-left-alt: solid windowtext .5pt; mso-border-top-alt: solid windowtext .5pt" valign="top" width="142">            <p class="MsoNormal" style="margin: 0cm 0cm 0pt"><span lang="EN-US"><font size="3"><font face="Times New Roman">8000<o:p></o:p></font></font></span></p>            </td>            <td style="border-right: windowtext 1pt solid; padding-right: 5.4pt; border-top: #f4f4f4; padding-left: 5.4pt; padding-bottom: 0cm; border-left: #f4f4f4; width: 106.55pt; padding-top: 0cm; border-bottom: windowtext 1pt solid; background-color: transparent; mso-border-alt: solid windowtext .5pt; mso-border-left-alt: solid windowtext .5pt; mso-border-top-alt: solid windowtext .5pt" valign="top" width="142">            <p class="MsoNormal" style="margin: 0cm 0cm 0pt"><span lang="EN-US"><font size="3"><font face="Times New Roman">8000<o:p></o:p></font></font></span></p>            </td>            <td style="border-right: windowtext 1pt solid; padding-right: 5.4pt; border-top: #f4f4f4; padding-left: 5.4pt; padding-bottom: 0cm; border-left: #f4f4f4; width: 106.55pt; padding-top: 0cm; border-bottom: windowtext 1pt solid; background-color: transparent; mso-border-alt: solid windowtext .5pt; mso-border-left-alt: solid windowtext .5pt; mso-border-top-alt: solid windowtext .5pt" valign="top" width="142">            <p class="MsoNormal" style="margin: 0cm 0cm 0pt"><span lang="EN-US"><font size="3"><font face="Times New Roman">4000<o:p></o:p></font></font></span></p>            </td>        </tr>        <tr style="mso-yfti-irow: 4">            <td style="border-right: windowtext 1pt solid; padding-right: 5.4pt; border-top: #f4f4f4; padding-left: 5.4pt; padding-bottom: 0cm; border-left: windowtext 1pt solid; width: 106.5pt; padding-top: 0cm; border-bottom: windowtext 1pt solid; background-color: transparent; mso-border-alt: solid windowtext .5pt; mso-border-top-alt: solid windowtext .5pt" valign="top" width="142">            <p class="MsoNormal" style="margin: 0cm 0cm 0pt"><font size="3"><span style="font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman'">最多汉字数</span><span lang="EN-US"><o:p></o:p></span></font></p>            </td>            <td style="border-right: windowtext 1pt solid; padding-right: 5.4pt; border-top: #f4f4f4; padding-left: 5.4pt; padding-bottom: 0cm; border-left: #f4f4f4; width: 106.5pt; padding-top: 0cm; border-bottom: windowtext 1pt solid; background-color: transparent; mso-border-alt: solid windowtext .5pt; mso-border-left-alt: solid windowtext .5pt; mso-border-top-alt: solid windowtext .5pt" valign="top" width="142">            <p class="MsoNormal" style="margin: 0cm 0cm 0pt"><span lang="EN-US"><font size="3"><font face="Times New Roman">4000<o:p></o:p></font></font></span></p>            </td>            <td style="border-right: windowtext 1pt solid; padding-right: 5.4pt; border-top: #f4f4f4; padding-left: 5.4pt; padding-bottom: 0cm; border-left: #f4f4f4; width: 106.55pt; padding-top: 0cm; border-bottom: windowtext 1pt solid; background-color: transparent; mso-border-alt: solid windowtext .5pt; mso-border-left-alt: solid windowtext .5pt; mso-border-top-alt: solid windowtext .5pt" valign="top" width="142">            <p class="MsoNormal" style="margin: 0cm 0cm 0pt"><span lang="EN-US"><font size="3"><font face="Times New Roman">4000<o:p></o:p></font></font></span></p>            </td>            <td style="border-right: windowtext 1pt solid; padding-right: 5.4pt; border-top: #f4f4f4; padding-left: 5.4pt; padding-bottom: 0cm; border-left: #f4f4f4; width: 106.55pt; padding-top: 0cm; border-bottom: windowtext 1pt solid; background-color: transparent; mso-border-alt: solid windowtext .5pt; mso-border-left-alt: solid windowtext .5pt; mso-border-top-alt: solid windowtext .5pt" valign="top" width="142">            <p class="MsoNormal" style="margin: 0cm 0cm 0pt"><span lang="EN-US"><font size="3"><font face="Times New Roman">4000<o:p></o:p></font></font></span></p>            </td>        </tr>        <tr style="mso-yfti-irow: 5">            <td style="border-right: windowtext 1pt solid; padding-right: 5.4pt; border-top: #f4f4f4; padding-left: 5.4pt; padding-bottom: 0cm; border-left: windowtext 1pt solid; width: 106.5pt; padding-top: 0cm; border-bottom: windowtext 1pt solid; background-color: transparent; mso-border-alt: solid windowtext .5pt; mso-border-top-alt: solid windowtext .5pt" valign="top" width="142">            <p class="MsoNormal" style="margin: 0cm 0cm 0pt"><font size="3"><span style="font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman'">英文（数字）所占字节</span><span lang="EN-US"><o:p></o:p></span></font></p>            </td>            <td style="border-right: windowtext 1pt solid; padding-right: 5.4pt; border-top: #f4f4f4; padding-left: 5.4pt; padding-bottom: 0cm; border-left: #f4f4f4; width: 106.5pt; padding-top: 0cm; border-bottom: windowtext 1pt solid; background-color: transparent; mso-border-alt: solid windowtext .5pt; mso-border-left-alt: solid windowtext .5pt; mso-border-top-alt: solid windowtext .5pt" valign="top" width="142">            <p class="MsoNormal" style="margin: 0cm 0cm 0pt"><span lang="EN-US"><font size="3"><font face="Times New Roman">1<o:p></o:p></font></font></span></p>            </td>            <td style="border-right: windowtext 1pt solid; padding-right: 5.4pt; border-top: #f4f4f4; padding-left: 5.4pt; padding-bottom: 0cm; border-left: #f4f4f4; width: 106.55pt; padding-top: 0cm; border-bottom: windowtext 1pt solid; background-color: transparent; mso-border-alt: solid windowtext .5pt; mso-border-left-alt: solid windowtext .5pt; mso-border-top-alt: solid windowtext .5pt" valign="top" width="142">            <p class="MsoNormal" style="margin: 0cm 0cm 0pt"><span lang="EN-US"><font size="3"><font face="Times New Roman">1<o:p></o:p></font></font></span></p>            </td>            <td style="border-right: windowtext 1pt solid; padding-right: 5.4pt; border-top: #f4f4f4; padding-left: 5.4pt; padding-bottom: 0cm; border-left: #f4f4f4; width: 106.55pt; padding-top: 0cm; border-bottom: windowtext 1pt solid; background-color: transparent; mso-border-alt: solid windowtext .5pt; mso-border-left-alt: solid windowtext .5pt; mso-border-top-alt: solid windowtext .5pt" valign="top" width="142">            <p class="MsoNormal" style="margin: 0cm 0cm 0pt"><span lang="EN-US"><font size="3"><font face="Times New Roman">2<o:p></o:p></font></font></span></p>            </td>        </tr>        <tr style="mso-yfti-irow: 6">            <td style="border-right: windowtext 1pt solid; padding-right: 5.4pt; border-top: #f4f4f4; padding-left: 5.4pt; padding-bottom: 0cm; border-left: windowtext 1pt solid; width: 106.5pt; padding-top: 0cm; border-bottom: windowtext 1pt solid; background-color: transparent; mso-border-alt: solid windowtext .5pt; mso-border-top-alt: solid windowtext .5pt" valign="top" width="142">            <p class="MsoNormal" style="margin: 0cm 0cm 0pt"><font size="3"><span style="font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman'">汉字所占字节</span><span lang="EN-US"><o:p></o:p></span></font></p>            </td>            <td style="border-right: windowtext 1pt solid; padding-right: 5.4pt; border-top: #f4f4f4; padding-left: 5.4pt; padding-bottom: 0cm; border-left: #f4f4f4; width: 106.5pt; padding-top: 0cm; border-bottom: windowtext 1pt solid; background-color: transparent; mso-border-alt: solid windowtext .5pt; mso-border-left-alt: solid windowtext .5pt; mso-border-top-alt: solid windowtext .5pt" valign="top" width="142">            <p class="MsoNormal" style="margin: 0cm 0cm 0pt"><span lang="EN-US"><font size="3"><font face="Times New Roman">2<o:p></o:p></font></font></span></p>            </td>            <td style="border-right: windowtext 1pt solid; padding-right: 5.4pt; border-top: #f4f4f4; padding-left: 5.4pt; padding-bottom: 0cm; border-left: #f4f4f4; width: 106.55pt; padding-top: 0cm; border-bottom: windowtext 1pt solid; background-color: transparent; mso-border-alt: solid windowtext .5pt; mso-border-left-alt: solid windowtext .5pt; mso-border-top-alt: solid windowtext .5pt" valign="top" width="142">            <p class="MsoNormal" style="margin: 0cm 0cm 0pt"><span lang="EN-US"><font size="3"><font face="Times New Roman">2<o:p></o:p></font></font></span></p>            </td>            <td style="border-right: windowtext 1pt solid; padding-right: 5.4pt; border-top: #f4f4f4; padding-left: 5.4pt; padding-bottom: 0cm; border-left: #f4f4f4; width: 106.55pt; padding-top: 0cm; border-bottom: windowtext 1pt solid; background-color: transparent; mso-border-alt: solid windowtext .5pt; mso-border-left-alt: solid windowtext .5pt; mso-border-top-alt: solid windowtext .5pt" valign="top" width="142">            <p class="MsoNormal" style="margin: 0cm 0cm 0pt"><span lang="EN-US"><font size="3"><font face="Times New Roman">2<o:p></o:p></font></font></span></p>            </td>        </tr>        <tr style="mso-yfti-irow: 7; mso-yfti-lastrow: yes">            <td style="border-right: windowtext 1pt solid; padding-right: 5.4pt; border-top: #f4f4f4; padding-left: 5.4pt; padding-bottom: 0cm; border-left: windowtext 1pt solid; width: 106.5pt; padding-top: 0cm; border-bottom: windowtext 1pt solid; background-color: transparent; mso-border-alt: solid windowtext .5pt; mso-border-top-alt: solid windowtext .5pt" valign="top" width="142">            <p class="MsoNormal" style="margin: 0cm 0cm 0pt"><font size="3"><span style="font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman'">检索速度</span><span lang="EN-US"><o:p></o:p></span></font></p>            </td>            <td style="border-right: windowtext 1pt solid; padding-right: 5.4pt; border-top: #f4f4f4; padding-left: 5.4pt; padding-bottom: 0cm; border-left: #f4f4f4; width: 106.5pt; padding-top: 0cm; border-bottom: windowtext 1pt solid; background-color: transparent; mso-border-alt: solid windowtext .5pt; mso-border-left-alt: solid windowtext .5pt; mso-border-top-alt: solid windowtext .5pt" valign="top" width="142">            <p class="MsoNormal" style="margin: 0cm 0cm 0pt"><font size="3"><span style="font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman'">快</span><font face="Times New Roman"> <span lang="EN-US"><o:p></o:p></span></font></font></p>            </td>            <td style="border-right: windowtext 1pt solid; padding-right: 5.4pt; border-top: #f4f4f4; padding-left: 5.4pt; padding-bottom: 0cm; border-left: #f4f4f4; width: 106.55pt; padding-top: 0cm; border-bottom: windowtext 1pt solid; background-color: transparent; mso-border-alt: solid windowtext .5pt; mso-border-left-alt: solid windowtext .5pt; mso-border-top-alt: solid windowtext .5pt" valign="top" width="142">            <p class="MsoNormal" style="margin: 0cm 0cm 0pt"><font size="3"><span style="font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman'">慢</span><span lang="EN-US"><o:p></o:p></span></font></p>            </td>            <td style="border-right: windowtext 1pt solid; padding-right: 5.4pt; border-top: #f4f4f4; padding-left: 5.4pt; padding-bottom: 0cm; border-left: #f4f4f4; width: 106.55pt; padding-top: 0cm; border-bottom: windowtext 1pt solid; background-color: transparent; mso-border-alt: solid windowtext .5pt; mso-border-left-alt: solid windowtext .5pt; mso-border-top-alt: solid windowtext .5pt" valign="top" width="142">            <p class="MsoNormal" style="margin: 0cm 0cm 0pt"><span style="font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman'"><font size="3">慢</font></span><span lang="EN-US"><o:p></o:p></span></p>            </td>        </tr>    </tbody></table></p><p style="text-indent: 2em">在去年的一个网站项目中，我使用了sql server数据库，数据库排序规则为Chinese_PRC_CI_AS.其中部分字段使用varchar型。</p><p style="text-indent: 2em">我在本机浏览数据库中数据正常，页面数据显示正常。但是当我将数据库导入到服务器以后，在客户端发现页面从数据库中读取的数据显示全是乱码。我通过查询分析器连接到服务器，发现数据库中的汉字也全变成了乱码。</p><p style="text-indent: 2em">我估计服务器端sql server为英文版，于是将服务器数据库中varchar型字段都改为nvarchar型，乱码问题解决。但是同时我又发现一个奇怪的现象。比如数据库中有两个记录。</p><p style="text-indent: 2em">表名： ComputerInfo</p><p style="text-indent: 2em">Computer&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; computerType&nbsp;&nbsp;&nbsp;</p><p style="text-indent: 2em">成都家具厂&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 私营</p><p style="text-indent: 2em">合肥家具厂&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; 私营</p><p style="text-indent: 2em">其中Computer字段为nvarchar型。我用&nbsp; select * from ComputerInfo where Computer like &lsquo;%成都%&rsquo;&nbsp;&nbsp; 返回的记录数总是0.奇怪了，明明数据库中有数据的嘛。我查阅了大量的资料以后，终于解决了问题。只需要把查询语句改为select * from ComputerInfo where Computer like N&lsquo;%成都%&rsquo; 即可。在字符前加N表示将其转化为unicode字符。真让我有点哭笑不得。</p>
-----
KEYWORDS:
char,
varchar,
nvarchar,
区别
-----
--------
TITLE: 一个程序员在项目开发中的心理曲线
AUTHOR: flysky
STATUS: publish
ALLOW COMMENTS: 1
ALLOW PINGS: 1
CONVERT BREAKS: 1
PRIMARY CATEGORY: 个人日记
DATE: 03/08/2008 14:31:13
-----
EXCERPT:
<p style="text-indent: 2em">根据个人经历编写，了解我们程序人自己的喜怒哀乐，为展现我们程序员的另一面。我们不光会编代码，也有自己的感情。</p>
-----
BODY:
<p style="text-indent: 2em">这是一个有意思的话题。我根据我的为数不多的项目经历，总结了一番。若有偏差，若有例外，敬请保函。</p><p style="text-indent: 2em">首先，是接项目时候的兴奋。和对方不动声色的谈判，讨价还价，讲我们的技术是多么成熟，讲我们的维护是多么的尽责，经过千辛万苦，终于签订了合同。拿到了首付款，心里那个高兴啊。</p><p style="text-indent: 2em">其次，是刚开始做项目的激情。合同签了，首付款到手了，先别想着怎么花，还是赶紧想想项目怎么做。&ldquo;恩，我看这个项目先划分这几个模块。需求分析我看5天就行，数据库设计给个3天，这个模块2天足够了&hellip;..&rdquo;这个时候还停留在兴奋期，把一切都想的好简单，好像整个项目的完成已经是举手之劳。</p><p style="text-indent: 2em">接下来，是真正动手做时的郁闷。&ldquo;需求有点混乱，我要重新理理&hellip;.&rdquo;&ldquo;数据库这块这么棘手，我得好好考虑&hellip;.&rdquo;开始动手设计了，才发现有这么多的问题要解决，而且根本不是想象中的轻松。慢慢的，那点激情被磨平了。</p><p style="text-indent: 2em">然后是解决了难题后的畅快。&ldquo;仔细想想，需求不就那点嘛，我这般这般不就行了？&rdquo;&ldquo;数据库我多建张表，将其信息分开存储，不就一劳永逸了？&rdquo;&hellip; 难题一个一个的解决，项目就这样在跌跌撞撞中前进。</p><p style="text-indent: 2em">项目做到了中期，这个时候往往会有一个拐点。这时心情到了低谷，和同事合作不顺，合同方对进展不满意，碰到了棘手的技术难题&hellip;各种烦心事都聚到了一起，甚至对这个项目是否能最终完成都产生了怀疑。</p><p style="text-indent: 2em">这段时间是最关键的。你挺过去了，一切都会向好的方向发展，你挺不过去，项目可能就会中途夭折。我这个时候一般会把烦心事一件件写下来，分析原因，并一一解决。&ldquo;美工老是不能完成任务，可能是我给的任务太重了。合同方嫌进展慢，就耐心解释我们是先做后台，前台效果过几天保准完成。面对技术难题，看能不能换种思路，曲线救国&rdquo;&hellip; 一边想象着项目交工的那天，心里又会燃起希望。</p><p style="text-indent: 2em">有的时候感觉项目就像自己的儿子，照顾它一点点长大，有的时候又烦的要命，养个儿子真不省事。重复着这种复杂的情绪，项目也在一点一点的推进。</p><p style="text-indent: 2em">不知不觉，项目已经接近尾声，等合同方来验收了。心情也变的越来越好，心想以前通宵没有白费，苦没有白吃。</p><p style="text-indent: 2em">可惜高兴的太早了。合同方说这不行，布局太不合理，那边表格怎么都没对齐，这里应该加个&rdquo;返回&rdquo;按钮&hellip;.</p><p style="text-indent: 2em">好不容易改好了，又得送去给人家挑毛病。这样折腾好几次，心里都不知道是啥感觉了。</p><p style="text-indent: 2em">终于要交工了。才发现自己此时心情并不像以前幻想的那样高兴。拿着工钱先要感慨一番，做啥都不容易啊。现在最要紧的是赶紧慰劳慰劳自己。&ldquo;同志们，哥我今天晚上请客，愿意去的赶紧了&rdquo;&hellip;.</p><p style="text-indent: 2em">别以为事情到这里就算完了。说不定当你和同事们喝的东倒西歪，互相搀扶着回来的时候，电话响了。那边合同方焦急的声音传来&ldquo;在干什么那？程序在我们这里怎么出现了问题，你赶紧过来给调试下&rdquo;。</p><p style="text-indent: 2em">看看表，已经晚上11点了。My God!看来今晚的安稳觉是别想睡咯。</p>
-----
KEYWORDS:
心理曲线,
感悟
-----
--------
TITLE: SEO优化之发表文章提高流量
AUTHOR: flysky
STATUS: publish
ALLOW COMMENTS: 1
ALLOW PINGS: 1
CONVERT BREAKS: 1
PRIMARY CATEGORY: SEO相关
DATE: 03/08/2008 23:49:51
-----
EXCERPT:
<p style="text-indent: 2em">辛辛苦苦把网站建起来了，站长们接下来的任务就是更新网站，维护网站，希望网站流量节节攀升.如果不懂SEO优化而到处转载文章,只图数量而不求质量，那是不行滴！</p>
-----
BODY:
<p style="text-indent: 2em"><b>发表文章</b>，更新网站内容用以维持提高站点流量，是每个站长必做的功课。怎么发布文章才能给我们的站点带来滚滚的<b>流量</b>那？这就属于<b>SEO优化</b>的范畴了。</p><p style="text-indent: 2em">我简单的讲下站长们在发布文章时要注意的几个地方。</p><p style="text-indent: 2em"><b>1，</b>文章最好为原创。有的时候一篇原创文章比转载10篇优秀文章都强。原创文章刚发布的时候只有你的网站上有，而转载的文章网上副本多的是，流量很难拉动。当前前提是原创文章要优秀。</p><p style="text-indent: 2em"><b>2，</b>文章显示的页面应该处理为静态html或htm页面。这点大家都清楚吧。通常搜索引擎更青睐那些静态页面。</p><p style="text-indent: 2em"><b>3，</b>标题一定要包含关键字。所谓关键字就是用户在搜索框输入的文字，是用户感兴趣的东西。一个好的标题在某种意义上比文章内容更重要。其实取文章标题也是有一定诀窍的。比如这篇文章我本来想取名为&rdquo;SEO扫盲之发表文章&rdquo;。我在baidu键入关键词SEO后发现相关搜素排第一的是SEO优化。看来大家对SEO优化这个词感兴趣的最多，而SEO扫盲却不在相关搜索中，所以我就将题目改为&rdquo;<b>SEO优化</b>之发表文章&rdquo;。</p><p style="text-indent: 2em"><b>4，</b>文章前100个字里一定要出现关键字。出现次数不要太多，最多两次。如果多于两次很可能被搜索引擎判为作弊，那可就惨了。</p><p style="text-indent: 2em"><b>5，</b>正文里面适当的加粗关键字。搜索引擎对加粗的词比较感兴趣。整篇文章加粗个4，5个足以，加多了可能会适得其反哦。</p><p style="text-indent: 2em"><b>6，</b>正文里出现的站点名称，网址之类要加上相应的链接。这样就需要每个站长都能坚持做到，真正体现互惠互利。</p><p style="text-indent: 2em"><b>7，</b>文章的排版也相当的重要，行间距不能太小，字大小始终，能不用空格的尽量不用空格。比如段首缩进两个字最好用&lt;p style=&quot;text-indent:2em;&quot;&gt;代码来实现，切忌用空格。虽然搜索引擎不会检查你的排版怎么样。但是文章说到底是给用户看的。用户看着舒适也是非常关键的因素。</p><p style="text-indent: 2em"><b>8，</b>最好将生成的静态的页面的名称可以自己配置。这点也比较重要。每篇文章的url名称都与自己的内容相关，无疑会大大增加关键字的命中。</p><p style="text-indent: 2em">这是本人的拙见，欢迎高手来做补充。</p>
-----
KEYWORDS:
SEO优化,
发表文章,
提高流量
-----
--------
TITLE: asp.net中FCKeditor的使用
AUTHOR: flysky
STATUS: publish
ALLOW COMMENTS: 1
ALLOW PINGS: 1
CONVERT BREAKS: 1
PRIMARY CATEGORY: WEB技术
DATE: 03/10/2008 00:27:15
-----
EXCERPT:
<p style="text-indent: 2em">使用在线文本编辑器，好处多多。我们在维护网站，发表文章等方面无疑会非常方便。目前流行的编辑器有好多种。FCKeditor无疑是非常出色的其中之一。</p>
-----
BODY:
<p style="text-indent: 2em">今天有人问我如何在asp.net网站中使用在线文本编辑器。其实这个问题以前也困扰了我好久。我还在用asp做开发的时候曾试着使用文本编辑器，可费了老大的功夫。记得那时候问了好多人，都没给出详细的<b>使用方法</b>。</p><p style="text-indent: 2em">目前最流行的文本编辑器恐怕就是<b>FCKeditor</b>了。它的官方网站是 <a target="_blank" href="http://www.fckeditor.net">www.fckeditor.net</a>.你可以从官方网站上下载最新版本的FCKeditor.下载页面是<a target="_blank" href="http://www.fckeditor.net/download">http://www.fckeditor.net/download</a>。现在最新的版本是FCKeditor 2.6 beta。注意还要下载另外一个东西。找到FCKeditor.Net，下载最新的控件。</p><p style="text-indent: 2em">这样你就得到了两个东西，FCKeditor_2.6b.zip和FCKeditor_Net.zip.两个压缩包。</p><p style="text-indent: 2em"><b>1，</b>将FCKeditor_2.6b.zip解压缩，把解压后的fckeditor文件夹整个复制到我们的网站中。注意最好把fckeditor放置在网站的根目录下。</p><p style="text-indent: 2em"><b>2，</b>解压缩FCKeditor_Net.zip.你将看到一个名叫FredCK.FCKeditorV2.dll的文件（可能因为版本的不同名称略有差异）。现在就要把它添加引用到我们的网站。方法是在解决方案资源管理器中右键点击项目名，选择添加引用。在弹出的对话框中选择 浏览 标签并找到那个dll文件，点击确定。你会发现网站多了个叫bin的目录，FredCK.FCKeditorV2.dll就在里面。</p><p style="text-indent: 2em"><b>3，</b>打开工具箱，右键点击选择 添加选项卡，取名为webeditor并点击确定。在此选项卡上点击右键选择 选择项。在弹出的对话框中浏览找到此dll文件，并点击确定。这时你就可以看到webeditor选项卡中多了个叫fckeditor的控件了。</p><p style="text-indent: 2em"><b>4，</b>使用这个控件很简单，和使用.net其他控件一样，将其拖拽到页面上就可以了。</p><p style="text-indent: 2em">在页面中的代码如下：</p><p style="text-indent: 2em">&lt;div &gt;</p><p style="text-indent: 2em">&nbsp;&lt;%--FckEditor文本编辑器--%&gt;</p><p style="text-indent: 2em">&lt;FCKeditorV2:FCKeditor ID=&quot;cFckeditor&quot; runat=&quot;server&quot; Height=&quot;300px&quot;&nbsp; Width=&quot;600px&quot; BasePath=&quot;~/FckEditor/&quot; /&gt;</p><p style="text-indent: 2em">&lt;/div&gt;</p><p style="text-indent: 2em">注意要配置几个参数.BasePath为引用地址，随着你放置fckeditor文件夹位置的不同而不同。除此之外还有好多参数，如设置默认语言，上传图片路径，是否支持全屏显示...等待。我在这里就不一一列举了。</p><p style="text-indent: 2em"><b>5，</b>如果你嫌每次都要配置BashPath等参数很麻烦的话，你可以把其配置信息增加到config文件中。代码如下：</p><p style="text-indent: 2em">&nbsp; &lt;appSettings&gt;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp; &lt;add key=&quot;FCKeditor:BasePath&quot; value=&quot;~/FckEditor/&quot;/&gt;</p><p style="text-indent: 2em">&nbsp; &lt;/appSettings&gt;</p><p style="text-indent: 2em"><b>6，</b>还有一点一定要注意，有的时候你要在使用了f<b>ckeditor</b>的页面的顶部page元素里面增加ValidateRequest=&quot;false&quot;。这样就不会出现 &ldquo;检测到有潜在危险的 Request.Form 值。&rdquo;的错误了。</p><p style="text-indent: 2em"><b>7，</b>如何获取fckeditor编辑器中的值那，用 fckeditor.value即可。获取的是html的源代码。</p><p style="text-indent: 2em">其实使用f<b>ckeditor</b>还是有很多学问的。比如给fckeditor减肥啊，更换皮肤，定制自己的功能等。以后有空我会给大家讲解。</p>
-----
KEYWORDS:
FCKediotr,
asp.net,
使用
-----
--------
TITLE: 地址栏图标显示问题
AUTHOR: flysky
STATUS: publish
ALLOW COMMENTS: 1
ALLOW PINGS: 1
CONVERT BREAKS: 1
PRIMARY CATEGORY: WEB技术
DATE: 03/12/2008 23:32:38
-----
EXCERPT:
<p style="text-indent: 2em;">当用户浏览你的网站的时候，在浏览器地址栏上能够看到你网站的logo，这无疑能起到一个非常好的宣传作用。</p>
-----
BODY:
<p style="text-indent: 2em;">大家在浏览网页的时候，有没有发现在<b>浏览器地址栏</b>中，有的网址前面有一个小<b>图标</b>，代表网站的<b>logo</b>.比如<a href="http://www.baidu.com" target="_blank">百度</a>前面那个蓝色小脚丫子，和<a href="http://www.sina.com" target="_blank">新浪网</a>的那个大眼睛。究竟它们是怎么实现的那？很简单，我给大家将下如何实现这样的效果。</p><p style="text-indent: 2em;"><img onload="ResizeImage(this,520)" src="http://www.huangbowen.net/upload/ico.jpg" alt="" title=""/></p><p style="text-indent: 2em;"><b>一，</b>你要制作一个后缀名为ico的小图标，大小为16*16。网上有不少这样的制作工具。给大家推荐一个比较好的在线制作ico图标的网站<a href="http://www.bitbug.net" target="_blank">www.bitbug.net</a>.你只需要将要转换的图片上传，它就会自动生成ico图标。</p><p style="text-indent: 2em;"><b>二，</b>将ico图标取名为favicon.ico，上传到你的网站的根目录下即可。</p><p style="text-indent: 2em;"><b>三，</b>如果你想其他页面显示不同的图标，只需要在当前页面 &lt;head&gt;&lt;/head&gt;标签中加入</p><p>&lt;link rel=&quot;Shortcut Icon&quot; href=&quot;图片的地址&quot;&gt;，如果想在收藏夹中显示，还要加入&lt;link rel=&quot;Bookmark&quot; href=&quot;图片的地址&quot;&gt;。图片的地址为相对地址。</p><p>&nbsp;</p><p style="text-indent: 2em;">经测试在firefox中对地址栏中图标显示支持性较好。而在IE6.0中经常无法显示。如何解决在IE6.0中无法显示地址栏图标那？有一个简单的办法就是将当前网址添加到收藏夹中，然后再访问即可。</p>
-----
KEYWORDS:
ico,
图标,
地址栏,
显示
-----
--------
TITLE: IIS6.0中配置asp.net网站的若干问题及解决
AUTHOR: flysky
STATUS: publish
ALLOW COMMENTS: 1
ALLOW PINGS: 1
CONVERT BREAKS: 1
PRIMARY CATEGORY: WEB技术
DATE: 03/15/2008 22:32:31
-----
EXCERPT:
<p style="text-indent: 2em">跟服务器打交道，经常遇到各种问题。在IIS6.0中配置部署asp.net网站，由于硬件软件，技术水平等各方面的原因，出现问题是常有的事。我们就来共同探讨若干问题的解决。</p>
-----
BODY:
<p style="text-indent: 2em">这两天我们给校党委的做的一个站点正式交工，党委那边要我们帮其在服务器上配置好.我以为这是一个轻松的事情，再怎么说我维护服务器也有些时候了，哪知道配置<b>IIS6.0</b>的过程中还真遇到了不少<b>问题</b>。</p><p style="text-indent: 2em">由于这个服务器是个虚拟机，网络中心竟然不懂sql server配置，让我用远程桌面来操作服务器，我直接晕倒。一看网络中心这点技术水平我就明白了为什么我们宿舍楼隔三差五老掉线，修了N久毛病如故。</p><p style="text-indent: 2em">安装了sql server，导入了数据，配置了<b>iis</b>，接下来问题就一一登场了。</p><p style="text-indent: 2em"><b>问题一</b>：</p><p style="text-indent: 2em">在浏览器中输入网址，页面显示：</p><p style="text-indent: 2em"><img onload="ResizeImage(this,520)" src="http://www.huangbowen.net/upload/notseepage.jpg" alt="" title=""/></p><p style="text-indent: 2em">&nbsp;</p><p style="text-indent: 2em">初步设想应该是网站目录的权限不够。<b>尝试一</b>，右键单击网站目录，选择属性，在弹出的对话框中选择安全选项卡，将组，用户的权限该勾的勾上。然后再测试，问题如故。</p><p><b>尝试二</b>，将网站目录的上级目录，就是磁盘的根目录文件夹的用户组的权限全选上，问题还是没解决。而且我发现每次我将 CREATOR OWNER这个用户的权限勾上，但是修改结果却无法保存下来。</p><p>&nbsp;</p><p><b>尝试三</b>，将网站目录移植到磁盘根目录下，然后运行测试，这个问题竟然解决了。真是郁闷，我baidu了半天也没找到这个错误的原理，那个高手知道可以给我讲下。</p><p>&nbsp;</p><p style="text-indent: 2em"><b>问题二</b>：</p><p style="text-indent: 2em">虽然解决了&ldquo;您不具备查看该目录或页面的权限，因为访问控制列表 (ACL) 对 Web 服务器上的该资源进行了配置。&rdquo;的错误，但是新的问题又出现了。这次页面显示的是</p><p style="text-indent: 2em"><img onload="ResizeImage(this,520)" src="http://www.huangbowen.net/upload/configerror.jpg" alt="" title=""/></p><p style="text-indent: 2em">&nbsp;</p><p style="text-indent: 2em">我一看这个错误就笑了，原来配置IIS的时候忘了选择.netframework的版本。我打开IIS，找到默认网站，选择其属性，想点击asp.net选项卡配置.netframework的版本，但是竟然没有找到asp.net这个选项卡。我初步猜想这台服务器还没有安装.netframework2.0，所以才出现这样的问题。我打开c盘，依次进入 windows-&gt; Microsoft.NET-&gt; Framework,果然没有找到v2.0.50727这个文件夹。我从网上辛辛苦苦下了个.netframe2.0，安装了上去。大家注意装好后一定要将其注册到IIS中。方法是单击开始&mdash;&gt;运行，输入cmd，然后在dos下输入 C:\WINDOWS\Microsoft.NET\Framework\v2.0.50727\aspnet_regiis.exe &ndash;i&nbsp; 即可。这下在iis的默认网站的属性中终于看到asp.net这个选项卡了。</p><p style="text-indent: 2em"><b>问题三:</b></p><p style="text-indent: 2em">当我再次测试的时候，页面又报错了。晕倒。这次的错误比较常见。</p><p style="text-indent: 2em"><img onload="ResizeImage(this,520)" src="http://www.huangbowen.net/upload/error.jpg" alt="" title=""/></p><p style="text-indent: 2em">很明显是数据库连接字符串的问题。我建成了下连接字符串，没问题啊。用户名和密码没错，数据库没错，服务器IP没错。<b>尝试一</b>：查看sql server组属性里的安全性，检查身份验证方式是否为 sql server和windows。然后我再测试，问题依旧。<b>尝试二</b>，打开sql server查询分析器，输入服务器ip，账号密码，点击登陆。返回结果是找不到此sql server实例。我猛然想起来自己在装sql server的时候并没有使用默认的实例名local,而是另外取了个。原来问题出在这里。解决方式是在配置文件的数据库连接字符串中将服务器ip改为sql server的实例名。问题解决。</p><p style="text-indent: 2em">看着运行正常的页面，心里感慨万千。本来自己觉得维护服务器这么久了，懂的还算多吧，通过这个事情明白自己不清楚，不熟悉的地方还是很多，要不断的学习啊。</p><p style="text-indent: 2em">解决一个难题，过程比结果更重要。</p>
-----
KEYWORDS:
IIS6.0,
asp.net,
配置
-----
--------
TITLE: 坚持下去，前面会好的！
AUTHOR: flysky
STATUS: publish
ALLOW COMMENTS: 1
ALLOW PINGS: 1
CONVERT BREAKS: 1
PRIMARY CATEGORY: 个人日记
DATE: 03/21/2008 23:34:40
-----
EXCERPT:
<p style="text-indent: 2em">这几天心情有点烦躁，没有更新文章。写点东西调解下心情。</p>
-----
BODY:
<p style="text-indent: 2em">已经将近一周没有更新文章了。最近事情有点多。</p><p style="text-indent: 2em">前几天忙着给党委组织部的网站扫尾，软件实验室那边的项目也遇到了麻烦，再加上平时还要上课，还有为党委那个党务管理系统推广做前期准备工作，还有复习英语搞四级.....总之是焦头烂额啊。</p><p style="text-indent: 2em">本来自己计划着1周至少四篇原创文章，看来这个任务是相当的艰巨。看着自己已经发表的日志，几乎每篇都是凌晨左右写完发表的。虽然这样很累，但是我却喜欢。想象着别人看过我的文章有所收获，我就觉得非常高兴。人生最美好的事情莫过于自己的价值得到体现。</p><p style="text-indent: 2em">这几天帮党委做软件推广，第一次近距离接触服务器。这种机架式服务器以前可没见过，光一个硬盘就值1万多块...在配置的过程中，才发现自己不懂的地方太多了，只有学习再学习.</p><p style="text-indent: 2em">开学都已经一个多月了，可是自己技术上还没有什么大的进展。以后一定要制定详细计划，认真的执行。</p><p style="text-indent: 2em">Tomorrow si another day!明天会更好，加油干，小伙子。</p><p style="text-indent: 2em">顺便为我们协会大四创业的几个打打广告。&nbsp; <a target="_blank" href="http://www.guangchunxi.com">逛春熙路，逛你所想！</a> <a href="http://www.guangchunxi.com">www.guangchunxi.com</a></p>
-----
KEYWORDS:
日记
-----
--------
TITLE: oracle中实现自动编号-使用序列
AUTHOR: flysky
STATUS: publish
ALLOW COMMENTS: 1
ALLOW PINGS: 1
CONVERT BREAKS: 1
PRIMARY CATEGORY: WEB技术
DATE: 03/24/2008 11:28:26
-----
EXCERPT:
<p style="text-indent: 2em">ORACLE中实现某些字段自动编号，要使用一个非常好的利器-序列。</p>
-----
BODY:
<p style="text-indent: 2em">Access中有<b>自动增加</b>的字段，sql server中可以通过设置标识符来将int型实现<b>自动编号</b>。而在oracle中是使用<b>序列</b>-<b>SEQUENCE</b>来实现自动增加。</p><p style="text-indent: 2em">使用<b>序列</b>可以很方便的构造一个按照一定要求递增或者递减的序列，我们可以使用这个序列来实现某些字段的递增，递减。</p><p style="text-indent: 2em"><b>一，</b>&nbsp;创建一个序列。</p><p style="text-indent: 2em">假设创建一个名为&nbsp;myseq的序列。</p><p style="text-indent: 2em">create SEQUENCE myseq</p><p style="text-indent: 2em">INCREMENT BY&nbsp; n&nbsp;&nbsp; -- 每次加n个</p><p style="text-indent: 2em">START WITH&nbsp; n1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --从n1开始计数</p><p style="text-indent: 2em">MAXVALUE n2 |&nbsp; NOMAXVALUE&nbsp; -- 最大值n2 | 不设置最大值</p><p style="text-indent: 2em">CYCLE&nbsp; | NOCYCLE&nbsp;&nbsp; --当累加到最大值后重新开始计数|&nbsp; 一直累加，不循环</p><p style="text-indent: 2em">CACHE n3&nbsp; | NOCACHE&nbsp; -- 在内存中预先存一组序列值 |&nbsp; 不在内存中预先存放一组序列值。</p><p style="text-indent: 2em"><b>二，</b>&nbsp;使用一个序列。</p><p style="text-indent: 2em">假设已经建立了一个名为myseq的序列。</p><p style="text-indent: 2em">myseq.CURRVAL&nbsp; 返回序列的当前值</p><p style="text-indent: 2em">myseq.NEXTVAL&nbsp; 增加序列值，然后返回它的值。</p><p style="text-indent: 2em">注意一个序列刚建立的时候第一次使用NEXTVAL返回序列的初始值，如果第一次使用CURRVAL会报错。以后每次使用NEXTVAL都会使序列增加。</p><p style="text-indent: 2em">举个例子，myseq是一个初始值为1每次递增2的序列。</p><p style="text-indent: 2em">Insert into user (id,name) values (myseq.nextval,&rsquo;flysky&rsquo;);</p><p style="text-indent: 2em">User中加入的记录是 1，flysky.</p><p style="text-indent: 2em">再次 insert into user(id,name) values(myseq.nextval,&rsquo;huang&rsquo;);</p><p style="text-indent: 2em">User中加入的纪录是 3，huang。</p><p style="text-indent: 2em"><b>三，</b>&nbsp;修改序列。</p><p style="text-indent: 2em">首先要有修改的权限，注意不能修改序列&nbsp; START WITH 属性。</p><p style="text-indent: 2em">举个例子。</p><p style="text-indent: 2em">Alter SENQUENCE&nbsp; myseq</p><p style="text-indent: 2em">INCREMENT BY&nbsp; 5&nbsp;&nbsp;&nbsp;&nbsp; -- 每次增加5</p><p style="text-indent: 2em">MAXVALUE&nbsp;&nbsp; 10000&nbsp;&nbsp;&nbsp; -- 最大值为10000</p><p style="text-indent: 2em">CYCLE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -- 到达最大值后从头开始递增</p><p style="text-indent: 2em">NOCACHE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --不设置缓存</p><p style="text-indent: 2em"><b>四，</b>&nbsp;删除序列。</p><p style="text-indent: 2em">DROP SEQUENCE 序列名。</p><p style="text-indent: 2em">举例。&nbsp;&nbsp; DROP SEQUENCE myseq.</p>
-----
KEYWORDS:
oracle,
自动编号,
序列
-----
--------
TITLE: 使用vss2005在vs2005项目中进行协作开发
AUTHOR: flysky
STATUS: publish
ALLOW COMMENTS: 1
ALLOW PINGS: 1
CONVERT BREAKS: 1
PRIMARY CATEGORY: WEB技术
DATE: 03/30/2008 22:10:46
-----
EXCERPT:
<p style="text-indent: 2em">简单的介绍了如何在vs2005项目中使用vss2005进行协作开发。</p>
-----
BODY:
<p style="text-indent: 2em">这几天办公室收养了一只小猫，通体白色，一个眼睛貌似看不到。我们叫她伊丽莎白，简称小白。这个小白太不懂事了，见什么咬什么，还喜欢钻我怀里睡觉。害的我坐在电脑前要一动不动。</p><p style="text-indent: 2em">不废话了，切入正题，如何在vs2005项目中采用vss2005进行协作开发和版本控制。</p><p style="text-indent: 2em">&nbsp;</p><p style="text-indent: 2em"><b>1，创建服务器数据库。</b></p><p style="text-indent: 2em">打开 VisualSourceSafe Administrator.选择 File?New Database，打开SourceSafe Database Wizard.按照向导一步步创建。注意最好数据库文件夹放置在ntfs格式的硬盘上。在 Team Version Control Model有两种模式。Lock-Modify-Unlock Model是默认的模式，即一个文件允许一个人迁出，只能迁出最新的版本。Copy-Modify-Merge Model允许多人同时迁出。</p><p style="text-indent: 2em"><b>2，配置服务器数据库文件夹。</b></p><p style="text-indent: 2em">将数据库存放的文件夹设置为共享，并赋予读写权限。</p><p style="text-indent: 2em"><b>3，给此数据库分配用户名和密码。</b></p><p style="text-indent: 2em">选择Users&mdash;&gt;add Users，可以在这里新添加用户。</p><p style="text-indent: 2em"><b>4,将服务器数据库路径影射到本机驱动器。</b></p><p style="text-indent: 2em">首先保证本机能正常和服务器通讯。在IE中输入&ldquo;\\服务器IP&rdquo;.接着输入服务器用户名admin，密码123。进入数据库共享目录。这样保证具有对服务器此目录的操作权限。</p><p style="text-indent: 2em">打开&ldquo;我的电脑&rdquo;，在菜单栏选择&ldquo;工具\影射网络驱动器&rdquo;，选择影射的驱动器编号，文件夹输入&ldquo;\\服务器IP\数据库文件夹名称&rdquo;。注意将 &ldquo;登陆时重新连接&rdquo; 前面的勾去掉，点击确定。</p><p style="text-indent: 2em"><b>5，测试在本机能否使用此数据库。</b></p><p style="text-indent: 2em">打开本机的VisualSourceSafe，选择要连接的数据库也就是我们刚才影射的网络驱动盘的那个，输入管理员给你分配的帐号和密码进入。这样就证明前面的配置没问题。</p><p style="text-indent: 2em"><b>6，将现有项目关联到当前vss数据库中。</b></p><p style="text-indent: 2em">有两种方式，一种是打开VisualSourceSafe，选择数据库，输入用户名和密码，在点击左侧的目录树，选择&ldquo;set work forder&rdquo;，将要关联的项目文件夹设置过来。</p><p style="text-indent: 2em">另一种是用vs2005打开要关联的项目，选择文件&mdash;&gt;源代码管理&mdash;&gt;将解决方案添加到源代码管理。选择要关联的数据库，存放的目录，点击确定即可。</p><p style="text-indent: 2em">&nbsp;</p><p style="text-indent: 2em"><b>注意事项：</b></p><p style="text-indent: 2em"><b>1，</b>安装好vss2005和vs2005后，要在vs2005中建立对其的关联。方法请参考我另一篇日志。</p><p style="text-indent: 2em"><b>2，</b>每个文件前面都有个标志，代表不同的意思。是个对号的表明当前你已经签出了此文件。是个锁子的表明此文件没有任何人签出。是个加号的说明此文件是新建立的或者是已经被其他人删除的。</p><p style="text-indent: 2em"><b>3，</b>请注意不要将一个其他人可能也会的使用的文件签出过长时间。千万不要把有错误的程序签入，以免影响其他人的开发。</p><p style="text-indent: 2em"><b>4，</b>用户可以在vss客户端自行修改密码。（在tools/changepassword）</p>
-----
KEYWORDS:
vss2005,
vs2005,
协作开发
-----
--------
TITLE: 新手解惑之如何建立自己的网站
AUTHOR: flysky
STATUS: publish
ALLOW COMMENTS: 1
ALLOW PINGS: 1
CONVERT BREAKS: 1
PRIMARY CATEGORY: WEB技术
DATE: 04/08/2008 17:07:00
-----
EXCERPT:
<p style="text-indent: 2em">看着网上一个个精美的网站，有没有想过自己也办个网站那？不知从何下手不用着急，看着这篇文章你就明白了。</p>
-----
BODY:
<p style="text-indent: 2em">想在网上安个自己的小窝，想<b>建立</b>一个属于自己的小站，对于大多数网络小白们还真是不知道怎么下手。没关系，今天我就给大家讲解下如何<b>在网上建立自己的站点</b>。</p><p style="text-indent: 2em"><b>第一步，</b>要拥有想要展示的网站程序。这个程序你可以自己做，可以请别人做，可以用网上开源的程序。如果你想开个博客的话，网上有大量免费的博客模板，下载一个就成， 推荐使用<b><a target="_blank" href="http://www.rainbowsoft.org/zblog/">zblog</a></b>。如果你要做专业性的站点，我看还是最好找专门的工作室给你定身量做一套。如果你想经营个论坛的话可以买现成的论坛模板，配置一下即可。</p><p style="text-indent: 2em">网上有大量的cms网站模板。cms英文全称content management system,即信息管理系统。像这样的提供cms模板的网站很多，如<a target="_blank" href="http://www.powereasy.net/">动易</a>，<a target="_blank" href="http://www.dedecms.com/">织梦</a>等。你可以根据自己要求挑选。</p><p style="text-indent: 2em"><b>第二步，</b>要拥有自己的独立域名。国内做域名代理的公司多如牛毛，价钱也相差较大。一般.cn等国内域名第一年是0.5-2元一年，以后每年30多元，.com,.net等国际域名以及中文域名第一年是30-50元每年，以后每年是70元左右，如果一次买好几年的还可以优惠。几乎每个域名代理的网站上都可以查到你想注册的域名有没有被人抢注。</p><p style="text-indent: 2em">我推荐大家买域名的时候找那些信誉好的公司。你在其公司申请个帐号，自然有客服通过qq,msn等即时通讯软件与你联系，如何付款等事宜可以详细询问客服。</p><p style="text-indent: 2em"><b>第三步，要</b>拥有自己的服务器空间。也就是放网站的地方。一般都是使用那些提供服务器租赁业务的公司。自己买个服务器成本太大，管理又不方便。一般的公司都是既卖域名又出租服务器的，一般的服务器提供商都提供试用。选择一个好的服务器是至关重要的。这里面有好多的参数。</p><p style="text-indent: 2em"><b>1，</b>&nbsp;服务器响应速度。指的是你输入IP访问此服务器到接收到服务器响应的时间。这个很重要，如果你的网站在10秒内还没打开，那么我相信没人还对你的站点感兴趣。</p><p style="text-indent: 2em"><b>2，</b>&nbsp;服务器几线接入。大部分的服务器租赁商都宣称他们的服务器什么双线接入，4线接入，5线接入。可别光听他们忽悠，实践才是硬道理。反正几乎每个服务器都有试用期，试用一下就晓得了。你要针对你的网站的访问人群来优先选择什么线路。不要光盯着电信的速度，网通，教育网等访问速度的可不能掉链子。</p><p style="text-indent: 2em"><b>3，</b>&nbsp;服务器带宽，流量。带宽，流量直接关系到你网站的访问速度。</p><p style="text-indent: 2em"><b>4，</b>&nbsp;服务器IIS连接数。这个指标指的是同时访问web服务端口的人数，通俗的说就是同时在线人数。如果数值超标，服务器会限制访问。</p><p style="text-indent: 2em"><b>5，</b>&nbsp;服务器CPU使用率。由于一般我们买的是虚拟空间。一个服务器上可能放置几十，上百个网站，每个网站会分配一个最大的cpu使用率。超过限制访问你的网站就会受限。</p><p style="text-indent: 2em"><b>6，</b>&nbsp;服务器的稳定性。如果由于服务器的原因网站三天两头就不能访问了，无疑网站的形象会大打折扣。最惨的是，如果<a target="_blank" href="http://www.baidu.com">baidu</a>,<a target="_blank" href="http://www.google.cn">google</a>等搜素引擎正更新你的站点的关键时刻，站点不能访问了，那么你就会发现你的网站收藏和排名直线下跌，个把月的辛苦全白费了。</p><p style="text-indent: 2em">一般服务器的性能和你出的价钱是正比的。什么样的价位什么样的服务器。你最好还是货比三家，多做选择。</p><p style="text-indent: 2em"><b>第四步，</b>网站程序做好了，域名买好了，空间也租好了。下一步就是将网站程序通过ftp上传到虚拟空间，将域名和此虚拟空间的IP绑定（绑定生效要2个小时左右），你的站点就可以访问了。</p><p style="text-indent: 2em"><b>第五步，</b>别忘了去<a target="_blank" href="http://www.miibeian.gov.cn">信息产业部</a>申请ip/tcp备案。网址是<a href="http://www.miibeian.gov.cn/">http://www.miibeian.gov.cn/</a>。这个备案成功率很难说，有的时候网站页面都打不开它都可以通过备案，有的时候等了个把月备案还没批下来。说白了这只是走个形式，能不能顺利通过就看人品了。如果你在网站运营1个月内不申请备案的话，小心信产部关了你的网站。</p><p style="text-indent: 2em">一切似乎都OK了。看着自己的网站，一种成就感油然而生，心想自己好歹也算个站长了。别高兴，麻烦的还在后面那。以后你可要定时更新你的站点，维护你的站点。全国站长千千万，你现在还是里面不起眼的一个，要想出人头地可要下苦功夫了。推广你的站点牵扯的学问更多，seo优化,网络营销,网站维护，撰写软文&hellip;..慢慢的学吧。</p><p style="text-indent: 2em">有的人做站纯粹是个人兴趣，有的人做站是为了赚钱，有的两者皆有&hellip;..无论抱着那种心态，都衷心希望我们的站长们心想事成，事事顺心。</p>
-----
KEYWORDS:
建立网站,
新手解惑
-----
--------
TITLE: vs2005快捷键大全
AUTHOR: flysky
STATUS: publish
ALLOW COMMENTS: 1
ALLOW PINGS: 1
CONVERT BREAKS: 1
PRIMARY CATEGORY: WEB技术
DATE: 04/09/2008 21:48:28
-----
EXCERPT:
<p>学会使用vs2005快捷键，解放使用鼠标的手。</p>
-----
BODY:
<p style="text-indent: 2em">这个大部分来自于网上。是个好东西啊。用熟了快捷键对编程速度的提高很有帮助。再也不用鼠标点来点去了。</p><p><font color="#000000"><span>Shift+Alt+Enter: 切换全屏编辑</span></font><font color="#000000"><span><br />Shift+Alt+C: 新建类<br />Ctrl+Shift+A: 新建项<br />Ctrl+Shift+V: 剪贴板循环<br />Ctrl+左右箭头键: 一次可以移动一个单词 <br />Ctrl+上下箭头键: 滚动代码屏幕，但不移动光标位置。<br />Ctrl+Shift+L: 删除当前行<br />Ctrl+M,M: 隐藏或展开当前嵌套的折叠状态<br />Ctrl+B,T / Ctrl+K,K: 切换书签开关<br />Ctrl+B,N / Ctrl+K,N: 移动到下一书签 <br />Ctrl+B,P: 移动到上一书签 <br />Ctrl+B,C: 清除全部标签<br />Ctrl+I: 渐进式搜索 <br />Ctrl+Shift+I: 反向渐进式搜索 <br />Ctrl+F: 查找 <br />Ctrl+Shift+F: 在文件中查找 <br />F3: 查找下一个 <br />Shift+F3: 查找上一个 <br />Ctrl+H: 替换 <br />Ctrl+Shift+H: 在文件中替换 <br />Alt+F12: 查找符号(列出所有查找结果)<br />Ctrl+M,L: 将所有过程设置为相同的隐藏或展开状态<br />Ctrl+M,P: 停止大纲显示 <br />Ctrl+E,S: 查看空白 <br />Ctrl+E,W: 自动换行 <br />Ctrl+G: 转到指定行<br />Shift+Alt+箭头键: 选择矩形文本 <br />Alt+鼠标左按钮: 选择矩形文本<br />Ctrl+Shift+U: 全部变为大写 <br />Ctrl+U: 全部变为小写</span></font></p><div>&nbsp;</div><div><font color="#000000"><span>代码快捷键<br />Ctrl+J / Ctrl+K,L: 列出成员 <br />Ctrl+Shift+空格键 / Ctrl+K,P: 参数信息<br />Ctrl+K,I: 快速信息　<br />Ctrl+E,C / Ctrl+K,C: 注释选定内容<br />Ctrl+E,U / Ctrl+K,U: 取消选定注释内容<br />Ctrl+K,M: 生成方法存根<br />Ctrl+K,X: 插入代码段 <br />Ctrl+K,S: 插入外侧代码　<br />F12: 转到所调用过程或变量的定义</span></font></div><div><font color="#000000"><span>窗口快捷键</span></font></div><div><font color="#000000"><span>Ctrl+W,W: 浏览器窗口<br />Ctrl+W,S: 解决方案管理器<br />Ctrl+W,C: 类视图<br />Ctrl+W,E: 错误列表<br />Ctrl+W,O: 输出视图<br />trl+W,P: 属性窗口<br />Ctrl+W,T: 任务列表 <br />Ctrl+W,X: 工具箱<br />Ctrl+W,B: 书签窗口<br />Ctrl+W,U: 文档大纲<br />Ctrl+D,B: 断点窗口<br />Ctrl+D,I: 即时窗口<br />Ctrl+Tab: 活动窗体切换<br />Ctrl+Shift+N: 新建项目<br />Ctrl+Shift+O: 打开项目<br />Ctrl+Shift+S: 全部保存<br />Shift+Alt+Enter: 切换全屏编辑<br />Ctrl+B,T / Ctrl+K,K: 切换书签开关<br />Ctrl+B,N / Ctrl+K,N: 移动到下一书签 <br />Ctrl+B,P: 移动到上一书签<br />Ctrl+B,C: 清除全部标签<br />Ctrl+I: 渐进式搜索 <br />Ctrl+Shift+I: 反向渐进式搜索<br />Ctrl+F: 查找 <br />Ctrl+Shift+F: 在文件中查找 <br />F3: 查找下一个 <br />Shift+F3: 查找上一个<br />Ctrl+H: 替换<br />Ctrl+Shift+H: 在文件中替换<br />Alt+F12: 查找符号(列出所有查找结果)<br />Ctrl+Shift+V: 剪贴板循环<br />Ctrl+左右箭头键: 一次可以移动一个单词<br />Ctrl+上下箭头键: 滚动代码屏幕，但不移动光标位置。<br />Ctrl+Shift+L: 删除当前行<br />Ctrl+M,M: 隐藏或展开当前嵌套的折叠状态<br />Ctrl+M,L: 将所有过程设置为相同的隐藏或展开状态 <br />Ctrl+M,P: 停止大纲显示<br />Ctrl+E,S: 查看空白<br />Ctrl+E,W: 自动换行<br />Ctrl+G: 转到指定行 <br />Shift+Alt+箭头键: 选择矩形文本<br />Alt+鼠标左按钮: 选择矩形文本<br />Ctrl+Shift+U: 全部变为大写 <br />Ctrl+U: 全部变为小写 </span></font></div>
-----
KEYWORDS:
vs2005,
快捷键
-----
--------
TITLE: 读取XML文件中文乱码
AUTHOR: flysky
STATUS: publish
ALLOW COMMENTS: 1
ALLOW PINGS: 1
CONVERT BREAKS: 1
PRIMARY CATEGORY: WEB技术
DATE: 04/11/2008 20:44:19
-----
EXCERPT:
<p style="text-indent: 2em">在读取xml文件时候遇到中文字符显示乱码，解决方法很简单。</p>
-----
BODY:
<p style="text-indent: 2em">有一个项目要求读取一个xml文件中的信息，并储存到数据库中。但是我用xml类来读取其节点值的时候，中文信息总是乱码。</p><p style="text-indent: 2em">原XML文件如下:</p><p>&lt;?xml version=&quot;1.0&quot;?&gt;</p><p>&lt;Cproject xmlns:xsi=&quot;<a href="http://www.w3.org/2001/XMLSchema-instance">http://www.w3.org/2001/XMLSchema-instance</a>&quot; xmlns:xsd=&quot;<a href="http://www.w3.org/2001/XMLSchema">http://www.w3.org/2001/XMLSchema</a>&quot;&gt;</p><p>&lt;projectid&gt;xm008&lt;/projectid&gt;</p><p>&lt;projectname&gt;大型机群管理系统&lt;/projectname&gt;</p><p>&lt;grade&gt;1级&lt;/grade&gt;</p><p>&lt;from&gt;黄博文&lt;/from&gt;</p><p>&lt;address&gt;软件实验室&lt;/address&gt;</p><p>&lt;addtime&gt;2008-4-11&lt;/addtime&gt;</p><p>&lt;beizhu&gt;无&lt;/beizhu&gt;</p><p>&lt;Cproject&gt;</p><p style="text-indent: 2em">当我读取projectid节点的值时正常，但是读取其他节点，如果遇到中文就出现些乱其八糟的东西。</p><p style="text-indent: 2em">后来我检查认为是少配置了xml文件encoding属性，我把xml文件第一行改为 &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;，但是问题依旧。</p><p style="text-indent: 2em">明明已经指定了编码，怎么还是不行？我从网上搜索找到了解决方法。</p><p style="text-indent: 2em">将此xml文件另存为，另存的时候有个编码一项，选择utf-8。你再打开另存的xml文件时，发现中文都显示不正常。这时只需重新修改中文，然后用xml类就能正常读取了。</p><p style="text-indent: 2em">我想这就是由于这个xml文件是我在记事本里直接编辑的，中文编码并非utf-8,虽然后来指定了编码，但是并不能生效。</p>
-----
KEYWORDS:
XML,
乱码
-----
--------
TITLE: 推荐阅读《疯狂的程序员》
AUTHOR: flysky
STATUS: publish
ALLOW COMMENTS: 1
ALLOW PINGS: 1
CONVERT BREAKS: 1
PRIMARY CATEGORY: 个人日记
DATE: 04/21/2008 13:10:44
-----
EXCERPT:
<p style="text-indent: 2em">作为程序员，你疯狂过吗？推荐阅读程序员自己的小说：《疯狂的程序员》！</p>
-----
BODY:
<p style="text-indent: 2em">前段时间，到<a target="_blank" href="http://www.csdn.net">csdn网站</a>上闲逛，看到一个链接，叫《疯狂的程序员》。我一般对这些标题比较感兴趣，点进去一看原来是绝影的<a target="_blank" href="http://blog.csdn.net/hitetoshi/">csdn博客</a>，他在里面连载了一个长篇小说《疯狂的程序员》。我花了几个小时看完了，意犹未尽。目前小说还在连载中，作者每隔3，4天会更新一章。</p><p style="text-indent: 2em">《疯狂的程序员》讲的是我们程序员自己的故事，根据作者的亲身经历改编而成。</p><p style="text-indent: 2em">小说主要分三个部分，第一部分讲述绝影在大学里的经历，是如何开始学习编程，并一步步走上汇编，C++这条路上的。他的经历和我颇有些相似。上了大学，大家都想冒点泡，但是空说没用的，关键是实干。绝影就是这样一步步迈入编程的殿堂。</p><p style="text-indent: 2em">第二部分讲绝影在公司打拼的经历。绝影大三就开始在公司兼职，最后进入了周总的公司。可以说他在周总的公司学到了很多，也渐渐的受到了周总的赏识。甚至大四快结束了他还代替周总去自己学校招聘。</p><p style="text-indent: 2em">在公司里他也结识了自己的知己boss liu,两个人暗暗较劲，比拼技术，让人看起来颇有滋味。</p><p style="text-indent: 2em">第三部分讲绝影自己创业的故事。目前作者第二部分还正在创作之中，第三部分还未动笔。</p><p style="text-indent: 2em">这篇小说引起了我的强烈共鸣。里面绝影大量的观点，想法和我颇为相似，包括那些成熟的和不成熟的。绝影的有些比喻真是生动贴切，令人叹服。</p><p style="text-indent: 2em">小说阅读地址：<a href="http://blog.csdn.net/hitetoshi/">http://blog.csdn.net/hitetoshi/</a> 。</p>
-----
KEYWORDS:
疯狂的程序员
-----
--------
TITLE: 使用asp.net绘图
AUTHOR: flysky
STATUS: publish
ALLOW COMMENTS: 1
ALLOW PINGS: 1
CONVERT BREAKS: 1
PRIMARY CATEGORY: WEB技术
DATE: 04/24/2008 00:13:27
-----
EXCERPT:
<p style="text-indent: 2em">现在大量的web应用需要绘制图表来显示数据，分析数据。我们通过asp.net提供的关于图形显示的类，配合数据库，xml文件等就可以即时输出可控的图形，这一功能在asp中可是很难实现的哦。</p>
-----
BODY:
<p style="text-indent: 2em">在web窗体中绘图和在windows窗体中绘图差别不大，如果有在windows窗体中绘图的经验，那么很快就会掌握在asp.net下绘图。</p><p style="text-indent: 2em">今天给大家讲一个小的实例，希望给大家起到抛砖引玉的作用。</p><p style="text-indent: 2em">我们用asp.net提供的关于图形显示的类，在页面上绘制一个奥运会五环图。</p><p style="text-indent: 2em">最终效果如下：</p><p style="text-indent: 2em">&nbsp;<img onload="ResizeImage(this,520)" src="http://www.huangbowen.net/upload/drawimage.jpg" alt="" title=""/></p><p style="text-indent: 2em">此例子需要两个页面，draw.aspx主要是绘制和输出gif图像,show.aspx则通过一个Image控件来展现这个图像。</p><p style="text-indent: 2em">Draw.aspx.cs页面全部代码如下：</p><p style="text-indent: 2em">using System;<br />using System.Data;<br />using System.Configuration;<br />using System.Web;<br />using System.Web.Security;<br />using System.Web.UI;<br />using System.Web.UI.WebControls;<br />using System.Web.UI.WebControls.WebParts;<br />using System.Web.UI.HtmlControls;<br />using System.Drawing.Imaging;&nbsp;&nbsp; //提供画GDI+图形的高级功能<br />using System.Drawing;&nbsp;&nbsp; //提供画GDI+图形的基本功能<br />&nbsp;</p><p style="text-indent: 2em">public partial class _Draw : System.Web.UI.Page <br />{<br />&nbsp;&nbsp;&nbsp; protected void Page_Load(object sender, EventArgs e)<br />&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp; Bitmap&nbsp;&nbsp; bmp = new Bitmap(400,300);&nbsp; //声明一个bitmap类，大小为500*500<br />&nbsp;&nbsp;&nbsp;&nbsp; Pen x = new Pen(Color.Blue, 5);&nbsp;&nbsp;&nbsp; //定义一蓝色画笔<br />&nbsp;&nbsp;&nbsp;&nbsp; Pen y = new Pen(Color.Black, 5);&nbsp;&nbsp; //定义一黑色画笔<br />&nbsp;&nbsp;&nbsp;&nbsp; Pen z = new Pen(Color.Red, 5);&nbsp;&nbsp;&nbsp; //定义一红色画笔<br />&nbsp;&nbsp;&nbsp;&nbsp; Pen m = new Pen(Color.Yellow, 5);&nbsp;&nbsp; //定义一黄色画笔<br />&nbsp;&nbsp;&nbsp;&nbsp; Pen n = new Pen(Color.Green, 5);&nbsp;&nbsp;&nbsp; //定义一绿色画笔<br />&nbsp;&nbsp;&nbsp;&nbsp; Graphics gc;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //声明一 GDI+ 绘图面<br />&nbsp;&nbsp;&nbsp;&nbsp; gc = Graphics.FromImage(bmp);&nbsp; //从指定的 Image 创建新的 Graphics<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SolidBrush sb = new SolidBrush(Color.Wheat); //定义一白色刷子<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; gc.FillRectangle(sb, 0, 0, 500, 500);&nbsp;&nbsp; //绘制背景图<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FontFamily fontfamily = new FontFamily(&quot;隶书&quot;);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //定义一个字体类型<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Point p = new Point(60,200);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //定义一个点<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Font font = new Font(fontfamily,50);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //定义一字体<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; gc.DrawString(&quot;北京2008&quot;, font, Brushes.Red,p);&nbsp;&nbsp; //输出字符串&quot;北京2008&quot;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; gc.DrawEllipse(x, 30, 30, 100, 100);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //绘制奥运会5个环<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; gc.DrawEllipse(y, 150, 30, 100, 100);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; gc.DrawEllipse(z, 270, 30, 100, 100);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; gc.DrawEllipse(m, 90, 80, 100, 100);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; gc.DrawEllipse(n, 210, 80, 100, 100);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Response.ContentType = &quot;image/gif&quot;;&nbsp;&nbsp;&nbsp;&nbsp; //声明输出流对象为gif图像<br />&nbsp;&nbsp;&nbsp;&nbsp; bmp.Save(Response.OutputStream, ImageFormat.Gif);&nbsp;&nbsp; //将bmp输出到页面<br />&nbsp;&nbsp;&nbsp;&nbsp; Response.End();&nbsp;&nbsp;&nbsp; //&nbsp; 终止输出<br />&nbsp;&nbsp;&nbsp; }<br />}</p><p style="text-indent: 2em">以下是show.aspx页面的详细代码</p><p>&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;true&quot; CodeFile=&quot;show.aspx.cs&quot; Inherits=&quot;Show&quot; %&gt;</p><p>&nbsp;</p><p style="text-indent: 2em">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;<a href="http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd</a>&quot;&gt;</p><p style="text-indent: 2em">&lt;html xmlns=&quot;<a href="http://www.w3.org/1999/xhtml">http://www.w3.org/1999/xhtml</a>&quot; &gt;<br />&lt;head runat=&quot;server&quot;&gt;<br />&nbsp;&nbsp;&nbsp; &lt;title&gt;无标题页&lt;/title&gt;<br />&lt;/head&gt;<br />&lt;body&gt;<br />&nbsp;&nbsp;&nbsp; &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;<br />&nbsp;&nbsp;&nbsp; &lt;div&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;asp:Image ID=&quot;Image1&quot; runat=&quot;server&quot; /&gt;&lt;/div&gt;<br />&nbsp;&nbsp;&nbsp; &lt;/form&gt;<br />&lt;/body&gt;<br />&lt;/html&gt;</p><p style="text-indent: 2em">以下是show.aspx.cs页面的详细代码：</p><p>using System;<br />using System.Data;<br />using System.Configuration;<br />using System.Collections;<br />using System.Web;<br />using System.Web.Security;<br />using System.Web.UI;<br />using System.Web.UI.WebControls;<br />using System.Web.UI.WebControls.WebParts;<br />using System.Web.UI.HtmlControls;</p><p>&nbsp;</p><p style="text-indent: 2em">public partial class Show : System.Web.UI.Page<br />{<br />&nbsp;&nbsp;&nbsp; protected void Page_Load(object sender, EventArgs e)<br />&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.Image1.ImageUrl = &quot;Draw.aspx?&quot;;<br />&nbsp;&nbsp;&nbsp; }<br />}</p>
-----
KEYWORDS:
asp.net,
绘图
-----
--------
TITLE: asp.net写的web service例子
AUTHOR: flysky
STATUS: publish
ALLOW COMMENTS: 1
ALLOW PINGS: 1
CONVERT BREAKS: 1
PRIMARY CATEGORY: WEB技术
DATE: 04/25/2008 15:51:40
-----
EXCERPT:
<p style="text-indent: 2em">WEB SERVICE日益流行。在asp.net下开发web service服务真是简单容易啊。通过一个小例子来解开它的神秘面纱。</p>
-----
BODY:
<p style="text-indent: 2em">最近想研究下<b>web service</b>,奈何找遍网络，都是讲些定义性的东西，泛泛而谈，我看的一知半解，不得要领。不过今天总算有点收获，写了 个小的<b>web service例子</b>，就是判断一个数是不是质数。还是老话，给大家起抛砖引玉的作用，只是给大家讲解如何开发最简单的web service程序 。只要入了门槛，以后的路就可以自己走了。</p><p style="text-indent: 2em"><b>第一</b>，&nbsp;新建网站，选择类型为asp.net web 服务。</p><p style="text-indent: 2em">系统自动为你建立了个文件service.asmx.这就是一个最简单的web service服务。你可以直接运行查看效果。</p><p style="text-indent: 2em"><b>第二</b>，我们需要的是修改service.cs中的代码，来满足我们的要求。</p><p style="text-indent: 2em">修改后的Service.cs中的代码为：</p><p>using System;<br />using System.Web;<br />using System.Web.Services;<br />using System.Web.Services.Protocols;</p><p>&nbsp;</p><p style="text-indent: 2em">[WebService(Namespace = &quot;<a href="http://127.0.0.1/">http://127.0.0.1/</a>&quot;)]&nbsp;&nbsp;&nbsp; //调用此web service的地址<br />[WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]<br />public class Service : System.Web.Services.WebService<br />{<br />&nbsp;&nbsp;&nbsp; public Service () {</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //如果使用设计的组件，请取消注释以下行 <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //InitializeComponent(); <br />&nbsp;&nbsp;&nbsp; }</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp; //[WebMethod]<br />&nbsp;&nbsp;&nbsp; //public string HelloWorld() {<br />&nbsp;&nbsp;&nbsp; //&nbsp;&nbsp;&nbsp; return &quot;Hello World&quot;;<br />&nbsp;&nbsp;&nbsp; //}</p><p style="text-indent: 2em"><br />&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;<br />&nbsp;&nbsp;&nbsp; /// 判断一个数是不是质数 by flysky 2008-04-25<br />&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;<br />&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;number&quot;&gt;要判断的数&lt;/param&gt;<br />&nbsp;&nbsp;&nbsp; /// &lt;returns&gt;返回结果&lt;/returns&gt;<br />&nbsp;&nbsp;&nbsp; [WebMethod(Description = &quot;判断一个数是不是质数&quot;)]&nbsp; //声明此函数为web service方法，可以供外 界调用<br />&nbsp;&nbsp;&nbsp; public string IsPrimeNumber(int number)<br />&nbsp;&nbsp;&nbsp; { <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 以下为算法，貌似不是最优的<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; string value = &quot;&quot;;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (number &lt;= 0)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; value = number.ToString() + &quot;is not prime number&quot;;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return value;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 2; i &lt; number / 2; i++)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (number % i == 0)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; value = number.ToString() + &quot;is not prime number&quot;;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return value;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; value = number.ToString() + &quot;is prime number&quot;;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return value;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br />&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp; <br />}</p><p style="text-indent: 2em"><b>第三</b>，你现在就可以直接运行了，效果如下。</p><p style="text-indent: 2em">&nbsp;<img onload="ResizeImage(this,520)" src="http://www.huangbowen.net/upload/web3.jpg" alt="" title=""/></p><p style="text-indent: 2em">你可以点击函数名，测试。</p><p style="text-indent: 2em">&nbsp;<img onload="ResizeImage(this,520)" src="http://www.huangbowen.net/upload/web4.jpg" alt="" title=""/></p><p style="text-indent: 2em">点击调用按钮后，以xml的形式显示结果。</p><p style="text-indent: 2em">&nbsp;<img onload="ResizeImage(this,520)" src="http://www.huangbowen.net/upload/web5.jpg" alt="" title=""/></p><p style="text-indent: 2em">至此，一个简单的web service程序就做好了。是不是很简单？呵呵，别急，下面将如何在web开发中调用web service。</p><p style="text-indent: 2em"><b>第一</b>，确认你要引用的web service服务当前是开启的。</p><p style="text-indent: 2em"><b>第二</b>，&nbsp;要在网站中添加对此web service的调用。我们新建一个网站，右键点击项目属性选择添加web引用，然后输入要引用的web service的url，点击确定即可。</p><p style="text-indent: 2em">&nbsp;<img onload="ResizeImage(this,520)" src="http://www.huangbowen.net/upload/web6.jpg" alt="" title=""/></p><p style="text-indent: 2em">这个时候系统会自动添加引进过来的文件。</p><p style="text-indent: 2em">&nbsp;<img onload="ResizeImage(this,520)" src="http://www.huangbowen.net/upload/web7.jpg" alt="" title=""/></p><p style="text-indent: 2em"><b>第三</b>，&nbsp;使用此web service。有一个页面show.aspx来让用户输入一个整数，我们通过调用web service来向用户反馈结果。</p><p>Show.aspx页面代码为：</p><p>&nbsp;</p><p>&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;true&quot; CodeFile=&quot;show.aspx.cs&quot; Inherits=&quot;show&quot; %&gt;</p><p>&nbsp;</p><p style="text-indent: 2em">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;<a href="http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">http://www.w3.org/TR/xhtml1/DTD/xhtml1- transitional.dtd</a>&quot;&gt;</p><p style="text-indent: 2em">&lt;html xmlns=&quot;<a href="http://www.w3.org/1999/xhtml">http://www.w3.org/1999/xhtml</a>&quot; &gt;<br />&lt;head runat=&quot;server&quot;&gt;<br />&nbsp;&nbsp;&nbsp; &lt;title&gt;无标题页&lt;/title&gt;<br />&lt;/head&gt;<br />&lt;body&gt;<br />&nbsp;&nbsp;&nbsp; &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;<br />&nbsp;&nbsp;&nbsp; &lt;div&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 请输入要判断的整数：&lt;asp:TextBox ID=&quot;TextBox1&quot; runat=&quot;server&quot; Width=&quot;98px&quot;&gt;&lt;/asp:TextBox&gt;&lt;br /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;asp:Button ID=&quot;Button1&quot; runat=&quot;server&quot; Text=&quot;确定 &quot; OnClick=&quot;Button1_Click&quot; /&gt; &lt;br /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;asp:Label ID=&quot;Label1&quot; runat=&quot;server&quot;&gt;&lt;/asp:Label&gt;&lt;/div&gt;<br />&nbsp;&nbsp;&nbsp; &lt;/form&gt;<br />&lt;/body&gt;<br />&lt;/html&gt;</p><p style="text-indent: 2em">Show.aspx.cs中页面代码为：</p><p>using System;<br />using System.Data;<br />using System.Configuration;<br />using System.Collections;<br />using System.Web;<br />using System.Web.Security;<br />using System.Web.UI;<br />using System.Web.UI.WebControls;<br />using System.Web.UI.WebControls.WebParts;<br />using System.Web.UI.HtmlControls;</p><p>&nbsp;</p><p style="text-indent: 2em">public partial class show : System.Web.UI.Page<br />{<br />&nbsp;&nbsp;&nbsp; protected void Page_Load(object sender, EventArgs e)<br />&nbsp;&nbsp;&nbsp; {</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp; protected void Button1_Click(object sender, EventArgs e)<br />&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int number = Convert.ToInt32(TextBox1.Text);&nbsp;&nbsp; //获取文本框的值，并转化 为int型<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WebReference.Service se = new WebReference.Service();&nbsp; //实例化要调用的 webservice对象<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Label1.Text = se.IsPrimeNumber(number);&nbsp;&nbsp; //调用webservice的函数，输出结 果<br />&nbsp;&nbsp;&nbsp; }<br />}</p><p style="text-indent: 2em">运行效果为：</p><p style="text-indent: 2em">&nbsp;<img onload="ResizeImage(this,520)" src="http://www.huangbowen.net/upload/web8.jpg" alt="" title=""/></p><p style="text-indent: 2em">怎么样？现在对web service已经有了一定的了解了吧！关于它的更深技术还要我们一起钻研啊。</p><p style="text-indent: 2em">另外附上参考文章：<a href="http://www.cnblogs.com/salonliudong/archive/2007/06/16/785604.html">http://www.cnblogs.com/salonliudong/archive/2007/06 /16/785604.html</a>，这里有更详细的说明。</p>
-----
KEYWORDS:
asp.net,
web service,
实例
-----
--------
TITLE: 用c#进行directX开发的一个简单例子
AUTHOR: flysky
STATUS: publish
ALLOW COMMENTS: 1
ALLOW PINGS: 1
CONVERT BREAKS: 1
PRIMARY CATEGORY: c#技术
DATE: 07/04/2008 08:45:08
-----
EXCERPT:
<p style="text-indent: 2em">你对3D游戏开发感兴趣而不知道如何入门？今天的这个例子就是在c#中使用directx进行3d开发的一个例子，保准你看了有收获。</p>
-----
BODY:
<p style="text-indent: 2em">这几天一直在研究c#下进行<b>directX</b>的<b>3D</b>开发，颇有些成绩。</p><p style="text-indent: 2em">先贴出一个小例子和大家分享，我做的是一个旋转的4棱锥。</p><p style="text-indent: 2em">如果有人对这方面感兴趣不知道如何学习的话，我建议看两个文档&lt;Managed DirectX 9图形和游戏编程简略中文文档&gt;，&lt;Managed DirectX 9 SDK 中文文档&gt;。</p><p style="text-indent: 2em">另外最好下载个DirectX SDK (August 2007).rar。里面有些范例还是非常好的。下载地址自己到网上找，很多的。</p><p style="text-indent: 2em">一，首先保证你机子上装了directx，没装的赶紧下载去装。</p><p style="text-indent: 2em">二，建立一个c#的windows应用程序，添加两个引用Microsoft.DirectX和Microsoft.DirectX.Direct3D;</p><p style="text-indent: 2em">三，form1.cs中代码为：</p><p>using System;<br />using System.Collections.Generic;<br />using System.ComponentModel;<br />using System.Data;<br />using System.Drawing;<br />using System.Text;<br />using System.Windows.Forms;<br />using Microsoft.DirectX;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //开发directx需要包含的两个命名空间<br />using Microsoft.DirectX.Direct3D;</p><p>&nbsp;</p><p style="text-indent: 2em">namespace Rectangle<br />{<br />&nbsp;&nbsp;&nbsp; public partial class form1 : Form<br />&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// 设备对象，场景中所有图形对象的父对象<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private Device device = null;&nbsp;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// 坐标系四棱锥顶点缓冲<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; VertexBuffer vertexBuffer = null;&nbsp;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// 此参数设置为必须，它定义了要创建的Direct3D设备的表示参数，如后台缓冲区的高度、宽度和像素格式、如何从后台缓冲区复制到前台缓存、以及屏幕显示的方式等等<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PresentParameters presentParameters = new PresentParameters();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// 暂停标志<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bool pause = false;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// 随机数，用来生成随机颜色用的<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Random rn = new Random();</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// 构造函数，设置窗体大小<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public form1()<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.ClientSize = new System.Drawing.Size(300, 300);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// 初始化绘图环境<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;returns&gt;&lt;/returns&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public bool InitializeGraphics()<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //设置屏幕显示模式为窗口模式<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; presentParameters.Windowed = true;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //设置如何从后台缓冲区复制到前台缓冲区(SwapEffect.Discard表示缓冲区在显示后立即被舍弃,这样可以节省开销)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; presentParameters.SwapEffect = SwapEffect.Discard;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //创建一个设备<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; device = new Device(0, DeviceType.Hardware, this, CreateFlags.SoftwareVertexProcessing, presentParameters);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //为设备释放订阅事件处理<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; device.DeviceReset += new System.EventHandler(this.OnResetDevice);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.OnCreateDevice(device, null);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.OnResetDevice(device, null);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pause = false;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return true;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; catch (DirectXException)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return false;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// 设备创建时建立顶点缓冲<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;sender&quot;&gt;&lt;/param&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;e&quot;&gt;&lt;/param&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void OnCreateDevice(object sender, EventArgs e)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Device dev = (Device)sender;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //创建顶点缓冲,有个顶点<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vertexBuffer = new VertexBuffer(typeof(CustomVertex.PositionColored), 18, dev, 0, CustomVertex.PositionColored.Format, Pool.Default);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //为创建顶点缓存订阅事件处理<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vertexBuffer.Created += new System.EventHandler(this.OnCreateVertexBuffer);</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.OnCreateVertexBuffer(vertexBuffer, null);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p style="text-indent: 2em"><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// 设备撤销的事件处理<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;sender&quot;&gt;&lt;/param&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;e&quot;&gt;&lt;/param&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void OnResetDevice(object sender, EventArgs e)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Device dev = (Device)sender;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //关闭剔除模式，使我们能看见此四棱锥的前面和后面<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dev.RenderState.CullMode = Cull.None;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 关闭场景里的灯光，显示顶点自己的颜色<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dev.RenderState.Lighting = false;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// 创建顶点缓存的事件处理<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;sender&quot;&gt;&lt;/param&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;e&quot;&gt;&lt;/param&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void OnCreateVertexBuffer(object sender, EventArgs e)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; VertexBuffer vb = (VertexBuffer)sender;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CustomVertex.PositionColored[] verts = (CustomVertex.PositionColored[])vb.Lock(0, 0);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //四棱锥原始的个点<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Vector3 vertex1 = new Vector3(25, 0, 0);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Vector3 vertex2 = new Vector3(0, 0, -25);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Vector3 vertex3 = new Vector3(-25, 0, 0);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Vector3 vertex4 = new Vector3(0, 0, 25);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Vector3 vertex5 = new Vector3(0, 25, 0);</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //四棱锥中包含个三角形，所以要构造个点来绘制<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; verts[0].Position = vertex1;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; verts[1].Position = vertex2;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; verts[2].Position = vertex5;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; verts[3].Position = vertex2;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; verts[4].Position = vertex3;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; verts[5].Position = vertex5;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; verts[6].Position = vertex3;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; verts[7].Position = vertex4;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; verts[8].Position = vertex5;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; verts[9].Position = vertex4;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; verts[10].Position = vertex1;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; verts[11].Position = vertex5;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; verts[12].Position = vertex2;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; verts[13].Position = vertex1;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; verts[14].Position = vertex3;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; verts[15].Position = vertex3;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; verts[16].Position = vertex1;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; verts[17].Position = vertex4;</p><p style="text-indent: 2em"><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //给每个点赋予随机颜色<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 0; i &lt; 18; i++)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; verts[i].Color = Color.FromArgb(SetColor(), SetColor(), SetColor()).ToArgb();</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vb.Unlock();</p><p style="text-indent: 2em">&nbsp;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// 返回到之间的一个随机数，用来生成随机颜色<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;returns&gt;&lt;/returns&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public int SetColor()<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int number = rn.Next(256);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return number;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p style="text-indent: 2em"><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// 设置摄像机的位置<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private void SetupCamera()<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //设置世界矩阵，根据系统运行时间而变化<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; device.Transform.World = Matrix.RotationAxis(new Vector3((float)Math.Cos(Environment.TickCount / 250.0f), 1, (float)Math.Sin(Environment.TickCount / 250.0f)), Environment.TickCount / 3000.0f);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //设置摄像机的位置，它在z轴上-50处，看着原点，y轴为正方向<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; device.Transform.View = Matrix.LookAtLH(new Vector3(0.0f, 0.0f, -50f), new Vector3(0.0f, 0.0f, 0.0f), new Vector3(0.0f, 1.0f, 0.0f));</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //设置摄像机的视界，角度为度，看的最近为,看的最远处为.不再这个视界中的影像都不会被显示<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; device.Transform.Projection = Matrix.PerspectiveFovLH(((float)(float)Math.PI / 2 ), 1.0f, 10.0f, 200.0f);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p style="text-indent: 2em"><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// 绘制图形<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void Render()<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (device == null)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (pause)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //背景设为绿色<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; device.Clear(ClearFlags.Target, System.Drawing.Color.Blue, 1.0f, 0);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //开始场景<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; device.BeginScene();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 设置世界，视野和投影矩阵<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SetupCamera();</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 给设备指定顶点缓存<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; device.SetStreamSource(0, vertexBuffer, 0);</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //设置设备的顶点格式<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; device.VertexFormat = CustomVertex.PositionColored.Format;</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //绘制图形，使用的方法为三角形列表，个数为个<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; device.DrawPrimitives(PrimitiveType.TriangleList, 0, 6);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //结束场景<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; device.EndScene();</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //更新场景<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; device.Present();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //重载OnPaint函数<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; protected override void OnPaint(System.Windows.Forms.PaintEventArgs e)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //绘制图形<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.Render(); <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp; }<br />}</p><p style="text-indent: 2em">四，program.cs中的代码为：</p><p>using System;<br />using System.Collections.Generic;<br />using System.Windows.Forms;</p><p>&nbsp;</p><p style="text-indent: 2em">namespace Rectangle<br />{<br />&nbsp;&nbsp;&nbsp; static class Program<br />&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// 应用程序的主入口点。<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [STAThread]<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; static void Main()<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; using (form1 frm = new form1())<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (!frm.InitializeGraphics()) // 初始化 Direct3D<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MessageBox.Show(&quot;不能初始化 Direct3D.程序将退出.&quot;);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; frm.Show();</p><p style="text-indent: 2em">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // While the form is still valid, render and process messages<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; while (frm.Created)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; frm.Render();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Application.DoEvents(); //处理当前在消息队列中的所有 Windows 消息<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp; }<br />}<br />&nbsp;</p><p style="text-indent: 2em">运行后你会看到一个不断旋转的四棱锥。</p><p>这就是最基本的directX 3D的例子了，想要源码的给我发邮件吧。</p><p>&nbsp;</p>
-----
KEYWORDS:
c#,
directX,
三维
-----
--------
TITLE: 用c#进行directx 3D编程：实现texture贴图的alpha通道
AUTHOR: flysky
STATUS: publish
ALLOW COMMENTS: 1
ALLOW PINGS: 1
CONVERT BREAKS: 1
PRIMARY CATEGORY: c#技术
DATE: 08/14/2008 09:26:30
-----
EXCERPT:
<p style="text-indent: 2em">好久没更新博客了，今天是一个用c#写的一个贴图实例，实现了图片的alpha通道，值得一看。</p>
-----
BODY:
<p style="text-indent: 2em">接触directX 3D已经有1个多月了。自己做的一个三维控件终于完成，不过还有些让人头痛的bug来修改.今天给大家写的是是现在3d里的texture贴图，并实现了其半透明效果。</p><p style="text-indent: 2em">在这个例子里，我绘制了一个矩形，贴上了一张带alpha通道的图片，并绘制了一个三角形，透过贴图可以看到此三角形。</p><p style="text-indent: 2em">例子的效果图如下:</p><p style="text-indent: 2em"><img onload="ResizeImage(this,520)" src="http://www.huangbowen.net/upload/texture.jpg" alt="" title=""/></p><p style="text-indent: 2em">用到的图片pic.bmp如下:</p><p style="text-indent: 2em"><img onload="ResizeImage(this,520)" src="http://www.huangbowen.net/upload/pic.bmp" alt="" title=""/></p><p style="text-indent: 2em">一，首先保证你机子上装了directx，没装的赶紧下载去装。</p><p style="text-indent: 2em">二，建立一个c#的windows应用程序，添加两个引用Microsoft.DirectX和Microsoft.DirectX.Direct3D;</p><p style="text-indent: 2em">三，form1.cs中代码为：</p><p>//--------------------------------------------------------<br />//&nbsp; Copyright (C), 2000-2008, 黄博文(flysky).<br />//&nbsp; Author: flysky&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Version: 1.0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Date: 2008-8-13 <br />//&nbsp; Description: 实现维里的texture贴图，并实现了贴图的aplpha通道<br />//&nbsp; Others:&nbsp; 主要绘制了一个矩形，并在此矩形上贴上一张半透明的图片，透过此贴图可以看到后面的三角形<br />//--------------------------------------------------------</p><p>&nbsp;</p><p>using System;<br />using System.Collections.Generic;<br />using System.ComponentModel;<br />using System.Data;<br />using System.Drawing;<br />using System.Text;<br />using System.Windows.Forms;<br />using Microsoft.DirectX;<br />using Microsoft.DirectX.Direct3D;<br />using System.IO;</p><p>namespace TextureTest<br />{<br />&nbsp;&nbsp;&nbsp; public partial class Form1 : Form<br />&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //绘图设备<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Device device = null;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //材质<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Microsoft.DirectX.Direct3D.Texture texture;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //要贴图的矩形框<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; VertexBuffer rectangleVertexBuffer = null;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //做映衬的三角形<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; VertexBuffer triangleVertexBuffer = null;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public Form1()<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; InitializeComponent();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// 初始化绘制by flysky<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;returns&gt;&lt;/returns&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public bool InitializeGraphics()<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Now let's setup our D3D stuff<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PresentParameters presentParams = new PresentParameters();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; presentParams.Windowed = true;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; presentParams.SwapEffect = SwapEffect.Discard;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; presentParams.EnableAutoDepthStencil = true;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; presentParams.AutoDepthStencilFormat = DepthFormat.D16;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; device = new Device(0, DeviceType.Hardware, this, CreateFlags.SoftwareVertexProcessing, presentParams);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; device.RenderState.ZBufferEnable = true;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; InitVertexBuffer();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; device.DeviceReset += new System.EventHandler(this.OnResetDevice);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; device.DeviceResizing += new CancelEventHandler(this.CancelResize);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.OnResetDevice(device, null);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return true;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; catch (DirectXException)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return false;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// 重置设备<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;sender&quot;&gt;&lt;/param&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;e&quot;&gt;&lt;/param&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void OnResetDevice(object sender, EventArgs e)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Device dev = (Device)sender;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dev.RenderState.CullMode = Cull.None;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //从文件中加载材质(大家可以选取其他的图片来比较效果，如果要实现半透明的话图片本身要是带alpha通道的)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; texture = TextureLoader.FromFile(dev, Application.StartupPath + @&quot;\pic.bmp&quot;);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// 尺寸大小改变<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;sender&quot;&gt;&lt;/param&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;e&quot;&gt;&lt;/param&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private void CancelResize(object sender, CancelEventArgs e)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; e.Cancel = true;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// 初始化顶点缓冲by flysky 2008-8-13<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private void InitVertexBuffer()<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //初始化要贴图的矩形框顶点数据<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rectangleVertexBuffer = new VertexBuffer(typeof(CustomVertex.PositionNormalTextured), 6, device, 0, CustomVertex.PositionNormalTextured.Format, Pool.Default);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //构造个点，以构成贴图的矩形表面<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CustomVertex.PositionNormalTextured[] verts = (CustomVertex.PositionNormalTextured[])rectangleVertexBuffer.Lock(0, 0);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //设置每个点的位置，法线，和Tu,Tv分量.Tu分量是贴图的宽度位置（将贴图的整个宽度看做为，Tu取值在和之间），Tv分量是选取贴图的高度位置（将贴图的整个高度看做为，Tv取值在和之间）<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; verts[0].Position = new Vector3(-20, -20, -20);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; verts[0].Normal = new Vector3(-20, -20, -21);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; verts[0].Tu = 0.0f;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; verts[0].Tv = 1.0f;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; verts[1].Position = new Vector3(-20, 20, -20);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; verts[1].Normal = new Vector3(-20, 20, -21);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; verts[1].Tu = 0.0f;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; verts[1].Tv = 0.0f;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; verts[2].Position = new Vector3(20, 20, -20);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; verts[2].Normal = new Vector3(20, 20, -21);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; verts[2].Tu = 1.0f;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; verts[2].Tv = 0.0f;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; verts[3].Position = new Vector3(20, -20, -20);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; verts[3].Normal = new Vector3(20, -20, -21);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; verts[3].Tu = 1.0f;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; verts[3].Tv = 1.0f;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; verts[4].Position = new Vector3(-20, -20, -20);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; verts[4].Normal = new Vector3(-20, -20, -21);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; verts[4].Tu = 0.0f;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; verts[4].Tv = 1.0f;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; verts[5].Position = new Vector3(20, 20, -20);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; verts[5].Normal = new Vector3(20, 20, -21);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; verts[5].Tu = 1.0f;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; verts[5].Tv = 0.0f;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rectangleVertexBuffer.Unlock();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //初始化做映衬的三角形的顶点数据<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; triangleVertexBuffer = new VertexBuffer(typeof(CustomVertex.PositionColored), 3, device, 0, CustomVertex.PositionColored.Format, Pool.Default);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CustomVertex.PositionColored[] vertxs = (CustomVertex.PositionColored[])triangleVertexBuffer.Lock(0, 0);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vertxs[0].Position = new Vector3(-10, -10, 0);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vertxs[1].Position = new Vector3(-10, 10, 0);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vertxs[2].Position = new Vector3(10, 10, 0);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 0; i &lt; 3; i++)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vertxs[i].Color = Color.Red.ToArgb();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; triangleVertexBuffer.Unlock();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void Render()<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (device == null)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; device.Clear(ClearFlags.Target | ClearFlags.ZBuffer, System.Drawing.Color.Blue, 1.0f, 0);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SetupCamera();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; device.BeginScene();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; device.RenderState.Lighting = false;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; device.SetStreamSource(0, triangleVertexBuffer, 0);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; device.VertexFormat = CustomVertex.PositionColored.Format;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; device.DrawPrimitives(PrimitiveType.TriangleList, 0, 1);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //开启设备的alpha通道,设置混合模式<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; device.RenderState.AlphaBlendEnable = true;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; device.RenderState.DestinationBlend = Blend.InvSourceAlpha;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //设置材质<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; device.SetTexture(0, texture);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //设置材质的属性<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; device.TextureState[0].ColorOperation = TextureOperation.Modulate;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; device.TextureState[0].ColorArgument1 = TextureArgument.TextureColor;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; device.TextureState[0].ColorArgument2 = TextureArgument.Diffuse;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //设置材质的alpha通道属性<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; device.TextureState[0].AlphaOperation = TextureOperation.Modulate;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; device.TextureState[0].AlphaArgument1 = TextureArgument.TextureColor;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; device.TextureState[0].AlphaArgument2 = TextureArgument.Diffuse;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; device.SetStreamSource(0, rectangleVertexBuffer, 0);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; device.VertexFormat = CustomVertex.PositionNormalTextured.Format;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; device.DrawPrimitives(PrimitiveType.TriangleList, 0, 2);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //将材质置空并关闭alpha通道<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; device.SetTexture(0, null);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; device.RenderState.AlphaBlendEnable = false;</p><p><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; device.EndScene();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; device.Present();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //重载绘制函数<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; protected override void OnPaint(System.Windows.Forms.PaintEventArgs e)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.Render(); // Render on painting<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// 设置摄像机的位置<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private void SetupCamera()<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //设置世界矩阵，根据系统运行时间而变化<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; device.Transform.World = Matrix.RotationX((float)Math.Sin(Environment.TickCount / 1000.0f));<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //设置摄像机的位置，它在z轴上-50处，看着原点，y轴为正方向<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; device.Transform.View = Matrix.LookAtLH(new Vector3(0.0f, 0.0f, -50f), new Vector3(0.0f, 0.0f, 0.0f), new Vector3(0.0f, 1.0f, 0.0f));</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //设置摄像机的视界，角度为度，看的最近为,看的最远处为.不再这个视界中的影像都不会被显示<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; device.Transform.Projection = Matrix.PerspectiveFovLH(((float)(float)Math.PI / 2), 1.0f, 10.0f, 200.0f);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp; }<br />}</p><p style="text-indent: 2em">四，program.cs中的代码为：</p><p>using System;<br />using System.Collections.Generic;<br />using System.Windows.Forms;</p><p>&nbsp;</p><p>namespace TextureTest<br />{<br />&nbsp;&nbsp;&nbsp; static class Program<br />&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// 应用程序的主入口点。<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [STAThread]<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; static void Main()<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; using (Form1 frm = new Form1())<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (!frm.InitializeGraphics()) // Initialize Direct3D<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MessageBox.Show(&quot;Could not initialize Direct3D.&nbsp; This tutorial will exit.&quot;);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; frm.Show();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // While the form is still valid, render and process messages<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; while (frm.Created)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; frm.Render();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Application.DoEvents(); //处理当前在消息队列中的所有 Windows 消息<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp; }<br />}</p><p style="text-indent: 2em">这个例子的参考价值还是很高的哦，大家要看仔细。</p><p style="text-indent: 2em">老规矩，转载的随你，注明出处和链接即可，想要源码的发邮件给我huangbowen521.126.com。</p>
-----
KEYWORDS:
c#,
directX,
三维,
texture,
alpha通道
-----
--------
TITLE: c#实现任意多边形分解为三角形算法
AUTHOR: flysky
STATUS: publish
ALLOW COMMENTS: 1
ALLOW PINGS: 1
CONVERT BREAKS: 1
PRIMARY CATEGORY: c#技术
DATE: 08/29/2008 12:18:44
-----
EXCERPT:
<p style="text-indent: 2em">将任意多边形分解为三角形的算法实现，我写成了一个类，很方便调用。</p>
-----
BODY:
<p style="text-indent: 2em">将<b>任意多边形</b>（无论凸凹）<b>分解</b>为三角形，算法有很多种，我这种比较简单，容易理解和实现。</p><p style="text-indent: 2em">原理：任意多边形必有一个角是凸角。</p><p style="text-indent: 2em">方法：先找到多边形的凸角，此点和相邻的2个点构成一个三角形，然后将此点删除 ，剩余的点又构成一个多边形。</p><p style="text-indent: 2em">继续执行此方法，就可以将多边形分解为三角形了。</p><p style="text-indent: 2em">寻找多边形凸点的方法可以采用面积法。</p><p style="text-indent: 2em">a,b,c三点为多边形上连续的三个点。</p><p style="text-indent: 2em">设S = (a.X - c.X) * (b.Y - c.Y) - (a.Y - c.Y) * (b.X - c.X);<br />当多边形顶点是按顺时针排列的时候，if S &lt; 0, 则b点是凸点.<br />当多边形顶点是按逆时针排列的时候，if S &gt; 0, 则b点是凸点.</p><p style="text-indent: 2em">下面是我写的一个类。</p><p>//--------------------------------------------------------<br />//&nbsp; Copyright (C), 2000-2008, 黄博文.<br />//&nbsp; File name: PolygonAnalyze.cs<br />//&nbsp; Author: flysky&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Version: 1.0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Date: 2008-8-17 <br />//&nbsp; Description: 任意多边形分解为三角形<br />//&nbsp; Others:&nbsp; 将一任意多边形（无论凸凹，但内部不能有空心）分解为三角形，多边形顶点顺序必须是 顺时针排列。<br />//--------------------------------------------------------</p><p>using System;<br />using System.Collections.Generic;<br />using System.Text;<br />using System.Collections;<br />using System.Drawing;</p><p>namespace PolygonAnalyze<br />{</p><p>&nbsp;&nbsp;&nbsp; /*---------------------------------------------------------<br />&nbsp;&nbsp;&nbsp;&nbsp; * 核心算法：<br />&nbsp;&nbsp;&nbsp;&nbsp; * 定理：任何一个多边形至少都有一个点是凸点。<br />&nbsp;&nbsp;&nbsp;&nbsp; * 1,找出多边形的一个凸点。<br />&nbsp;&nbsp;&nbsp;&nbsp; * 2，此凸点与相邻的两个点构成一个三角形。<br />&nbsp;&nbsp;&nbsp;&nbsp; * 3，将此凸点剔除，剩下的点又构成一个新的多边形。<br />&nbsp;&nbsp;&nbsp;&nbsp; * 4，回到步骤继续进行，直到多边形剩余的顶点数小于等于个为止。<br />&nbsp;&nbsp;&nbsp;&nbsp; * <br />&nbsp;&nbsp;&nbsp;&nbsp; * 寻找多边形凸点的方法是面积法：<br />&nbsp;&nbsp;&nbsp;&nbsp; *设a,b,c三点是多变形上连续的三个点。<br />&nbsp;&nbsp;&nbsp;&nbsp; * 1，首先判断a,b,c三点构成的两条线段是否垂直，如果垂直则排除它是凸点。<br />&nbsp;&nbsp;&nbsp;&nbsp; * 2，设S = (a.X - c.X) * (b.Y - c.Y) - (a.Y - c.Y) * (b.X - c.X);<br />&nbsp;&nbsp;&nbsp;&nbsp; * 当多边形顶点是按顺时针排列的时候，if S &lt; 0, b点是凸点.<br />&nbsp;&nbsp;&nbsp;&nbsp; * 当多边形顶点是按逆时针排列的时候，if S &gt; 0, b点是凸点.<br />&nbsp;&nbsp;&nbsp;&nbsp; *--------------------------------------------------------*/</p><p>&nbsp;&nbsp;&nbsp; class PolygonAnalyze<br />&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public PolygonAnalyze()<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; polygonPoint = new ArrayList();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public PolygonAnalyze(ArrayList points)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; polygonPoint = points;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public PolygonAnalyze(Point[] pointList)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; polygonPoint = new ArrayList ();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 0; i &lt; pointList.Length; i++)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; polygonPoint.Add(pointList[i]);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// 存储多边形点集的动态数组<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private ArrayList polygonPoint;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public ArrayList PolygonPoint<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return polygonPoint; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set { polygonPoint = value; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// 判断b点是否是凸点(多边形点集要以顺时针排列)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;a&quot;&gt;b点的前一个点 &lt;/param&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;b&quot;&gt;b点&lt;/param&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;c&quot;&gt;b点的后一个点 &lt;/param&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;returns&gt;&lt;/returns&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private bool IsBulge(Point a, Point b, Point c)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //判断a,b,c三点组成的线段是否垂直 ，如果垂直返回false<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (c.X - b.X == 0 &amp;&amp; b.Y - a.Y == 0)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return false;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else if (c.Y - b.Y == 0 &amp;&amp; b.X - a.X == 0)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return false;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else if (c.X - b.X != 0 &amp;&amp; b.X - a.X != 0 &amp;&amp; ((c.Y - b.Y) / (c.X - b.X) * (b.Y - a.Y) / (b.X - a.X)) == -1)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return false;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //用面积法判断b点是否是凸点。（ 注意多边形顶点的顺序应是顺时针排列，如果是逆时针排列，返回值刚好相反）<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int S = (a.X - c.X) * (b.Y - c.Y) - (a.Y - c.Y) * (b.X - c.X);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (S &lt; 0)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return true;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return false;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// 执行分解算法，返回三角形顶点数组<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;returns&gt;&lt;/returns&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public ArrayList ExcectAnalyze()<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ArrayList trianglePoints = new ArrayList();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; while (polygonPoint.Count &gt; 3)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 0; i &lt; polygonPoint.Count &amp;&amp; polygonPoint.Count &gt; 3; i++)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ;&nbsp;&nbsp; if (i &lt; polygonPoint.Count - 2)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (IsBulge((Point)polygonPoint[i], (Point)polygonPoint[i + 1], (Point)polygonPoint[i + 2]))<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; trianglePoints.Add((Point)polygonPoint [i]);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; trianglePoints.Add((Point)polygonPoint [i + 1]);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; trianglePoints.Add((Point)polygonPoint [i + 2]);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;n bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; polygonPoint.RemoveAt(i + 1);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ;&nbsp;&nbsp; else if (i == polygonPoint.Count - 2)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (IsBulge((Point)polygonPoint[i], (Point)polygonPoint[i + 1], (Point)polygonPoint[0]))<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; trianglePoints.Add((Point)polygonPoint [i]);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; trianglePoints.Add((Point)polygonPoint [i + 1]);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; trianglePoints.Add((Point)polygonPoint [0]);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;n bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; polygonPoint.RemoveAt(i + 1);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ;&nbsp;&nbsp; else if (i == polygonPoint.Count - 1)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (IsBulge((Point)polygonPoint[i], (Point)polygonPoint[0], (Point)polygonPoint[1]))<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; trianglePoints.Add((Point)polygonPoint [i]);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; trianglePoints.Add((Point)polygonPoint [0]);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; trianglePoints.Add((Point)polygonPoint [1]);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;n bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; polygonPoint.RemoveAt(0);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //将剩余的顶点加入数组<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 0; i &lt; polygonPoint.Count; i++)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; trianglePoints.Add((Point)polygonPoint[i]);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return trianglePoints;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp; <br />&nbsp;&nbsp; <br />}</p><p><br />&nbsp;</p><p style="text-indent: 2em">调用很简单：</p><p style="text-indent: 2em">假设pointlist是多边形按顺时针排列的顶点数组，</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PolygonAnalyze polygon = new PolygonAnalyze(pointlist);</p><p>&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ArrayList ary = polygon.ExcectAnalyze();<br />&nbsp;</p><p style="text-indent: 2em">这个ary就是分解后的三角形的顶点列表。</p>
-----
KEYWORDS:
c#,
算法
-----
--------
TITLE: oracle数据迁移到sql server终极解决方案
AUTHOR: flysky
STATUS: publish
ALLOW COMMENTS: 1
ALLOW PINGS: 1
CONVERT BREAKS: 1
PRIMARY CATEGORY: WEB技术
DATE: 12/12/2008 16:42:13
-----
EXCERPT:
<p style="text-indent:2em;">oracle中数据迁移到sql server中，我想出了一个解决方案，可以处理大多数的情况。</p>
-----
BODY:
<p style="text-indent: 2em">N年没有更新我的博客了，这几个月工作太忙了（忙难道连写个文章的时间都没有？还不是懒啊）。别把话题扯远了，我今天来讲下oracle<b>数据迁移</b>到sql server的<b>解决方案</b>。</p><p style="text-indent: 2em">前段时间做了个项目，由于这个项目以前有个版本，做好了就牵扯到把以前数据库中的数据导入到新数据库中。别小看了这个数据迁移，难点很多 啊。</p><p style="text-indent: 2em">1，&nbsp;数据库系统不同，旧系统用的是oracle数据库，新系统采用的是sql server2005.</p><p style="text-indent: 2em">2，&nbsp;新旧数据库表结构不同。新系统的数据库是经过全新设计的，与以前的大为不同。</p><p style="text-indent: 2em">3，&nbsp;牵扯的数据库量比较大，单表数据量在百万级。</p><p style="text-indent: 2em">4，&nbsp;旧系统数据库中存在大量脏数据，迁移过来的时候要进行清理。</p><p style="text-indent: 2em">这个难度可不小哦，加上我对oracle数据库使用不熟练，真是头都大了。好在我胆大心细，推理周密，死缠烂打，一条道走到黑&hellip;&hellip; 最后还是把问题给搞定了，特总结经验如下。</p><p style="text-indent: 2em">如果你要进行迁移的两个数据库表结构基本一致，或者大体一致，可以使用一些专门做导入导出的软件进行解决，否则就要麻烦一些。</p><p style="text-indent: 2em">1，&nbsp;将oracle数据库中所有表的数据导入到文本文件中。这个比较容易，因为有现成的工具嘛。我使用的是toad for oracle9.1,那个大青蛙 。里面有个选项可以将整张表的数据导入到文本文件中，列之间用逗号分隔（这个时候就要注意了，如果表中某些字段数据本来就含有逗号，请将它先替换成其他标志再行导出， 切记）.</p><p style="text-indent: 2em">2，&nbsp;在sql server 里面创建一个新的空数据库，使用sql server强大的导入功能将文本文件中的数据导入到此数据库中。注意导入的时候sql server会自动为你创建数据库表的，你只需要设置好就行。（如果之前将逗号特换成其他符号的现在再在sql server里给替换回来。）</p><p style="text-indent: 2em">3，&nbsp;这样的话你就得到了一个数据库，里面的表结构和数据和旧系统数据库的一模一样。规范此数据库中的数据，尽量去掉脏数据或者新系统 数据库中永不倒的数据。</p><p style="text-indent: 2em">4，&nbsp;分析数据库中表结构及其数据，在查询分析器或者程序里面写sql.提取出需要的数据导入到新数据库中。</p><p style="text-indent: 2em">这样4步就解决问题了，当然在操作工程中肯定会遇到各种意外，但是大的方向把握住就行。</p><p style="text-indent: 2em">写的比较简单，具体细节也懒得写，大家有什么疑问可以发我邮件。</p>
-----
KEYWORDS:
数据库,
迁移
-----
--------
TITLE: C#实现生成凸壳算法
AUTHOR: flysky
STATUS: publish
ALLOW COMMENTS: 1
ALLOW PINGS: 1
CONVERT BREAKS: 1
PRIMARY CATEGORY: c#技术
DATE: 03/12/2009 21:02:38
-----
EXCERPT:
<p style="text-indent: 2em">一个对于任意离散点生成凸壳的算法，算法采用递归实现，程序简单易懂。</p>
-----
BODY:
<p style="text-indent: 2em">好久没写日志了，前段时间过的挺紧张的，我也马上就要大学毕业了，享受下大学最后的时光。</p><p style="text-indent: 2em">今天讲一下生成凸壳的算法。我采用的是Larkin改进和完善了的凸壳生成算法。具体原理是：具有x坐标，y坐标最大值活最小值的点必然是凸壳中点。我们把这四个点按逆时针方向连接形成初始凸壳，然后用递归函数Convex(I,J)完成整个凸壳。I，J是初始凸壳上的相邻点。Convex（I，J）找出凸壳上I，J间的另一个点K。K是位于线段IJ右侧且与IJ距离最大的点，或当IJ右侧无点，但IJ上有点，且位于I，J之间的点。</p><p>Begion<br />&nbsp;</p><p style="text-indent: 2em">首先，找出数据集中具有x，y的最大值和最小值的点，按逆时针相连形成初始凸壳L。</p><p>Repeat<br />Convex(I,J)&nbsp; I，J是L上相邻两点<br />Until L上的点全被处理<br />End</p><p>&nbsp;</p><p style="text-indent: 2em">函数 Convex(I,J)</p><p>Begion<br />&nbsp;找到位于线段IJ右侧且与IJ距离d最大的点K。 //k位于IJ右侧，d为正。位于IJ右侧，d为负。<br />If d &gt; 0<br />将k插入I，J之间；<br />Convex（I,K）;<br />Convex(K,J);<br />Else<br />If d == 0<br />If&nbsp; k位于I，J之间<br />将k插入I，J之间；<br />Convex（I,K）;<br />Convex(K,J);<br />Else<br />Return;<br />Else<br />Return;<br />end<br />&nbsp;</p><p style="text-indent: 2em">下面是我用c#实现的源代码。</p><p>/*FileName: ConvexHull.cs<br />&nbsp;* Author: flysky version:1.0 date:2009-2-2<br />&nbsp;* Description:生成凸壳，采用算法是larkin改进和完善了的凸壳生成算法<br />&nbsp;* 传入参数是一系列离散的点<br />&nbsp;* Others:此算法参考文献：《基于Delaunay三角网的区域等值线绘制关键算法》<br />&nbsp;*/</p><p>&nbsp;</p><p>using System;<br />using System.Collections.Generic;<br />using System.Text;<br />using System.Drawing;</p><p>namespace ConvexHull<br />{<br />&nbsp;&nbsp; public&nbsp; class ConvexHull<br />&nbsp;&nbsp; {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #region 变量及属性</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// 原始点列<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private List&lt;PointF&gt; points;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public List&lt;PointF&gt; Points<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; points = value;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// 最终的凸壳点列<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private List&lt;PointF&gt; hullPoints;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public List&lt;PointF&gt; HullPoints<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return hullPoints;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// 初始凸壳点列<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private List&lt;PointF&gt; initHulls;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ///经过处理的点结构<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct VecPoint<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// 点坐标<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PointF point;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// 是否被使用<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bool isUsed;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// 点索引<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int index;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public PointF Point<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return point; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set { point = value; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public bool IsUsed<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return isUsed; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set { isUsed = value; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public int Index<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return index; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set { index = value; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// 经过处理的点列<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private List&lt;VecPoint&gt; vecPoints;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #endregion</p><p><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #region 私有方法<br />&nbsp;&nbsp;&nbsp; <br />&nbsp;&nbsp; <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// 生成初始凸壳，将x坐标最大最小和y坐标最大最小的点作为初始凸壳<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private void GetInitHull()<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vecPoints = new List&lt;VecPoint&gt;();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 0; i &lt; points.Count; i++)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; VecPoint vecPoint = new VecPoint();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vecPoint.Index = i;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vecPoint.IsUsed = false;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vecPoint.Point = points[i];<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vecPoints.Add(vecPoint);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; float minX;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; float minY;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; float maxX;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; float maxY;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int minXIndex = 0;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int maxXIndex = 0;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int minYIndex = 0;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int maxYIndex = 0;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; minX = vecPoints[0].Point.X;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; maxX = minX;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; minY = vecPoints[0].Point.Y;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; maxY = minY;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //找到x最大最小点，和y最大最小点<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 1; i &lt; vecPoints.Count; i++)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (minX &gt; vecPoints[i].Point.X)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; minX = vecPoints[i].Point.X;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; minXIndex = i;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (maxX &lt; vecPoints[i].Point.X)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; maxX = vecPoints[i].Point.X;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; maxXIndex = i;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (minY &gt; vecPoints[i].Point.Y)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; minY = vecPoints[i].Point.Y;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; minYIndex = i;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (maxY &lt; vecPoints[i].Point.Y)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; maxY = vecPoints[i].Point.Y;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; maxYIndex = i;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hullPoints = new List&lt;PointF&gt;();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //将这几个点以逆时针的顺序加入到凸壳点列中<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (vecPoints[minXIndex].IsUsed == false)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; VecPoint vecPoint = vecPoints[minXIndex];<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hullPoints.Add(vecPoint.Point);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vecPoint.IsUsed = true;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vecPoints[minXIndex] = vecPoint;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (vecPoints[minYIndex].IsUsed == false)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; VecPoint vecPoint = vecPoints[minYIndex];<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hullPoints.Add(vecPoint.Point);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vecPoint.IsUsed = true;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vecPoints[minYIndex] = vecPoint;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (vecPoints[maxXIndex].IsUsed == false)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; VecPoint vecPoint = vecPoints[maxXIndex];<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hullPoints.Add(vecPoint.Point);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vecPoint.IsUsed = true;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vecPoints[maxXIndex] = vecPoint;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (vecPoints[maxYIndex].IsUsed == false)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; VecPoint vecPoint = vecPoints[maxYIndex];<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hullPoints.Add(vecPoint.Point);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vecPoint.IsUsed = true;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vecPoints[maxYIndex] = vecPoint;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; initHulls = new List&lt;PointF&gt;();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 0; i &lt; hullPoints.Count; i++)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; initHulls.Add(hullPoints[i]);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// 寻找两个点之间的凸点，采用递归算法<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;point1&quot;&gt;&lt;/param&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;point2&quot;&gt;&lt;/param&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private void Convex(PointF point1, PointF point2)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; float distance = -1;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int currentIndex = -1;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 0; i &lt; vecPoints.Count; i++)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; VecPoint vecPoint = vecPoints[i];</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (vecPoint.IsUsed)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; continue;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int position = Position(point1, point2, vecPoint.Point);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (position == -1)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {//在线的左侧，继续搜索<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; continue;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else if (position == 0)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {//在线段上，则记下与线的距离<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (distance == -1)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; distance = 0;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; currentIndex = i;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else if (position == 2)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {//在线段延长线上，继续搜索<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; continue;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {//在线的右侧，记录下与线段距离最远的那个点<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; float dis = Distance(point1, point2, vecPoint.Point);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (distance &lt; dis)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; distance = dis;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; currentIndex = i;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (distance == -1)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int index = 0;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 0; i &lt; hullPoints.Count; i++)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (point2.Equals(hullPoints[i]))<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; index = i;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hullPoints.Insert(index, vecPoints[currentIndex].Point);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; VecPoint vecPoint = vecPoints[currentIndex];<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vecPoint.IsUsed = true;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vecPoints[currentIndex] = vecPoint;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Convex(point1, vecPoints[currentIndex].Point);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Convex(vecPoints[currentIndex].Point, point2);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// 点c与 点a,b组成的线段的位置关系<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// 采用的算法为面积法。1表示在其右侧，-1表示在其左侧，0表示在线段上，2表示在线段的延长线上<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;a&quot;&gt;&lt;/param&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;b&quot;&gt;&lt;/param&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;c&quot;&gt;&lt;/param&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;returns&gt;&lt;/returns&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private int Position(PointF a, PointF b, PointF c)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; float S = (c.X - a.X) * (b.Y - a.Y) - (b.X - a.X) * (c.Y - a.Y);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (S == 0)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (c.X &gt;= Math.Min(a.X, b.X) &amp;&amp; c.X &lt;= Math.Max(a.X, b.X) &amp;&amp; c.Y &gt;= Math.Min(a.Y, b.Y) &amp;&amp; c.Y &lt;= Math.Max(a.Y, b.Y))<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return 0;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return 2;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else if (S &gt; 0)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return 1;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return -1;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// 点c 与 点a,b组成的直线的距离<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;a&quot;&gt;&lt;/param&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;b&quot;&gt;&lt;/param&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;c&quot;&gt;&lt;/param&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;returns&gt;&lt;/returns&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private float Distance(PointF a, PointF b, PointF c)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; float top = (b.Y - a.Y) * c.X + (a.X - b.X) * c.Y + a.Y * (b.X - a.X) - (b.Y - a.Y)*a.X;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; float bottom = (float)Math.Sqrt((double)((b.Y - a.Y) * (b.Y - a.Y) + (b.X - a.X) * (b.X - a.X)));<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return Math.Abs(top) / bottom;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #endregion</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #region 公有方法</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public ConvexHull() { }</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public ConvexHull(List&lt;PointF&gt; pointList)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; points = pointList;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// 生成凸壳<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void GetConvexHull()<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GetInitHull();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 0; i &lt; initHulls.Count - 1; i++)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Convex(initHulls[i], initHulls[i + 1]);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (initHulls.Count &gt;= 2)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Convex(initHulls[initHulls.Count - 1], initHulls[0]);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #endregion<br />&nbsp;&nbsp; }<br />}</p><p style="text-indent: 2em">发邮件至<a href="mailto:huangbowen521@126.com">huangbowen521@126.com</a>获取源码。</p>
-----
KEYWORDS:
凸壳,
算法
-----
--------
TITLE: 关于，线关系的一些算法
AUTHOR: flysky
STATUS: publish
ALLOW COMMENTS: 1
ALLOW PINGS: 1
CONVERT BREAKS: 1
PRIMARY CATEGORY: c#技术
DATE: 04/22/2009 20:15:50
-----
EXCERPT:
<p style="text-indent: 2em">关于点和线关系的一些算法，都比较简单。</p>
-----
BODY:
<p style="text-indent: 2em">总结了一些有关点，线方面的算法。其中倒数第一个和倒数第二个比较有意思。</p><p style="text-indent: 2em">倒数第二个是参考一个论文里面的，可惜现在那篇论文找不到了。倒数第一个是我的经理参考《计算机图形学》里面实现的，具体原理我还没有去深究。</p><p>/*FileName: Maths.cs<br />&nbsp;* Author: flysky version:1.0 date:2009-4-21<br />&nbsp;* Description:点，线之间关系的一些算法<br />&nbsp;*/</p><p>using System;<br />using System.Collections.Generic;<br />using System.Text;<br />using System.Drawing;</p><p>namespace Arithmetic<br />{<br />&nbsp;&nbsp;&nbsp; public static class Maths<br />&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// 浮点数比较的精度<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private const float PAN = 0.0001f;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// 两点之间的距离<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;a&quot;&gt;&lt;/param&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;b&quot;&gt;&lt;/param&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;returns&gt;&lt;/returns&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static float TwoPointDistance(Point a, Point b)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; float distance = (a.X - b.X) * (a.X - b.X) + (a.Y - b.Y) * (a.Y - b.Y);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return (float)Math.Sqrt(distance);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// 点c与a，b组成的线段的位置关系，1表示在其右侧，0表示在线段上， -1，表示在左侧，2表示在线段的延长线上，采用算法面积法<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;a&quot;&gt;&lt;/param&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;b&quot;&gt;&lt;/param&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;c&quot;&gt;&lt;/param&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;returns&gt;&lt;/returns&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static int Position(Point a, Point b, Point c)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; float s = (c.X - a.X) * (b.Y - a.Y) - (b.X - a.X) * (c.Y - a.Y);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (s == 0)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (c.X &gt;= Math.Min(a.X, b.X) &amp;&amp; c.X &lt;= Math.Max(a.X, b.X) &amp;&amp; c.Y &gt;= Math.Min(a.Y, b.Y) &amp;&amp; c.Y &lt;= Math.Max(a.Y, b.Y))<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp; nbsp; return 0;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp; nbsp; return 2;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else if (s &gt; 0)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return 1;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return -1;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// 点c到点a，b组成的直线的距离<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;a&quot;&gt;&lt;/param&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;b&quot;&gt;&lt;/param&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;c&quot;&gt;&lt;/param&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;returns&gt;&lt;/returns&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static float PointToLineDistance(Point a, Point b,Point c) <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; float top = (b.Y - a.Y) * c.X + (a.X - b.X) * c.Y + a.Y * (b.X - a.X) - (b.Y - a.Y) * a.X;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; float bottom = (float)Math.Sqrt((double) ((b.Y - a.Y) * (b.Y - a.Y) + (b.X - a.X) * (b.X - a.X)));</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return Math.Abs(top) / bottom;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// 某点是否在某多边形内<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;point&quot;&gt;点&lt;/param&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;pointList&quot;&gt;多边形的点列表 &lt;/param&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;returns&gt;&lt;/returns&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static bool CutNum(PointF point, List&lt;PointF&gt; pointList)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; List&lt;PointF&gt; points = pointList;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (points.Count &gt; 0)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; points.Add(points [0]);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return 0;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int count = 0;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 0; i &lt; points.Count - 1; i++)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bool flag1 = false;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bool flag2 = false;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bool flag3 = false;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (Math.Max (points[i].X, points[i + 1].X) &gt;= point.X)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; flag1 = true;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (points[i].Y != point.Y)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (point.Y &gt; Math.Min(points[i].Y, points[i + 1].Y) &amp;&amp; point.Y &lt; Math.Max(points[i].Y, points[i + 1].Y))<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; flag2 = true;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; continue;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PointF prePoint;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i == 0)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; prePoint = points[points.Count - 2];<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; prePoint = points[i - 1];<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (point.Y &gt; Math.Min(prePoint.Y, points[i + 1].Y) &amp;&amp; point.Y &lt; Math.Max(prePoint.Y, points[i + 1].Y))<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; flag2 = true;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; continue;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (points[i + 1].Y != points[i].Y)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (point.X &lt; (points[i].X + ((points[i + 1].X - points[i].X) * (point.Y - points[i].Y) / (points[i + 1].Y - points[i].Y))))<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; flag3 = true;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; continue;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else if (points [i].Y == point.Y)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count = count + 1;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (flag1 &amp;&amp; flag2 &amp;&amp; flag3)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count = count + 1;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (count % 2 == 0)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return false;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return true;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// 判断两条线段是否有交点<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;p11&quot;&gt;&lt;/param&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;p12&quot;&gt;&lt;/param&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;p21&quot;&gt;&lt;/param&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;p22&quot;&gt;&lt;/param&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;outPoint&quot;&gt;&lt;/param&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;returns&gt;&lt;/returns&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static bool GetIntersect(PointF p11, PointF p12, PointF p21, PointF p22, out PointF outPoint)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; float bx = p12.X - p11.X;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; float by = p12.Y - p11.Y;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; float bXNormal = -by;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; float byNormale = bx;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; float cx = p21.X - p11.X;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; float cy = p21.Y - p11.Y;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; float dxNormal = p21.Y - p22.Y;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; float dyNormal = p22.X - p21.X;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; float dNormalB = dxNormal * bx + dyNormal * by;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (dNormalB != 0)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; float t = (dxNormal * cx + dyNormal * cy) / dNormalB;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (t &gt;= 0 &amp;&amp; t &lt;= 1)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; float u = (bXNormal * cx + byNormale * cy) / dNormalB;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (u &gt;= 0 &amp;&amp; u &lt;= 1)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; float x = p11.X + t * bx;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; float y = p11.Y + t * by;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; outPoint = new PointF(x, y);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return true;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; outPoint = PointF.Empty;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return false;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp; }<br />}</p>
-----
KEYWORDS:
算法
-----
--------
TITLE: 2011，奋起
AUTHOR: flysky
STATUS: publish
ALLOW COMMENTS: 1
ALLOW PINGS: 1
CONVERT BREAKS: 1
PRIMARY CATEGORY: 个人日记
DATE: 01/04/2011 19:17:22
-----
EXCERPT:
<p style="text-indent: 2em">2010,过去了，2011，继续前进。</p>
-----
BODY:
<p style="text-indent: 2em">1年大半了，博客都没有更新，不好意思。虽然我的博客流量不大，但是还好有人看，时不时的有人评价。</p><p style="text-indent: 2em">今天突然想起我的博客，登进去看了看，发现雅虎统计已经不存在了，改名叫量子恒道了，我只好重新注册个量子恒道的号加到网站上。</p><p style="text-indent: 2em">转眼间，毕业已经1年半了，在这一年半成长很多，不光是技术上。博客没有更新是我的错，2010年有些时间都无意义的过了，2011年希望都能好好的给利用起来。</p><p style="text-indent: 2em">鉴于很多读者都是求源码的，我以后发文章会直接上传源码.当然大些的源码是不行，毕竟服务器比较差劲，空间也有限制。</p><p style="text-indent: 2em">2011，一起共勉吧。</p>
-----
KEYWORDS:
2011,
奋起
-----
--------
TITLE: C#抓取网页指定表格数据实例(附源码)
AUTHOR: flysky
STATUS: publish
ALLOW COMMENTS: 1
ALLOW PINGS: 1
CONVERT BREAKS: 1
PRIMARY CATEGORY: WEB技术
DATE: 01/26/2011 20:54:20
-----
EXCERPT:
<p style='text-indent:2em;'>自己做的一个使用c#抓取雅虎财经股票历史记录的一个小程序，很简单，希望大家能举一反三。</p>
-----
BODY:
<p style="text-indent: 2em">前几天老总问我能实现一个功能不，就是将雅虎股票中的某只股票历史交易信息全部抓取下来并保存到本地数据库中。例如中国银行的历史交易记录，具体页面为：<a href="http://finance.cn.yahoo.com/mark/history.php?code=sh601988&amp;type=history">http://finance.cn.yahoo.com/mark/history.php?code=sh601988&amp;type=history</a>。需要抓取的信息如下图所示：</p><p style="text-indent: 2em">&nbsp;<img alt="" src="http://www.huangbowen.net/upload/d.jpg" /></p><p style="text-indent: 2em">我花了些功夫，做了个小东西，基本实现了这个功能。现在讲讲是实现的过程。</p><p style="text-indent: 2em">一，&nbsp;这个表格数据的产生先要选择起始和结束时间，查询类型，然后点击搜索按钮。如果要实现抓取的话需要先设定这些参数，模拟按钮点击实现。我用了一下发现这个表格块是采用了ajax技术实现了局部刷新。当我点击搜索按钮时，IE8浏览器左下角显示了一个url地址，地址后缀是用户选择的止日期等参数。那程序模拟按钮点击太容易了，只要获取这个url地址，将后缀中的参数换成用户需要的参数就行。这个url地址的完整路径怎么看到那?我是通过IE8 的浏览历史得到的，其地址是：<a href="http://finance.cn.yahoo.com/mark/agents/yahoo/historyDetails.php?start_year=2011&amp;start_month=1&amp;start_day=1&amp;end_year=2011&amp;end_month=1&amp;end_day=26&amp;his_type=day&amp;code=sh601988&amp;page=1">http://finance.cn.yahoo.com/mark/agents/yahoo/historyDetails.php?start_year=2011&amp;start_month=1&amp;start_day=1&amp;end_year=2011&amp;end_month=1&amp;end_day=26&amp;his_type=day&amp;code=sh601988&amp;page=1</a>。通过这个可以看到，起始时间，结束时间，查询类型，股票代码，当前页码等参数都在其中，我们只需要改变这些参数即可获取想要的信息。</p><p style="text-indent: 2em">二，&nbsp;使用WebRequest和WebResponse对象获取指定Url返回的html信息。这个简单，就几句话，代码如下：<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WebRequest request = WebRequest.Create(url);&nbsp; //请求url<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WebResponse response = request.GetResponse(); //获取url数据<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; StreamReader reader = new StreamReader(response.GetResponseStream(), Encoding.GetEncoding(&quot;utf-8&quot;));&nbsp; //将此url返回的html数据写到数据流中<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tb.Text = reader.ReadToEnd(); //将数据写入到textbox中</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; reader.Close();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; reader.Dispose();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; response.Close();</p><p style="text-indent: 2em">三，&nbsp;现在已经获取了返回的html代码，接下来就是要解析此html代码，将我们需要的数据提取出来。这就要靠强大的正则表达式来帮忙了。如果不用正则表达式的话需要几十上百行的代码，但是正则表达式用的好的话可能只用得到3,5行。<br />我们仔细观察了下返回的html代码。</p><p style="text-indent: 2em">&nbsp;<img alt="" src="http://www.huangbowen.net/upload/3.jpg" /></p><p style="text-indent: 2em">其中用红线框住的部分是我们需要提取的数据表格。仔细观察了这些html代码，发现这个表格还比较规整，通过正则表达式可以一次性的提取出一行数据出来。</p><p style="text-indent: 2em">该正则表达式为： string strRegex = @&quot;&lt;tr[^&lt;]*&lt;td&gt;(?&lt;value1&gt;.*?)&lt;/td&gt;[^&lt;]*&lt;td&gt;(?&lt;value2&gt;.*?)&lt;/td&gt;[^&lt;]*&lt;td&gt;(?&lt;value3&gt;.*?)&lt;/td&gt;[^&lt;]*&lt;td&gt;(?&lt;value4&gt;.*?)&lt;/td&gt;[^&lt;]*&lt;td&gt;(?&lt;value5&gt;.*?)&lt;/td&gt;[^&lt;]*&lt;td&gt;(?&lt;value6&gt;.*?)&lt;/td&gt;[^&lt;]*&lt;td&gt;(?&lt;value7&gt;.*?)&lt;/td&gt;[^&lt;]*&lt;/tr&gt;&quot;;&nbsp;&nbsp; //构造解析表格数据的正则表达式<br />[^&lt;]*：除&lt;以外的任意字符。</p><p>(?&lt;value1&gt;.*?)：将这部分匹配的数据填充到结果的名称为value1的列中。<br />使用MatchCollection对象对html源码应用该正则匹配。<br />Regex regex = new Regex(strRegex);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MatchCollection mc = regex.Matches(tb.Text);&nbsp; //执行匹配<br />&nbsp;</p><p style="text-indent: 2em">四，&nbsp;接下来就是处理匹配出的数据了，我是将其填充到了一个gridview中。代码如下：</p><p>foreach (Match m in mc)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (first)&nbsp; //由于第一行是表格的抬头，所以直接跳过<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; first = false;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; continue;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //将解析出的数据填充到gridview的行中<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; resultGridView.Rows.Add();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; resultGridView.Rows[resultGridView.Rows.Count - 1].Cells[0].Value = m.Groups[&quot;value1&quot;].Value;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; resultGridView.Rows[resultGridView.Rows.Count - 1].Cells[1].Value = m.Groups[&quot;value2&quot;].Value;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; resultGridView.Rows[resultGridView.Rows.Count - 1].Cells[2].Value = m.Groups[&quot;value3&quot;].Value;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; resultGridView.Rows[resultGridView.Rows.Count - 1].Cells[3].Value = m.Groups[&quot;value4&quot;].Value;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; resultGridView.Rows[resultGridView.Rows.Count - 1].Cells[4].Value = m.Groups[&quot;value5&quot;].Value;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; resultGridView.Rows[resultGridView.Rows.Count - 1].Cells[5].Value = m.Groups[&quot;value6&quot;].Value;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; resultGridView.Rows[resultGridView.Rows.Count - 1].Cells[6].Value = m.Groups[&quot;value7&quot;].Value;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;</p><p style="text-indent: 2em">五，&nbsp;应对分页。有些参数查询出来的结果不止一页，如果是多页的话一次查询只会返回一页的数据（这个是在服务器端进行了分页处理的，你需要看那页，它才会将那页数据返回给客户端。）这个处理也不难，通过使用发现如果查询结果多余一页的话html代码中会出现下一页的标识。我们只需要再用正则匹配这个就知道到底有没有分页，并且知道最大页是多少。</p><p>//检测是否有分页<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; string str = string.Empty;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; maxPageMc = Regex.Matches(tb.Text, @&quot;&gt;下一页&lt;&quot;);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (maxPageMc.Count &gt;= 1)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; str = &quot;该项结果具有分页&quot;;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; maxPageMc = Regex.Matches(tb.Text, @&quot;&gt;下一页&lt;/a&gt;&quot;);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (maxPageMc.Count &gt;= 1)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; str = &quot;该项结果具有分页，并未到最后一页&quot;;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; label10.Text = &quot;未知&quot;;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; maxPageMc = maxPageregex.Matches(tb.Text);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (maxPageMc.Count &gt;= 1) //找到了最大页码<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; maxpage = Convert.ToInt32(maxPageMc[0].Groups[&quot;maxPage&quot;].Value);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; label10.Text = maxpage.ToString();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; str = &quot;该项结果具有分页，已经到最后一页&quot;;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; str = &quot;该项结果不具有分页&quot;;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; label10.Text = &quot;1&quot;;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p style="text-indent: 2em">这里面用到的正则都挺简单，我就不多介绍了。</p><p style="text-indent: 2em">这样子就算是抓取到需要的数据了。大家还可以在此基础上进行再包装，比如将数据写到自己的数据库中，或者更改查询其它的股票代码等。</p><p style="text-indent: 2em">好了，我把源码的地址贴出来，需要的自己下载。</p><p style="text-indent: 2em"><a target="_blank" href="http://www.huangbowen.net/upload/Msg.rar">Msg.rar源码下载</a></p>
-----
KEYWORDS:
抓取,
c#,
源码
-----
--------
TITLE: c#和directx实现晕渲法制图(附资料和源代码)
AUTHOR: flysky
STATUS: publish
ALLOW COMMENTS: 1
ALLOW PINGS: 1
CONVERT BREAKS: 1
PRIMARY CATEGORY: c#技术
DATE: 02/16/2011 20:37:11
-----
EXCERPT:
<p style="text-indent: 2em">晕渲法（hill shading）是地图上表示地貌的一种方法，是应用阴影原理，以色调的阴暗、冷暖变化表现地形立体起伏的一种方法。也叫&ldquo;阴影法&rdquo;。本篇文章讲述了C#和directx实现晕渲法制图的思路，并且附上相应资料和源代码。</p>
-----
BODY:
<p style="text-indent: 2em">晕渲法（hill shading）是地图上表示地貌的一种方法，是应用阴影原理，以色调的阴暗、冷暖变化表现地形立体起伏的一种方法。也叫&ldquo;阴影法&rdquo;。据光源的位置（直照或斜照）和地势起伏，以深浅不同的色调在陡坡或背光坡涂绘阴影，构成地形的立体形象，不能表示高度和实际起伏情况，常与等高线配合表示地貌。</p><p style="text-indent: 2em">我写了一个程序可以自动的产生晕渲效果。是写这个程序的时候参考了大量的文档，文档和程序源码以及测试数据在文章的最后会给大家提供下载。注意运行该源码需要.net framerwork3.5及其以上版本，并且需要安装directx9.0托管版。</p><p style="text-indent: 2em">下面是效果展示，第一个图为渲染前的效果，第二个图为渲染后的效果。</p><p style="text-align: center; text-indent: 2em"><img alt="" width="500" height="468" src="http://www.huangbowen.net/upload/渲染前.bmp" /></p><p style="text-align: center; text-indent: 2em"><img alt="" width="500" height="468" src="http://www.huangbowen.net/upload/渲染后.bmp" /></p><p style="text-indent: 2em">说一下我的实现思路。</p><p style="text-indent: 2em">一，&nbsp;读取需要进行晕渲的高程数据。我这个实例目前只支持Surfer网格（ASCII格式）数据，后缀名为.grd，并且一次读入的数据量不能过大，要不然渲染时获取后备缓冲中的图片会出错。如果你硬要渲染一张大图的话，那就只能将大图分割，分别渲染后再组合起来。FileRead类实现了这个功能。</p><p style="text-indent: 2em">二，&nbsp;将读入的高程数据生成三维地形，每个高程数据变为一个顶点，其x，z为所在的行列，y为高程，颜色是通过调色板类（PatterColor）生成的调色板中对应的颜色。该顶点的法线是以该顶点为中心，周围四个面的起伏情况的一个均值法线。</p><p style="text-indent: 2em">其算法如下：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// 初始化点列的法线信息<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;points&quot;&gt;&lt;/param&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;colors&quot;&gt;&lt;/param&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private void InitPoints(CustomVertex.PositionNormalColored[] points, ModelColor[] colors)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 0; i &lt; height; i++)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int j = 0; j &lt; width; j++)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; points[i * width + j].Position = GetVector3(i, j); //设置顶点位置<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; points[i * width + j].Color = BinarySearchColor(colors, datas[i * width + j]).ToArgb();&nbsp; //设置顶点颜色</p><p>&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (i == 0 || i == height - 1 || j == 0 || j == width - 1)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {//边缘的顶点法线设置为垂直地平面<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; points[i * width + j].Normal = new Vector3(0, 1, 0);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {//其他顶点根据周围几个点的高程计算出平均法线<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Vector3 p1 = GetVector3(i, j) - GetVector3(i - 1, j);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Vector3 p2 = GetVector3(i, j) - GetVector3(i - 1, j + 1);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Vector3 p3 = GetVector3(i, j) - GetVector3(i, j + 1);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Vector3 p4 = GetVector3(i, j) - GetVector3(i + 1, j);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Vector3 p5 = GetVector3(i, j) - GetVector3(i - 1, j - 1);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Vector3 p6 = GetVector3(i, j) - GetVector3(i, j - 1);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Vector3 n1 = Vector3.Cross(p1, p2);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Vector3 n2 = Vector3.Cross(p2, p3);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Vector3 n3 = Vector3.Cross(p3, p4);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Vector3 n4 = Vector3.Cross(p4, p5);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Vector3 n5 = Vector3.Cross(p5, p6);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Vector3 n6 = Vector3.Cross(p6, p1);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; n1.Normalize();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; n2.Normalize();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; n3.Normalize();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; n4.Normalize();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; n5.Normalize();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; n6.Normalize();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; points[i * width + j].Normal = new Vector3((n1.X + n2.X + n3.X + n4.X + n5.X + n6.X) / 6f, (n1.Y + n2.Y + n3.Y + n4.Y + n5.Y + n6.Y) / 6f, (n1.Z + n2.Z + n3.Z + n4.Z + n5.Z + n6.Z) / 6f);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;</p><p style="text-indent: 2em">三，&nbsp;建立设备对象，初始化场景信息，将定点数组放入场景中进行渲染，然后读取后备缓冲中的图像保存为bitmap格式。渲染的时候采用的是正交投影，灯光和材质颜色可以在晕渲参数里设置。绘制三角形的时候采用了索引绘制的方法，这样绘制效率高。主要代码如下：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// 进行渲染<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;colors&quot;&gt;调色板&lt;/param&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;returns&gt;&lt;/returns&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public Bitmap Render(ModelColor[] colors)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Bitmap bit = null;</p><p>&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //设置设备参数<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PresentParameters presentParameters = new PresentParameters();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; presentParameters.Windowed = true;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; presentParameters.SwapEffect = SwapEffect.Discard;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; presentParameters.EnableAutoDepthStencil = true;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; presentParameters.AutoDepthStencilFormat = DepthFormat.D16;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; presentParameters.PresentFlag = PresentFlag.LockableBackBuffer;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Panel p = new Panel();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; p.Width = width;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; p.Height = height;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //初始化设备<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; device = new Device(0, DeviceType.Hardware, p, CreateFlags.HardwareVertexProcessing, presentParameters);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //设置材质属性<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Material mtrl = new Material();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mtrl.Diffuse = LightSet.mtrlDiffuse;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mtrl.Ambient = LightSet.mtrlAmbient;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; device.Material = mtrl;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //设置灯光属性<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; device.Lights[0].Type = LightType.Directional;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; device.Lights[0].Direction = new Vector3(LightSet.xDirection,LightSet.yDirection,LightSet.zDirection);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; device.Lights[0].Diffuse = LightSet.lightDiffuse;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; device.Lights[0].Ambient = LightSet.mtrlAmbient;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; device.Lights[0].Update();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; device.Lights[0].Enabled = true;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //初始化顶点数组<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; VertexBuffer vertexBuffer = new VertexBuffer(typeof(CustomVertex.PositionNormalColored), width * height, device, 0, CustomVertex.PositionNormalColored.Format, Pool.Default);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CustomVertex.PositionNormalColored[] points = (CustomVertex.PositionNormalColored[])vertexBuffer.Lock(0, 0);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; InitPoints(points, colors);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vertexBuffer.Unlock();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; device.BeginScene();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; device.Clear(ClearFlags.Target | ClearFlags.ZBuffer, System.Drawing.Color.SteelBlue, 1.0f, 0);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; device.RenderState.Lighting = true;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; device.RenderState.Ambient = Color.White;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //设置投影<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; device.Transform.Projection = Matrix.OrthoLH(width, height, 1, 50000);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //设置摄像机位置<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Vector3 eye = new Vector3(height * 0.5f, 1300f, width * 1.5f);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Vector3 lookat = new Vector3(height * 0.5f, 800f, width * 1.5f);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; device.Transform.View = Matrix.LookAtLH(new Vector3(height/2f,5000,width / 2f),new Vector3(height/2f,1,width/2f),new Vector3(-1,0,0));</p><p><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; device.SetStreamSource(0, vertexBuffer, 0);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; device.VertexFormat = CustomVertex.PositionNormalColored.Format;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //初始化索引数组<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IndexBuffer indexBuffer = new IndexBuffer(typeof(int), (width - 1) * 6, device, 0, Pool.Default);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int[] index = (int[])indexBuffer.Lock(0, 0);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int j = 0; j &lt; width - 1; j++)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int startIndex = j * 6;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; index[startIndex] = j;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; index[startIndex + 1] = j + 1;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; index[startIndex + 2] = width + j;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; index[startIndex + 3] = j + 1;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; index[startIndex + 4] = width + j + 1;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; index[startIndex + 5] = width + j;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; indexBuffer.Unlock();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; device.Indices = indexBuffer;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //渲染绘制<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 0; i &lt; height - 1; i++)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; device.DrawIndexedPrimitives(PrimitiveType.TriangleList, i * width, 0, width * 2, 0, (width - 1) * 2);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; device.EndScene();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //获取渲染出来的场景保存为bitmap文件<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Rectangle rect = new Rectangle(Point.Empty, new Size(width, height));<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; using (Surface rt = device.CreateRenderTarget(width, height, Format.X8R8G8B8, MultiSampleType.None, 0, false))<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; using (Surface backSurface = device.GetBackBuffer(0, 0, BackBufferType.Mono))<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; device.StretchRectangle(backSurface, rect, rt, rect, TextureFilter.None);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; using (Surface surface = device.CreateOffscreenPlainSurface(rect.Width, rect.Height, Format.X8R8G8B8, Pool.SystemMemory))<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; device.GetRenderTargetData(rt, surface);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bit = Bitmap.FromStream(SurfaceLoader.SaveToStream(ImageFileFormat.Bmp, surface)) as Bitmap;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return bit;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;</p><p style="text-indent: 2em">四，&nbsp;将渲染完成的图像呈现到界面上。</p><p style="text-indent: 2em">我的源码里有详细的注释，大家可以好好钻研下，并且在此基础上可以进行拓展，如支持更多格式高程数据，实现超大地形渲染等。</p><p style="text-indent: 2em"><a target="_blank" href="http://www.huangbowen.net/upload/HillShading.rar">晕渲制图源代码</a></p><p style="text-indent: 2em"><a target="_blank" href="http://www.huangbowen.net/upload/渲染.rar">晕渲制图资料</a></p>
-----
KEYWORDS:
c#,
directX,
晕渲
-----
--------
TITLE: QT写的抓取指定网页图片并保存
AUTHOR: flysky
STATUS: publish
ALLOW COMMENTS: 1
ALLOW PINGS: 1
CONVERT BREAKS: 1
PRIMARY CATEGORY: c#技术
DATE: 03/08/2011 19:01:25
-----
EXCERPT:
<p style="text-indent: 2em">最近在搞QT，写了一个demo，实现了抓取网页图片并保存到本地，主要使用了QNetworkAccessManager和QHttp这两个对象，还有正则表达式。</p>
-----
BODY:
<p style="text-indent: 2em">2011年要学点新的东西，QT这玩意09年的时候搞过一段时间，结果不了了之，现在又重新搞起来了，希望能有所收获。</p><p style="text-indent: 2em">下面是我花了一些时间写的一个小demo，实现了解析指定网页的所有图片地址，并可以下载到本地。该demo在vs2008下编写，采用qt版本为4.7.1。</p><p style="text-indent: 2em">软件运行界面如下：</p><p style="text-align: center"><img title="" alt="" onload="ResizeImage(this,520)" src="http://www.huangbowen.net/upload/demo界面.jpg" /></p><p style="text-indent: 2em">在文本框中输入url地址，点击search按钮可以解析出此页面中包含的所有图片路径，点击save按钮可以将这些图片下载到本地，点击savePath按钮可以配置下载路径。</p><p style="text-indent: 2em">下面讲下具体实现。</p><p style="text-indent: 2em">一，&nbsp;根据url 获取其返回的html数据。这里使用了QT提供的QNetworkAccessManager类来实现。通过调用QNetworkAccessManager类的get方法，传入url地址，可以返回finished信号，并获取返回的QNetworkReply对象，调用QNetworkReply对象的readAll()方法就可以得到html数据，类型为QString。</p><p>&nbsp;QNetworkAccessManager *manager = new QNetworkAccessManager(this);<br />&nbsp;connect(manager,SIGNAL(finished(QNetworkReply*)),this,SLOT(replayFinished(QNetworkReply*)));<br />&nbsp;<br />&nbsp;manager-&gt;get(QNetworkRequest(url));</p><p>void MainWindow::replayFinished(QNetworkReply *replay)<br />{<br />&nbsp;QString html = tr(replay-&gt;readAll());<br />}</p><p style="text-indent: 2em">二，&nbsp;对获取到的html数据进行匹配，找出其中的图片地址。在进行匹配之前，先将html中的单引号都替换成双引号，然后使用<textarea class="code" rows="10" cols="50">&lt;img.*src&nbsp;*=&nbsp;*['\&quot;](.*)[\&quot;'].*&gt;</textarea>正则表达式进行匹配。用这个正则表达式有点问题，匹配出来的地址可能会多出一部分，所以我又进行了处理，剔除了多余的部分。</p><p>&nbsp;QString html = tr(replay-&gt;readAll());<br />&nbsp;html.toLower();<br />&nbsp;html.replace('\'','\&quot;');<br />&nbsp;<br />&nbsp;QRegExp reg(&quot;&lt;img.*src *= *['\&quot;](.*)[\&quot;'].*&gt;&quot;);<br />&nbsp;int pos =0;<br />&nbsp;reg.setMinimal(true);</p><p>&nbsp;list.clear();<br />&nbsp;standardItemModel = new QStandardItemModel(this);<br />&nbsp;while((pos = reg.indexIn(html,pos)) != -1)<br />&nbsp;{<br />&nbsp;&nbsp;<br />&nbsp;&nbsp;QString str = reg.cap(1);<br />&nbsp;&nbsp;int end = str.indexOf('\&quot;',1);<br />&nbsp;&nbsp;QString s = str.left(end);<br />&nbsp;&nbsp;<br />&nbsp;&nbsp;if (!list.contains(s,Qt::CaseInsensitive))<br />&nbsp;&nbsp;{<br />&nbsp;&nbsp;&nbsp;list&lt;&lt;s;<br />&nbsp;&nbsp;&nbsp;QStandardItem* item = new QStandardItem(s);<br />&nbsp;&nbsp;&nbsp;standardItemModel-&gt;appendRow(item);<br />&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;pos+=reg.matchedLength();<br />&nbsp;}<br />&nbsp;</p><p style="text-indent: 2em">三，&nbsp;根据解析出来的图片地址将图片保存到本地。这里使用QHttp类来实现，QHttp的get方法可以将图片保存到本地。不过它读写文件采用的是异步方式，为了使用方便我专门写了一个类来实现保存图片的功能。</p><p>#ifndef HTTPGET_H<br />#define HTTPGET_H</p><p>#include &lt;QObject&gt;<br />#include &quot;QUrl&quot;<br />#include &quot;QHttp&quot;<br />#include &quot;QFile&quot;<br />#include &quot;iostream&quot;<br />#include &quot;QString&quot;</p><p>class HttpGet : public QObject<br />{<br />&nbsp;Q_OBJECT</p><p>public:<br />&nbsp;HttpGet(QObject *parent);<br />&nbsp;~HttpGet();</p><p>&nbsp;void downloadFile(const QUrl &amp;url,const QString &amp;path);</p><p>private:</p><p>&nbsp;QHttp* http;<br />&nbsp;QFile* file;</p><p>signals:<br />&nbsp;void finished();<br />private slots:<br />&nbsp;&nbsp;void requestFinished(int id,bool error);<br />&nbsp;&nbsp;void done(bool error);<br />&nbsp;<br />};</p><p>#endif // HTTPGET_H</p><p><br />#include &quot;httpget.h&quot;<br />#include &quot;qDebug&quot;</p><p>HttpGet::HttpGet(QObject *parent)<br />&nbsp;: QObject(parent)<br />{<br />&nbsp;http = new QHttp(this);<br />&nbsp;//connect(http,SIGNAL(requestFinished(int,bool)),this,SLOT(requestFinished(int,bool)));<br />&nbsp;connect(http,SIGNAL(done(bool)),this,SLOT(done(bool)));<br />}</p><p>HttpGet::~HttpGet()<br />{</p><p>}</p><p>void HttpGet::downloadFile(const QUrl &amp;url,const QString &amp;path)<br />{<br />&nbsp;qDebug()&lt;&lt;url.path();<br />&nbsp;file = new QFile(path);<br />&nbsp;if (!file-&gt;open(QIODevice::WriteOnly))<br />&nbsp;{<br />&nbsp;&nbsp;delete file;<br />&nbsp;&nbsp;file = 0;<br />&nbsp;&nbsp;return;<br />&nbsp;}</p><p>&nbsp;QHttp::ConnectionMode mode = url.scheme().toLower() == &quot;https&quot; ? QHttp::ConnectionModeHttps : QHttp::ConnectionModeHttp;<br />&nbsp;http-&gt;setHost(url.host(),mode,url.port()==-1? 0:url.port());<br />&nbsp;http-&gt;get(url.path(),file);<br />&nbsp;http-&gt;close();<br />}</p><p>void HttpGet::requestFinished(int id,bool error)<br />{&nbsp;<br />&nbsp;file-&gt;flush();<br />&nbsp;file-&gt;close();<br />&nbsp;emit finished();<br />}</p><p>void HttpGet::done(bool error)<br />{<br />&nbsp;file-&gt;flush();<br />&nbsp;file-&gt;close();<br />&nbsp;delete file;<br />&nbsp;file = 0;<br />&nbsp;emit finished();<br />}</p><p style="text-indent: 2em">下面是该实例的源码，欢迎大家下载学习。</p><p style="text-indent: 2em"><a target="_blank" href="http://www.huangbowen.net/upload/HttpImage.rar">HttpImage.rar</a></p>
-----
KEYWORDS:
QT,
抓取,
网页,
图片
-----
--------

