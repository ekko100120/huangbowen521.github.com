<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[黄博文的地盘]]></title>
  <link href="http://www.huangbowen.net/atom.xml" rel="self"/>
  <link href="http://www.huangbowen.net/"/>
  <updated>2014-07-11T16:11:31+08:00</updated>
  <id>http://www.huangbowen.net/</id>
  <author>
    <name><![CDATA[黄博文]]></name>
    <email><![CDATA[huangbowen521@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AWS系列之一 亚马逊云服务概述]]></title>
    <link href="http://www.huangbowen.net/blog/2014/07/11/aws-overview/"/>
    <updated>2014-07-11T15:50:26+08:00</updated>
    <id>http://www.huangbowen.net/blog/2014/07/11/aws-overview</id>
    <content type="html"><![CDATA[<p>云计算经过这几年的发展，已经不再是是一个高大上的名词，而是已经应用到寻常百姓家的技术。每天如果你和互联网打交道，那么或多或少都会和云扯上关系。gmail、github、各种网盘、GAE、heroku等各种服务都属于云服务的范畴。那么云计算的定义到底是什么？这里有摘自wiki的定义。</p>

<!-- more -->


<blockquote><blockquote><p>Cloud computing in general can be defined as a computer network which includes, computing hardware machine or group of computing hardware machines commonly referred as a server or servers connected through a communication network such as the Internet, an intranet, a local area network(LAN) or wide area network(WAN).</p></blockquote></blockquote>

<p>从上面的定义可以看出，云计算可以看做一个计算网络，其由一组硬件主机作为服务器，然后通过通讯网络连接，从而给其他用户提供各种各样的服务。</p>

<p>以下是云计算的一个概念图。</p>

<p><img src="http://www.huangbowen.net/images/cloudComputer.png" width="800"></p>

<p>从该图中可以看出，云计算提供的服务可以分为三层，第一层是基础设施（Infrastructure）,第二层是平台（Platform）,第三层是应用软件（Application）。基础设置的服务包括虚拟或实体计算机、块级存储、网络设施（如负载均衡，内容交付网络，DNS解析）等，平台的服务包括对象存储、认证服务和访问服务、各种程序的运行时、队列服务、数据库服务等，而应用软件的服务则包括的多了，比如邮件服务、代码托管服务等等。用户可以通过台式电脑、手提电脑、手机、平板等各种互联网终端设备访问和使用这些服务。</p>

<p>其实这三层就是我们常说的IaaS（Infrastructure as a Service）、PaaS（Platform as a Service）、SaaS(Software as a Service)。</p>

<p><img src="http://www.huangbowen.net/images/cloudService.png" width="800"></p>

<p>亚马逊的云服务提供了多达几十种服务，涵盖了IaaS、PaaS、SaaS这三层。既然是亚马逊云服务，那么为什么通常都叫做Amazon Web Service（AWS）那，为什么不叫Amazon Cloud Service之类的那？这个就不得而知了，估计当时AWS第一个服务出来的时候是2006年，那时候云的概念还没有这么火，而web service则如日中天，所以起了个这个名字。好了不八卦了，先看看亚马逊云计算的架构图。</p>

<p><img src="http://www.huangbowen.net/images/awsstructure.png" width="800"></p>

<p>从该架构图可以看出，亚马逊云服务由7部分组成。接下来对这7部分的主要服务做一个简要的介绍。</p>

<h2>AWS Global Infrastructure(AWS 全局基础设施)</h2>

<p>在全局基础设施中有3个很重要的概念。第一个是Region（区域），每个Region是相互独立的，自成一套云服务体系，分布在全球各地。目前全球有10个Region，北京的Region已经在内测当中，不久就会开放使用。</p>

<p>第二个是Availability Zone(可用区)，每个Region又由数个可用区组成，每个可用区可以看做一个数据中心，相互之间通过光纤连接。</p>

<p>第三个是Edge Locations（边缘节点）。全球目前有50多个边缘节点，是一个内容分发网络（CDN，Content Distrubtion Network），可以降低内容分发的延迟，保证终端用户获取资源的速度。它是实现全局DNS基础设施（Route53）和CloudFront CDN的基石。</p>

<h2>Networking（网络）</h2>

<p>AWS提供的网络服务主要有：</p>

<ul>
<li><p>Direct Connect： 支持企业自身的数据中心直接与AWS的数据中心直连，充分利用企业现有的资源。</p></li>
<li><p>VPN Connection：通过VPN连接AWS，保证数据的安全性。</p></li>
<li><p>Virtual Private Cloud： 私有云，从AWS云资源中分一块给你使用，进一步提高安全性。</p></li>
<li><p>Route 53：亚马逊提供的高可用的可伸缩的域名解析系统。</p></li>
</ul>


<h2>Compute（计算）</h2>

<p>这可是亚马逊的计算核心，包括了众多的服务。</p>

<ul>
<li><p>EC2： Elastic Computer service,亚马逊的虚拟机，支持Windows和Linux的多个版本，支持API创建和销毁，有多种型号可供选择，按需使用。并且有auto scaling功能，有效解决应用程序性能问题。</p></li>
<li><p>ELB： Elastic Load Balancing， 亚马逊提供的负载均衡器，可以和EC2无缝配合使用，横跨多个可用区，可以自动检查实例的健康状况，自动剔除有问题的实例，保证应用程序的高可用性。</p></li>
</ul>


<h2>Storage（存储）</h2>

<ul>
<li><p>S3： Simple Storage Service，简单存储服务，是亚马逊对外提供的对象存储服务。不限容量，单个对象大小可达5TB，支持静态网站。其高达99.999999999%的可用性让其它竞争对手胆寒。</p></li>
<li><p>EBS： Elastic Block Storage，块级存储服务，支持普通硬盘和SSD硬盘，加载方便快速，备份非常简单。</p></li>
<li><p>Glacier：主要用于较少使用的存储存档文件和备份文件，价格便宜量又足，安全性高。</p></li>
</ul>


<h2>Database（数据库）</h2>

<p>亚马逊提供关系性数据库和no sql数据库，以及一些cache等数据库服务。</p>

<ul>
<li><p>DynamoDB： DynamoDB是亚马逊自主研发的no sql型数据库，性能高，容错性强，支持分布式，并且与Cloud Watch、EMR等其它云服务高度集成。</p></li>
<li><p>RDS： Relational Database Service，关系型数据库服务。支持MySql，SQL Server和Oracle等数据库，具有自动备份功能，IO吞吐量可按需调整。</p></li>
<li><p>Amazon ElastiCache： 数据库缓存服务。</p></li>
</ul>


<h2>Application Service（应用程序服务）</h2>

<p>这里的服务可就多了。</p>

<ul>
<li><p>Cloud Search: 一个弹性的搜索引擎，可用于企业级搜索。</p></li>
<li><p>Amazon SQS： 队列服务，存储和分发消息。</p></li>
<li><p>Simple Workflow：一个工作流框架。</p></li>
<li><p>CloudFront：世界范围的内容分发网络。</p></li>
<li><p>EMR： Elastic MapReduce，一个hadoop框架的实例，可用于大数据处理。</p></li>
</ul>


<h2>Deployment &amp; Admin (部署和管理)</h2>

<ul>
<li><p>Elastic BeanStalk: 一键式创建各种开发环境和运行时。</p></li>
<li><p>CloudFormation：采用jason格式的模板文件来创建和管理一系列亚马逊云资源。</p></li>
<li><p>OpsWorks： OpsWorks允许用户将应用程序的部署模块化，可以实现对数据库、运行时、服务器软件等自动化设置和安装。</p></li>
<li><p>IAM： Identity &amp; Access Management，认证和访问管理服务。用户使用云服务最担心的事情之一就是安全问题。亚马逊通过IAM提供了立体化的安全策略，保证用户在云上的资源绝对的安全。用户通过IAM可以管理对AWS资源的访问。通过IAM可以创建group和role来授权或禁止对各种云资源的访问。</p></li>
</ul>


<p>如果想获取更多知识可以访问亚马逊AWS的官网<a href="http://aws.amazon.com/">http://aws.amazon.com/</a>。如果想查看每个服务的详细信息，可以查看它们的官方文档<a href="https://aws.amazon.com/documentation/?nc1=h_su_dm">https://aws.amazon.com/documentation/?nc1=h_su_dm</a>。还有亚马逊的所有云服务都提供了API接口进行调用，并且提供了命令行工具Amazon CLI（Command Line Interface）来使用，详细信息请参见<a href="http://docs.aws.amazon.com/cli/latest/index.html">http://docs.aws.amazon.com/cli/latest/index.html</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[成都亚马逊AWSome Day回顾]]></title>
    <link href="http://www.huangbowen.net/blog/2014/07/07/awsome-day-memo/"/>
    <updated>2014-07-07T13:54:42+08:00</updated>
    <id>http://www.huangbowen.net/blog/2014/07/07/awsome-day-memo</id>
    <content type="html"><![CDATA[<p>昨天我和公司同仁一起参加了亚马逊在成都的第一场AWSome Day活动。整个活动时间异常紧促，短短一天包含了7堂session，讲师的狂轰乱炸使得我们同学们普遍觉得比上班累多了。好了，废话不多说，让我们来回顾一下昨天都讲了那些东西。</p>

<!-- more -->


<p>第一个session主题是AWS技术推动的创新。听名称就知道给亚马逊云服务打广告了。里面讲述了AWS各种服务的牛逼，讲师说AWS计算量=其余15家云计算平台总计算量 * 5。是不是吹牛不得而知了。还有一点是AWS自从2006年发布以来经历了43次主动降价。就我个人使用AWS服务而言，感觉价格还是挺公道的。我的个人博客使用了AWS的Route53，S3，CloudFrond等服务，一个月收费也不过1刀多。这个session一句话来总结就是我们最牛B，其它的都是渣渣。当然亚马逊讲师这样说毕竟还是有一定底气的。</p>

<p>第二个session主题是AWS服务概览。讲师带领我们对AWS的服务做了一个整体回顾。其计算服务主要包括EC2，存储服务包括S3，EBS，Glacier。数据库服务包括Redshift，DynamoDB，RDS，ElasticCache。部署与自动化服务包括CloudFormation，BeanStalk，OpsWorks。认证与访问服务IAM。网络服务VPC，Route53，ELB，Direct Connect。分布式计算服务包括Amazon EMR, Auto Scaling。内容传输服务CloudFront。大家看到这里是不是有点头晕了？</p>

<p>第三个session主题是AWS存储服务。讲师仔细介绍了S3，EBS，Glacier三种存储服务的不同与适用场景。S3的容灾率最高，可用性最高，并且每个存储文件附带一个url，可以直接访问。EBS价格公道，需要配合S3或EC2来访问使用。而Glacier相当于存档文件，可以保存10年以上，价格最低。如果你上存储的数据大于1TB，甚至PB级别，亚马逊还贴心的提供了数据Import/Export服务，那速度是杠杠的，可以达到几十GB的传输速率。那么亚马逊是如何达到这样的带宽那？方法是你把你的硬盘邮寄给亚马逊数据中心，亚马逊数据中心直接外挂你的硬盘进行数据导入。</p>

<p>吃了免费的午餐，下午的一大波session又来袭了。</p>

<p>下午第一场session是关于AWS计算服务和网络。讲师介绍了最常用的EC2服务，还有用于大数据分析和挖掘的EMR系统。并且顺带讲述了CloudFront，Rout53，ELB等是如何协作来提供网络应用程序的访问速度的。还有亚马逊那神奇的Auto Scalling技术。安全是云服务的重中之重。亚马逊采用了IAM来统一管理和分配对云上的资源的各种访问。用户可以创建用户名和密码，创建access key，创建用户组等多种方式来控制对各种资源的访问。亚马逊也提供了VPC和路由机制来实现公网和私有局域网的的隔离和访问。</p>

<p>第二场session是关于AWS管理的服务和数据库。亚马逊提供DynamoDB，RDS，Redshift，ElasticCache等与数据库有关的服务。其中DynamoDB是亚马逊自护研发的no sql数据库系统，自然少不了一番大吹特吹。RDS数据库支持mysql，Oracle，sql server等。这些数据库服务都支持自动备份，每隔5分钟备份一次，备份文件可保存0-35天。用户也可以手动备份，将备份文件放置到S3中永久保存。Redshift是亚马逊提供的数据仓库服务，可帮助你使用现有的商业智能工具进行大数据分析和处理。ElasticCache是亚马逊内置的缓存服务，DynamoDB，RDS数据库都可使用，可有效提高数据库吞吐量。</p>

<p>第三场session是AWS的部署和管理。CloudWacth可以检测云上的资源，并根据配置的policy来自动进行scale out和scale in。比如如果CloudWatch发现EC2实例的cpu占用率在90%以上并保持5分钟，则会自动setup新的EC2服务器并注册到ELB上。使用的好的话运维人员再也不同半夜从床上爬起来解决问题了。而CloudFormation，Elastic Beanstalk，OpsWorks都是DevOps工具箱中不可缺少的工具，如果要实现inforstructure as code，这些工具可助你一臂之力。</p>

<p>最后一个session是AWS解决方案参考架构概览。这里主要说明了你的应用程序如果要放到云上，在设计架构的时候需要遵守一定的准则，否则无法使用到云的优势，结果适得其反。比如AWS提供给你菜刀切肉，水果刀切水果。你偏偏拿个水果刀切肉还直吆喝着不好使，那就不对了。总之一句话，架构设计时一定要SOA，SOA，SOA。</p>

<p>OK，大概内容就是这样了。听了以后是不是想亲自动手。什么？还有没有AWS账号？什么？还没有信用卡？什么？不知道哪里有详细的学习文档？</p>

<p>统统忘掉这些吧。AWS祭出了神器：<a href="https://run.qwiklabs.com">https://run.qwiklabs.com</a>。这是一个用于学习和演练亚马逊各种服务的实验室，只需花一分钟注册即可使用。里面有各种服务的详细操作文档，并且支持真实演练。当你选择一堂课后，qwiklabs会自动给你生成一个AWS账号，你可以使用该账号登陆到真实的亚马逊云服务终端中进行各种破坏而不花费你一毛钱。想当年我自己play with AWS各种云服务时可没少花冤枉钱。</p>

<p>熟悉了亚马逊云，学习其它云还不是小菜一碟。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[微服务-分解应用程序从而实现更好的部署特性及可伸缩性]]></title>
    <link href="http://www.huangbowen.net/blog/2014/06/08/microservice/"/>
    <updated>2014-06-08T19:07:01+08:00</updated>
    <id>http://www.huangbowen.net/blog/2014/06/08/microservice</id>
    <content type="html"><![CDATA[<p>本文是我翻译INFQ上的一篇文章。作者Chris由简入深的讲解了微服务的来龙去脉、使用场景、优势劣势、以及现有技术栈向微服务架构的重构步骤。是一篇微服务主题的不可多得的好文。</p>

<p>原文地址：<a href="http://www.infoq.com/articles/microservices-intro?utm_source=infoq&amp;utm_medium=popular_links_homepage#.U4-QbLLNKmI.gmail">http://www.infoq.com/articles/microservices-intro?utm_source=infoq&amp;utm_medium=popular_links_homepage#.U4-QbLLNKmI.gmail</a></p>

<!-- more -->


<h2>微服务：分解应用程序从而实现更好的部署特性及可伸缩性</h2>

<p>本文描述了越来越受欢迎的<a href="http://microservices.io/patterns/microservices.html">微服务架构模式</a>（Microservice architecture pattern）。微服务背后的大创意是将大型的、复杂的、长期的应用程序架构为随时进化的紧密结合的一组服务。术语微服务强烈建议服务应当是微小的。</p>

<p>社区中甚至提倡构建10-100个LOC服务。然而，拥有微小的服务是可取的，但其不应该是主要目的。你应该旨在将你的系统分解为服务，从而解决下面讨论的开发及部署问题。一些服务确实应当是微小的，其它的则有可能是相当大的。</p>

<p>微服务架构的本质并不是一个新事物。分布式系统的概念是非常古老的。微服务架构也类似于SOA。</p>

<p>在本文中，你将学习使用微服务架构的动机以及与更传统的架构-单块架构（monolithic architecture）的比较。我们讨论了微服务的优点和缺点。你将学习如何通过微服务架构来解决一些关键的技术挑战，包括服务间通讯和分布式数据管理。微服务甚至被称为轻量级的或细粒度的SOA。确实，某种意义上说微服务是非商业化的不能感知WS*和ESB包的SOA。尽管微服务并不是新鲜的玩意，但是仍值得讨论，因为它与传统的SOA是不同的，更重要的是，它解决了许多组织当前遭受的很多问题。</p>

<h3>（有时是邪恶的）单块架构</h3>

<p>开发web程序的最早期时间，最被广泛使用的企业程序架构是将程序的服务器端组件打包为单个单元。很多企业Java应用程序由单个WAR或EAR文件组成。其它语言（比如Ruby，甚至C++）编写的应用程序也大抵如此。</p>

<p>让我们想象一下，例如你在构建一个在线商店，从客户那里获取订单，验证清单及可用的信用卡，然后运送。你构建的程序与图1所示会非常相似。</p>

<p><img src="http://www.huangbowen.net/images/map.png" width="700" title="'单块架构’" ></p>

<p>图 1单块架构</p>

<p>该应用程序由好几个组件组成。包括了存储前端UI，其实现了用户接口，和服务一起管理产品分类，处理订单和管理客户的账户。这些服务共享一个由多个实体组成的领域模型，实体包括产品，定点和客户等。</p>

<p>尽管该程序拥有一个逻辑清晰的模型设计，但仍是一个单块架构。例如，如果你是使用Java，则该应用程序将由一个单独的WAR文件组成，并且运行在一个web容器中（比如Tomcat）。该程序的Rails版本可能会有一个具有一定层级结构的目录组成，部署也使用该目录，比如使用Phusion Passenger部署在Apache/Nginx，或者使用JRuby部署在Tomcat。</p>

<p>这种所谓的单块架构有一定的优点。单块架构的应用程序非常容易开发，因为IDE及其它开发工具都适合开发单个应用程序。这些程序也很容易被测试，你只需启动一个程序即可。单块架构的应用程序也很容易部署，因为你只需复制开发单元（一个文件或目录）到一个运行者相应服务容器的机器即可。</p>

<p>相对而言该方式更适用于小程序。然而，单块架构在复杂的程序中很难驾驭。一个庞大的单块程序对于开发者来说很难理解和维护。它对频繁改动的开发过程来说也是一种阻碍。为了对某个程序组件做修改，你不得不构建和部署整个程序，这相当复杂，风险极大，也比较耗时，需要很多开发者共同协作，还需要较长的测试周期。</p>

<p>单块架构也使得试用和采用新的技术变得困难。例如，尝试一个新的基础设施框架而不重写整个程序是非常困难的，风险又大又不现实。因此，你经常被项目开始时你做的技术选型阻塞。换句话说，单块架构对于支持大型的，周期长的应用程序并不具备伸缩性。</p>

<h3>将应用程序分解为服务</h3>

<p>幸运的是，有其它的具有可伸缩性的架构风格。《The Art of Scalability》一书中描述了真实有用的三维伸缩性模型：伸缩性立方体，如图2所示。</p>

<p><img src="http://www.huangbowen.net/images/tsc.png" width="700" title="'伸缩性立方体'" ></p>

<p>图2 伸缩性立方体</p>

<p>在该模型中，通过一个负载均衡来运行应用程序的多个完全一样的副本的方式来实现应用程序伸缩性，这种方式称为X轴伸缩性。这是一种很好的方式来提高应用程序的容量和可用度。</p>

<p>当使用Z轴伸缩性，每个服务器运行代码的一个完全相同的副本。在该方面，它与X轴伸缩性很相似。最大的不同是每个服务器只负责数据的一个子集。该系统的一些组件负责将每个请求路由给适当的服务器。一个常见的路由规则是把请求的一个属性作为被访问的实体的主键，比如分区。另一个常见的路由规则是客户类型。例如，应用程序可以向付费用户提供比免费用户更高的SLA，实现方式是将付费用户的请求路由到具有更高容量的一组服务器上。</p>

<p>Z轴伸缩性与X轴伸缩性类似，提高了应用程序的容量和可用度。然而，没有任何一个方式能够解决不断增加的开发工作和程序复杂度的问题。解决这些问题需要Y轴伸缩性。</p>

<p>伸缩性的第三个维度是针对功能性分解的Y轴伸缩性。Y轴伸缩性与Z轴伸缩性分解事情的方式相似但有不同。在应用程序层级，Y轴伸缩性将单块应用程序分割为一组服务。每个服务实现了一组相关的功能特性，例如订单管理，客户管理等。</p>

<p>决定如何将系统分割为一组服务更像是一门艺术，但是可借助于一些策略。一种方式是通过动词或使用情况分割服务。例如，接下来你会看到被分割的在线商店有一个结账UI服务，其实现了结账用例的UI。</p>

<p>另一个分割方式是通过名词或资源分割系统。这种服务负责处理给定的实体/资源的所有操作。例如，稍后你将看到为什么在线商店拥有目录服务是有道理的，其管理产品的目录。</p>

<p>理想情况下，每个服务只有一小组职责。Bob Martin(大叔)讨论了使用单一职责原则设计类。SRP定义了类的职责为有且只有一个理由被改变。将SRP应用到服务设计中也是有道理的。</p>

<p>另一个有助于服务设计的类似设计是Unix工具的设计。Unix提供了大量的工具，比如grep，cat和find。每个工具只做一件事，效果往往非常好，并且可以使用shell脚本组合多个工具以执行复杂的任务。在Unix工具中对服务建模并创建单一功能服务很有道理。</p>

<p>强调分解的目标不只是为了拥有微小的（例如，一些主张有10-100 LOC）服务。相反，目标是解决之前讨论过的实际问题和单块架构的局限性。一些服务应当是微小的，但是其它服务可能更大些。</p>

<p>如果应用Y轴来分解示例程序，我们得到的架构如图3所示。</p>

<p><img src="http://www.huangbowen.net/images/msa.png" width="700" title="‘微服务架构’" ></p>

<p>图3 微服务架构</p>

<p>分解后的程序由各种各样的前台服务和多个后台服务组成，这些前台服务实现了用户接口不同部分。前台服务包括目录UI和结账UI。目录UI实现了产品搜索和浏览，结账UI实现了购物车和结账流程。后台服务包含了在文章开始时相同的逻辑服务。我们将该应用程序的每个主要的逻辑组件转换为了独立的服务。让我们看看这样做的后果。</p>

<h3>微服务架构的优点和缺点</h3>

<p>该架构有一些优点。首先，每个微服务相对较小。开发者很容易理解该代码。少量的代码不会拖慢IDE，使得开发者更加高效。并且，每个服务比一个大型的单块程序启动速度要快的多，这又一次使得开发者更加高效，加快部署过程。</p>

<p>其次，每个服务的部署与其它服务是独立的。如果某程序员只对一个服务负责，并且想要对该服务部署一个改动，只需修改f本地服务而无需其他程序员的协作。程序员部署修改很简单。微服务使得持续部署更加可行。</p>

<p>第三，每个服务可通过X轴复制和Z轴分割独立于其它服务进行扩展。此外，每个服务可被部署到最适合该服务的资源要求的硬件上。这与使用单块架构的情况完全不同，单块架构中的组件的资源要求是不同的，例如是CPU密集型的还是内存密集型的，但是你又必须一起部署。</p>

<p>微服务架构使得开发过程更具扩展性。你可以使用多个小型(例如，两个披萨饼)的团队进行开发。每个团队只负责对单个服务或一组相关的服务的开发和部署。每个团队可独立于其它的团队来开发，部署和扩展他们的服务。</p>

<p>微服务架构也提升了错误隔离。例如，一个服务中的内存泄露只影响该服务。其它服务将会继续正常的处理请求。对比而言，一个单块架构的具有错误行为的组件会使整个系统崩溃。</p>

<p>最后但不是最重要的一点，微服务架构消除了技术栈任何长期的承诺。原则上来说，当开发一个新的服务时，开发者可以选择任何适合于当前服务的语言和框架。当然，许多组织团体限制这些选择也有一定道理，但是关键点在于你不受限于过去的决定。</p>

<p>此外，由于服务是微小的，使用其它语言和技术重写服务也变得更加实用。这也意味着如果尝试新技术失败，你只需丢掉这些工作而无需给整个项目带来风险。这与使用 单块架构是完全不同的，这里你最初的技术选择会严格限制未来使用不同的语言和框架的能力。</p>

<h3>缺点</h3>

<p>当然，没有任何一项技术是银弹，微服务也有一些重大的缺点和问题。首先，开发者必须面对创建一个分布式系统的额外的复杂性。开发者必须实现一个进程间通讯机制。不用分布式事务实现跨服务的用例是困难的。IDE和其它的开发工具关注于创建单块架构的应用程序，并不对开发分布式应用程序提供显式的支持。编写引用了多个服务的自动化测试颇具挑战性。而你使用单块架构则无需处理这些问题。</p>

<p>微服务架构也引入了重大的操作复杂度。有很多容易变动的部分（不同类型的服务的多个实例）需要在产品环境中管理。要成功实现这点你需要高级别的自动化，无论是自己编写的代码还是类似于PaaS的技术（例如Netfix Asgard）和相关的组件，或者一个现成的PaaS（例如Pivotal Cloud Foundry）。</p>

<p>而且，跨多个服务开发功能要求多个开发团队间小心翼翼的协作。你需要创建一个展示计划，该计划基于服务间依赖情况而制定服务部署顺序。这与使用单块架构的情形非常不同，你只需使用原子操作即可部署更新多个组件。</p>

<p>使用微服务架构的另一个挑战是在应用程序的那个周期点决定使用该架构。当开发应用程序的第一个版本时，你通常不会遇到该架构能够解决的问题。此外，使用复杂的分布式架构会拖慢开发速度。</p>

<p>这可能在项目刚开始时陷入左右为难的情况，最大的挑战经常是如何伴随着应用程序快速演化业务模型。使用Y轴分割可能会导致快速迭代更加困难。然而，当挑战变为如何提高可伸缩性时你需要使用功能性分解，但是纠缠不清的依赖使得将单块应用程序分解为一组服务变得困难。</p>

<p>正因为如此，不能轻易着手采用微服务架构。然而，对于需要高伸缩性的应用程序，比如面向消费者的web程序或SaaS程序，采用微服务架构通常是正确选择。一些出名的网站，比如eBay，Amazon.com，Groupon和Gilt都已经把单块架构进化为微服务架构。</p>

<p>现在我们已经知道微服务架构的关键设计的优点和缺点，现在开始了解程序间和程序与客户端的通讯机制。</p>

<h3>微服务架构中的通讯机制</h3>

<p>微服务架构中，应用程序和客户端通讯的模式，以及应用程序组件间的通讯机制与单块应用程序是不同的。首先来看应用程序的客户端与微服务是如何交互的。接下来我们将查看应用程序内部的通讯机制。</p>

<h4>API网关模式</h4>

<p>在单块架构中，应用程序的客户端，比如web浏览器和原生应用程序，发送HTTP请求通过一个负载均衡到N个完全一样的应用程序实例的其中一个。但在微服务架构中，单块程序被服务集合替代。结果，我们需要回答的关键问题是客户端应该与什么交互？</p>

<p>一个应用程序客户端，比如原生的移动应用程序，可以向单个服务发送RESTful HTTP请求，如图4所示。</p>

<p><img src="http://www.huangbowen.net/images/csd.png" width="700" title="‘直接调用服务’" ></p>

<p>图4 直接调用服务</p>

<p>表面上来看这很有吸引力。然而，在单个服务的API和客户需要的数据之间可能会有一个显著的错误匹配粒度。例如，显示一个网页可能潜在需要调用大数量的服务。例如Amazon.com，描述了一些页面如何需要100+的服务调用。即使在高速的网络连接下，更不用说低带宽，高延迟的移动网络，如此多的请求会非常低效且导致低劣的用户体验。</p>

<p>更好的方式是客户端对每个页面发出少量的请求，甚至少至一个在互联网前端服务器被称为API网关，如图5所示。</p>

<p><img src="http://www.huangbowen.net/images/apig.png" width="700" title="‘API网关’" ></p>

<p>图5 API网关</p>

<p>API网关位于应用程序的客户端与微服务之间。它提供了专为客户端定制的API。API网关为移动客户端提供了粗粒度的API，为桌面客户端提供了细粒度的API，因为客户端使用高性能的网络。在本例中，桌面客户端发送多个请求来获取一个产品信息，而移动客户端只发送单个请求。</p>

<p>API网关处理接收的请求，将这些请求通过高性能的局域网（LAN）转发给一定数量的微服务。例如,Netfix描述了每个请求如何平均分给6个后台服务。在本例中，从桌面客户端发送来的细粒度的请求只是被简单的代理给对应的服务，而从移动客户端发来的粗粒度的请求处理的方式是组合调用多个服务的结果。</p>

<p>API网关不仅可以优化客户端和应用程序间的通讯，也能隐藏微服务的细节。这使得微服务的进化不会影响客户端。例如，两个微服务可能会被合并。另一个微服务则可能被分割为两个或更多的服务。API网关唯一需要的做的是更新或反映这些修改。客户端完全不受影响。</p>

<p>现在已经知道了API网关是如何调解应用程序和其客户端的，现在看看如果实现微服务间的通讯。</p>

<h3>服务间通讯机制</h3>

<p>使用微服务架构的另一个不同之处是应用程序的组件之间交互方式的不同。单块应用程序中，组件间调用是通过常规的方法调用实现的。但是微服务架构中，不同的服务运行于不同的进程。结果，服务间必须使用一个进程间的的通讯（IPC）机制来交互。</p>

<h4>同步HTTP</h4>

<p>在微服务架构中有两个主要的方式实现进程间通讯。一种选项是基于同步HTTP的机制，比如REST或SOAP。这是简单和熟悉的IPC机制。它是防火墙友好的，所以可以穿透网络，而且实现通讯的请求/回复风格也比较容易。HTTP的低层不支持其它的通讯模式，比如发布-订阅模式。</p>

<p>另一个限制是客户端和服务器端必须保持同时在线，通常这不能随时保证，因为分布式系统很容易出现部分故障。而且，HTTP客户端需要知道服务器的主机地址和端口。听起来很简单，但整个并不简单，特别是在使用自动扩展的云部署中，这些服务实例是短暂的。应用程序需要使用一种服务发现机制（service discovery mechanism）。一些程序使用一个服务注册器，比如Apache ZooKeeper或Netflix Eureka。其它的程序中，服务必须注册到负载均衡器中，比如在Amazon VPC的一个内部的ELB。</p>

<h4>异步消息机制</h4>

<p>同步HTTP的一个替代方案是使用异步的基于消息的机制，比如基于AMQP的消息中间件。这种方式有一些优点。它解耦了消息生产者和消息消费者。消息中间件将缓存消息直到消费者能够处理它们。生产者完全不知道消费者的存在。生产者简单地与消息中间件交互，并且不需要使用服务发现机制。基于消息的通讯也支持多种通讯模式，比如单向请求和发布-订阅。使用消息的一个缺点是需要一个消息中间件，这是系统容易变动的另一部分，这会增加系统复杂度。另一个缺点是请求/回复风格的通讯不是天作之合。</p>

<p>两种方式各有优劣。应用程序可能混合使用这两种方式。例如，接下来的部分将会讨论在分段的架构中如何解决数据管理问题，你将看到如何同时使用HTTP和消息机制。</p>

<h3>分散数据管理</h3>

<p>将应用程序分解为服务的结果是数据库也被分割了。为了保证解耦，每个服务要有自己的数据库（模式）。此外，不同的服务可以使用不同的数据库，这被称为多语言的持久架构。例如，需要ACID事务的服务可能使用关系型数据库，而操作社交网络的服务可能使用图形数据库。分割数据库是必要的，但有一个新问题要解决：如何处理需要访问多个服务拥有的数据的请求。先来看如何处理读请求，再看如何处理更新请求。</p>

<h4>处理读请求</h4>

<p>例如，考虑在在线商店中每个客户有信用额度。当客户试图添加订单时，系统必须验证所有未结账单的总价不会超出信用额度。在整体应用程序中实现这种业务逻辑不难。但是如果客户是由客户服务管理，而其它部分由订单服务管理的情况下，在系统中实现登记更困难。订单服务必须通过某种方式访问由客户服务维护的信用额度信息。</p>

<p>一个解决方案是订单服务通过一个RPC调用向客户服务获取信用额度。这种方式很容易实现，而且保证了订单服务始终拿到的是最新的信用额度。缺点是它降低了可用性，因为客户服务必须时刻运行来订货。由于额外的RPC调用也增加了响应时间。</p>

<p>另一种方式是订单服务保存信用额度的一份副本。这消除了向客户服务发请求的需要，从而提高了可用性，减少了响应时间。然而，这意味着我们必须实现一种机制:当客户服务中的信用额度被修改时，来更新信用额度在订单服务中的副本。</p>

<h4>处理更新请求</h4>

<p>保持订单服务中信用额度一直是最新的问题是一个常见的问题的示例。该问题是如何处理更新被多个服务拥有的数据的请求。</p>

<h3>分布式事务</h3>

<p>当然，有个解决方案是使用分布式事务。例如，当更新客户的信用额度时，客户服务调用一个分布式的事务来更新本身的信用额度以及被订单服务维护的对应的信用额度。使用分布式事务也保证了数据的始终一致性。使用分布式事务的缺点是减少了系统可用性，因为所有参与者都必须可用，以保证事务能够提交。此外，分布式事务已经失宠，现代的软件栈（例如REST,NoSQL数据库等）通常已不支持分布式事务。</p>

<h3>事件驱动的异步更新</h3>

<p>另一种方式是使用事件驱动的异步复制。服务通过发布事件来宣布一些数据被修改。其它服务订阅这些事件来更新各自的数据。例如，当客户服务更新了一个客户的信用额度时，它发布了一个CustomerCreditLimitUpdatedEvent，其包含了客户id和新的信用额度值。订单服务订阅了这些事件并更新自身的信用额度副本。该事件流显示在图6中。</p>

<p><img src="http://www.huangbowen.net/images/rtclue.png" width="700" title="‘使用事件复制信用额度’" ></p>

<p>使用事件复制信用额度</p>

<p>本方式的主要优点是事件的生产者和消费者是解耦的。这不仅简化了开发，并且与分布式事务相比它提高了可用性。如果消费者无法处理事件，消息中间件会将消息保存在队列中直到消费者可以处理。该方式的主要缺陷是以一致性换可用性。应用程序的编写方式要能容忍最终一致性数据。开发者也需要实现修正事务来执行逻辑回滚。尽管有此缺陷，但仍不失为许多程序中的最佳方式。</p>

<h3>重构单块架构</h3>

<p>不幸的是我们不能总是工作于新品牌的绿色项目。如果你在负责一个大型的可怕的单块程序的项目中，那是个好机会。每天你都会处理在文章开头描述过的那些问题。好消息是有很多你可以使用的技术来分解你的单块应用程序为一组服务。</p>

<p>首先停止让问题更糟。不要继续通过向单块应用程序添加代码的方式来实现新功能。你应当采用某种方式来将新功能实现为独立的服务，正如图7所示。这可能并不容易。你可能会编写凌乱的，复杂的胶水代码来向单块应用程序集成服务。但这是打散单块程序的第一步。</p>

<p><img src="http://www.huangbowen.net/images/eas.png" width="700" title="‘抽取服务’" ></p>

<p>图7 抽取服务</p>

<p>其次，识别单块程序的组件并转换为紧密结合的独立服务。从组件抽取的好的候选者是不断改变的组件，或有资源需求冲突的组件，比如大型的内存缓存或CPU密集型操作。表示层也是另一个好的候选者。然后你可以将该组件转换为服务并编写胶水代码来与程序的其它部分集成。再一次，这可能很痛苦，但是它使你可以增量迁移到微服务架构。</p>

<h3>总结</h3>

<p>单块架构模式是构建企业级应用程序常用的模式。对于小的应用程序它很适用：开发，测试和部署小型的单块程序相对简单。但是，对于大型的复杂的应用程序，单块架构会阻碍开发和部署。如果你经常长期的锁定你的初始技术选择，则会使得持续交付变得困难。对于大型的应用程序，更适合适用微服务架构，其将应用程序分解为一组服务。</p>

<p>微服务架构有很多优点。例如，单个服务更容易理解，可以独立于其它服务来开发和部署。也更容易使用新的语言和技术，因为你可以一次只对一个服务尝试新技术。微服务架构也有一些显著的缺点。特别是对那些更复杂，拥有更多变化部分的应用程序。你需要高级别的自动化，比如PaaS，来高效的使用微服务。你也需要在开发微服务时处理一些复杂的分布式数据管理问题。尽管有这些缺点，微服务架构还是更适用于大型的复杂的应用程序，因为可以快速演化，特别是针对SaaS风格的应用程序。</p>

<p>有多种多样的策略来增量地将单块应用程序演化为微服务架构。开发者需要将新的功能实现为服务并编写胶水代码来将该服务与单块应用程序集成。也可以反复识别可从单块程序中抽取组件并转换为服务。演化并不容易，但总比开发和维护一个难驾驭的单块应用程序要好。</p>

<h3>关于作者</h3>

<p>Chris Richardson是一个开发者和架构师。他是Java拥护者，JavaOne 摇滚明星以及POJOs in Action一书的作者。该书描述了如何使用POJOs和诸如Spring和Hibernate的框架构建企业级Java应用。Chris也是original Cloud Foundry（一个针对Amazon EC2的早期Java PaaS）的创始人。他向组织机构做咨询从而提高人们的开发和部署技能，比如使用云计算，微服务，以及NoSQL。Twitter ID @crichardson。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTML5和CSS3响应式WEB设计指南 译者序]]></title>
    <link href="http://www.huangbowen.net/blog/2014/05/30/translators-words-of-html5/"/>
    <updated>2014-05-30T23:30:32+08:00</updated>
    <id>http://www.huangbowen.net/blog/2014/05/30/translators-words-of-html5</id>
    <content type="html"><![CDATA[<p>&ldquo;不是我不明白，这世界变化快。”崔健的这首歌使用在互联网领域最合适不过。只短短数年的功夫，互联网的浪潮还没过去，移动互联网的时代已经来临。人们已经习惯将越来越多的时间花在各种移动设备上。各大互联网公司先知先觉，在移动互联网领域杀的不可开交，甚至很多传统行业公司也在积极寻求自身领域与移动互联网的结合点。</p>

<p>终端设备种类繁多，要给所有用户群带来一致的用户体验实属不易。在这种背景下，响应式设计应运而生。响应式Web设计的理念是，页面的设计与开发应当根据用户行为及设备环境进行相应的响应和调整。响应式设计并不是单纯设计者的事情，它是一系列技术栈的结合。HTML5和CSS3酝酿了多年终于落地,其在响应式设计中扮演着举足轻重的角色。</p>

<p>本书作者Benjamin LaGrone具有丰富的互联网设计和开发经验。本书共7章，系统的介绍了利用HTML5和CSS3进行响应式Web设计的方方面面。每一小节基本都分为准备工作、实现方式、工作原理三部分，每个知识点逐步展开。并且每个小节所对应的方法都有详实的示例代码，可供读者参考学习。</p>

<p>在翻译此书的过程中，我和同事饶勋荣合作非常愉快。同时也感谢华章公司的编辑们对我们工作的支持。另外，还要感谢家人对我的包容和照顾。</p>

<p>最后，希望本书能给大家带来超凡的阅读体验。</p>

<p>黄博文</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用亚马逊的Route53服务]]></title>
    <link href="http://www.huangbowen.net/blog/2014/04/23/use-aws-route53/"/>
    <updated>2014-04-23T23:36:22+08:00</updated>
    <id>http://www.huangbowen.net/blog/2014/04/23/use-aws-route53</id>
    <content type="html"><![CDATA[<p>自从自己的博客从github迁移到AWS以上，再也不用担心Github被墙了。再加上CloudFront的CDN功能，那访问速度真是杠杆的，无论是在中国内陆，还是澳洲海边，秒开无压力。</p>

<!-- more -->


<p>但是这几天突然发现博客打不开了。这可是切换到AWS上这么久以来的头一次。仔细研究了一下发现是自己的独立域名解析不到地址。我的独立域名买的是国内某公司的，使用的DNS服务器也是他们默认提供的。给他们技术人员反映以后，发现问题更有意思了。我在澳洲无法访问，而他在国内访问一切正常。这真是奇葩啊。</p>

<p>痛定思痛，决定将自己的域名解析服务迁移到AWS上来，使用Route53服务。</p>

<p>进入AWS Management Console以后，选择Route 53.</p>

<p><img src="http://www.huangbowen.net/images/route53.png" width="700"></p>

<p>在主界面点击<code>Create Hosted Zone</code>，输入Domain name和comments。Domain name是你的域名，comments是描述。</p>

<p><img src="http://www.huangbowen.net/images/create_hosted_zone.png" width="800"></p>

<p>完成以后就会看到有一个条目显示在表格中。双击这条记录。可以看到AWS已经为你创建了NS和SOA两种类型的Record Set。NS类型中的4个地址以后会用到，需要将你的域名提供商的DNS服务器换为这里列出的四个。</p>

<p><img src="http://www.huangbowen.net/images/hosted_zone_list.png" width="800"></p>

<p>我们先为WWW创建一个Rcord Set。点击<code>Create Record Set</code>按钮，在在右侧输入相应的信息。</p>

<p><img src="http://www.huangbowen.net/images/create_record_set.png" width="800"></p>

<p>AWS支持多种类型，由于我想让www.huangbowen.net指向我cloudfront的endpoint，所以选择CNAME，Value为我cloud front中的endpoint。最后点击<code>create</code>按钮。</p>

<p>这样在AWS这边就配置完成了。最后是需要登录到域名提供商的后台中，将域名解析服务器给换掉。</p>

<p><img src="http://www.huangbowen.net/images/change_DNS.png" width="800"></p>

<p>在这里，将DNS换为之前AWS自动生成的NS地址。</p>

<p>这样就大功告成了，要等待2小时到1天来让新的解析方式生效。这下可以达到全年99.99%可访问率了吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java中测试异常的多种方式]]></title>
    <link href="http://www.huangbowen.net/blog/2014/04/13/testing-exceptions-in-java/"/>
    <updated>2014-04-13T23:32:48+08:00</updated>
    <id>http://www.huangbowen.net/blog/2014/04/13/testing-exceptions-in-java</id>
    <content type="html"><![CDATA[<p>使用JUnit来测试Java代码中的异常有很多种方式，你知道几种？</p>

<!-- more -->


<p>给定这样一个class。</p>

<figure class='code'><figcaption><span>Person.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getAge</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">age</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setAge</span><span class="o">(</span><span class="kt">int</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">age</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">&quot;age is invalid&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">age</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们来测试setAge方法。</p>

<h2>Try-catch 方式</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">shouldGetExceptionWhenAgeLessThan0</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Person</span> <span class="n">person</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Person</span><span class="o">();</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">person</span><span class="o">.</span><span class="na">setAge</span><span class="o">(-</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>            <span class="n">fail</span><span class="o">(</span><span class="s">&quot;should get IllegalArgumentException&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IllegalArgumentException</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">assertThat</span><span class="o">(</span><span class="n">ex</span><span class="o">.</span><span class="na">getMessage</span><span class="o">(),</span><span class="n">containsString</span><span class="o">(</span><span class="s">&quot;age is invalid&quot;</span><span class="o">));</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这是最容易想到的一种方式，但是太啰嗦。</p>

<h2>JUnit annotation方式</h2>

<p>JUnit中提供了一个<code>expected</code>的annotation来检查异常。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="nd">@Test</span><span class="o">(</span><span class="n">expected</span> <span class="o">=</span> <span class="n">IllegalArgumentException</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">shouldGetExceptionWhenAgeLessThan0</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Person</span> <span class="n">person</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Person</span><span class="o">();</span>
</span><span class='line'>        <span class="n">person</span><span class="o">.</span><span class="na">setAge</span><span class="o">(-</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这种方式看起来要简洁多了，但是无法检查异常中的消息。</p>

<h2>ExpectedException rule</h2>

<p>JUnit7以后提供了一个叫做<code>ExpectedException</code>的Rule来实现对异常的测试。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="nd">@Rule</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">ExpectedException</span> <span class="n">exception</span> <span class="o">=</span> <span class="n">ExpectedException</span><span class="o">.</span><span class="na">none</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">shouldGetExceptionWhenAgeLessThan0</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Person</span> <span class="n">person</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Person</span><span class="o">();</span>
</span><span class='line'>        <span class="n">exception</span><span class="o">.</span><span class="na">expect</span><span class="o">(</span><span class="n">IllegalArgumentException</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>        <span class="n">exception</span><span class="o">.</span><span class="na">expectMessage</span><span class="o">(</span><span class="n">containsString</span><span class="o">(</span><span class="s">&quot;age is invalid&quot;</span><span class="o">));</span>
</span><span class='line'>        <span class="n">person</span><span class="o">.</span><span class="na">setAge</span><span class="o">(-</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这种方式既可以检查异常类型，也可以验证异常中的消息。</p>

<h2>使用catch-exception库</h2>

<p>有个catch-exception库也可以实现对异常的测试。</p>

<p>首先引用该库。</p>

<figure class='code'><figcaption><span>pom.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>        <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>            <span class="nt">&lt;groupId&gt;</span>com.googlecode.catch-exception<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;artifactId&gt;</span>catch-exception<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;version&gt;</span>1.2.0<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>            <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span> <span class="c">&lt;!-- test scope to use it only in tests --&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后这样书写测试。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">shouldGetExceptionWhenAgeLessThan0</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Person</span> <span class="n">person</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Person</span><span class="o">();</span>
</span><span class='line'>        <span class="n">catchException</span><span class="o">(</span><span class="n">person</span><span class="o">).</span><span class="na">setAge</span><span class="o">(-</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>        <span class="n">assertThat</span><span class="o">(</span><span class="n">caughtException</span><span class="o">(),</span><span class="n">instanceOf</span><span class="o">(</span><span class="n">IllegalArgumentException</span><span class="o">.</span><span class="na">class</span><span class="o">));</span>
</span><span class='line'>        <span class="n">assertThat</span><span class="o">(</span><span class="n">caughtException</span><span class="o">().</span><span class="na">getMessage</span><span class="o">(),</span> <span class="n">containsString</span><span class="o">(</span><span class="s">&quot;age is invalid&quot;</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样的好处是可以精准的验证异常是被测方法抛出来的，而不是其它方法抛出来的。</p>

<p>catch-exception库还提供了多种API来进行测试。</p>

<p>先加载fest-assertion库。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>        <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>            <span class="nt">&lt;groupId&gt;</span>org.easytesting<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;artifactId&gt;</span>fest-assert-core<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;version&gt;</span>2.0M10<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后可以书写BDD风格的测试。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">shouldGetExceptionWhenAgeLessThan0</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// given</span>
</span><span class='line'>        <span class="n">Person</span> <span class="n">person</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Person</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// when</span>
</span><span class='line'>        <span class="n">when</span><span class="o">(</span><span class="n">person</span><span class="o">).</span><span class="na">setAge</span><span class="o">(-</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// then</span>
</span><span class='line'>        <span class="n">then</span><span class="o">(</span><span class="n">caughtException</span><span class="o">())</span>
</span><span class='line'>                <span class="o">.</span><span class="na">isInstanceOf</span><span class="o">(</span><span class="n">IllegalArgumentException</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'>                <span class="o">.</span><span class="na">hasMessage</span><span class="o">(</span><span class="s">&quot;age is invalid&quot;</span><span class="o">)</span>
</span><span class='line'>                <span class="o">.</span><span class="na">hasNoCause</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果喜欢Hamcrest风格的验证风格的话，catch-exception也提供了相应的Matcher API。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">shouldGetExceptionWhenAgeLessThan0</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// given</span>
</span><span class='line'>        <span class="n">Person</span> <span class="n">person</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Person</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// when</span>
</span><span class='line'>        <span class="n">when</span><span class="o">(</span><span class="n">person</span><span class="o">).</span><span class="na">setAge</span><span class="o">(-</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// then</span>
</span><span class='line'>        <span class="n">assertThat</span><span class="o">(</span><span class="n">caughtException</span><span class="o">(),</span> <span class="n">allOf</span><span class="o">(</span>
</span><span class='line'>                <span class="n">instanceOf</span><span class="o">(</span><span class="n">IllegalArgumentException</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'>                <span class="o">,</span> <span class="n">hasMessage</span><span class="o">(</span><span class="s">&quot;age is invalid&quot;</span><span class="o">)</span>
</span><span class='line'>                <span class="o">,</span><span class="n">hasNoCause</span><span class="o">()));</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>第一种最土鳖，第二种最简洁，第四种最靠谱。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[跑在路上的程序员随想]]></title>
    <link href="http://www.huangbowen.net/blog/2014/04/07/running/"/>
    <updated>2014-04-07T21:46:35+08:00</updated>
    <id>http://www.huangbowen.net/blog/2014/04/07/running</id>
    <content type="html"><![CDATA[<p>来布里斯班出差已经一个多月了。这一个月每天除了上班就是回到公寓里面宅起，基本没怎么运动。以前在国内的时候还是经常运动的，每天上下班要骑行将近30公里，一周至少去打3次篮球。这样一直保持着健壮的体魄，所以这么多年基本没得过什么病。（只有3年前有两个月天天加班干私活，一天工作14，5个小时，身体垮了，输了几次液，从那以后再不敢这么拼命了。所以BAT、HW那些公司经常出现过劳死也不足为怪。我经常锻炼的身体都顶不住，何况那些体质本来就比较差的人那?）</p>

<!-- more -->


<p>来布里斯班以后由于人生地不熟，不知道那里有篮球场，也没带球鞋，所以就放松了身体锻炼。结果这1个月基本没睡过好觉。经常是下午就困的不行，一下班回到公寓就呼呼大睡，睡到晚上12点又醒了，结果折腾到凌晨4点才又睡着，然后顶着通红的熊猫眼去上班。本来以为是时差和水土原因，但是过了1个月还不见好转。并且虽然没咋运动，每天反而感觉腰酸背痛的。</p>

<p>这节奏不对啊，感觉缺乏运动是作息时间不规律的元凶。楼下虽然有免费的健身房，但是那些举重设备自己玩不转，使用跑步机还不如在户外跑。我住的公寓楼下就是布里斯班河，和两边有专用自行车道和步行道，是跑步健身的绝佳场所。以前经常看到有人沿着河边骑车和跑步。</p>

<p>今天下班后去买了双跑鞋，沿着布里斯班河跑了个圆环，总共有12公里。虽然长久不运动，但是身体底子还在。跑到1公里的没啥感觉，跑到3公里时有点疲劳，跑到5公里时双腿开始酸痛。但是我并没有停下休息或者放弃，而且是继续坚持。跑到8公里已经完全是机械式运动了。慢慢的有点坚持不住了，但是我仍给自己鼓劲。我知道现在是最艰难的时刻，如果停下来对自己会有一种挫败感，我一边想象着跑到终点时的欢心时刻，一边咬牙坚持。挺过了最艰难的时刻之后，跑起来反而有些轻松。自己跑到终点之后反而有点意犹未尽。</p>

<p>这只是一个自己对自己的小测验，但是我由此想到了很多事情。</p>

<p>去年7月份的时候，临时被通知到国外出差，一半惊喜一半恐惧。惊喜的是可以见见世面，恐惧的是英文说不溜的我如何在国外存活。思前想后，似有退缩之意。后来咬牙还是去了。在国外一个月也没缺胳膊少腿，生活的还算自在，工作上也没碰到什么难题。自己假想的各种场景基本都没发生过，即使有也被轻松化解。</p>

<p>再往前，2012年底的时候，同事说某编辑找人翻译书籍，我有些心动。但是考虑到自己英语不出色，业余时间还要学习技术，再说还要试译，机会就差点溜走了。后来自己还是抓住了机会，经历了一些波折最后还是拿下了翻译合同，和另一个同事花了前后8个月完成了此书。这个过程中虽然很辛苦，使用了不少业余时间，但是当拿到出版后的书时我还是比较兴奋的。毕竟算干了一件自己之前没干过的事情，竟然干成了。现在自己翻译的第二本书业接近尾声，4月下旬左右就可以定稿。</p>

<p>再往前一年，2012年初的时候，毅然决然从工作了3年的公司离职，踏上了找工作的旅途。前后经历了几十场面试，中间凶险不用多说。后来手头拿到了10来个offer，最后选择了ThoughtWorks。这段话看似平淡，实则那段日子过的惊心动魄。当时一边背负房贷，一边还接着私活，一边还一直坚持要找一个自己喜欢的公司，那种压力可想而知。当时一个月瘦了10多斤，有时候开玩笑说想减肥就买房然后换工作，保准一个月瘦下来。面试ThoughtWorks过程中有数次差点打了退堂鼓，但终究还是认真坚持到了面试最后一轮，收到了offer。</p>

<p>经过了这么多事情，我已经习惯了坚持。当自己想做一件事情的时候，不要先给自己找借口，自己把自己吓趴下，而应该把精力放到如何解决面临的困难上，如何推动想做的事情。纵使最后事情没达到预期，自己也努力过，也有收获，下次接着干。</p>

<p>人，有的时候就是要对自己狠一点，把坚持这个习惯应用到各种小事中，这样遇到大事你才能习惯性坚持。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用ruby过程中遇到安装gem失败的一些通用解决方案]]></title>
    <link href="http://www.huangbowen.net/blog/2014/04/05/some-tips-to-resolve-ruby-gem-installation-issues/"/>
    <updated>2014-04-05T19:45:31+08:00</updated>
    <id>http://www.huangbowen.net/blog/2014/04/05/some-tips-to-resolve-ruby-gem-installation-issues</id>
    <content type="html"><![CDATA[<p>ruby语言升级还是比较勤快的。但是数量众多的版本使得程序库的兼容性成了大问题。有些gem表示明确不支持某个特定版本以前的ruby，而有些gem则与较高的版本不兼容。再加上gem本身也有版本，简直是乱成了一锅粥。即使使用了rvm、rbenv之类ruby版本管理工具也避免不了掉入坑中。并且时不时的一些其它环境设置也给你捣乱。所以一般使用ruby程序时，对升级ruby版本或各种gem版本都是比较慎重的，避免一时手贱掉入坑中。</p>

<!-- more -->


<p>当然你也不能因此就做缩头乌龟，某些情况下还是不得不升级的。比如想使用ruby或gem新版本的特性。而我本人无论使用什么软件都喜欢升级到最新版本，ruby程序也不例外。时间久了栽的次数多了也慢慢摸索出了一些经验。这里分享一下，希望大家都能避免这些坑，大胆的升级。</p>

<p>由于本人使用的操作系统是mac，所以这些tips都是基于MAC系统的。</p>

<p>当运行ruby脚本或者bundle install时，出错了首先一定要仔细看错误日志。如果有明确的出错日志，自己能解决的就可以着手解决，不知如何解决的可以选取关键词google之，一般也能找到解决方案。怕就怕google一圈以后还是不知如何是好。那么可以尝试下下面的几种方法。</p>

<h2>升级ruby的小版本。</h2>

<p>首先将当前的rvm升级到最新版本。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rvm get stable
</span></code></pre></td></tr></table></div></figure>


<p>然后查看当前使用的ruby版本和服务端可用的ruby版本。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rvm list
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>rvm list known
</span></code></pre></td></tr></table></div></figure>


<p>虽然不打算升级ruby主版本，但是小版本是可以尝试升级下，看是否能解决问题。比如当前你的ruby使用的是ruby-1.9.3-p448，但是查看到目前可用的1.9.3最新版本为ruby-1.9.3-p545。那么可以尝试切换到这个新版本下看能否解决问题。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rvm install ruby-1.9.3-p545
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>rvm use ruby-1.9.3-p545
</span></code></pre></td></tr></table></div></figure>


<h2>确保Xcode及Command line developer tools为最新版本</h2>

<p>请确保本机的Xcode的 command line developer tools已经安装并且是最新版本。把Xcode升级到最新版本以后，在命令行下输入：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>xcode-select —install
</span></code></pre></td></tr></table></div></figure>


<p>这样会弹出来一个升级对话框来升级相应的软件。</p>

<h2>确保GCC为最新版本</h2>

<p>查看目前电脑的gcc的版本。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>gcc -v
</span></code></pre></td></tr></table></div></figure>


<p>如果需要更新gcc的话推荐通过homebrew来更新。首先更新homebrew。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew update
</span></code></pre></td></tr></table></div></figure>


<p>然后输入下列命令。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew tap homebrew/dupes
</span><span class='line'><span class="nv">$ </span>brew search gcc
</span></code></pre></td></tr></table></div></figure>


<p>brew会告诉你当前最新的gcc版本。例如是apple-gcc42。然后安装新版本gcc。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew install apple-gcc42
</span></code></pre></td></tr></table></div></figure>


<p>然后查看系统是否应用了这个版本的gcc。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>which gcc-4.2
</span><span class='line'>/usr/local/bin/gcc-4.2
</span></code></pre></td></tr></table></div></figure>


<p>基本上以上的一些检查会解决掉一批由于ruby环境造成的问题。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring-Context之九:在bean定义中使用继承]]></title>
    <link href="http://www.huangbowen.net/blog/2014/04/04/using-bean-defination-inheritance/"/>
    <updated>2014-04-04T00:45:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2014/04/04/using-bean-defination-inheritance</id>
    <content type="html"><![CDATA[<p>定义bean时有个abstract属性，可以设置为true或false，默认为false。</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;animal&quot;</span> <span class="na">class=</span><span class="s">&quot;Animal&quot;</span> <span class="na">abstract=</span><span class="s">&quot;true&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;name&quot;</span> <span class="na">value=</span><span class="s">&quot;elephant&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;legs&quot;</span> <span class="na">value=</span><span class="s">&quot;4”/</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;/bean&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里定义了一个叫elepahnt的animal bean，有4条腿，它与其他bean不同之处是abstract属性为true。这意味着什么？意味着这个bean不能被实例化，不能通过ApplicationContext.getBean()的方式来获取到该bean，也不能使用ref属性引用这个bean。否则会抛出BeanIsAbstractException的异常。</p>

<p>你可能会问？坑爹那？声明一个bean不能被实例化，那有何用？</p>

<p>当然有用，Spring框架开发者也不是一帮吃饱了没事干的人，设计一些没用的功能出来。</p>

<p>这要配合着parent属性来用。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.springframework.org/schema/beans&quot;</span>
</span><span class='line'>       <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>       <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://www.springframework.org/schema/beans</span>
</span><span class='line'><span class="s">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;animal&quot;</span> <span class="na">class=</span><span class="s">&quot;Animal&quot;</span> <span class="na">abstract=</span><span class="s">&quot;true&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;legs&quot;</span> <span class="na">value=</span><span class="s">&quot;4&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;monkey&quot;</span> <span class="na">parent=</span><span class="s">&quot;animal&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;name&quot;</span> <span class="na">value=</span><span class="s">&quot;dudu&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/beans&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里有两个bean，一个是animal,指定legs是4，另一个是monkey，通过parent的属性指向animal，指定name为dudu。聪明的读者可能已经猜出来了，parent属性就是子bean可以继承父bean中的属性，并且在子bean中可以重载对应的属性。虽然我们没显式的指定monkey的legs为4，其实它已经从父bean animal中继承了这个属性。这样的好处是如果在定义大量bean时，发先大量bean存在重复属性定义时，可以抽取一个抽象bean出来，实现这些重复的属性定义，让其他bean都使用parent属性指向这个抽象bean。这样可以大大简化bean的配置。</p>

<p>除了使用parent直接引用父bean的class外，另外也可以使用自定义的class。</p>

<figure class='code'><figcaption><span>Monkey.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Monkey</span> <span class="kd">extends</span> <span class="n">Animal</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">boolean</span> <span class="n">canDrawing</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isCanDrawing</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">canDrawing</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setCanDrawing</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">canDrawing</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">canDrawing</span> <span class="o">=</span> <span class="n">canDrawing</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.springframework.org/schema/beans&quot;</span>
</span><span class='line'>       <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>       <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://www.springframework.org/schema/beans</span>
</span><span class='line'><span class="s">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;animal&quot;</span> <span class="na">class=</span><span class="s">&quot;Animal&quot;</span> <span class="na">abstract=</span><span class="s">&quot;true&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;legs&quot;</span> <span class="na">value=</span><span class="s">&quot;4&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;smartMonkey&quot;</span> <span class="na">class=</span><span class="s">&quot;Monkey&quot;</span> <span class="na">parent=</span><span class="s">&quot;animal&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;name&quot;</span> <span class="na">value=</span><span class="s">&quot;smallDudu&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;canDrawing&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/beans&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样smartMonkey自动继承了父bean中的legs属性，同时它的class类型也是一个新类型。</p>

<p>有人可能要问了，子bean的class与父bean中的class一定要是继承关系吗？答案是否定的。
请看这个修改后的Monkey class，其本身并未从Animal继承。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Monkey</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">boolean</span> <span class="n">canDrawing</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">legs</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isCanDrawing</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">canDrawing</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setCanDrawing</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">canDrawing</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">canDrawing</span> <span class="o">=</span> <span class="n">canDrawing</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getLegs</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">legs</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setLegs</span><span class="o">(</span><span class="kt">int</span> <span class="n">legs</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">legs</span> <span class="o">=</span> <span class="n">legs</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后还配置同样的bean。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.springframework.org/schema/beans&quot;</span>
</span><span class='line'>       <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>       <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://www.springframework.org/schema/beans</span>
</span><span class='line'><span class="s">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;animal&quot;</span> <span class="na">class=</span><span class="s">&quot;Animal&quot;</span> <span class="na">abstract=</span><span class="s">&quot;true&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;legs&quot;</span> <span class="na">value=</span><span class="s">&quot;4&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;smartMonkey&quot;</span> <span class="na">class=</span><span class="s">&quot;Monkey&quot;</span> <span class="na">parent=</span><span class="s">&quot;animal&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;name&quot;</span> <span class="na">value=</span><span class="s">&quot;smallDudu&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;canDrawing&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/beans&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>依然能够正常工作，并且smartMonkey中的legs还是4。</p>

<p>这说明了Spring中使用parent继承父bean中的属性并不需要子bean和父bean的class在一个继承树上。父bean更像一个模板，子bean能够自动使用父bean中的配置而已。唯一需要注意的是在父bean中定义的属性在子bean中都要存在。</p>

<p>那可能有人就有个大胆的猜想了，可不可以定义一个没有class类型的父bean那？这个bean反正不能实例化，只用来让子bean继承属性。答案是肯定的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.springframework.org/schema/beans&quot;</span>
</span><span class='line'>       <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>       <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://www.springframework.org/schema/beans</span>
</span><span class='line'><span class="s">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;animal&quot;</span> <span class="na">abstract=</span><span class="s">&quot;true&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;legs&quot;</span> <span class="na">value=</span><span class="s">&quot;4&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;monkey&quot;</span> <span class="na">parent=</span><span class="s">&quot;animal&quot;</span> <span class="na">class=</span><span class="s">&quot;Animal&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;name&quot;</span> <span class="na">value=</span><span class="s">&quot;dudu&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;smartMonkey&quot;</span> <span class="na">class=</span><span class="s">&quot;Monkey&quot;</span> <span class="na">parent=</span><span class="s">&quot;animal&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;name&quot;</span> <span class="na">value=</span><span class="s">&quot;smallDudu&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;canDrawing&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/beans&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的定义依然可以工作。</p>

<p>多说一点，parent也支持对集合属性的继承。比如在父bean中定义了一个属性为List或Map，子bean中也能继承到该List或Map，更强大的是子bean还可以对List或Map进行合并。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.springframework.org/schema/beans&quot;</span>
</span><span class='line'>       <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>       <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://www.springframework.org/schema/beans</span>
</span><span class='line'><span class="s">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;sampleAccounts&quot;</span> <span class="na">abstract=</span><span class="s">&quot;true&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;accounts&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;map&gt;</span>
</span><span class='line'>                <span class="nt">&lt;entry</span> <span class="na">key=</span><span class="s">&quot;Bob&quot;</span> <span class="na">value=</span><span class="s">&quot;001&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>                <span class="nt">&lt;entry</span> <span class="na">key=</span><span class="s">&quot;John&quot;</span> <span class="na">value=</span><span class="s">&quot;002&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/map&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;accountService&quot;</span> <span class="na">parent=</span><span class="s">&quot;sampleAccounts&quot;</span> <span class="na">class=</span><span class="s">&quot;AccountService&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;accounts&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;map</span> <span class="na">merge=</span><span class="s">&quot;true&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;entry</span> <span class="na">key=</span><span class="s">&quot;Michael&quot;</span> <span class="na">value=</span><span class="s">&quot;003&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>                <span class="nt">&lt;entry</span> <span class="na">key=</span><span class="s">&quot;Joel&quot;</span> <span class="na">value=</span><span class="s">&quot;004&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/map&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/beans&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在子bean中使用的map元素上使用merge=“true”就可以和父bean中的map条目进行合并。如果指定为false则不会合并，只会使用子bean中定义的map条目。</p>

<p>本例中的源码请在<a href="https://github.com/huangbowen521/Study">我的GitHub</a>上自行下载。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring-Context之八:一些依赖注入的小技巧]]></title>
    <link href="http://www.huangbowen.net/blog/2014/03/30/some-injection-way/"/>
    <updated>2014-03-30T18:31:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2014/03/30/some-injection-way</id>
    <content type="html"><![CDATA[<p>Spring框架在依赖注入方面是非常灵活和强大的，多了解点一些注入的方式、方法，绝对能优化配置。</p>

<!-- more -->


<h2>idref</h2>

<p>idref属性可以传入一个bean的名称，虽然它是指向一个bean的引用，但是得到的是该bean的id名。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;beans&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;movieService&quot;</span> <span class="na">class=</span><span class="s">&quot;DefaultMovieService&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;cinema&quot;</span> <span class="na">class=</span><span class="s">“Cinema&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;serviceRef&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;idref</span> <span class="na">bean=</span><span class="s">&quot;movieService&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/beans&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>它和直接设置serviceRef属性的value为movieService的区别是前者是能够保证必须有一个名movieService的bean存在于当前的spring容器中，如果没有则Spring容器会在初始化阶段就会报错;而后者仅仅是一个字符串，spring容器在初始化不会做任何检查，很可能将异常推后到运行时抛出。</p>

<h2>内部bean</h2>

<p>bean的定义是可以嵌套的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;beans&gt;</span>
</span><span class='line'>     <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">“movieService&quot;</span> <span class="na">class=</span><span class="s">&quot;DefaultMovieService&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>     <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;cinema&quot;</span> <span class="na">class=</span><span class="s">“Cinema&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;movieService&quot;</span> <span class="na">ref=</span><span class="s">“movieService&quot;/</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'><span class="nt">&lt;/beans&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以改为这种方式。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;cinema&quot;</span> <span class="na">class=</span><span class="s">&quot;Cinema&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;movieService&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">&quot;DefaultMovieService&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样内部bean就不需要一个名字的，当然这也意味着它无法被其他bean引用了。当然即使你给它起了名字，Spring容器也会忽略这个名字，其他bean也无法引用它。neibubean的scope始终和waibubean的scope保持一致。</p>

<h2>对集合的注入</h2>

<p>Java的集合框架中包含很多集合元素，比如List、Map、Set等。Spring支持对这些集合元素的注入。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;accountService&quot;</span> <span class="na">class=</span><span class="s">&quot;AccountService&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;accounts&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;map&gt;</span>
</span><span class='line'>                <span class="nt">&lt;entry</span> <span class="na">key=</span><span class="s">&quot;bowen&quot;</span> <span class="na">value=</span><span class="s">&quot;1234&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>                <span class="nt">&lt;entry</span> <span class="na">key=</span><span class="s">&quot;tom&quot;</span> <span class="na">value=</span><span class="s">&quot;3456&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/map&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;cookbook&quot;</span> <span class="na">class=</span><span class="s">&quot;Cookbook&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;recipe&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;list&gt;</span>
</span><span class='line'>                <span class="nt">&lt;value&gt;</span>noodle<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>                <span class="nt">&lt;value&gt;</span>rice<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>                <span class="nt">&lt;value&gt;</span>meat<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/list&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>还可以直接配置java的Properties。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;databaseSource&quot;</span> <span class="na">class=</span><span class="s">&quot;DatabaseSource&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;source&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;props&gt;</span>
</span><span class='line'>                <span class="nt">&lt;prop</span> <span class="na">key=</span><span class="s">&quot;port&quot;</span><span class="nt">&gt;</span>2012<span class="nt">&lt;/prop&gt;</span>
</span><span class='line'>                <span class="nt">&lt;prop</span> <span class="na">key=</span><span class="s">&quot;host&quot;</span><span class="nt">&gt;</span>localhost<span class="nt">&lt;/prop&gt;</span>
</span><span class='line'>                <span class="nt">&lt;prop</span> <span class="na">key=</span><span class="s">&quot;schema&quot;</span><span class="nt">&gt;</span>db1<span class="nt">&lt;/prop&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/props&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>嵌套属性名注入</h2>

<p>Spring支持使用嵌套属性注入值。</p>

<figure class='code'><figcaption><span>Restaurant.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Restaurant</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Person</span> <span class="n">manager</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Person</span> <span class="nf">getManager</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">manager</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setManager</span><span class="o">(</span><span class="n">Person</span> <span class="n">manager</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">manager</span> <span class="o">=</span> <span class="n">manager</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Person.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getAge</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">age</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setAge</span><span class="o">(</span><span class="kt">int</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">age</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;restaurant&quot;</span> <span class="na">class=</span><span class="s">&quot;huangbowen.net.service.Restaurant&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;manager&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">&quot;huangbowen.net.PAndCNamespace.Person&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;manager.age&quot;</span> <span class="na">value=</span><span class="s">&quot;20&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>需注意除了最后一个属性，其他属性不能为空值。</p>

<h2>使用depends-on属性</h2>

<p>当你初始化一个bean时，需要另一个bean先被初始化，这种情况很常见。虽然Spring在最大程度上能自动按照你期望的顺序来初始化bean（比如构造器注入的bean会优先初始化），但是不保证总能符合你的心意。你可以使用depends-on属性来显示指定bean的初始化顺序。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;beans&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>   <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;movieService&quot;</span> <span class="na">class=</span><span class="s">&quot;DefaultMovieService&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;cinema&quot;</span> <span class="na">class=</span><span class="s">“Cinema”</span> <span class="na">depends-on=</span><span class="s">&quot;movieService&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;serviceRef&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;idref</span> <span class="na">bean=</span><span class="s">&quot;movieService&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/beans&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>也可以同时deppends-on多个对象。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;cinema&quot;</span> <span class="na">class=</span><span class="s">“Cinema”</span> <span class="na">depends-on=</span><span class="s">“movieService,accountService&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;serviceRef&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;idref</span> <span class="na">bean=</span><span class="s">&quot;movieService&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[切换到ZSH以后遇到的坑]]></title>
    <link href="http://www.huangbowen.net/blog/2014/03/29/using-zsh/"/>
    <updated>2014-03-29T00:51:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2014/03/29/using-zsh</id>
    <content type="html"><![CDATA[<p>了解到ZSH的强大以后打算将自己目前使用的bash切换到ZSH。具体ZSH比bash强在那里就不多少了，网上的文章一搜一大把。个人主要是被ZSH强大的自动补全吸引过来的。虽然bash装了bash-completaion以后也有了一定的自动补全能力，但是和ZSH比起来还是差距太大。</p>

<!-- more -->


<p>ZSH虽然功能强大，但是配置繁琐，并且shell脚本的语法一向比较奇葩，如果自己定制还需要对shell脚本有一定的了解。本来想用ZSH来节省时间，但是还要花大量时间来配置ZSH无疑会生使众多程序员望而却步。好在github有oh-my-ZSH这个项目，自动把大量的配置给你搞好了，基本上做到了开箱即用。</p>

<p>具体如何安装ZSH和配置oh-my-zsh就不多说了，请参见<a href="https://github.com/robbyrussell/oh-my-zsh">https://github.com/robbyrussell/oh-my-zsh</a>。</p>

<p>安装完毕后运行<code>chsh -s /bin/zsh</code>将当前默认的shell切换为zsh。另外需要做的是要将以前~/.bash_profile中的配置复制到~/.zshrc中，这样保证以前在bash中定义的别名、命令等可以继续正常工作。</p>

<p>虽然说ZSH无缝兼容bash，但是刚开始使用还是遇到了一些坑，好歹都一一解决了。</p>

<h2>编码问题</h2>

<p>当我运行Octopress博客的生成博客命令时，遇到了这个奇怪的错。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rake generate
</span><span class='line'>
</span><span class='line'>YAML Exception reading 2013-12-15-responsive-menu-by-media-queries.markdown: invalid byte sequence in US-ASCII
</span></code></pre></td></tr></table></div></figure>


<p>看起来貌似是默认编码的问题，ZSH使用的默认编码是US-ASCII，但我期望的是UTF-8。</p>

<p>ok,查看当前zsh shell下的编码是什么。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>locale
</span><span class='line'><span class="nv">LANG</span><span class="o">=</span>
</span><span class='line'><span class="nv">LC_COLLATE</span><span class="o">=</span><span class="s2">&quot;C&quot;</span>
</span><span class='line'><span class="nv">LC_CTYPE</span><span class="o">=</span><span class="s2">&quot;C&quot;</span>
</span><span class='line'><span class="nv">LC_MESSAGES</span><span class="o">=</span><span class="s2">&quot;C&quot;</span>
</span><span class='line'><span class="nv">LC_MONETARY</span><span class="o">=</span><span class="s2">&quot;C&quot;</span>
</span><span class='line'><span class="nv">LC_NUMERIC</span><span class="o">=</span><span class="s2">&quot;C&quot;</span>
</span><span class='line'><span class="nv">LC_TIME</span><span class="o">=</span><span class="s2">&quot;C&quot;</span>
</span><span class='line'><span class="nv">LC_ALL</span><span class="o">=</span>
</span></code></pre></td></tr></table></div></figure>


<p>由于没设值，所以ZSH就选取了US-ASCII。</p>

<p>解决办法也很简单，在<code>~/.zshrc</code>中加入以下两行。</p>

<figure class='code'><figcaption><span>~/.zshrc</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>export LC_ALL=en_US.UTF-8  export LANG=en_US.UTF-8```然后重新加载zshrc文件并查看编码。$ source ~/.zshrc$ locale
</span><span class='line'># Compilation flagsLANG=&quot;en_US.UTF-8&quot;
</span><span class='line'>LC_COLLATE=&quot;en_US.UTF-8&quot;
</span><span class='line'>LC_CTYPE=&quot;en_US.UTF-8&quot;
</span><span class='line'>LC_MESSAGES=&quot;en_US.UTF-8&quot;
</span><span class='line'>LC_MONETARY=&quot;en_US.UTF-8&quot;
</span><span class='line'>LC_NUMERIC=&quot;en_US.UTF-8&quot;
</span><span class='line'>LC_TIME=&quot;en_US.UTF-8&quot;
</span><span class='line'>LC_ALL=&quot;en_US.UTF-8”
</span></code></pre></td></tr></table></div></figure>


<h2>通配符问题</h2>

<p>我又发现如果命令行中有[] *等字符会被zsh优先作为通配符处理，这样导致某些命令会被ZSH错误解析。</p>

<p>比如:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rake new_post<span class="o">[</span>‘a new post’<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里的[]是ruby语言中的语法，但是被ZSH解析成了通配符，所以报错。解决方法也简单，关闭ZSH的这一特性。</p>

<p>在~/.zshrc中加入下面一行即可搞定。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>setopt no_nomatch
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring-Context之七:使用p-namesapce和c-namespace简化bean的定义]]></title>
    <link href="http://www.huangbowen.net/blog/2014/03/26/using-p-namespace-and-c-namespace/"/>
    <updated>2014-03-26T00:50:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2014/03/26/using-p-namespace-and-c-namespace</id>
    <content type="html"><![CDATA[<p>在Spring中定义bean的方式多种多样，即使使用xml的方式来配置也能派生出很多不同的方式。</p>

<!-- more -->


<p>比如如下的bean定义:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.springframework.org/schema/beans&quot;</span>
</span><span class='line'>       <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>       <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://www.springframework.org/schema/beans</span>
</span><span class='line'><span class="s">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;person&quot;</span> <span class="na">class=</span><span class="s">&quot;Person&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;name&quot;</span> <span class="na">value=</span><span class="s">&quot;Tom&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;age&quot;</span> <span class="na">value=</span><span class="s">&quot;20&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/beans&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样的bean有三行，通过使用p-namespace以后可以简化为一行。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.springframework.org/schema/beans&quot;</span>
</span><span class='line'>       <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>       <span class="na">xmlns:p=</span><span class="s">&quot;http://www.springframework.org/schema/p&quot;</span>
</span><span class='line'>       <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://www.springframework.org/schema/beans</span>
</span><span class='line'><span class="s">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;person&quot;</span> <span class="na">class=</span><span class="s">&quot;Person&quot;</span> <span class="na">p:name=</span><span class="s">&quot;Tom&quot;</span> <span class="na">p:age=</span><span class="s">&quot;20&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/beans&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>那么什么是<code>p-namespace</code>那？它的作用就是使用xml中的元素属性取代<code>&lt;property/&gt;</code>节点来定义bean的属性。这个神奇的p是什么东西那？它其实是使用了namespace的xml扩展配置格式。beans的配置格式是定义在一个xsd格式中的（即<a href="http://www.springframework.org/schema/beans/spring-beans.xsd">http://www.springframework.org/schema/beans/spring-beans.xsd</a>），但p却没有一个xsd格式文件与其对应，但是它可以被spring内核解析处理。</p>

<p>上面只是演示了对属性为普通值的时使用<code>p-namespace</code>的注入，如果属性为另一个bean的引用时该如何处理那？很简单。</p>

<p>这是使用正常方式注入属性。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;messageService&quot;</span> <span class="na">class=</span><span class="s">&quot;SimpleMessageService&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;messageHandler&quot;</span> <span class="na">class=</span><span class="s">&quot;MessageHandler&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;messageService&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;ref</span> <span class="na">bean=</span><span class="s">&quot;messageService&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用<code>p-namespace</code>后是这样的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;messageService&quot;</span> <span class="na">class=</span><span class="s">&quot;SimpleMessageService&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;messageHandler&quot;</span> <span class="na">class=</span><span class="s">“MessageHandler”</span> <span class="na">p:messageService-ref=</span><span class="s">“messageService”/</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>加上<code>-ref</code>后缀即表示是对一个bean的引用。</p>

<p>那既然setter方法注入bean可以使用<code>p-namespace</code>，那么构造器方式注入有没有相应的简写那？答案是肯定的，那就是<code>c-namespace</code>，原理和使用方法与<code>p-namespace</code>大同小异。</p>

<p>使用<code>c-namespace</code>前:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.springframework.org/schema/beans&quot;</span>
</span><span class='line'>       <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>       <span class="na">xmlns:c=</span><span class="s">&quot;http://www.springframework.org/schema/c&quot;</span>
</span><span class='line'>       <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://www.springframework.org/schema/beans</span>
</span><span class='line'><span class="s">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;person&quot;</span> <span class="na">class=</span><span class="s">&quot;Person&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;constructor-arg</span> <span class="na">name=</span><span class="s">&quot;name&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;value&gt;</span>Tom<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/constructor-arg&gt;</span>
</span><span class='line'>        <span class="nt">&lt;constructor-arg</span> <span class="na">name=</span><span class="s">&quot;age&quot;</span> <span class="na">value=</span><span class="s">&quot;20&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/beans&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用<code>c-namespace</code>后:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.springframework.org/schema/beans&quot;</span>
</span><span class='line'>       <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>       <span class="na">xmlns:c=</span><span class="s">&quot;http://www.springframework.org/schema/c&quot;</span>
</span><span class='line'>       <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://www.springframework.org/schema/beans</span>
</span><span class='line'><span class="s">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;person&quot;</span>  <span class="na">c:name=</span><span class="s">&quot;Tom&quot;</span> <span class="na">c:age=</span><span class="s">&quot;20&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/beans&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>也可以使用<code>-ref</code>后缀来表示对另一个bean的引用。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'> <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;messageService&quot;</span> <span class="na">class=</span><span class="s">&quot;SimpleMessageService&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;messageHandler&quot;</span> <span class="na">class=</span><span class="s">&quot;MessageHandler&quot;</span> <span class="na">c:messageService-ref=</span><span class="s">&quot;messageService&quot;</span><span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在前面章节讲解构造器注入时，可以使用构造参数索引来注入依赖，<code>c-namespace</code>也支持这一方式。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.springframework.org/schema/beans&quot;</span>
</span><span class='line'>       <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>       <span class="na">xmlns:c=</span><span class="s">&quot;http://www.springframework.org/schema/c&quot;</span>
</span><span class='line'>       <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://www.springframework.org/schema/beans</span>
</span><span class='line'><span class="s">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;person”  c:_0=&quot;</span><span class="err">Tom&quot;</span> <span class="na">c:_1=</span><span class="s">&quot;20&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;messageService&quot;</span> <span class="na">class=</span><span class="s">&quot;SimpleMessageService&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;messageHandler&quot;</span> <span class="na">class=</span><span class="s">&quot;MessageHandler&quot;</span> <span class="na">c:_0-ref=</span><span class="s">&quot;messageService&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/beans&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>怎么样，是不是很强大啊。但是太过强大也容易伤人伤己。在项目中使用这些技巧之前最好先和项目成员达成一致。</p>

<p>本例中的源码请在<a href="https://github.com/huangbowen521/Study">我的GitHub</a>上自行下载。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActiveMQ第六弹:设置多个并行的消费者]]></title>
    <link href="http://www.huangbowen.net/blog/2014/03/23/use-multiple-consumers-in-activemq/"/>
    <updated>2014-03-23T01:52:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2014/03/23/use-multiple-consumers-in-activemq</id>
    <content type="html"><![CDATA[<p>消息队列本来就是一种经典的生产者与消费者模式。生产者向消息队列中发送消息，消费者从消息队列中获取消息来消费。</p>

<!-- more -->


<p><img src="http://www.huangbowen.net/images/singleQ.png"></p>

<p>消息的传送一般由一个代理来实现的，那就是Message broker（即消息代理）。Message broker有两大职责，一是消息路由，二是数据转换。这就好比A给B寄信，如果不使用邮局的话，就要自己想办法送达，费时费力，而通过邮局的话，只要B的地址在邮局中注册过，那么天涯海角也能送达。这里的邮局扮演的角色就像消息系统中的Message broker。</p>

<p><img src="http://www.huangbowen.net/images/queueAndMB.png"></p>

<p>众所周知，消息队列是典型的’send and forget’原则的体现，生产者只管发送，不管消息的后续处理。为了最大效率的完成对消息队列中的消息的消费，一般可以同时起多个一模一样的消费者，以并行的方式来拉取消息队列中的消息。这样的好处有多个：</p>

<ol>
<li><p>加快处理消息队列中的消息。</p></li>
<li><p>增强稳定性，如果一个消费者出现问题，不会影响对消息队列中消息的处理。</p></li>
</ol>


<p><img src="http://www.huangbowen.net/images/multipleCunsumer.png"></p>

<p>使用Spring JMS来配置多个Listener实例其实也相当简单，只需要配置下MessageListenerContainer就行。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">&quot;org.springframework.jms.listener.SimpleMessageListenerContainer&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;connectionFactory&quot;</span> <span class="na">ref=</span><span class="s">&quot;connectionFactory&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;destinationName&quot;</span> <span class="na">value=</span><span class="s">&quot;${jms.queue.name}&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;messageListener&quot;</span> <span class="na">ref=</span><span class="s">&quot;messageReceiver&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;concurrentConsumers&quot;</span> <span class="na">value=</span><span class="s">&quot;4&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/bean&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>多配置一个属性<code>concurrentConsumers</code>，设置值为4，就是同时启动4个Listener实例来消费消息。</p>

<p>使用MessageSender来发送100条消息，可以检查消息处理的顺序会发生变化。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">100</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">messageSender</span><span class="o">.</span><span class="na">send</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;message %d&quot;</span><span class="o">,</span><span class="n">i</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>...
</span><span class='line'>Received: message 4
</span><span class='line'>Received: message 7
</span><span class='line'>Received: message 6
</span><span class='line'>Received: message 5
</span><span class='line'>Received: message 8
</span><span class='line'>Received: message 10
</span><span class='line'>Received: message 9
</span><span class='line'>…
</span></code></pre></td></tr></table></div></figure>


<p>除了设置一个固定的Listener数量，也可以设置一个Listener区间，这样MessageListenerContainer可以根据消息队列中的消息规模自动调整并行数量。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">&quot;org.springframework.jms.listener.SimpleMessageListenerContainer&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;connectionFactory&quot;</span> <span class="na">ref=</span><span class="s">&quot;connectionFactory&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;destinationName&quot;</span> <span class="na">value=</span><span class="s">&quot;${jms.queue.name}&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;messageListener&quot;</span> <span class="na">ref=</span><span class="s">&quot;messageReceiver&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;concurrency&quot;</span> <span class="na">value=</span><span class="s">&quot;4-8&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这次使用的是<code>concurrency</code>属性，4-8表示最小并发数是4，最大并发数为8，当然也可以给一个固定值，比如5，这样就相当于concurrentConsumers属性了。</p>

<p>本章中的完整源码可从完整代码可从<a href="https://github.com/huangbowen521/SpringJMSSample">https://github.com/huangbowen521/SpringJMSSample</a>下载。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[码农提高工作效率]]></title>
    <link href="http://www.huangbowen.net/blog/2014/03/20/be-a-an-efficient-programmer/"/>
    <updated>2014-03-20T02:51:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2014/03/20/be-a-an-efficient-programmer</id>
    <content type="html"><![CDATA[<p>俗话说，天下武功，唯快不破。也就是说要练成天下高手的话，出招速度一定要快，这样才能在江湖上立足，不至于掉了脑袋。而程序员要在IT界混出个名堂，也要有高效的工作效率才行。IT行业时时刻刻都产生着新知识、新技术，要想跟上变革肯定要有几把刷子。</p>

<!-- more -->


<p>而我本人很喜欢各种各样的方式来提高自己的工作效率，可以分享给大家一些经验。</p>

<ol>
<li><p><strong>键盘功底要扎实。</strong>敲键盘时要使用标准指法。可能你认为这是程序员的基本功，可是我发现其实很多程序员都做不到这点。看着他们敲代码时那笨拙的指法我就心急。其实炼成标准指法不难，相当年我还是一指禅，打字极慢，痛定思定，在一周内我打字必用标准指法，再别扭也要坚持，一周后就适应了标准指法了。现在不说运指如飞也算是略有小成。练习指法和键盘速度可以给大家推荐一些网站:<a href="http://10fastfingers.com/typing-test/english">http://10fastfingers.com/typing-test/english</a>,这个就是练习标准指法的，我可以轻松上60 WPM(每分钟60单词)，有个外国同事可以达到130以上，那才叫恐怖。<a href="http://typing.io/lessons">http://typing.io/lessons</a>，专门供程序员练习敲代码的网站，融合了各种括号和标点，难度有点大。</p></li>
<li><p><strong>要熟悉IDE的各种快捷键及特性。</strong>IDE基本上是码农们上班中使用时间最长的软件。首先要选择一个趁手的IDE，俗话说，工玉成其事，必先利其器嘛。如果是C#阵营的那肯定是最新版的Vistual Studio了，如果是Java阵营的话当然是Intellij了（eclipse作为开源IDE，真心比不过Intellij）。我现在使用Intellij可以在95%的情况下不用鼠标，全键盘完成开发过程中的大部分操作。我觉得没有什么常用快捷键、不常用快捷键之分，只要你知道的快捷键就要拿来用。尤其是各种重构快捷键必须要熟练掌握，当我看到码农修改变量名时不用重构快捷键，而是自己手动在引用的地方一个个改，然后编译查错时，真为他们捉急。还有各种inline，introduce的快捷键真是好用到爆，掌握了这些快捷键可以说对代码进行任何重构都不费除灰之力，我们的注意力也从手动修改代码转移到如何发现坏味道了。Vistual Studio中推荐安装ReSharper，其开发公司与Intellij开发公司是同一家。除了重构快捷键，还要掌握一些IDE的特性，比如调试时可以插入指定条件来命中断点等，这些就要平时的积累和学习，另外还有好奇心。我敢说你现在挨个看IDE菜单，至少有30%功能你从没用过或不知道是干什么用的，其实里面有些功能是非常实用的，只是你没尝试而已。</p></li>
<li><p><strong>至少熟练掌握一种shell终端。</strong>作为程序员老用图形化界面咋行，要用那种古老的命令行界面才能显示出你的高深嘛！鼠标点界面谁都会，而命令行界面不是谁都能驾驭。有些功能在命令行下要比图形界面下高效N倍。比如我使用git提交文件时都是在命令行下查看哪些文件被修改了，哪些是新添加的，修改的部分是哪些等。使用图形化界面要用鼠标点来点去，效率实在太低。Linux系统下的终端太多了，就不推荐了。Mac系统下推荐使用iTerm2这个壳，其比MAC自带的terminal多了不少实用的特性，也能方便切换自己喜欢的配色。Windows下当然首推Windows Power Shell了。Windows Power Shell本身集成了常用的实用工具，并且与.net framework无缝结合，这点是那些在Windows上的类Linux模拟器（比如Cygwin）是远远比不了的。</p></li>
<li><p><strong>具有一定编写shell脚本的功底。</strong>光会用现有的脚本还不行，还要会根据情况编写脚本来实现自己特定的一些目标。比如我使用MAC机上的终端时，经常需要在不同目录间跳来跳去，每次都打一串的<code>cd …..</code>很麻烦，后来我就自己写了一个小工具，可以给指定的目录起别名，想要跳到这个目录只要敲别名即可（参见<a href="http://www.huangbowen.net/blog/2013/02/16/gtshell/">http://www.huangbowen.net/blog/2013/02/16/gtshell/</a>）。还有我在Windows系统上工作时，也经常编写一些Power Shell脚本，比如一个命令就启动指定的FTP服务器，一些小命令用来实现快速在不同项目源码间切换并执行构建命令等。这些命令编写起来都很简单，在提高工作效率方面很好帮助，因为一些常用的费时的操作每天重复N次，让人很厌烦，如果能够使用脚本将其自动化起来，岂不是就把自己给解脱了？</p></li>
<li><p><strong>多语言编程。</strong>在这个世界有太多太多的编程语言，但凡稍微流行的编程语言都有自己独特的优势，而我们要善于利用每种编程语言的特点，而不是整天吵闹那种语言更强大。我自己熟悉C#、java语言，也用JavaScript、Ruby、Python、Groovy做过一些东西，甚至为了理解函数式编程还专门学习了Haskell语言。这些语言都给我带来了实用的效果。比如我用Ruby写了一个插件，可以自动把我主站上的博客同步到博客园中的博客来。我使用Groovy给我的Java代码写单元和集成测试，比使用Java语言编写要快很多。我用Python和WebDriver写了一个论坛灌水工具来刷积分。你掌握的语言越多，你的视野就越广,你对编程的理解就会越深入。当然我不赞成盲目的求多，至少你要有2到3门精通的语言，从语言语法、语言运行时、语言特性、语言API等方面都要有深入学习和见解，当你再学习其它语言时也不会浮于表面的了。</p></li>
<li><p><strong>这是最重要的一点，时刻保持一颗好奇心，一颗坚定不移的提高工作效率的决心。</strong>很多人都抱着差不多态度，心想“我虽不是标准指法，敲键盘速度也差不多”，“我IDE快捷键用的不多，也没觉得那里影响到我开发”，“我只会C#一种语言，还不照样干到现在了吗？”之所以有这种想法，是是因为你没有见到真正高效的人。我曾看到某IT界牛人那出神入化的VIM操作，简直已经超越了指哪打哪的境界，已经达到了键随心动的境界。我也看到某高级程序员使用IDE快捷键三下五除二就把一段丑陋的代码给收拾的服服帖帖。耳濡目染之下让我坚定了这个决心，不做差不多先生。所以平时我和同事一起工作时，就留心他们有哪些方法和工具来提高自己的工作效率。如果他们使用了一些好用的快捷键而我不知道，那我就会记下来下次自己用（快捷键熟练程度上我早已是我们项目组的number one）。如果看到他们使用了一些好的工具我也会立马回去下载下来自己用。（比如前两天我看到同事使用SuperPutty来连接远程主机，其支持多tab方式，这正是我想要的功能。我回去立马下载下来，抛弃了以前的Putty）这样时间长了，集众人之所长，你自然也成为效率达人了。</p></li>
</ol>


<p>为了我追崇高效率那？我觉得最大的好处是能让我的大脑从繁重的重复劳动中解脱出来，从而能集中精神思考更有价值的事情，而不是被一些杂音干扰。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring-Context之六:基于Setter方法进行依赖注入]]></title>
    <link href="http://www.huangbowen.net/blog/2014/03/18/setter-injection-in-spring/"/>
    <updated>2014-03-18T00:33:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2014/03/18/setter-injection-in-spring</id>
    <content type="html"><![CDATA[<p>上文讲了基于构造器进行依赖注入，这里讲解基于Setter方法进行注入。在Java世界中有个约定（Convention）,那就是属性的设置和获取的方法名一般是:set+属性名(参数)及get+属性名()的方式。boolean类型稍有不同，可以使用is+属性名()方式来获取。</p>

<!-- more -->


<p>以下是一个示例。</p>

<figure class='code'><figcaption><span>MessageHandler.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MessageHandler</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">MessageService</span> <span class="n">messageService</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">MessageService</span> <span class="nf">getMessageService</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">messageService</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setMessageService</span><span class="o">(</span><span class="n">MessageService</span> <span class="n">messageService</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">messageService</span> <span class="o">=</span> <span class="n">messageService</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">handle</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">messageService</span><span class="o">.</span><span class="na">sendService</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用Setter方法注入如下所示。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;messageService&quot;</span> <span class="na">class=</span><span class="s">&quot;huangbowen.net.DependecyInjection.ConstructorInjection.SimpleMessageService&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;messageHandler&quot;</span> <span class="na">class=</span><span class="s">&quot;huangbowen.net.DependecyInjection.SetterInjection.MessageHandler&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;messageService&quot;</span> <span class="na">ref=</span><span class="s">&quot;messageService&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果property的name为messageService,那么必须在类中有个叫做<code>setMessageService</code>的方法，这样才能完成注入。如果将MessageHandler.java中的<code>setMessageService</code>方法改为<code>setMessageService1</code>，那么注入就会失败，失败message如下所示。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>...
</span><span class='line'>java.lang.IllegalStateException: Failed to load ApplicationContext
</span><span class='line'>
</span><span class='line'>...
</span><span class='line'>Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name &#39;messageHandler&#39; defined in class path resource [spring-context.xml]: Error setting property values; nested exception is org.springframework.beans.NotWritablePropertyException: Invalid property &#39;messageService&#39; of bean class [huangbowen.net.DependecyInjection.SetterInjection.MessageHandler]: Bean property &#39;messageService&#39; is not writable or has an invalid setter method. Did you mean &#39;messageService1&#39;?
</span><span class='line'>
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>当然可以同时使用构造器注入和setter方法注入。</p>

<figure class='code'><figcaption><span>Person.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">Person</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getAge</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">age</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setAge</span><span class="o">(</span><span class="kt">int</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">age</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>bean定义如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;person&quot;</span> <span class="na">class=</span><span class="s">&quot;huangbowen.net.DependecyInjection.SetterInjection.Person&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;constructor-arg</span> <span class="na">value=</span><span class="s">&quot;Tom&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;age&quot;</span> <span class="na">value=</span><span class="s">&quot;20&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>要实现一个bean，即可以使用构造器注入，也可以使用setter注入，甚至可以在一个bean中综合使用这两种方式。那么在真正开发中应该作何取舍那？一般来说，使用构造器注入的依赖必须是强制的依赖，而使用setter注入的依赖则是可选的依赖。使用构造器注入生成的对象是完全初始化了的，用户可以直接拿来用，但是相比于setter方法而言用户也就失去了定制化的能力。如果你发现构造器参数过多，那么很可能说明该类承担的职责过多，应该从设计解耦的角度对类的职责进行拆分。使用setter注入的对象好处是，用户可以按需重新注入新的属性。</p>

<p>另外在进行依赖注入时，可以将某些属性抽出来成为一个元素，或者将元素内联成为一个属性。比如ref这个属性。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;messageHandler&quot;</span> <span class="na">class=</span><span class="s">&quot;huangbowen.net.DependecyInjection.SetterInjection.MessageHandler&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;messageService&quot;</span> <span class="na">ref=</span><span class="s">&quot;messageService&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>它与以下xml配置完全等价。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'> <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;messageHandler&quot;</span> <span class="na">class=</span><span class="s">&quot;huangbowen.net.DependecyInjection.SetterInjection.MessageHandler&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;messageService&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;ref</span> <span class="na">bean=</span><span class="s">&quot;messageService&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>value属性也可以独立为元素。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;person&quot;</span> <span class="na">class=</span><span class="s">&quot;huangbowen.net.DependecyInjection.SetterInjection.Person&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;constructor-arg</span> <span class="na">value=</span><span class="s">&quot;Tom&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;age&quot;</span> <span class="na">value=</span><span class="s">&quot;20&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>其等价于:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;person&quot;</span> <span class="na">class=</span><span class="s">&quot;huangbowen.net.DependecyInjection.SetterInjection.Person&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;constructor-arg</span> <span class="na">value=</span><span class="s">&quot;Tom&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;age&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;value&gt;</span>20<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>也可以显式指定value的类型。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;person&quot;</span> <span class="na">class=</span><span class="s">&quot;huangbowen.net.DependecyInjection.SetterInjection.Person&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;constructor-arg</span> <span class="na">value=</span><span class="s">&quot;Tom&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;age&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;value</span> <span class="na">type=</span><span class="s">&quot;int&quot;</span><span class="nt">&gt;</span>20<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>比如有一个属性是个boolean值，如果想将其注入为true的话，不指定具体类型的话，Spring可能会将其作为字符串true对待。当然Spring会尝试将传入的字符串转换为setter方法希望的类型，但这种自动转换有时候并不是你期望的，这种情况下你就需要显式指定其类型。</p>

<p>本例中的源码请在<a href="https://github.com/huangbowen521/Study">我的GitHub</a>上自行下载。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring-Context之五:基于构造器进行依赖注入]]></title>
    <link href="http://www.huangbowen.net/blog/2014/03/16/constructor-based-injection-in-spring/"/>
    <updated>2014-03-16T20:19:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2014/03/16/constructor-based-injection-in-spring</id>
    <content type="html"><![CDATA[<p>上一节讲述了如何在XML中定义bean。这些bean都比较简单，基本只是个单一对象。但是在企业级开发中，一个对象或多或少都要跟其他对象发生关联，比如继承、调用、实现接口等。传统的方法中，如果对象A某方法的实现要调用对象B的方法，那么一般由对象A来维护对象B的生命周期，包括创建、调用、销毁等。而引入了控制反转（即依赖注入）以后，对象A只管负责对对象B的调用，对象B的整个声明周期都交由IoC容器管理。甚至对象A在实现时基于接口实现，IoC容器可以按需注入实现了指定接口的对象到对象A中，这样无需修改任何代码就可以灵活的实现需求变动。</p>

<!-- more -->


<p>Spring中对bean的依赖注入主要有两种方式，一种是基于构造器注入，一种是基于Setter方法注入。</p>

<p>以下是构造方法注入的一个简单例子。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MessageHandler</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">MessageService</span> <span class="n">messageService</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">MessageHandler</span><span class="o">(</span><span class="n">MessageService</span> <span class="n">messageService</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">messageService</span> <span class="o">=</span> <span class="n">messageService</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">handle</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">messageService</span><span class="o">.</span><span class="na">sendService</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;messageService&quot;</span> <span class="na">class=</span><span class="s">&quot;huangbowen.net.DependecyInjection.ConstructorInjection.SimpleMessageService&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;messageHandler&quot;</span> <span class="na">class=</span><span class="s">&quot;huangbowen.net.DependecyInjection.ConstructorInjection.MessageHandler&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;constructor-arg</span> <span class="na">ref=</span><span class="s">&quot;messageService&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/bean&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里的java对象是POJO（plain old java object）的，说明了Spring框架是无侵入性的。在xml中通过constructor-arg属性来向MessageHandler注入对象，ref指向了另一个bean。</p>

<p>由于该构造函数只有一个参数，所以无需指明注入的是哪个参数。</p>

<p>如果构造函数有多个参数，那么有很多方式可以指定注入的对象与参数的对应关系。</p>

<p>可以通过索引来指定。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;person&quot;</span> <span class="na">class=</span><span class="s">&quot;huangbowen.net.DependecyInjection.ConstructorInjection.Person&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;constructor-arg</span> <span class="na">index=</span><span class="s">&quot;0&quot;</span> <span class="na">value=</span><span class="s">&quot;Tom&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;constructor-arg</span> <span class="na">index=</span><span class="s">&quot;1&quot;</span> <span class="na">value=</span><span class="s">&quot;20&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/bean&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>也可以通过类型来指定。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;person&quot;</span> <span class="na">class=</span><span class="s">&quot;huangbowen.net.DependecyInjection.ConstructorInjection.Person&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;constructor-arg</span> <span class="na">type=</span><span class="s">&quot;java.lang.String&quot;</span> <span class="na">value=</span><span class="s">&quot;Tom&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;constructor-arg</span> <span class="na">type=</span><span class="s">&quot;int&quot;</span> <span class="na">value=</span><span class="s">&quot;20&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/bean&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这要求两个类型不能一样或者不能有继承关系，要不然Spring就不知道映射关系了。如果出现了这样的情况，就需要借助其它的方式来告诉Spring你的参数映射关系。</p>

<p>也可以通过参数名来指定。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;person&quot;</span> <span class="na">class=</span><span class="s">&quot;huangbowen.net.DependecyInjection.ConstructorInjection.Person&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;constructor-arg</span> <span class="na">name=</span><span class="s">&quot;name&quot;</span> <span class="na">value=</span><span class="s">&quot;Tom&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;constructor-arg</span> <span class="na">name=</span><span class="s">&quot;age&quot;</span> <span class="na">value=</span><span class="s">&quot;20&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/bean&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这种注入方法有个风险就是如果你的源代码在编译时关闭了debug标志，那么Spring就无法获取构造器的参数名了。不过可以使用@ConstructorProperties 属性显式指定构造器参数名称。</p>

<figure class='code'><figcaption><span>Person.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@ConstructorProperties</span><span class="o">({</span><span class="s">&quot;name&quot;</span><span class="o">,</span> <span class="s">&quot;age&quot;</span><span class="o">})</span>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">Person</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">age</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>本例中的源码请在<a href="https://github.com/huangbowen521/Study">我的GitHub</a>上自行下载。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring-Context之四:Spring容器及bean的定义]]></title>
    <link href="http://www.huangbowen.net/blog/2014/03/16/bean-defination-in-spring/"/>
    <updated>2014-03-16T02:29:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2014/03/16/bean-defination-in-spring</id>
    <content type="html"><![CDATA[<p>Spring框架的核心功能之一就是控制反转（Inversion of Control, IoC），也叫做依赖注入（dependency injection, DI）。关于依赖注入的具体内容可以参见Martin Fowler写的一篇文章<a href="http://martinfowler.com/articles/injection.html">《Inversion of Control Containers and the Dependency Injection pattern》</a>。</p>

<!-- more -->


<p>Spring容器接口是BeanFactory，其提供了一些方法来配置和管理对象。ApplicationContext是BeanFactory的子接口，它集成了Spring的AOP特性，信息资源管理（用于全球化），公共事件等。简单的说，BeanFactory提供了配置框架及基本的功能，而ApplicationContext增加了更多的企业级定制功能。比如其实现类WebApplicationContext可用于web应用程序中。</p>

<p>在Spring中，应用程序中受Spring IoC容器管理的对象叫做bean，即bean是一个由Spring IoC容器实例化、装配及其它管理的对象。下图是Spring IoC容器的一个简单图解。</p>

<p><img src="http://www.huangbowen.net/images/iocOverView.png"></p>

<p>以下列出了几个常用的实现了ApplicationContext的容器对象。</p>

<ul>
<li><p>AnnotationConfigApplicationContext :接收注解的class作为输入来初始化配置。</p></li>
<li><p>GenericGroovyApplicationContext: 根据Groovy DSL来初始化配置。</p></li>
<li><p>ClassPathXmlApplicationContext:根据当前classpath下的xml文件初始化配置。</p></li>
<li><p>FileSystemXmlApplicationContext:根据文件系统路径下的xml文件初始化配置。</p></li>
</ul>


<p>Bean的定义有多种方式，XML定义，Annoation定义，Java代码直接定义，Groovy DSL定义等。之前例子基本都演示过这些定义方法。</p>

<p>一个简单的XML定义是这样的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.springframework.org/schema/beans&quot;</span>
</span><span class='line'>       <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>       <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://www.springframework.org/schema/beans</span>
</span><span class='line'><span class="s">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;movieService&quot;</span> <span class="na">class=</span><span class="s">&quot;huangbowen.net.service.DefaultMovieService”/</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/beans&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>其包含一个id和一个class。id是一个bean的唯一标示，同一个spring容器中不能有两个id一样的bean，不过你也可以给bean起别名，使用name属性即可，多个别名可以用逗号,分号或空格分开。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;movieService&quot;</span> <span class="na">name=</span><span class="s">&quot;service1 service2&quot;</span> <span class="na">class=</span><span class="s">&quot;huangbowen.net.service.DefaultMovieService&quot;</span><span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;movieService&quot;</span> <span class="na">name=</span><span class="s">“service1,service2&quot;</span> <span class="na">class=</span><span class="s">&quot;huangbowen.net.service.DefaultMovieService&quot;</span><span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;movieService&quot;</span> <span class="na">name=</span><span class="s">&quot;service1;service2&quot;</span> <span class="na">class=</span><span class="s">&quot;huangbowen.net.service.DefaultMovieService&quot;</span><span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>也可以使用alisa来起别名。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;movieService&quot;</span> <span class="na">name=</span><span class="s">&quot;service1,service2&quot;</span> <span class="na">class=</span><span class="s">&quot;huangbowen.net.service.DefaultMovieService&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;alias</span> <span class="na">name=</span><span class="s">&quot;movieService&quot;</span> <span class="na">alias=</span><span class="s">&quot;service3&quot;</span><span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果你的bean的实例不是通过构造函数直接生成的，而是通过工厂方法生成那，那么也有相应的配置方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;defaultMovieService&quot;</span> <span class="na">class=</span><span class="s">&quot;huangbowen.net.service.MovieServiceFactory&quot;</span> <span class="na">factory-method=</span><span class="s">&quot;GetMovieService&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>MovieServiceFactory </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">huangbowen</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">service</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MovieServiceFactory</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">DefaultMovieService</span> <span class="n">defaultMovieService</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DefaultMovieService</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">MovieService</span> <span class="nf">GetMovieService</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">defaultMovieService</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果bean对象是由一个实例工厂生成的，那么应该这样配置。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;serviceLocator&quot;</span> <span class="na">class=</span><span class="s">&quot;huangbowen.net.service.MovieServiceLocator&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;instantMovieService&quot;</span> <span class="na">factory-bean=</span><span class="s">&quot;serviceLocator&quot;</span> <span class="na">factory-method=</span><span class="s">&quot;GetMovieService&quot;</span><span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>MovieServiceLocator</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">huangbowen</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">service</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MovieServiceLocator</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">DefaultMovieService</span> <span class="n">defaultMovieService</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DefaultMovieService</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">MovieService</span> <span class="nf">GetMovieService</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">defaultMovieService</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>本例中的源码请在<a href="https://github.com/huangbowen521/Study">我的GitHub</a>上自行下载。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring-Context之三:使用XML和Groovy DSL配置Bean]]></title>
    <link href="http://www.huangbowen.net/blog/2014/03/13/use-groovy-dsl-in-spring/"/>
    <updated>2014-03-13T02:13:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2014/03/13/use-groovy-dsl-in-spring</id>
    <content type="html"><![CDATA[<p>在第一讲中显示了如何使用注解配置bean，其实这是Spring3引进的特性,Spring2使用的是XML的方式来配置Bean，那时候漫天的XML文件使得Spring有着<code>配置地狱</code>的称号。Spring也一直在力求改变这一缺陷。Spring3引入的注解方式确实使配置精简不少，而Spring4则引入了Groovy DSL来配置，其语法比XML要简单很多，而且Groovy本身是门语言，其配置文件就相当于代码，可以用来实现复杂的配置。</p>

<!-- more -->


<p>废话少说，让我们来对Groovy DSL配置来个第一次亲密接触。</p>

<p>首先我们先实现一个XML的bean配置，沿用第一讲中的例子。</p>

<figure class='code'><figcaption><span>configuration.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.springframework.org/schema/beans&quot;</span>
</span><span class='line'>       <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>       <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://www.springframework.org/schema/beans</span>
</span><span class='line'><span class="s">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;movieService&quot;</span> <span class="na">class=</span><span class="s">&quot;huangbowen.net.service.DefaultMovieService&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;cinema&quot;</span> <span class="na">class=</span><span class="s">&quot;huangbowen.net.service.Cinema&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;movieService&quot;</span> <span class="na">ref=</span><span class="s">&quot;movieService&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'><span class="nt">&lt;/beans&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个XML文件就不用我多做解释了，很清晰明了。Ok，照例写个测试来测一下。</p>

<figure class='code'><figcaption><span>XmlConfigurationTest.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">huangbowen</span><span class="o">.</span><span class="na">net</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">huangbowen.net.service.Cinema</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">huangbowen.net.service.DefaultMovieService</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.junit.runner.RunWith</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.context.ApplicationContext</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.test.context.ContextConfiguration</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.test.context.junit4.SpringJUnit4ClassRunner</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">hamcrest</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">IsInstanceOf</span><span class="o">.</span><span class="na">instanceOf</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">junit</span><span class="o">.</span><span class="na">Assert</span><span class="o">.</span><span class="na">assertNotNull</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">junit</span><span class="o">.</span><span class="na">Assert</span><span class="o">.</span><span class="na">assertThat</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@RunWith</span><span class="o">(</span><span class="n">SpringJUnit4ClassRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="nd">@ContextConfiguration</span><span class="o">(</span><span class="n">locations</span> <span class="o">=</span> <span class="o">{</span><span class="s">&quot;/configuration.xml&quot;</span><span class="o">})</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">XmlConfigurationTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Autowired</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">ApplicationContext</span> <span class="n">applicationContext</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Autowired</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Cinema</span> <span class="n">cinema</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">shouldGetCinemaInstance</span><span class="o">()</span>  <span class="o">{</span>
</span><span class='line'>        <span class="n">Cinema</span> <span class="n">cinema</span> <span class="o">=</span> <span class="n">applicationContext</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="n">Cinema</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>        <span class="n">assertNotNull</span><span class="o">(</span><span class="n">cinema</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">shouldGetAutowiredCinema</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">assertNotNull</span><span class="o">(</span><span class="n">cinema</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">shouldGetMovieServiceInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">assertNotNull</span><span class="o">(</span><span class="n">cinema</span><span class="o">.</span><span class="na">getMovieService</span><span class="o">());</span>
</span><span class='line'>        <span class="n">assertThat</span><span class="o">(</span><span class="n">cinema</span><span class="o">.</span><span class="na">getMovieService</span><span class="o">(),</span> <span class="n">instanceOf</span><span class="o">(</span><span class="n">DefaultMovieService</span><span class="o">.</span><span class="na">class</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个测试与第二讲中的测试基本上一样，不过Spring配置的读取是从configuration.xml来的，在@ContextConfiguration中指定了该xml文件为Spring配置文件。</p>

<p>如果想使用Groovy DSL的话第一步需要引入groovy依赖。</p>

<figure class='code'><figcaption><span>pom.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>org.codehaus.groovy<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>groovy-all<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version&gt;</span>2.2.2<span class="nt">&lt;/version&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后就可以新建一个groovy文件来实现配置编写。</p>

<figure class='code'><figcaption><span>Configuration.groovy</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">beans</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">movieService</span> <span class="n">huangbowen</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">service</span><span class="o">.</span><span class="na">DefaultMovieService</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">cinema</span> <span class="n">huangbowen</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">service</span><span class="o">.</span><span class="na">Cinema</span><span class="o">,</span> <span class="n">movieService</span> <span class="o">:</span> <span class="n">movieService</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这其实体现不出来Groovy DSL的强大灵活，因为我们的例子太简单了。</p>

<p>beans相当于xml中的beans标签，第一行中是 bean id + class的形式。
第二行是bean id + class + properties map的形式。第二个参数是一个map数组，分别对应property和值。</p>

<p>实现同样的Bean配置有很多种写法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">movieService</span> <span class="o">(</span><span class="n">huangbowen</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">service</span><span class="o">.</span><span class="na">DefaultMovieService</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">cinema</span><span class="o">(</span><span class="n">huangbowen</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">service</span><span class="o">.</span><span class="na">Cinema</span><span class="o">,</span> <span class="o">{</span><span class="n">movieService</span> <span class="o">:</span> <span class="n">movieService</span><span class="o">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面这种其实是Groovy语法的一个特性，在调用方法时括号是可选的，既可以加，也可以不加。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">movieService</span> <span class="n">huangbowen</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">service</span><span class="o">.</span><span class="na">DefaultMovieService</span>
</span><span class='line'>
</span><span class='line'><span class="nf">cinema</span> <span class="o">(</span><span class="n">huangbowen</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">service</span><span class="o">.</span><span class="na">Cinema</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">movieService</span> <span class="o">:</span><span class="n">ref</span> <span class="n">movieService</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面这中使用了另一个设置属性的方法，通过一个闭包将属性设置进去。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">movieService</span> <span class="n">huangbowen</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">service</span><span class="o">.</span><span class="na">DefaultMovieService</span>
</span><span class='line'>
</span><span class='line'><span class="nf">cinema</span> <span class="o">(</span><span class="n">huangbowen</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">service</span><span class="o">.</span><span class="na">Cinema</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">movieService</span> <span class="o">:</span> <span class="n">movieService</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这种更好理解了，ref方法也是可选的。</p>

<p>来照旧写个测试来测一下。</p>

<figure class='code'><figcaption><span>GroovyDSLConfigurationTest.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">huangbowen</span><span class="o">.</span><span class="na">net</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">huangbowen.net.service.Cinema</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">huangbowen.net.service.DefaultMovieService</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.junit.runner.RunWith</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.support.BeanDefinitionReader</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.context.ApplicationContext</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.context.support.GenericApplicationContext</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.test.context.ContextConfiguration</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.test.context.junit4.SpringJUnit4ClassRunner</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.test.context.support.AbstractGenericContextLoader</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">huangbowen</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">GroovyDSLConfigurationTest</span><span class="o">.*;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">hamcrest</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">IsInstanceOf</span><span class="o">.</span><span class="na">instanceOf</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">junit</span><span class="o">.</span><span class="na">Assert</span><span class="o">.</span><span class="na">assertNotNull</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">junit</span><span class="o">.</span><span class="na">Assert</span><span class="o">.</span><span class="na">assertThat</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@RunWith</span><span class="o">(</span><span class="n">SpringJUnit4ClassRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="nd">@ContextConfiguration</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;classpath:Configuration.groovy&quot;</span><span class="o">,</span> <span class="n">loader</span> <span class="o">=</span> <span class="n">GenericGroovyContextLoader</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">GroovyDSLConfigurationTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">GenericGroovyContextLoader</span> <span class="kd">extends</span>
</span><span class='line'>            <span class="n">AbstractGenericContextLoader</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">protected</span> <span class="n">BeanDefinitionReader</span> <span class="nf">createBeanDefinitionReader</span><span class="o">(</span>
</span><span class='line'>                <span class="n">GenericApplicationContext</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">new</span> <span class="nf">GroovyBeanDefinitionReader</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">protected</span> <span class="n">String</span> <span class="nf">getResourceSuffix</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="s">&quot;.groovy&quot;</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Autowired</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">ApplicationContext</span> <span class="n">applicationContext</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Autowired</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Cinema</span> <span class="n">cinema</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">shouldGetCinemaInstance</span><span class="o">()</span>  <span class="o">{</span>
</span><span class='line'>        <span class="n">Cinema</span> <span class="n">cinema</span> <span class="o">=</span> <span class="n">applicationContext</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="n">Cinema</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>        <span class="n">assertNotNull</span><span class="o">(</span><span class="n">cinema</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">shouldGetAutowiredCinema</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">assertNotNull</span><span class="o">(</span><span class="n">cinema</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">shouldGetMovieServiceInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">assertNotNull</span><span class="o">(</span><span class="n">cinema</span><span class="o">.</span><span class="na">getMovieService</span><span class="o">());</span>
</span><span class='line'>        <span class="n">assertThat</span><span class="o">(</span><span class="n">cinema</span><span class="o">.</span><span class="na">getMovieService</span><span class="o">(),</span> <span class="n">instanceOf</span><span class="o">(</span><span class="n">DefaultMovieService</span><span class="o">.</span><span class="na">class</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在集成测试中如果加载xml配置文件，Spring提供了GenericXmlContextLoader类，如果加载注解方式的配置类，Spring提供了AnnotationConfigContextLoader类。但是对于Groovy配置文件Spring testContext框架还未提供相应的Loader，所以在本测试方法中需要自己实现一个Loader，其实也简单，只要实现两个方法即可。</p>

<p>本例中的源码请在<a href="https://github.com/huangbowen521/Study">我的GitHub</a>上自行下载。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring-Context之二:使用Spring提供的测试框架进行测试]]></title>
    <link href="http://www.huangbowen.net/blog/2014/03/12/use-spring-test/"/>
    <updated>2014-03-12T01:01:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2014/03/12/use-spring-test</id>
    <content type="html"><![CDATA[<p>Spring框架是无侵入性的，所以你的代码可以完全是POJO（plain old java object），直接使用Junit就可以完成大部分的单元测试。但是在集成测试方面就比较吃力了。单元测试层面你可以mock一些依赖对象，但是集成测试时需要真实的依赖对象，而这些对象都是在Spring容器的控制之下。那么如何在引入了Spring的情况下进行集成测试那？别着急，Spring框架早为我们想到了这点，本身提供了集成测试的功能。</p>

<!-- more -->


<p>就拿上一次那个简单的例子来做实验吧。</p>

<p>首先引入对junit以及spring-test库的依赖。</p>

<figure class='code'><figcaption><span>pom.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>   <span class="nt">&lt;dependencies&gt;</span>
</span><span class='line'>        <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>            <span class="nt">&lt;groupId&gt;</span>junit<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;artifactId&gt;</span>junit<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;version&gt;</span>4.11<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>            <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>        <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>            <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;artifactId&gt;</span>spring-test<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;version&gt;</span>4.0.2.RELEASE<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/dependencies&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>spring-test模块是专门为使用了spring框架的项目进行集成测试的辅助类库。其有以下几个目的。</p>

<ul>
<li><p>提供在运行测试时对Spring IOC容器的缓存，提高集成测试速度。</p></li>
<li><p>对测试实例提供依赖注入功能。</p></li>
<li><p>集成测试中提供事务管理。</p></li>
<li><p>提供一些辅助类库帮助开发者更好的编写集成测试。</p></li>
</ul>


<p>然后新建一个ApplicationTest.java类，代码如下所示。</p>

<figure class='code'><figcaption><span>ApplicationTest.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">huangbowen</span><span class="o">.</span><span class="na">net</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">huangbowen.net.service.Cinema</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.junit.runner.RunWith</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.context.ApplicationContext</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.test.context.ContextConfiguration</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.test.context.junit4.SpringJUnit4ClassRunner</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">junit</span><span class="o">.</span><span class="na">Assert</span><span class="o">.</span><span class="na">assertNotNull</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@RunWith</span><span class="o">(</span><span class="n">SpringJUnit4ClassRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="nd">@ContextConfiguration</span><span class="o">(</span><span class="n">classes</span> <span class="o">=</span> <span class="o">{</span><span class="n">Application</span><span class="o">.</span><span class="na">class</span><span class="o">})</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ApplicationTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Autowired</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">ApplicationContext</span> <span class="n">applicationContext</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Autowired</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Cinema</span> <span class="n">cinema</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">shouldGetCinemaInstance</span><span class="o">()</span>  <span class="o">{</span>
</span><span class='line'>        <span class="n">Cinema</span> <span class="n">cinema</span> <span class="o">=</span> <span class="n">applicationContext</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="n">Cinema</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>        <span class="n">assertNotNull</span><span class="o">(</span><span class="n">cinema</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">shouldGetAutowiredCinema</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">assertNotNull</span><span class="o">(</span><span class="n">cinema</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">shouldGetMovieServiceInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">assertNotNull</span><span class="o">(</span><span class="n">cinema</span><span class="o">.</span><span class="na">getMovieService</span><span class="o">());</span>
</span><span class='line'>        <span class="n">assertThat</span><span class="o">(</span><span class="n">cinema</span><span class="o">.</span><span class="na">getMovieService</span><span class="o">(),</span> <span class="n">instanceOf</span><span class="o">(</span><span class="n">DefaultMovieService</span><span class="o">.</span><span class="na">class</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在本例中ApplicationTest有两个注解。@RunWith(SpringJUnit4ClassRunner.class).是Spring TestContext 框架提供的一个自定义的JUnit runner，这样在测试类中就可以获取ApplicationContext，甚至直接进行依赖注入，使用事务控制测试方法执行等。声明了@RunWith(SpringJUnit4ClassRunner.class)以后一般还要声明@ContextConfiguration注解。这个注解是用于告诉测试类本项目中的Spring配置。这里我们传入Application.class类，因为这个类中配置了Spring的bean。</p>

<p>然后就可以在测试类中使用强大的@Autowired功能了。我们写了三个测试方法，第一个是通过Autowired功能拿到ApplicationContext，第二个是通过Autowired功能直接拿到cinema，第三个则是验证Cinema中的MovieService是被正确注入了的。</p>

<p>Ok,今天就到这里。本例中的源码请在<a href="https://github.com/huangbowen521/Study">我的GitHub</a>上自行下载。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring-Context之一:一个简单的例子]]></title>
    <link href="http://www.huangbowen.net/blog/2014/03/11/first-exmaple-of-spring-conext/"/>
    <updated>2014-03-11T02:27:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2014/03/11/first-exmaple-of-spring-conext</id>
    <content type="html"><![CDATA[<p>很久之前就想系统的学习和掌握Spring框架，但是拖了很久都没有行动。现在趁着在外出差杂事不多，就花时间来由浅入深的研究下Spring框架。Spring框架这几年来已经发展成为一个巨无霸产品。从最初的只是用来作为依赖注入到现在已经是无法不包。其涉及的领域有依赖注入、MVC、JMS、Web flow、Batch job、Web service、Security…..几乎是涵盖了技术开发的所有方面。本人虽然从事Java语言开发时间不长，但是对Spring中的很多组件都有所涉猎，比如上面列出的那几个都有用过。可以说Spring是Java程序员必须要掌握的一个库。</p>

<!-- more -->


<p>现在Spring的最新的稳定版本是4.0.2,该版本中包含了大量的新特性，是比较重要的一次release。本系列将基本使用该版本进行讲解。</p>

<p>第一讲就用一个简单的例子开始吧，初步学会使用Spring-Context的依赖注入功能。</p>

<p>首先使用maven创建一个新的项目。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$:</span> mvn archetype:generate
</span></code></pre></td></tr></table></div></figure>


<p>创建成功后在pom.xml文件中加入对Spring-Context的依赖。</p>

<figure class='code'><figcaption><span>pom.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;dependencies&gt;</span>
</span><span class='line'>    <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>        <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>        <span class="nt">&lt;artifactId&gt;</span>spring-context<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>        <span class="nt">&lt;version&gt;</span>4.0.2.RELEASE<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependencies&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后我们创建一个MovieService的接口。</p>

<figure class='code'><figcaption><span>MovieService.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">huangbowen</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">service</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">MovieService</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">String</span> <span class="nf">getMovieName</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>创建一个DefaultMovieService来实现这个接口。</p>

<figure class='code'><figcaption><span>DefaultMovieService.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">huangbowen</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">service</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DefaultMovieService</span> <span class="kd">implements</span> <span class="n">MovieService</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getMovieName</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;A Touch of Sin&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>然后创建一个Cinema类，会使用MoviceService来放电影。</p>

<figure class='code'><figcaption><span>Cinema.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">huangbowen</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">service</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.stereotype.Component</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Component</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Cinema</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Autowired</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">MovieService</span> <span class="n">movieService</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">printMovieName</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">movieService</span><span class="o">.</span><span class="na">getMovieName</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>建立一个Application类。</p>

<figure class='code'><figcaption><span>Application.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">huangbowen</span><span class="o">.</span><span class="na">net</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">huangbowen.net.service.Cinema</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">huangbowen.net.service.DefaultMovieService</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">huangbowen.net.service.MovieService</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.AnnotationConfigApplicationContext</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.ComponentScan</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Configuration</span>
</span><span class='line'><span class="nd">@ComponentScan</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Application</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Bean</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">MovieService</span> <span class="nf">getMovieService</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">DefaultMovieService</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span> <span class="n">String</span><span class="o">[]</span> <span class="n">args</span> <span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="n">AnnotationConfigApplicationContext</span> <span class="n">applicationContext</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="n">Application</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Cinema</span> <span class="n">cinema</span> <span class="o">=</span> <span class="n">applicationContext</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="n">Cinema</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>        <span class="n">cinema</span><span class="o">.</span><span class="na">printMovieName</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ok,运行main函数，得到控制台输出：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>A Touch of Sin
</span></code></pre></td></tr></table></div></figure>


<p>本例子中主要使用Annotation功能来实现对MoviceService的注入。我们将Cinema.java的头部标注为@Component说明该类交由Spring托管。而Cinema.java中的属性MoviceService标注为@Autowired，则Spring在初始化Cinema类时会从Application Context中找到类型为MovieService的Bean，并赋值给Cinema。在Application.java中我们声明了一个类型为MovieService的Bean。并且标注Application.java为@Configuration,这是告诉Spring在Application.java中定义了一个或多个@Bean方法，让Spring容器可以在运行时生成这些Bean。@ComponentScan则会让Spring容器自动扫描当前package下的标有@Component的class，这些class都将由Spring托管。</p>

<p>本例中的源码请在<a href="https://github.com/huangbowen521/Study">我的GitHub</a>上自行下载。</p>
]]></content>
  </entry>
  
</feed>
