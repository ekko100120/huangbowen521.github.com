<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[黄博文的地盘]]></title>
  <link href="http://www.huangbowen.net/atom.xml" rel="self"/>
  <link href="http://www.huangbowen.net/"/>
  <updated>2016-05-10T09:40:04+08:00</updated>
  <id>http://www.huangbowen.net/</id>
  <author>
    <name><![CDATA[黄博文]]></name>
    <email><![CDATA[huangbowen521@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[膝盖中了一箭之康复篇-第十个月暨4月份目标总结]]></title>
    <link href="http://www.huangbowen.net/blog/2016/05/04/acl-recovery-for-10th-month/"/>
    <updated>2016-05-04T22:45:05+08:00</updated>
    <id>http://www.huangbowen.net/blog/2016/05/04/acl-recovery-for-10th-month</id>
    <content type="html"><![CDATA[<p>2015年7月1日进行了右膝盖前交叉韧带重建术，至今已经10个月了。</p>

<!-- more -->


<p>4月份健身房的出勤率应该达到了六成。每周一般争取训练4次以上，每次训练一个部位，分别是胸、肩、背、二三头、腿。由于这个健身房的人不是很多，练的时候也没有什么氛围，其实感觉很少把自己练的通透了。感觉这段时间练的辛苦，但进步不大，可能需要高手或者教练指导一下。训练的时候我始终觉得右腿肌肉力量比左腿差不少，这点差距真不知道怎么才能练回来。</p>

<p>腹肌训练从腹肌撕裂者改成了腹肌八分钟。腹肌八分钟总共320个动作，比腹肌撕裂者要少几十个，强度也没有那么大，不过最大好处是时间短，腹肌撕裂者练一遍差不多要17分钟，感觉时间稍长。</p>

<p>4月中旬我的体重应该是这几个月来的最低点，不过但是没有秤，不知道具体数值。但4月中旬后就没有可以控制饮食，晚上胡吃海喝，现在体重成功的变回到了去印度前的体重，73KG。也就是在印度将近一个多月的节食效果被打回原形。</p>

<p>4月跑步出勤5次，总跑步里程90公里，其中包括四次半程马拉松。也就是说4月份跑步训练基本上荒废掉了。而我又报名了5月15日的汶川50公里越野赛，真是有点作死的感觉。</p>

<p><img src="http://www.huangbowen.net/images/IMG_4015.PNG" width="300"></p>

<p>好了盘点一下四月份的目标，4个半程马拉松是跑完了，4月底的时候是把书翻译完了，不过还需要在review一遍，目前只review了三章，估计还要10天左右才能完全交稿。当时定这个目标的时候我就知道很可能完成不了，不过也是为了逼自己一把，加快进度。这本书终于定稿在望，也算是了却了我一件心事。</p>

<p>五月份也是繁忙的一个月，刚回到办公室，一大堆事情要干，而且刚进入一个项目组，也要多花点心思。以前一直说要多读书，但读的还是太少。五月份的目标就定为读完两本书，并写出相应的读书总结吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[膝盖中了一箭之康复篇-第九个月暨3月份目标总结]]></title>
    <link href="http://www.huangbowen.net/blog/2016/04/04/acl-recovery-for-9th-month/"/>
    <updated>2016-04-04T02:22:07+08:00</updated>
    <id>http://www.huangbowen.net/blog/2016/04/04/acl-recovery-for-9th-month</id>
    <content type="html"><![CDATA[<p>2015年进行了右膝前十字韧带重建术，至今已经有九个月了。</p>

<!-- more -->


<p>3月份整个膝盖的恢复情况并不明显。一是本体感觉还没找到，始终觉得是条伤腿，有些动作不敢做。比如从半米高的地方跳下来都觉得心有余悸。我认为伤腿是具备这样的能力的，只是心理作用而已。这点如果不克服的话以后跑山是道坎。二是伤腿和好腿的肌肉水平仍然有明显差别。伤腿的肌肉力量比好腿要弱一些，做一些大重量的训练（比如深蹲）感觉非常明显。跑步的时候这点差异倒是没什么大的影响。当然仅限于路跑，越野跑就不得而知了。毕竟有快一年没跑山了。</p>

<p>针对伤腿已经很久没有进行任何针对性训练了。现在平均一周练一次腿，两腿肌肉不均衡也就凑合着练。3月份健身房出勤率还是比较高的，估计去的次数有15次左右吧。虽然这个月非常忙，基本上早上8点出门，一直到晚上将近8点才回到公寓，但基本上回到公寓稍作休息就马上去健身房。这边的健身房就在楼下，步行只要3分钟即达。而且健身房里基本没什么人，也没多少人搞力量训练，所以不怕别人和你抢器材。经过这一个月的训练，感觉力量比以前的巅峰时期有所进步，以后还是要保持下去。</p>

<p>3月份的目标是做20次腹肌撕裂者，最终总共做了21次。现在做腹肌撕裂者已经可以轻松跟完全程了。当然有些动作做的还不是很标准。练了这么久腹肌依然还是若隐若现，可能还是腹部赘肉较多的原因。在印度这边呆了一个月吃肉的次数两个巴掌都数的过来。来到这里就没吃到过猪肉，鸡肉偶尔能吃到一点，还有周末下馆子的时候吃点羊肉。还好我机智的带了一罐蛋白粉过来，每次健完身吃一勺蛋白粉，有效补充蛋白质。这里吃肉少，又不油腻，简直是趁机减肥的大好时机。由于这个月想继续控制体脂，所以采取了相对严格的节食策略，早饭、中午饭照常吃，一周有5天不吃晚饭。节食再配合运动感觉体重有所下降，可惜这边没有称，不知道自己现在的体重是多少。最近一次称体重是3月初的时候，体重是71.6KG。我感觉现在已经降到了70KG，离终极目标还差5KG。</p>

<p><img src="http://www.huangbowen.net/images/IMG_3514.PNG" width="400"></p>

<p>3月份跑步出勤8次，跑步总距离77公里。主要还是因为太忙了，早上起不来，晚上又要力量训练，把跑步的时间都给挤没了。</p>

<p><img src="http://www.huangbowen.net/images/IMG_3515.PNG" width="400"></p>

<p>不过在浦那参加了当地两次马拉松活动，跑了两个半马。这也是难得的体验。</p>

<p>第一次是3月20日。早上5点就到了比赛地点，热身是跳舞20分钟，如果全程跟完肯定累的不要不要的。早上6点钟开跑，漆黑一片，一直跑到太阳出来，大地重见光明。志愿者都很热情，水之类的补给很充足，由于是折返赛道，所以每隔几公里就有水可以补给。不过我自己刷半马习惯了，平时自己跑中间都不补给的，所以整个过程中也没喝多少水。由于这次跑步穿的是越野跑鞋，不是很合脚，跑到第10公里后脚上磨了水泡，所以速度逐渐下降，发挥欠佳。</p>

<p><img src="http://www.huangbowen.net/images/pune_harf_marathon.JPG" width="400"></p>

<p><img src="http://www.huangbowen.net/images/moveitmarathon.png" width="400"></p>

<p>上周末的半马活动中我充分吸取了教训，提前买了一双跑鞋，是印度这边颇受欢迎的POWER品牌，感觉物美价廉。整个过程基本保持定速巡航，配速在5分10秒左右晃荡。最后两公里有个组织者主动领跑，帮我带速度。那时候我已经处于力竭的边缘，在他的带领下又重新振作起来，这两公里的配速反而是整个半马最快的配速。看来以后跑马还是要跟着兔子跑，要省力不少。</p>

<p><img src="http://www.huangbowen.net/images/IMG_3496.JPG" width="400"></p>

<p><img src="http://www.huangbowen.net/images/IMG_3501.jpg" width="400"></p>

<p>本来要在浦那呆到6月多才回去的，后来计划有变，4月下旬就要回去。刚好5月15日有汶川50公里越野赛，我出山的时候到了。4月份好好训练，汶川越野赛只求安全无伤完赛。这样我就有资格参加100公里越野赛了。</p>

<p>4月份的目标是交稿手上翻译的书，并且跑4次半马训练。跑4次半马训练对我来说难度不大，但交稿手上翻译的书则比较难，因为还有50多页没有翻译完，而且翻译完还要整体全部校审一遍，工作量还是比较大。尽力而为吧！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[印度浦那三周感受]]></title>
    <link href="http://www.huangbowen.net/blog/2016/03/27/living-in-pune-three-weeks-so-far/"/>
    <updated>2016-03-27T22:27:57+08:00</updated>
    <id>http://www.huangbowen.net/blog/2016/03/27/living-in-pune-three-weeks-so-far</id>
    <content type="html"><![CDATA[<p>本来打算写印度浦那一周感受的，结果一周过去了一个字都没写，然后打算写二周感受，结果第二周也没找到时间来写。第三周是异常繁忙的一周，终于在周末找到了一点时间来编写。</p>

<!-- more -->


<p>这次去印度浦那是作为ThoughtWorks University的Coach，需要在印度呆3个多月。</p>

<p>2月27日从成都出发到浦那，整个过程非常纠结，需要成都飞上海，然后上海飞德里，最后德里飞浦那。整个行程从周六下午的2点到周日早上的7点才完成。周日早上的7点是浦那的时间。浦那和中国有两个半小时的时差，所以浦那的早上7点是中国的早上9点半。成都到上海和上海到德里的飞机是东航的，感觉还行。</p>

<h2>关于出行</h2>

<p>浦那的街道比较窄，道路也修的不好，大都是两条机动道，而且路边大都没有人行道。浦那的摩托车特别多，大部分路口都没有信号灯，更别提人行横道了。路上摩托车和汽车混行，驾驶员需要极高的驾驶技巧。穿越马路是行人必须要掌握的一项技能，在车流中看准时机迅速通过。曾经有一条主干道我花了10分钟来通过。</p>

<p>浦那街上最多的公共交通工具是一种叫做auto的三轮车，这种三轮车是可以打表的，一辆最多可以做3个人。不过如果看你是外国人一般是不会打表的，而是直接喊价，所以做的时候先要提前讲好价。街上基本没看到有出粗车标志的出租车。印度同事告诉我如果想打车可以用uber或者Olaclubs软件。我使用了几次Olaclubs，打车还是挺方便的，不到10秒就有人接单。不过有的司机不懂英文，电话里沟通地址真是费了老大劲。</p>

<p>我住的地方和公司办公室有一定距离，上下班有shuttle接送，就是一种小巴，可以坐下10多个人。</p>

<p><img src="http://www.huangbowen.net/images/pune_office.JPG" width="400"></p>

<p>浦那的交通异常繁忙，上下班高峰期经常交通堵塞，20公里的路都要跑1个小时多。</p>

<h2>关于饮食</h2>

<p>公司管早饭和晚饭。大都是饼子配上各种咖喱。蔬菜的话就是土豆和西兰花。每周貌似一天有鸡肉提供，其它时间都是素食。刚好最近在减肥，所以素食对我来说ok。印度人不吃牛肉，猪肉也很少吃，只有鸡肉常见一些。而这些鸡肉的做法和中国的大相径庭，味道比中国的差远了。</p>

<p><img src="http://www.huangbowen.net/images/food_in_pune_1.JPG" width="400"></p>

<p><img src="http://www.huangbowen.net/images/food_in_pune_2.JPG" width="400"></p>

<p>晚饭的话同事经常一起约着去下馆子。我由于节食去的不多。由于整个讲师团队是个跨国部队，有印度人、中国人、英国人、澳洲人、美国人、德国人；巴西人&hellip;&hellip;所以去的馆子也是五花八门，有印度本土的，也有偏欧美风的，就是没找到一家正宗的中国馆子。</p>

<p><img src="http://www.huangbowen.net/images/food_in_pune_3.JPG" width="400"></p>

<p>下馆子的话感觉浦那餐厅的消费比国内的要贵一些，也有可能我们去的馆子是浦那比较高的馆子。便宜的馆子我们还真不敢去啊，万一吃坏肚子就麻烦了。</p>

<p>这是在一家餐馆吃的铁板羊肉。羊肉的味道不是很好，但是分量很足，我吃的很饱。
<img src="http://www.huangbowen.net/images/food_in_pune_4.JPG" width="400"></p>

<h2>关于住宿</h2>

<p>刚来浦那的第一周住在一个叫做stay@home的公寓，有点像7天酒店。房间里面没有网络，要上网的需要去顶楼的餐厅。房间里面很简单，连个书桌都没有，不过有独立卫生间。由于浦那夏季温度比较高，经常飙到40度以上，所以吊扇和空调的配置率还是挺高的。不过这些空调看起来很老，运行起来的噪音大得很，吊扇的噪音比空调还要小一些。</p>

<p>第二周开始换到了另一个地方，是一个小区。门口一群保安24小时看守。小区里设施还挺完备，有篮球场、网球场、健身房和游泳池。不过游泳池水脏的很，基本处于弃用的状态。健身房里各种器械比较齐全，没有教练，去的话自己练，600卢比一个月，价格是相当的实惠啊。我住的地方是三室一厅，和另外两个同事一起住。房间里的网络非常差劲，隔三差五断网。</p>

<p><img src="http://www.huangbowen.net/images/gym_in_fortaleza.JPG" width="400"></p>

<h2>关于购物</h2>

<p>这三周总共去过两个商场。一个是phenix mall，和国内的商场差不多。里面有全球的些名牌店，也有超市、电影院、健身房、游乐场，还有各种餐馆，比如肯德基、麦当劳、必胜客等。我在这里买了一双跑鞋，印度人颇受欢迎的power牌子，总共3000多卢比，算是该牌子中比较贵的鞋子了。穿起来还是比较舒服，感觉物超所值。</p>

<p><img src="http://www.huangbowen.net/images/shoe_power.JPG" width="400"></p>

<p>另一个商场叫做D-Mart，其实就是个大型超市。那是周日的晚上去的，结账的时候人超级多，每人都推着手推车，车里的东西都装满了。我们花了1个小时来排队结账。正因为第一次体验很不好，所以之后再也没去过这家店。</p>

<p>说说浦那比较有趣的事情。</p>

<ol>
<li>街上有很多流浪狗，简直是随处可见。他们每天过的悠闲自得，躺在地上睡的一动不动，就算你走到跟前都不理你。</li>
</ol>


<p><img src="http://www.huangbowen.net/images/dog_in_pune.JPG" width="400"></p>

<ol>
<li>去商场、好的餐馆、办公楼在门口都要安检。其实感觉保安也就是做做样子，用的设备都很老旧。</li>
<li>浦那有真正的乞丐，很多几岁的小孩会追着你要钱。和国内乞丐不同的是，这些小孩会主动伸手跟你有身体接触，这会让你感觉很不舒服。</li>
<li>浦那的公交车开动时候是不关车门的，这些公交车都普遍很旧。我还没有乘过公交车。</li>
<li>印度这里并不是所有人都懂英文的，其实英文的普及率没有你想象的那么高。不过咱们外国人也很少和不懂英文的人有机会接触。</li>
<li>现在正值浦那的夏天，白天温度最高可达30度，听说4月份是最热的时候，温度可达40度以上。早上和晚上还是比较凉快的。由于白天大部分时间我都呆在有空调的办公室，所以这种热没给我带来多大困扰。</li>
<li>在浦那叫外卖比较盛行。可能是由于天太热，大家不愿意出去吃饭的缘故吧。可以使用手机app zomato来找餐厅和订餐，和国内的大众点评差不多。</li>
</ol>


<p>上周日在浦那我参加了一次本地的线下马拉松活动，也是一次难得的体验。让我记忆深刻的是开始前的热身活动，刚开始主持人还是带领着伸胳膊伸腿的，几分钟后就演变成了跳舞，整整跳了20多分钟。真是跳完可以直接回去睡觉了。整个跑步体验还不错，我挺喜欢的。</p>

<p><img src="http://www.huangbowen.net/images/pune_harf_marathon.JPG" width="400"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[膝盖中了一箭之康复篇-第八个月暨2月份目标总结]]></title>
    <link href="http://www.huangbowen.net/blog/2016/03/09/recovery-for-8th-month/"/>
    <updated>2016-03-09T01:40:41+08:00</updated>
    <id>http://www.huangbowen.net/blog/2016/03/09/recovery-for-8th-month</id>
    <content type="html"><![CDATA[<p>2015年进行了右膝前十字韧带重建术，至今已经有八个月了。</p>

<!-- more -->


<p>右膝的恢复貌似进入了瓶颈期。平时坐久了之后突然起身走路时会感觉右膝有些瘸，但走了一会之后即可恢复正常。为了找回本体的感觉，在平常站立时我一直尝试使用右腿作为支撑腿，但是收效甚微。明显可以感觉右腿的肌肉还是要差一些，尤其是膝盖附近的肌肉明显感觉强度不够。</p>

<p>2月第一周还在深圳的客户现场奋战到最后一刻,直到2月6日晚上才坐飞机飞回成都。回到家里就变得比较懒散了，没有继续练习腹肌撕裂者，而且跑步也进行的比较少。好处是可以继续去家附近的健身房进行力量训练了。</p>

<p>整个2月份跑步50公里，出勤7次。其中4次都是在第一周的时候跑的。然后在2月14日的时候跑了一次线上半程马拉松。之后基本就没怎么跑了。</p>

<p><img src="http://www.huangbowen.net/images/running_2016_2.PNG" width="200"></p>

<p>健身房倒去的多一些。这家健身房12月份进行了重新装修，把以前的私教区域也纳入了公共区域，这样力量区的面积增加了不少。而且很多力量器械都更新了，让人很有锻炼的欲望。好几月没来这个健身房，发现了很多练得不错的新面孔。我顺便让教练帮我做了一下体测，发现身体素质比2014年的巅峰时期还是差了不少。体重还是偏重，努力控制了几个月才把体重降到了70公斤，结果整个2月份过完又飚回到了73.5公斤。这简直是一场扩日持久的拉锯战啊。</p>

<p><img src="http://www.huangbowen.net/images/body_record_2016_2.jpg" width="500"></p>

<p>2月份的目标是做4000个俯卧撑和4篇技术博客。2月份总共有29天，这样算下来每天要做138个俯卧撑。由于春节假期时间回老婆家里，基本没怎么做俯卧撑，结果导致欠下的帐越来越多。等到放假归来，才发现4000个俯卧撑的目标连1000个都没完成，而时间已经过去了将近半个月。就这样后半个月只有疯狂补了，平均每天200+的数量，胸部几乎时时都处于充血的状态。2月27日在机场转机的时候还在候机楼里做了几十个。终于在最后一刻达成了4000个俯卧撑的目标。</p>

<p><img src="http://www.huangbowen.net/images/weibo_pushups_record.PNG" width="200"></p>

<p>4篇技术博客也是完成的比较艰难也是在最后一刻把第四篇完成了。</p>

<hr />

<p>经过2月份的休整之后，2月27日重新开始出差之旅。这次需要连续出差3个多月，直到6月中旬才能回去。鉴于3月份肯定比较忙，所以定的目标相对简单一点，就做20次腹肌撕裂者吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用SOCKS5翻墙]]></title>
    <link href="http://www.huangbowen.net/blog/2016/03/01/use-socks5-to-access-website/"/>
    <updated>2016-03-01T01:23:29+08:00</updated>
    <id>http://www.huangbowen.net/blog/2016/03/01/use-socks5-to-access-website</id>
    <content type="html"><![CDATA[<p>程序员离开了Google很难存活，尤其是现在被墙的网站越来越多，一批优秀的IT网站也深受影响。如果哪天GIHUB和StackOverFlow网站都被墙了，我估计整个中国的IT人员开发效率至少降低10个百分点吧。</p>

<!-- more -->


<p>之前一直使用的是公司提供的VPN来访问Google等站点。使用公司提供的VPN好处是不用交钱，不限流量，免费使用。坏处有两点：1是登录麻烦，每次都要输入冗长的密码，还要配合输入动态秘钥，这使得完全自动化变得异常困难；2是使用公司的VPN也不是任何网站都可以访问的，比如<a href="http://www.slideshare.net/">http://www.slideshare.net/</a>这个站点通过公司VPN死活访问不了。</p>

<p>之前使用过免费的翻墙工具goAgent，通过google提供的GAE服务器作为中转站，流量是够了，但是速度稍感吃力。后来由于众所周知的原因GoAgent不再进行更新，功能也无法正常使用。</p>

<p>在同事的推荐下，我决定尝试一些收费的Proxy服务。同事向我介绍了使用SOCKS5进行翻墙的技术。并推荐了收费的Proxy服务器。我试用了一下觉得不错，现在把配置方式讲述一下。</p>

<ol>
<li><p>首先是在<a href="https://www.fyzhuji.com/">枫叶主机</a>上购买Shadowsocks代理服务。</p>

<p> <a href="https://www.fyzhuji.com/shadow.html">这里</a>可以选择你的计划。Shaowsocks是基于SOCKS5开发的程序组件，分为客户端和服务器端。其实枫叶主机就是找了一批机器安装了Shadowsocks服务器端，作为服务器，然后我们购买了服务以后就可以通过给定的密码和端口连接到这些服务器上去。</p>

<p> 购买了以后可以查看自己可以使用服务器列表以及密码、端口等信息。</p>

<p> <img src="http://www.huangbowen.net/images/fyzhuji.png" width="500"></p>

<p> 我买的是季度用户，40元三个月，60G的流量。</p></li>
<li><p>然后去<a href="https://shadowsocks.org/en/download/clients.html">shadowsocks</a>官网下载合适的客户端。</p>

<p> 不幸的是官网已经被封了，所以无法直接访问。想要下载翻墙工具，但翻墙工具的下载老巢被墙了，这真是个蛋痛的问题。不过我想聪明的你一定可以想到其它的下载方式的。ShadowSocks支持几乎所有主流的操作系统，也包括移动操作系统。不过比较蛋痛的是我在App Store没有找到它的IOS版客户端，可能被苹果下架了。整个安装过程非常简单，这里就不详述了。</p></li>
<li><p>然后就是配置客户端，主要是将购买的服务器地址以及密码、端口等配置到客户端中。</p>

<p> 这个过程也不难，教程非常多。这里是枫叶主机提供的Windows上的配置教程：
 <a href="https://www.fyzhuji.com/knowledgebase-12.html">https://www.fyzhuji.com/knowledgebase-12.html</a>。以下是OSX系统上的配置教程：<a href="https://www.fyzhuji.com/knowledgebase-14.html">https://www.fyzhuji.com/knowledgebase-14.html</a>。主要注意的是ShadowSocks可以开启全局代理模式，它比普通的HTTP代理要强大的多。如果想要在Chrome下使用Shadowsocks的话，一种方式是讲Chrome的代理设置为默认使用系统代理；另一种方式就如Windows上配置教程一样使用SwitchySharp，并进行相应配置。</p></li>
</ol>


<p>你可以将ShadowSocks客户端设置为开机自启动。这样以后打开电脑就可以直接无拘无束的网上冲浪了，不亦快哉。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[翻译-使用Ratpack和Spring Boot打造高性能的JVM微服务应用]]></title>
    <link href="http://www.huangbowen.net/blog/2016/02/23/ratpack-and-spring-boot/"/>
    <updated>2016-02-23T16:47:48+08:00</updated>
    <id>http://www.huangbowen.net/blog/2016/02/23/ratpack-and-spring-boot</id>
    <content type="html"><![CDATA[<p>这是我为InfoQ翻译的文章，原文地址:<a href="http://www.infoq.com/articles/Ratpack-and-Spring-Boot">Build High Performance JVM Microservices with Ratpack &amp; Spring Boot</a>,InfoQ上的中文地址:<a href="http://www.infoq.com/cn/articles/Ratpack-and-Spring-Boot">使用Ratpack与Spring Boot构建高性能JVM微服务</a>。</p>

<p>在微服务天堂中Ratpack和Spring Boot是天造地设的一对。它们都是以开发者为中心的运行于JVM之上的web框架，侧重于生产率、效率以及轻量级部署。他们在服务程序的开发中带来了各自的好处。Ratpack通过一个高吞吐量、非阻塞式的web层提供了一个反应式编程模型，而且对应用程序结构的定义和HTTP请求过程提供了一个便利的处理程序链；Spring Boot集成了整个Spring生态系统，为应用程序提供了一种简单的方式来配置和启用组件。Ratpack和Spring Boot是构建原生支持计算云的基于数据驱动的微服务的不二选择。</p>

<!-- more -->


<p>Ratpack并不关心应用程序底层使用了什么样的依赖注入框架。相反，应用程序可以通过Ratpack提供的DI抽象（被称为Registry）访问服务层组件。Ratpack的Registry是构成其基础设施的一部分，其提供了一个接口，DI提供者可以使用注册器回调（registry backing）机制来参与到组件解决方案序列中。</p>

<p>Ratpack直接为Guice和Spring Boot提供了注册器回调机制，开发人员可以为应用程序灵活选择使用的依赖注入框架。</p>

<p>在本文中我们将演示使用Ratpack和Spring Boot构建一个RESTful风格的基于数据驱动的微服务，背后使用了Spring Data用于操作数据。</p>

<p>开始构建Ratpack项目的最佳方式是创建Gradle脚本以及标准的Java项目结构。Gradle是Ratpack原生支持的构建系统，其实由于Ratpack只是一组简单的JVM库，所以其实它适用于任何构建系统（不管你的需求有多特别）。如果你还未安装Gradle，那么安装它最佳方式是通过<a href="http://gvmtool.net/">Groovy enVironment Manager工具</a>。示例项目的构建脚本如列表1所示。</p>

<p>列表1</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">buildscript</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">jcenter</span><span class="o">()</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">classpath</span> <span class="s1">&#39;io.ratpack:ratpack-gradle:0.9.18&#39;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;io.ratpack.ratpack-java&#39;</span>
</span><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;idea&#39;</span>
</span><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;eclipse&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">jcenter</span><span class="o">()</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">compile</span> <span class="n">ratpack</span><span class="o">.</span><span class="na">dependency</span><span class="o">(</span><span class="s1">&#39;spring-boot&#39;</span><span class="o">)</span> <span class="o">(</span><span class="mi">1</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">mainClassName</span> <span class="o">=</span> <span class="s2">&quot;springpack.Main&quot;</span> <span class="o">(</span><span class="mi">2</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">eclipse</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">classpath</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">containers</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="s1">&#39;org.eclipse.jdt.launching.JRE_CONTAINER&#39;</span><span class="o">)</span>
</span><span class='line'>    <span class="n">containers</span> <span class="s1">&#39;org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8&#39;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在(1)部分中，构建脚本通过调用Ratpack Gradle插件的ratpack.dependency(..)方法引入了Ratpack和Spring Boot的集成。根据构建脚本和当前项目结构，我们可以创建一个“主类”(main class)，其作为可运行的类来启动和运行应用程序。注意（2）中我们指定了主类的名称，所以使用命令行工具时会更简练。这意味着实际的主类名必须与之一致，所以需要在本项目的src/main/java目录中创建一个名为springpack.Main的类。</p>

<p>在主类中，我们通过工厂方法构造了RatpackServer的一个实例，在start方法中提供了对应用程序的定义。该定义中我们编写了RESTful API处理器链。请参见列表2中对Main类的演示。注意Ratpack要求的编译环境为Java 8。</p>

<p>列表2</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">springpack</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">ratpack.server.RatpackServer</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">RatpackServer</span><span class="o">.</span><span class="na">start</span><span class="o">(</span><span class="n">spec</span> <span class="o">-&gt;</span> <span class="n">spec</span>
</span><span class='line'>      <span class="o">.</span><span class="na">handlers</span><span class="o">(</span><span class="n">chain</span> <span class="o">-&gt;</span> <span class="n">chain</span> <span class="o">(</span><span class="mi">1</span><span class="o">)</span>
</span><span class='line'>          <span class="o">.</span><span class="na">prefix</span><span class="o">(</span><span class="s">&quot;api&quot;</span><span class="o">,</span> <span class="n">pchain</span> <span class="o">-&gt;</span> <span class="n">pchain</span> <span class="o">(</span><span class="mi">2</span><span class="o">)</span>
</span><span class='line'>            <span class="o">.</span><span class="na">all</span><span class="o">(</span><span class="n">ctx</span> <span class="o">-&gt;</span> <span class="n">ctx</span> <span class="o">(</span><span class="mi">3</span><span class="o">)</span>
</span><span class='line'>              <span class="o">.</span><span class="na">byMethod</span><span class="o">(</span><span class="n">method</span> <span class="o">-&gt;</span> <span class="n">method</span> <span class="o">(</span><span class="mi">4</span><span class="o">)</span>
</span><span class='line'>                <span class="o">.</span><span class="na">get</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="n">ctx</span><span class="o">.</span><span class="na">render</span><span class="o">(</span><span class="s">&quot;Received GET request&quot;</span><span class="o">))</span>
</span><span class='line'>                <span class="o">.</span><span class="na">post</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="n">ctx</span><span class="o">.</span><span class="na">render</span><span class="o">(</span><span class="s">&quot;Received POST request&quot;</span><span class="o">))</span>
</span><span class='line'>                <span class="o">.</span><span class="na">put</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="n">ctx</span><span class="o">.</span><span class="na">render</span><span class="o">(</span><span class="s">&quot;Received PUT request&quot;</span><span class="o">))</span>
</span><span class='line'>                <span class="o">.</span><span class="na">delete</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="n">ctx</span><span class="o">.</span><span class="na">render</span><span class="o">(</span><span class="s">&quot;Received DELETE request&quot;</span><span class="o">))</span>
</span><span class='line'>              <span class="o">)</span>
</span><span class='line'>            <span class="o">)</span>
</span><span class='line'>          <span class="o">)</span>
</span><span class='line'>      <span class="o">)</span>
</span><span class='line'>    <span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果我们仔细剖析主类中的应用程序定义，我们可以识别出一些关键知识点，对于不熟悉Ratpack的人来说，我们需要对这些知识点做进一步解释。第一个值得注意的点在（1）中处理器区域定义了一个处理器链，该处理器链用于处理Ratpack流中的HTTP请求。通过链式定义的处理器描述了它们能够处理的请求类型。特别在（2）中我们定义了一个前缀处理器类型，指定它被绑定到“api”这个HTTP路由。前缀处理器创建了一个新的处理器链，用来处理匹配”/api” 端口(endpoint)到来的请求。在（3）处我们使用了所有的处理器类型来指定所有到来的请求应该运行在我们提供的处理器中，在（4）处我们使用Ratpack的byMethod机制来将get，post，put和delete处理器绑定到到各自的HTTP方法中。</p>

<p>在项目根目录下，我们可以通过命令行简单使用gradle的“run”命令运行该应用程序。这会启动web服务器并绑定到端口5050。为了演示当前项目的功能，确保处理器结构工作正常，我们可以在命令行中通过curl运行一些测试：</p>

<ul>
<li>命令：curl <a href="http://localhost:5050,">http://localhost:5050,</a> 期待输出：Received GET request</li>
<li>命令：curl -XPOST <a href="http://localhost:5050,">http://localhost:5050,</a> 期待输出：Received POST request</li>
<li>命令：curl -XPUT <a href="http://localhost:5050,">http://localhost:5050,</a> 期待输出：Received PUT request</li>
<li>命令：curl -XDELETE <a href="http://localhost:5050,">http://localhost:5050,</a> 期待输出：Received DELETE request</li>
</ul>


<p>可以看到，应用程序处理器链可以正确地路由请求，我们建立了RESTful API的结构。接下来需要改善这些API&hellip;</p>

<p>为了演示的缘故，让我们尽量保持简单，改造该微服务以便可以对一个User领域对象进行CRUD操作。通过REST接口，客户可以做以下事情：</p>

<ul>
<li>通过一个GET请求来请求指定的用户账号，用户名作为路径变量（path variable）；</li>
<li>GET请求中如果未指定用户名，则列出所有的用户；</li>
<li>通过POST一个JSON格式的用户对象来创建一个用户；</li>
<li>使用PUT请求，用户名作为路径变量来更新该用户的邮件地址；</li>
<li>使用DELETE请求，用户名作为路径变量来删除该用户。</li>
</ul>


<p>在之前小节中我们定义的处理器已经包含了大多数处理这种需求的基础设施。但根据需求我们还需要做细微调整。例如，我们现在需要绑定处理器接收用户名作为路径变量。列表3中是更新后的代码，主类中的处理器可以满足现在的需求。</p>

<p>列表3</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">springpack</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">ratpack.server.RatpackServer</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">RatpackServer</span><span class="o">.</span><span class="na">start</span><span class="o">(</span><span class="n">spec</span> <span class="o">-&gt;</span> <span class="n">spec</span>
</span><span class='line'>      <span class="o">.</span><span class="na">handlers</span><span class="o">(</span><span class="n">chain</span> <span class="o">-&gt;</span> <span class="n">chain</span>
</span><span class='line'>        <span class="o">.</span><span class="na">prefix</span><span class="o">(</span><span class="s">&quot;api/users&quot;</span><span class="o">,</span> <span class="n">pchain</span> <span class="o">-&gt;</span> <span class="n">pchain</span> <span class="o">(</span><span class="mi">1</span><span class="o">)</span>
</span><span class='line'>          <span class="o">.</span><span class="na">prefix</span><span class="o">(</span><span class="s">&quot;:username&quot;</span><span class="o">,</span> <span class="n">uchain</span> <span class="o">-&gt;</span> <span class="n">uchain</span> <span class="o">(</span><span class="mi">2</span><span class="o">)</span>
</span><span class='line'>            <span class="o">.</span><span class="na">all</span><span class="o">(</span><span class="n">ctx</span> <span class="o">-&gt;</span> <span class="o">{</span> <span class="o">(</span><span class="mi">3</span><span class="o">)</span>
</span><span class='line'>              <span class="n">String</span> <span class="n">username</span> <span class="o">=</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getPathTokens</span><span class="o">().</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;username&quot;</span><span class="o">);</span>
</span><span class='line'>              <span class="n">ctx</span><span class="o">.</span><span class="na">byMethod</span><span class="o">(</span><span class="n">method</span> <span class="o">-&gt;</span> <span class="n">method</span> <span class="o">(</span><span class="mi">4</span><span class="o">)</span>
</span><span class='line'>                <span class="o">.</span><span class="na">get</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="n">ctx</span><span class="o">.</span><span class="na">render</span><span class="o">(</span><span class="s">&quot;Received request for user: &quot;</span> <span class="o">+</span> <span class="n">username</span><span class="o">))</span>
</span><span class='line'>                                              <span class="o">.</span><span class="na">put</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>                  <span class="n">String</span> <span class="n">json</span> <span class="o">=</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getRequest</span><span class="o">().</span><span class="na">getBody</span><span class="o">().</span><span class="na">getText</span><span class="o">();</span>
</span><span class='line'>                  <span class="n">ctx</span><span class="o">.</span><span class="na">render</span><span class="o">(</span><span class="s">&quot;Received update request for user: &quot;</span> <span class="o">+</span> <span class="n">username</span> <span class="o">+</span> <span class="s">&quot;, JSON: &quot;</span> <span class="o">+</span> <span class="n">json</span><span class="o">);</span>
</span><span class='line'>                <span class="o">})</span>
</span><span class='line'>                <span class="o">.</span><span class="na">delete</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="n">ctx</span><span class="o">.</span><span class="na">render</span><span class="o">(</span><span class="s">&quot;Received delete request for user: &quot;</span> <span class="o">+</span> <span class="n">username</span><span class="o">))</span>
</span><span class='line'>              <span class="o">);</span>
</span><span class='line'>            <span class="o">})</span>
</span><span class='line'>          <span class="o">)</span>
</span><span class='line'>          <span class="o">.</span><span class="na">all</span><span class="o">(</span><span class="n">ctx</span> <span class="o">-&gt;</span> <span class="n">ctx</span> <span class="o">(</span><span class="mi">5</span><span class="o">)</span>
</span><span class='line'>            <span class="o">.</span><span class="na">byMethod</span><span class="o">(</span><span class="n">method</span> <span class="o">-&gt;</span> <span class="n">method</span>
</span><span class='line'>              <span class="o">.</span><span class="na">post</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span> <span class="o">(</span><span class="mi">6</span><span class="o">)</span>
</span><span class='line'>                <span class="n">String</span> <span class="n">json</span> <span class="o">=</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getRequest</span><span class="o">().</span><span class="na">getBody</span><span class="o">().</span><span class="na">getText</span><span class="o">();</span>
</span><span class='line'>                <span class="n">ctx</span><span class="o">.</span><span class="na">render</span><span class="o">(</span><span class="s">&quot;Received request to create a new user with JSON: &quot;</span> <span class="o">+</span> <span class="n">json</span><span class="o">);</span>
</span><span class='line'>              <span class="o">})</span>
</span><span class='line'>              <span class="o">.</span><span class="na">get</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="n">ctx</span><span class="o">.</span><span class="na">render</span><span class="o">(</span><span class="s">&quot;Received request to list all users&quot;</span><span class="o">))</span> <span class="o">(</span><span class="mi">7</span><span class="o">)</span>
</span><span class='line'>            <span class="o">)</span>
</span><span class='line'>          <span class="o">)</span>
</span><span class='line'>        <span class="o">)</span>
</span><span class='line'>      <span class="o">)</span>
</span><span class='line'>    <span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>重新构造后的API遵循了面向资源的模式，围绕着user领域对象为中心。以下是一些修改点：</p>

<ul>
<li>在（1）中我们修改了入口级前缀为/api/users；</li>
<li>在（2）中我们绑定了一个新的前缀处理器到:username路径变量上。任何到来的请求路径中的值会被转换，并且Ratpack处理器可以通过ctx.getPathTokens()中的表来访问该值。</li>
<li>在（3）中我们为所有匹配/api/users/:username URI模式的请求绑定一个处理器；
*（4）中我们使用byMethod机制来为HTTP GET，PUT和DELETE方法绑定处理器。通过这些处理器我们可以了解客户端对指定用户的操作意图。在PUT处理器中，我们调用ctx.getRequest().getBody().getText()方法来捕获到来的请求中的JSON数据；</li>
<li>在（5）中我们附加一个处理器来匹配所有从/api/users端口到来的请求；</li>
<li>在（6）中我们对/api/users处理器使用byMethod机制来附加一个POST处理器，当创建新用户时该POST处理器会被调用。这里又一次从到来的请求中取出JSON数据；</li>
<li>最后在（7）中，我们附加了一个GET处理器，当客户端需要所有用户的列表时可以调用它。</li>
</ul>


<p>再次启动该应用程序并进行一系列curl命令行调用，来测试这些端口操作是否符合预期：</p>

<ul>
<li>命令：curl <a href="http://localhost:5050/api/users,">http://localhost:5050/api/users,</a> 期望结果：&#8221;Received request to list all users&#8221;</li>
<li>命令: curl -d &lsquo;{ &ldquo;username&rdquo;: &ldquo;dan&rdquo;, &ldquo;email&rdquo;: &ldquo;<a href="&#109;&#97;&#105;&#108;&#x74;&#x6f;&#x3a;&#100;&#x61;&#110;&#x69;&#101;&#108;&#x70;&#119;&#x6f;&#111;&#x64;&#115;&#64;&#x67;&#x6d;&#97;&#x69;&#108;&#x2e;&#x63;&#x6f;&#x6d;">&#x64;&#97;&#x6e;&#105;&#101;&#x6c;&#x70;&#x77;&#111;&#111;&#x64;&#115;&#x40;&#x67;&#109;&#x61;&#105;&#x6c;&#x2e;&#x63;&#111;&#x6d;</a>&rdquo; }&#8217;<a href="http://localhost:5050/api/users,">http://localhost:5050/api/users,</a> 期望结果: &ldquo;Received request to create a new user with JSON: { &#8220;username&rdquo;: &ldquo;dan&rdquo;, &ldquo;email&rdquo;: &ldquo;<a href="&#109;&#x61;&#x69;&#x6c;&#x74;&#111;&#x3a;&#100;&#x61;&#110;&#105;&#101;&#108;&#112;&#x77;&#111;&#111;&#x64;&#115;&#x40;&#103;&#x6d;&#97;&#105;&#108;&#46;&#99;&#x6f;&#x6d;">&#100;&#x61;&#110;&#x69;&#101;&#x6c;&#112;&#x77;&#111;&#111;&#100;&#x73;&#64;&#x67;&#x6d;&#97;&#105;&#x6c;&#46;&#99;&#x6f;&#x6d;</a>&rdquo; }&#8221;</li>
<li>命令: curl <a href="http://localhost:5050/api/users/dan,">http://localhost:5050/api/users/dan,</a> 期望结果: &ldquo;Received request for user: dan&rdquo;</li>
<li>命令: curl -XPUT -d &lsquo;{ &ldquo;email&rdquo;: &ldquo;<a href="&#109;&#x61;&#105;&#108;&#x74;&#111;&#58;&#x64;&#97;&#110;&#105;&#101;&#x6c;&#46;&#x70;&#x2e;&#x77;&#111;&#x6f;&#100;&#x73;&#x40;&#x67;&#109;&#97;&#x69;&#108;&#46;&#x63;&#x6f;&#109;">&#x64;&#97;&#110;&#105;&#101;&#108;&#46;&#x70;&#46;&#x77;&#x6f;&#111;&#100;&#x73;&#64;&#103;&#x6d;&#97;&#x69;&#x6c;&#x2e;&#x63;&#111;&#x6d;</a>&rdquo; }&#8217;<a href="http://localhost:5050/api/users/dan,">http://localhost:5050/api/users/dan,</a> 期望结果: &ldquo;Received update request for user: dan, JSON: { &#8220;email&rdquo;: &ldquo;<a href="&#x6d;&#x61;&#x69;&#x6c;&#x74;&#x6f;&#x3a;&#100;&#x61;&#x6e;&#105;&#x65;&#108;&#x2e;&#112;&#46;&#119;&#x6f;&#x6f;&#100;&#x73;&#x40;&#103;&#109;&#x61;&#105;&#x6c;&#46;&#x63;&#x6f;&#x6d;">&#100;&#97;&#x6e;&#x69;&#x65;&#108;&#x2e;&#112;&#x2e;&#119;&#111;&#x6f;&#100;&#x73;&#x40;&#x67;&#x6d;&#x61;&#105;&#108;&#46;&#x63;&#111;&#109;</a>&rdquo; }&#8221;</li>
<li>命令: curl -XDELETE <a href="http://localhost:5050/api/users/dan,">http://localhost:5050/api/users/dan,</a> 期望结果: &ldquo;Received delete request for user: dan&rdquo;</li>
</ul>


<p>现在我们拥有了满足需求的API的基础框架，但仍需使其更加有用。我们可以开始设置服务层的依赖。在本例中，我们将使用Spring Data JPA组件作为数据访问对象；列表4展示了对构建脚本的修改。</p>

<p>列表4</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">buildscript</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">jcenter</span><span class="o">()</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">classpath</span> <span class="s1">&#39;io.ratpack:ratpack-gradle:0.9.18&#39;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;io.ratpack.ratpack-java&#39;</span>
</span><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;idea&#39;</span>
</span><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;eclipse&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">jcenter</span><span class="o">()</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">compile</span> <span class="n">ratpack</span><span class="o">.</span><span class="na">dependency</span><span class="o">(</span><span class="s1">&#39;spring-boot&#39;</span><span class="o">)</span>
</span><span class='line'>  <span class="n">compile</span> <span class="s1">&#39;org.springframework.boot:spring-boot-starter-data-jpa:1.2.4.RELEASE&#39;</span> <span class="o">(</span><span class="mi">1</span><span class="o">)</span>
</span><span class='line'>  <span class="n">compile</span> <span class="s1">&#39;com.h2database:h2:1.4.187&#39;</span> <span class="o">(</span><span class="mi">2</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">mainClassName</span> <span class="o">=</span> <span class="s2">&quot;springpack.Main&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">eclipse</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">classpath</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">containers</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="s1">&#39;org.eclipse.jdt.launching.JRE_CONTAINER&#39;</span><span class="o">)</span>
</span><span class='line'>    <span class="n">containers</span> <span class="s1">&#39;org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8&#39;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在（1）中，我们引入了对Spring Boot Spring Data JPA的依赖，(2)中我们引入了H2嵌入式数据库依赖。总共就这么点修改。当在classpath中发现H2时，Spring Boot将自动配置Spring Data来使用它作为内存数据源。通过<a href="http://projects.spring.io/spring-data-jpa/">该页面</a>可以详细了解如何配置和使用Spring Data数据源。</p>

<p>有了新的依赖后，我们必须做的第一件事是建模我们的微服务领域对象：User。User类为了演示的目的尽可能的简单，列表5展示了一个正确建模的JPA领域实体。我们将其放置到项目的src/main/java/springpack/model/User.java类文件中。</p>

<p>列表5</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">springpack</span><span class="o">.</span><span class="na">model</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.persistence.Column</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.persistence.Entity</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.persistence.GeneratedValue</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.persistence.Id</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Entity</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">long</span> <span class="n">serialVersionUID</span> <span class="o">=</span> <span class="mi">1</span><span class="n">l</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Id</span>
</span><span class='line'>  <span class="nd">@GeneratedValue</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Long</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Column</span><span class="o">(</span><span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">username</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Column</span><span class="o">(</span><span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">email</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="n">Long</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setId</span><span class="o">(</span><span class="n">Long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getUsername</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">username</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUsername</span><span class="o">(</span><span class="n">String</span> <span class="n">username</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">username</span> <span class="o">=</span> <span class="n">username</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getEmail</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">email</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setEmail</span><span class="o">(</span><span class="n">String</span> <span class="n">email</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">email</span> <span class="o">=</span> <span class="n">email</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>由于Spring Data已经处于该项目的编译时需要的classpath中，所以我们可以使用javax.persistence.*注解。Spring Boot使用该注解可以实现与数据访问对象一起设置及运行，所以我们可以使用Spring Data的脚手架功能中的Repository服务类型来模块化DAO。由于我们的API相对来说只是直接的CRUD操作，所以我们实现UserRepository DAO时，可以利用Spring Data提供的CrudRepository 固定层来编写尽可能少的代码。</p>

<p>列表6</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">springpack</span><span class="o">.</span><span class="na">model</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.data.repository.CrudRepository</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.stereotype.Repository</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Repository</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">UserRepository</span> <span class="kd">extends</span> <span class="n">CrudRepository</span><span class="o">&lt;</span><span class="n">User</span><span class="o">,</span> <span class="n">Long</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">User</span> <span class="nf">findByUsername</span><span class="o">(</span><span class="n">String</span> <span class="n">username</span><span class="o">);</span> <span class="o">(</span><span class="mi">1</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>惊奇的是，列表6中展示的UesrRepository DAO实现短短一行代码已经对User领域对象实现了一个必要的完全成形的服务层。Spring Data提供的Repository接口允许基于我们对搜索的实体的约定创建”helper&#8221;查找方法。根据需求，我们知道API层需要通过用户名查找用户，所以可以在（1）处添加findByUsername方法。我们把该UserRepository放置到项目中的/src/main/java/springpack/model/UserRepository.java类文件中。</p>

<p>在修改API来使用UserRepository之前，我们首先必须定义Spring Boot 应用程序类。该类代表了一个配置入口，指向了Spring Boot自动配置引擎，并且可以构造一个Spring ApplicationContext，从而可以使用Ratpack应用程序中的注册器回调。列表7描述了该Spring Boot配置类。</p>

<p>列表7</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">springpack</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.fasterxml.jackson.databind.ObjectMapper</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.boot.autoconfigure.SpringBootApplication</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@SpringBootApplication</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringBootConfig</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Bean</span>
</span><span class='line'>  <span class="n">ObjectMapper</span> <span class="nf">objectMapper</span><span class="o">()</span> <span class="o">{</span> <span class="o">(</span><span class="mi">1</span><span class="o">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="nf">ObjectMapper</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>SpringBootConfig类中短小精悍的代码放置在src/main/java/springpack/SpringBootConfig.java类文件中。在该类中我们显式地自动配置了Jackson OjbectMapper的Spring bean。我们将在API层使用它来读写JSON数据。</p>

<p>@SpringBootApplication注解做了大部分事情。当初始化Spring Boot注册器回调时，该类会作为入口点。它的基础设施将使用该注解来扫描classpath中任何可用的组件，并自动装配这些组件到应用程序上下文中中，并且根据Spring Boot的约定规则来自动配置它们。例如，UserRepository类（使用了@Repository注解）存在于应用程序classpath中，所以Spring Boot将使用Spring Data引擎代理该接口，并配置其与H2嵌入式数据库一块工作，因为H2也在classpath中。借助Spring Boot我们无需其它多余的配置。</p>

<p>在实现API层之前我们需要做的另一个事情是构造Ratpack来使用Spring Boot应用程序作为注册器。Ratpack的Spring Boot集成组件提供了一个固定层来无缝转换Spring Boot应用程序为注册器回调程序，只需一行代码就可以合并这两个世界。列表8中的代码展示了更新后的主类，这次使用SpringBootConfig类作为API层的注册器。</p>

<p>列表8</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">springpack</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">ratpack.server.RatpackServer</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">ratpack.spring.Spring</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">springpack.config.SpringBootConfig</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">RatpackServer</span><span class="o">.</span><span class="na">start</span><span class="o">(</span><span class="n">spec</span> <span class="o">-&gt;</span> <span class="n">spec</span>
</span><span class='line'>      <span class="o">.</span><span class="na">registry</span><span class="o">(</span><span class="n">Spring</span><span class="o">.</span><span class="na">spring</span><span class="o">(</span><span class="n">SpringBootConfig</span><span class="o">.</span><span class="na">class</span><span class="o">))</span> <span class="o">(</span><span class="mi">1</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="na">handlers</span><span class="o">(</span><span class="n">chain</span> <span class="o">-&gt;</span> <span class="n">chain</span>
</span><span class='line'>        <span class="o">.</span><span class="na">prefix</span><span class="o">(</span><span class="s">&quot;api/users&quot;</span><span class="o">,</span> <span class="n">pchain</span> <span class="o">-&gt;</span> <span class="n">pchain</span>
</span><span class='line'>          <span class="o">.</span><span class="na">prefix</span><span class="o">(</span><span class="s">&quot;:username&quot;</span><span class="o">,</span> <span class="n">uchain</span> <span class="o">-&gt;</span> <span class="n">uchain</span>
</span><span class='line'>            <span class="o">.</span><span class="na">all</span><span class="o">(</span><span class="n">ctx</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">String</span> <span class="n">username</span> <span class="o">=</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getPathTokens</span><span class="o">().</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;username&quot;</span><span class="o">);</span>
</span><span class='line'>              <span class="n">ctx</span><span class="o">.</span><span class="na">byMethod</span><span class="o">(</span><span class="n">method</span> <span class="o">-&gt;</span> <span class="n">method</span>
</span><span class='line'>                <span class="o">.</span><span class="na">get</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="n">ctx</span><span class="o">.</span><span class="na">render</span><span class="o">(</span><span class="s">&quot;Received request for user: &quot;</span> <span class="o">+</span> <span class="n">username</span><span class="o">))</span>
</span><span class='line'>                <span class="o">.</span><span class="na">put</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>                  <span class="n">String</span> <span class="n">json</span> <span class="o">=</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getRequest</span><span class="o">().</span><span class="na">getBody</span><span class="o">().</span><span class="na">getText</span><span class="o">();</span>
</span><span class='line'>                  <span class="n">ctx</span><span class="o">.</span><span class="na">render</span><span class="o">(</span><span class="s">&quot;Received update request for user: &quot;</span> <span class="o">+</span> <span class="n">username</span> <span class="o">+</span> <span class="s">&quot;, JSON: &quot;</span> <span class="o">+</span> <span class="n">json</span><span class="o">);</span>
</span><span class='line'>                <span class="o">})</span>
</span><span class='line'>                <span class="o">.</span><span class="na">delete</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="n">ctx</span><span class="o">.</span><span class="na">render</span><span class="o">(</span><span class="s">&quot;Received delete request for user: &quot;</span> <span class="o">+</span> <span class="n">username</span><span class="o">))</span>
</span><span class='line'>              <span class="o">);</span>
</span><span class='line'>            <span class="o">})</span>
</span><span class='line'>          <span class="o">)</span>
</span><span class='line'>          <span class="o">.</span><span class="na">all</span><span class="o">(</span><span class="n">ctx</span> <span class="o">-&gt;</span> <span class="n">ctx</span>
</span><span class='line'>            <span class="o">.</span><span class="na">byMethod</span><span class="o">(</span><span class="n">method</span> <span class="o">-&gt;</span> <span class="n">method</span>
</span><span class='line'>              <span class="o">.</span><span class="na">post</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">String</span> <span class="n">json</span> <span class="o">=</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getRequest</span><span class="o">().</span><span class="na">getBody</span><span class="o">().</span><span class="na">getText</span><span class="o">();</span>
</span><span class='line'>                <span class="n">ctx</span><span class="o">.</span><span class="na">render</span><span class="o">(</span><span class="s">&quot;Received request to create a new user with JSON: &quot;</span> <span class="o">+</span> <span class="n">json</span><span class="o">);</span>
</span><span class='line'>              <span class="o">})</span>
</span><span class='line'>              <span class="o">.</span><span class="na">get</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="n">ctx</span><span class="o">.</span><span class="na">render</span><span class="o">(</span><span class="s">&quot;Received request to list all users&quot;</span><span class="o">))</span>
</span><span class='line'>            <span class="o">)</span>
</span><span class='line'>          <span class="o">)</span>
</span><span class='line'>        <span class="o">)</span>
</span><span class='line'>      <span class="o">)</span>
</span><span class='line'>    <span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>唯一需要的修改是（1），我们通过一个显式的Registry实现提供了对Ratpack应用程序的定义。现在我们可以开始实现API层。</p>

<p>如果你仔细观察接下来的修改，就会理解Ratpack与传统的基于servlet的web应用是完全不同的。之前我们提及过，Ratpack的HTTP层构建在非阻塞的网络接口上，该web框架天然支持高性能。而基于servlet的web应用会为每个到来的请求产生一个新的线程，虽然会降低资源利用率，但每个请求处理流时是隔离的。在这种机制下，web应用处理请求时会采用阻塞式的方式，比如调用数据库并等待对应的结果然后返回，在等待期间（相对来说）并不关心这会影响它服务接下来的客户端的能力。在非阻塞式的web应用中，如果客户端或服务器端不发送数据，那么网络层并不会被阻塞，所以线程池中少量的“请求任务”线程就可以服务大量高并发的请求。然而这意味着如果应用程序代码阻塞了一个“请求任务”线程，那么吞吐量会显著影响。因此，阻塞操作（比如对数据库的操作）不能放置在请求线程中。</p>

<p>幸运的是，Ratpack通过在请求上下文中暴露一个阻塞接口来在应用程序中执行阻塞操作。该接口会把阻塞操作放置到另一个不同的线程池中，在维持高容量的情况服务新带来的请求的同时，这些阻塞调用也可以同步完成。一旦阻塞调用完成，处理流会返回到“请求任务”线程中，应答会被写回到客户端。在我们构建的API层中，我们要确保所有对UserRepository的操作都被路由到阻塞固定层中。列表9展示了API层的实现。</p>

<p>列表9</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">springpack</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.fasterxml.jackson.core.JsonProcessingException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.fasterxml.jackson.core.type.TypeReference</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.fasterxml.jackson.databind.ObjectMapper</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">ratpack.exec.Promise</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">ratpack.handling.Context</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">ratpack.server.RatpackServer</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">ratpack.spring.Spring</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">springpack.model.User</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">springpack.model.UserRepository</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.HashMap</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">NOT_FOUND</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;()</span> <span class="err">\</span><span class="o">{</span><span class="err">\</span><span class="o">{</span>
</span><span class='line'>    <span class="n">put</span><span class="o">(</span><span class="s">&quot;status&quot;</span><span class="o">,</span> <span class="s">&quot;404&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">put</span><span class="o">(</span><span class="s">&quot;message&quot;</span><span class="o">,</span> <span class="s">&quot;NOT FOUND&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}};</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">NO_EMAIL</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;()</span> <span class="err">\</span><span class="o">{</span><span class="err">\</span><span class="o">{</span>
</span><span class='line'>    <span class="n">put</span><span class="o">(</span><span class="s">&quot;status&quot;</span><span class="o">,</span> <span class="s">&quot;400&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">put</span><span class="o">(</span><span class="s">&quot;message&quot;</span><span class="o">,</span> <span class="s">&quot;NO EMAIL ADDRESS SUPPLIED&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}};</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">RatpackServer</span><span class="o">.</span><span class="na">start</span><span class="o">(</span><span class="n">spec</span> <span class="o">-&gt;</span> <span class="n">spec</span>
</span><span class='line'>      <span class="o">.</span><span class="na">registry</span><span class="o">(</span><span class="n">Spring</span><span class="o">.</span><span class="na">spring</span><span class="o">(</span><span class="n">SpringBootConfig</span><span class="o">.</span><span class="na">class</span><span class="o">))</span>
</span><span class='line'>      <span class="o">.</span><span class="na">handlers</span><span class="o">(</span><span class="n">chain</span> <span class="o">-&gt;</span> <span class="n">chain</span>
</span><span class='line'>        <span class="o">.</span><span class="na">prefix</span><span class="o">(</span><span class="s">&quot;api/users&quot;</span><span class="o">,</span> <span class="n">pchain</span> <span class="o">-&gt;</span> <span class="n">pchain</span>
</span><span class='line'>          <span class="o">.</span><span class="na">prefix</span><span class="o">(</span><span class="s">&quot;:username&quot;</span><span class="o">,</span> <span class="n">uchain</span> <span class="o">-&gt;</span> <span class="n">uchain</span>
</span><span class='line'>            <span class="o">.</span><span class="na">all</span><span class="o">(</span><span class="n">ctx</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>              <span class="c1">// extract the &quot;username&quot; path variable</span>
</span><span class='line'>              <span class="n">String</span> <span class="n">username</span> <span class="o">=</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getPathTokens</span><span class="o">().</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;username&quot;</span><span class="o">);</span>
</span><span class='line'>              <span class="c1">// pull the UserRepository out of the registry</span>
</span><span class='line'>              <span class="n">UserRepository</span> <span class="n">userRepository</span> <span class="o">=</span> <span class="n">ctx</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">UserRepository</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>              <span class="c1">// pull the Jackson ObjectMapper out of the registry</span>
</span><span class='line'>              <span class="n">ObjectMapper</span> <span class="n">mapper</span> <span class="o">=</span> <span class="n">ctx</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">ObjectMapper</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>              <span class="c1">// construct a &quot;promise&quot; for the requested user object. This will</span>
</span><span class='line'>              <span class="c1">// be subscribed to within the respective handlers, according to what</span>
</span><span class='line'>              <span class="c1">// they must do. The promise uses the &quot;blocking&quot; fixture to ensure</span>
</span><span class='line'>              <span class="c1">// the DB call doesn&#39;t take place on a &quot;request taking&quot; thread.</span>
</span><span class='line'>              <span class="n">Promise</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="n">userPromise</span> <span class="o">=</span> <span class="n">ctx</span><span class="o">.</span><span class="na">blocking</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="n">userRepository</span><span class="o">.</span><span class="na">findByUsername</span><span class="o">(</span><span class="n">username</span><span class="o">));</span>
</span><span class='line'>              <span class="n">ctx</span><span class="o">.</span><span class="na">byMethod</span><span class="o">(</span><span class="n">method</span> <span class="o">-&gt;</span> <span class="n">method</span>
</span><span class='line'>                <span class="o">.</span><span class="na">get</span><span class="o">(()</span> <span class="o">-&gt;</span>
</span><span class='line'>                  <span class="c1">// the .then() block will &quot;subscribe&quot; to the result, allowing</span>
</span><span class='line'>                  <span class="c1">// us to send the user domain object back to the client</span>
</span><span class='line'>                  <span class="n">userPromise</span><span class="o">.</span><span class="na">then</span><span class="o">(</span><span class="n">user</span> <span class="o">-&gt;</span> <span class="n">sendUser</span><span class="o">(</span><span class="n">ctx</span><span class="o">,</span> <span class="n">user</span><span class="o">))</span>
</span><span class='line'>                <span class="o">)</span>
</span><span class='line'>                <span class="o">.</span><span class="na">put</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>                  <span class="c1">// Read the JSON from the request</span>
</span><span class='line'>                  <span class="n">String</span> <span class="n">json</span> <span class="o">=</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getRequest</span><span class="o">().</span><span class="na">getBody</span><span class="o">().</span><span class="na">getText</span><span class="o">();</span>
</span><span class='line'>                  <span class="c1">// Parse out the JSON body into a Map</span>
</span><span class='line'>                  <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">body</span> <span class="o">=</span> <span class="n">mapper</span><span class="o">.</span><span class="na">readValue</span><span class="o">(</span><span class="n">json</span><span class="o">,</span> <span class="k">new</span> <span class="n">TypeReference</span><span class="o">&lt;</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;&gt;()</span> <span class="o">{</span>
</span><span class='line'>                  <span class="o">});</span>
</span><span class='line'>                  <span class="c1">// Check to make sure the request body contained an &quot;email&quot; address</span>
</span><span class='line'>                  <span class="k">if</span> <span class="o">(</span><span class="n">body</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="s">&quot;email&quot;</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">userPromise</span>
</span><span class='line'>                      <span class="c1">// map the new email address on to the user entity</span>
</span><span class='line'>                      <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">user</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>                        <span class="n">user</span><span class="o">.</span><span class="na">setEmail</span><span class="o">(</span><span class="n">body</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;email&quot;</span><span class="o">));</span>
</span><span class='line'>                        <span class="k">return</span> <span class="n">user</span><span class="o">;</span>
</span><span class='line'>                      <span class="o">})</span>
</span><span class='line'>                      <span class="c1">// and use the blocking thread pool to save the updated details</span>
</span><span class='line'>                      <span class="o">.</span><span class="na">blockingMap</span><span class="o">(</span><span class="nl">userRepository:</span><span class="o">:</span><span class="n">save</span><span class="o">)</span>
</span><span class='line'>                      <span class="c1">// finally, send the updated user entity back to the client</span>
</span><span class='line'>                      <span class="o">.</span><span class="na">then</span><span class="o">(</span><span class="n">u1</span> <span class="o">-&gt;</span> <span class="n">sendUser</span><span class="o">(</span><span class="n">ctx</span><span class="o">,</span> <span class="n">u1</span><span class="o">));</span>
</span><span class='line'>                  <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                    <span class="c1">// bad request; we didn&#39;t get an email address</span>
</span><span class='line'>                    <span class="n">ctx</span><span class="o">.</span><span class="na">getResponse</span><span class="o">().</span><span class="na">status</span><span class="o">(</span><span class="mi">400</span><span class="o">);</span>
</span><span class='line'>                    <span class="n">ctx</span><span class="o">.</span><span class="na">getResponse</span><span class="o">().</span><span class="na">send</span><span class="o">(</span><span class="n">mapper</span><span class="o">.</span><span class="na">writeValueAsBytes</span><span class="o">(</span><span class="n">NO_EMAIL</span><span class="o">));</span>
</span><span class='line'>                  <span class="o">}</span>
</span><span class='line'>                <span class="o">})</span>
</span><span class='line'>                <span class="o">.</span><span class="na">delete</span><span class="o">(()</span> <span class="o">-&gt;</span>
</span><span class='line'>                  <span class="n">userPromise</span>
</span><span class='line'>                    <span class="c1">// make the DB delete call in a blocking thread</span>
</span><span class='line'>                    <span class="o">.</span><span class="na">blockingMap</span><span class="o">(</span><span class="n">user</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>                      <span class="n">userRepository</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span><span class='line'>                      <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>                    <span class="o">})</span>
</span><span class='line'>                    <span class="c1">// then send a 204 back to the client</span>
</span><span class='line'>                    <span class="o">.</span><span class="na">then</span><span class="o">(</span><span class="n">user</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>                      <span class="n">ctx</span><span class="o">.</span><span class="na">getResponse</span><span class="o">().</span><span class="na">status</span><span class="o">(</span><span class="mi">204</span><span class="o">);</span>
</span><span class='line'>                      <span class="n">ctx</span><span class="o">.</span><span class="na">getResponse</span><span class="o">().</span><span class="na">send</span><span class="o">();</span>
</span><span class='line'>                    <span class="o">})</span>
</span><span class='line'>                <span class="o">)</span>
</span><span class='line'>              <span class="o">);</span>
</span><span class='line'>            <span class="o">})</span>
</span><span class='line'>          <span class="o">)</span>
</span><span class='line'>          <span class="o">.</span><span class="na">all</span><span class="o">(</span><span class="n">ctx</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// pull the UserRepository out of the registry</span>
</span><span class='line'>            <span class="n">UserRepository</span> <span class="n">userRepository</span> <span class="o">=</span> <span class="n">ctx</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">UserRepository</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>            <span class="c1">// pull the Jackson ObjectMapper out of the registry</span>
</span><span class='line'>            <span class="n">ObjectMapper</span> <span class="n">mapper</span> <span class="o">=</span> <span class="n">ctx</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">ObjectMapper</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>            <span class="n">ctx</span><span class="o">.</span><span class="na">byMethod</span><span class="o">(</span><span class="n">method</span> <span class="o">-&gt;</span> <span class="n">method</span>
</span><span class='line'>              <span class="o">.</span><span class="na">post</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">// read the JSON request body...</span>
</span><span class='line'>                <span class="n">String</span> <span class="n">json</span> <span class="o">=</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getRequest</span><span class="o">().</span><span class="na">getBody</span><span class="o">().</span><span class="na">getText</span><span class="o">();</span>
</span><span class='line'>                <span class="c1">// ... and convert it into a user entity</span>
</span><span class='line'>                <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">mapper</span><span class="o">.</span><span class="na">readValue</span><span class="o">(</span><span class="n">json</span><span class="o">,</span> <span class="n">User</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>                <span class="c1">// save the user entity on a blocking thread and</span>
</span><span class='line'>                <span class="c1">// render the user entity back to the client</span>
</span><span class='line'>                <span class="n">ctx</span><span class="o">.</span><span class="na">blocking</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="n">userRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">user</span><span class="o">))</span>
</span><span class='line'>                  <span class="o">.</span><span class="na">then</span><span class="o">(</span><span class="n">u1</span> <span class="o">-&gt;</span> <span class="n">sendUser</span><span class="o">(</span><span class="n">ctx</span><span class="o">,</span> <span class="n">u1</span><span class="o">));</span>
</span><span class='line'>              <span class="o">})</span>
</span><span class='line'>              <span class="o">.</span><span class="na">get</span><span class="o">(()</span> <span class="o">-&gt;</span>
</span><span class='line'>                <span class="c1">// make the DB call, on a blocking thread, to list all users</span>
</span><span class='line'>                <span class="n">ctx</span><span class="o">.</span><span class="na">blocking</span><span class="o">(</span><span class="nl">userRepository:</span><span class="o">:</span><span class="n">findAll</span><span class="o">)</span>
</span><span class='line'>                  <span class="c1">// and render the user list back to the client</span>
</span><span class='line'>                  <span class="o">.</span><span class="na">then</span><span class="o">(</span><span class="n">users</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">ctx</span><span class="o">.</span><span class="na">getResponse</span><span class="o">().</span><span class="na">contentType</span><span class="o">(</span><span class="s">&quot;application/json&quot;</span><span class="o">);</span>
</span><span class='line'>                    <span class="n">ctx</span><span class="o">.</span><span class="na">getResponse</span><span class="o">().</span><span class="na">send</span><span class="o">(</span><span class="n">mapper</span><span class="o">.</span><span class="na">writeValueAsBytes</span><span class="o">(</span><span class="n">users</span><span class="o">));</span>
</span><span class='line'>                  <span class="o">})</span>
</span><span class='line'>              <span class="o">)</span>
</span><span class='line'>            <span class="o">);</span>
</span><span class='line'>          <span class="o">})</span>
</span><span class='line'>        <span class="o">)</span>
</span><span class='line'>      <span class="o">)</span>
</span><span class='line'>    <span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">notFound</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">ObjectMapper</span> <span class="n">mapper</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">ObjectMapper</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>    <span class="n">context</span><span class="o">.</span><span class="na">getResponse</span><span class="o">().</span><span class="na">status</span><span class="o">(</span><span class="mi">404</span><span class="o">);</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">context</span><span class="o">.</span><span class="na">getResponse</span><span class="o">().</span><span class="na">send</span><span class="o">(</span><span class="n">mapper</span><span class="o">.</span><span class="na">writeValueAsBytes</span><span class="o">(</span><span class="n">NOT_FOUND</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">JsonProcessingException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">context</span><span class="o">.</span><span class="na">getResponse</span><span class="o">().</span><span class="na">send</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">sendUser</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="n">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">user</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">notFound</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ObjectMapper</span> <span class="n">mapper</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">ObjectMapper</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>    <span class="n">context</span><span class="o">.</span><span class="na">getResponse</span><span class="o">().</span><span class="na">contentType</span><span class="o">(</span><span class="s">&quot;application/json&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">context</span><span class="o">.</span><span class="na">getResponse</span><span class="o">().</span><span class="na">send</span><span class="o">(</span><span class="n">mapper</span><span class="o">.</span><span class="na">writeValueAsBytes</span><span class="o">(</span><span class="n">user</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">JsonProcessingException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">context</span><span class="o">.</span><span class="na">getResponse</span><span class="o">().</span><span class="na">status</span><span class="o">(</span><span class="mi">500</span><span class="o">);</span>
</span><span class='line'>      <span class="n">context</span><span class="o">.</span><span class="na">getResponse</span><span class="o">().</span><span class="na">send</span><span class="o">(</span><span class="s">&quot;Error serializing user to JSON&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>API层最值得关注的点是对阻塞机制的使用，这次阻塞操作可以从每个请求的Conext对象中抽取出来。当调用ctx.blocking()方法时，会返回一个Promise对象，我们必须订阅该对象以便执行代码。我们可以抽取一个promise（在prefix(“:username”)中展示的一样）从而在不同的处理器中重用，保持代码简洁。</p>

<p>现在实现了API后，可以运行一系列curl测试来确保该微服务符合预期：</p>

<ul>
<li>命令: curl -d &lsquo;{&ldquo;username&rdquo;: &ldquo;dan&rdquo;, &ldquo;email&rdquo;: &ldquo;<a href="&#109;&#97;&#x69;&#108;&#x74;&#111;&#x3a;&#x64;&#97;&#110;&#x69;&#101;&#108;&#112;&#119;&#111;&#111;&#100;&#x73;&#x40;&#103;&#109;&#97;&#x69;&#x6c;&#46;&#x63;&#x6f;&#x6d;">&#100;&#x61;&#x6e;&#105;&#101;&#x6c;&#112;&#119;&#111;&#x6f;&#x64;&#x73;&#64;&#x67;&#x6d;&#97;&#x69;&#x6c;&#x2e;&#x63;&#111;&#109;</a>&rdquo;}&#8217;<a href="http://localhost:5050/api/users,">http://localhost:5050/api/users,</a> 期望结果: {&ldquo;id&rdquo;:1,&ldquo;username&rdquo;:&ldquo;dan&rdquo;,&ldquo;email&rdquo;:&ldquo;<a href="&#x6d;&#x61;&#105;&#x6c;&#116;&#111;&#58;&#100;&#x61;&#110;&#x69;&#101;&#x6c;&#112;&#x77;&#x6f;&#111;&#x64;&#115;&#x40;&#103;&#x6d;&#97;&#105;&#x6c;&#x2e;&#x63;&#111;&#x6d;">&#100;&#97;&#110;&#x69;&#101;&#x6c;&#x70;&#119;&#111;&#x6f;&#x64;&#115;&#x40;&#x67;&#x6d;&#x61;&#105;&#108;&#x2e;&#99;&#x6f;&#x6d;</a>&rdquo;}</li>
<li>命令: curl <a href="http://localhost:5050/api/users,">http://localhost:5050/api/users,</a> 期望结果: [{&ldquo;id&rdquo;:1,&ldquo;username&rdquo;:&ldquo;dan&rdquo;,&ldquo;email&rdquo;:&ldquo;<a href="&#109;&#97;&#x69;&#108;&#x74;&#x6f;&#58;&#100;&#97;&#110;&#105;&#101;&#x6c;&#x70;&#119;&#111;&#x6f;&#100;&#115;&#x40;&#103;&#x6d;&#97;&#105;&#108;&#x2e;&#99;&#x6f;&#x6d;">&#x64;&#97;&#x6e;&#x69;&#101;&#108;&#x70;&#x77;&#111;&#x6f;&#x64;&#115;&#x40;&#x67;&#x6d;&#97;&#x69;&#x6c;&#46;&#x63;&#x6f;&#x6d;</a>&rdquo;}]</li>
<li>命令: curl -XPUT -d &lsquo;{ &ldquo;email&rdquo;: &ldquo;<a href="&#109;&#97;&#x69;&#108;&#116;&#111;&#58;&#100;&#x61;&#110;&#105;&#x65;&#x6c;&#46;&#x70;&#46;&#x77;&#x6f;&#x6f;&#100;&#x73;&#x40;&#103;&#109;&#x61;&#x69;&#x6c;&#x2e;&#x63;&#x6f;&#109;">&#x64;&#x61;&#110;&#x69;&#101;&#108;&#x2e;&#112;&#46;&#x77;&#111;&#x6f;&#x64;&#x73;&#64;&#x67;&#109;&#x61;&#x69;&#x6c;&#46;&#99;&#x6f;&#109;</a>&rdquo; }&#8217;<a href="http://localhost:5050/api/users/dan,">http://localhost:5050/api/users/dan,</a> 期望结果: {&ldquo;id&rdquo;:1,&ldquo;username&rdquo;:&ldquo;dan&rdquo;,&ldquo;email&rdquo;:&ldquo;<a href="&#x6d;&#97;&#x69;&#x6c;&#x74;&#111;&#x3a;&#100;&#97;&#x6e;&#x69;&#101;&#108;&#x2e;&#112;&#46;&#119;&#111;&#x6f;&#x64;&#x73;&#x40;&#x67;&#109;&#97;&#105;&#x6c;&#46;&#99;&#111;&#109;">&#x64;&#97;&#x6e;&#105;&#101;&#108;&#46;&#112;&#46;&#x77;&#111;&#111;&#x64;&#x73;&#64;&#x67;&#x6d;&#97;&#105;&#x6c;&#46;&#x63;&#111;&#109;</a>&rdquo;}</li>
<li>命令: curl <a href="http://localhost:5050/api/users/dan,">http://localhost:5050/api/users/dan,</a> 期望结果: {&ldquo;id&rdquo;:1,&ldquo;username&rdquo;:&ldquo;dan&rdquo;,&ldquo;email&rdquo;:&ldquo;<a href="&#x6d;&#97;&#x69;&#x6c;&#116;&#x6f;&#x3a;&#x64;&#x61;&#x6e;&#105;&#x65;&#x6c;&#46;&#112;&#x2e;&#x77;&#111;&#x6f;&#x64;&#x73;&#x40;&#103;&#109;&#x61;&#x69;&#x6c;&#x2e;&#99;&#x6f;&#x6d;">&#100;&#x61;&#110;&#x69;&#x65;&#x6c;&#x2e;&#x70;&#x2e;&#119;&#x6f;&#111;&#x64;&#x73;&#64;&#103;&#109;&#97;&#x69;&#x6c;&#x2e;&#99;&#111;&#109;</a>&rdquo;}</li>
<li>命令: curl -XDELETE <a href="http://localhost:5050/api/users/dan,">http://localhost:5050/api/users/dan,</a> 期望结果: empty</li>
<li>命令: curl <a href="http://localhost:5050/api/users/dan,">http://localhost:5050/api/users/dan,</a> 期望结果: {&ldquo;message&rdquo;:&ldquo;NOT FOUND&rdquo;,&ldquo;status&rdquo;:&ldquo;404&rdquo;}</li>
</ul>


<p>通过上面的命令序列可以看出API层工作完全正确，我们拥有了一个完全正式的数据驱动的基于Ratpack和Spring Boot的微服务，并且使用了Spring Data JPA！</p>

<p>整个过程的最后一步是部署。部署的最简单方式是执行gradle installDist命令。这会打包应用程序以及整个运行时依赖到一个traball(.tar文件)和zip(.zip文件)存档文件中。它另外也会创建跨平台的启动脚本，可以在任何安装了Java 8的系统中启动我们的微服务。当installDist任务完成后，可以在项目的build/distributions目录中找到这些存档文件。</p>

<p>通过本文章你已经学会了如何利用Spring Boot提供的大量生态系统以及Ratpack提供的高性能特性来打造一个微服务应用程序。你可以使用该示例作为起点来构建JVM上原生支持云的数据驱动的微服务程序。</p>

<p>欢迎使用Ratpack和Srping Boot！</p>

<h3>关于作者</h3>

<p>Daniel Woods醉心于企业级Java、Groovy以及Grails开发。他在JVM软件开发领域拥有10余年的工作经验，并且乐于向开源项目（比如<a href="http://www.ratpack.io/">Grails</a>和<a href="http://www.ratpack.io/">Ratpack</a>）贡献他的经验。Dan曾在Gr8conf和SpringOne 2GX大会上做过演讲嘉宾，展示了他基于JVM的企业级应用程序架构的专业知识。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Maven和Gradle对比]]></title>
    <link href="http://www.huangbowen.net/blog/2016/02/23/gradle-vs-maven/"/>
    <updated>2016-02-23T11:30:27+08:00</updated>
    <id>http://www.huangbowen.net/blog/2016/02/23/gradle-vs-maven</id>
    <content type="html"><![CDATA[<p>Java世界中主要有三大构建工具：Ant、Maven和Gradle。经过几年的发展，Ant几乎销声匿迹、Maven也日薄西山，而Gradle的发展则如日中天。笔者有幸见证了Maven的没落和Gradle的兴起。Maven的主要功能主要分为5点，分别是依赖管理系统、多模块构建、一致的项目结构、一致的构建模型和插件机制。我们可以从这五个方面来分析一下Gradle比起Maven的先进之处。</p>

<!-- more -->


<h2>依赖管理系统</h2>

<p>Maven为Java世界引入了一个新的依赖管理系统。在Java世界中，可以用groupId、artifactId、version组成的Coordination（坐标）唯一标识一个依赖。任何基于Maven构建的项目自身也必须定义这三项属性，生成的包可以是Jar包，也可以是war包或者ear包。一个典型的依赖引用如下所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>junit<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>junit<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version&gt;</span>4.12<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>    <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>spring-test<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>从上面可以看出当引用一个依赖时，version可以省略掉，这样在获取依赖时会选择最新的版本。而存储这些组件的仓库有远程仓库和本地仓库之分。远程仓库可以使用世界公用的central仓库，也可以使用Apache Nexus自建私有仓库；本地仓库则在本地计算机上。通过Maven安装目录下的settings.xml文件可以配置本地仓库的路径，以及采用的远程仓库的地址。</p>

<p>Gradle在设计的时候基本沿用了Maven的这套依赖管理体系。不过它在引用依赖时还是进行了一些改进。首先引用依赖方面变得非常简洁。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">compile</span> <span class="s1">&#39;org.hibernate:hibernate-core:3.6.7.Final&#39;</span>
</span><span class='line'>    <span class="n">testCompile</span> <span class="err">‘</span><span class="nl">junit:junit:</span><span class="mi">4</span><span class="o">.+</span><span class="err">&#39;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>第二，Maven和Gradle对依赖项的scope有所不同。在Maven世界中，一个依赖项有6种scope，分别是complie(默认)、provided、runtime、test、system、import。而grade将其简化为了4种，compile、runtime、testCompile、testRuntime。那么如果想在gradle使用类似于provided的scope怎么办？别着急，由于gradle语言的强大表现力，我们可以轻松编写代码来实现类似于provided scope的概念（例如<a href="http://stackoverflow.com/questions/18738888/how-to-use-provided-scope-for-jar-file-in-gradle-build">How to use provided scope for jar file in Gradle build?</a>）。</p>

<p>第三点是Gradle支持动态的版本依赖。在版本号后面使用+号的方式可以实现动态的版本管理。</p>

<p>第四点是在解决依赖冲突方面Gradle的实现机制更加明确。使用Maven和Gradle进行依赖管理时都采用的是传递性依赖；而如果多个依赖项指向同一个依赖项的不同版本时就会引起依赖冲突。而Maven处理这种依赖关系往往是噩梦一般的存在。而Gradle在解决依赖冲突方面相对来说比较明确。在<a href="https://docs.gradle.org/current/userguide/dependency_management.html">Chapter 23. Dependency Management
</a>中的23.2.3章节详细解读了gradle是如何处理版本冲突的。</p>

<h2>多模块构建</h2>

<p>在SOA和微服务的浪潮下，将一个项目分解为多个模块已经是很通用的一种方式。在Maven中需要定义个parent POM作为一组module的聚合POM。在该POM中可以使用<code>&lt;modules&gt;</code>标签来定义一组子模块。parent POM不会有什么实际构建产出。而parent POM中的build配置以及依赖配置都会自动继承给子module。</p>

<p>而Gradle也支持多模块构建。而在parent的build.gradle中可以使用allprojects和subprojects代码块来分别定义里面的配置是应用于所有项目还是子项目。对于子模块的定义是放置在setttings.gradle文件中的。在gradle的设计当中，每个模块都是Project的对象实例。而在parent build.gradle中通过allprojects或subprojects可以对这些对象进行各种操作。这无疑比Maven要灵活的多。</p>

<p>比如在parent的build.gradle中有以下代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">allprojects</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">task</span> <span class="n">hello</span> <span class="o">&lt;&lt;</span> <span class="o">{</span> <span class="n">task</span> <span class="o">-&gt;</span> <span class="n">println</span> <span class="s2">&quot;I&#39;m $task.project.name&quot;</span> <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>执行命令<code>gradle -q hello</code>会依次打印出父module以及各个submodule的项目名称。这种强大的能力能让gradle对各个模块具有更强的定制化。</p>

<h2>一致的项目结构</h2>

<p>在Ant时代大家创建Java项目目录时比较随意，然后通过Ant配置指定哪些属于source，那些属于testSource等。而Maven在设计之初的理念就是Conversion over configuration（约定大于配置）。其制定了一套项目目录结构作为标准的Java项目结构。一个典型的Maven项目结构如下：</p>

<p><img src="http://www.huangbowen.net/images/project_structure.png" width="400"></p>

<p>Gradle也沿用了这一标准的目录结构。如果你在Gradle项目中使用了标准的Maven项目结构的话，那么在Gradle中也无需进行多余的配置,只需在文件中包含<code>apply plugin:'java'</code>,系统会自动识别source、resource、test srouce、 test resource等相应资源。不过Gradle作为JVM上的构建工具，也同时支持groovy、scala等源代码的构建，甚至支持Java、groovy、scala语言的混合构建。虽然Maven通过一些插件（比如<a href="http://scala-tools.org/mvnsites/maven-scala-plugin/">maven-scala-plugin</a>）也能达到相同目的，但配置方面显然Gradle要更优雅一些。</p>

<h2>一致的构建模型</h2>

<p>为了解决Ant中对项目构建活动缺乏标准化的问题，Maven特意设置了标准的项目构建周期，其默认的构建周期如下所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;phases&gt;</span>
</span><span class='line'>  <span class="nt">&lt;phase&gt;</span>validate<span class="nt">&lt;/phase&gt;</span>
</span><span class='line'>  <span class="nt">&lt;phase&gt;</span>initialize<span class="nt">&lt;/phase&gt;</span>
</span><span class='line'>  <span class="nt">&lt;phase&gt;</span>generate-sources<span class="nt">&lt;/phase&gt;</span>
</span><span class='line'>  <span class="nt">&lt;phase&gt;</span>process-sources<span class="nt">&lt;/phase&gt;</span>
</span><span class='line'>  <span class="nt">&lt;phase&gt;</span>generate-resources<span class="nt">&lt;/phase&gt;</span>
</span><span class='line'>  <span class="nt">&lt;phase&gt;</span>process-resources<span class="nt">&lt;/phase&gt;</span>
</span><span class='line'>  <span class="nt">&lt;phase&gt;</span>compile<span class="nt">&lt;/phase&gt;</span>
</span><span class='line'>  <span class="nt">&lt;phase&gt;</span>process-classes<span class="nt">&lt;/phase&gt;</span>
</span><span class='line'>  <span class="nt">&lt;phase&gt;</span>generate-test-sources<span class="nt">&lt;/phase&gt;</span>
</span><span class='line'>  <span class="nt">&lt;phase&gt;</span>process-test-sources<span class="nt">&lt;/phase&gt;</span>
</span><span class='line'>  <span class="nt">&lt;phase&gt;</span>generate-test-resources<span class="nt">&lt;/phase&gt;</span>
</span><span class='line'>  <span class="nt">&lt;phase&gt;</span>process-test-resources<span class="nt">&lt;/phase&gt;</span>
</span><span class='line'>  <span class="nt">&lt;phase&gt;</span>test-compile<span class="nt">&lt;/phase&gt;</span>
</span><span class='line'>  <span class="nt">&lt;phase&gt;</span>process-test-classes<span class="nt">&lt;/phase&gt;</span>
</span><span class='line'>  <span class="nt">&lt;phase&gt;</span>test<span class="nt">&lt;/phase&gt;</span>
</span><span class='line'>  <span class="nt">&lt;phase&gt;</span>prepare-package<span class="nt">&lt;/phase&gt;</span>
</span><span class='line'>  <span class="nt">&lt;phase&gt;</span>package<span class="nt">&lt;/phase&gt;</span>
</span><span class='line'>  <span class="nt">&lt;phase&gt;</span>pre-integration-test<span class="nt">&lt;/phase&gt;</span>
</span><span class='line'>  <span class="nt">&lt;phase&gt;</span>integration-test<span class="nt">&lt;/phase&gt;</span>
</span><span class='line'>  <span class="nt">&lt;phase&gt;</span>post-integration-test<span class="nt">&lt;/phase&gt;</span>
</span><span class='line'>  <span class="nt">&lt;phase&gt;</span>verify<span class="nt">&lt;/phase&gt;</span>
</span><span class='line'>  <span class="nt">&lt;phase&gt;</span>install<span class="nt">&lt;/phase&gt;</span>
</span><span class='line'>  <span class="nt">&lt;phase&gt;</span>deploy<span class="nt">&lt;/phase&gt;</span>
</span><span class='line'><span class="nt">&lt;/phases&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>而这种构建周期也是Maven最为人诟病的地方。因为Maven将项目的构建周期限制的太死，你无法在构建周期中添加新的phase，只能将插件绑定到已有的phase上。而现在项目的构建过程变得越来越复杂，而且多样化，显然Maven对这种复杂度缺少足够的应变能力。比如你想在项目构建过程中进行一项压缩所有javascript的任务，那么就要绑定到Maven的现有的某个phase上，而显然貌似放在哪个phase都不太合适。而且这些phase都是串行的，整个执行下来是一条线，这也限制了Maven的构建效率。而Gradle在构建模型上则非常灵活。在Gradle世界里可以轻松创建一个task，并随时通过<code>depends</code>语法建立与已有task的依赖关系。甚至对于Java项目的构建来说，Gradle是通过名为<code>java</code>的插件来包含了一个对Java项目的构建周期，这等于Gradle本身直接与项目构建周期是解耦的。</p>

<h2>插件机制</h2>

<p>Maven和Gradle设计时都采用了插件机制。但显然Gradle更胜一筹。主要原因在于Maven是基于XML进行配置。所以其配置语法太受限于XML。即使实现很小的功能都需要设计一个插件，建立其与XML配置的关联。比如想在Maven中执行一条shell命令，其配置如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>  <span class="nt">&lt;groupId&gt;</span>org.codehaus.mojo<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;artifactId&gt;</span>exec-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;version&gt;</span>1.2<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>  <span class="nt">&lt;executions&gt;</span>
</span><span class='line'>    <span class="nt">&lt;execution&gt;</span>
</span><span class='line'>      <span class="nt">&lt;id&gt;</span>drop DB =&gt; db_name<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>      <span class="nt">&lt;phase&gt;</span>pre-integration-test<span class="nt">&lt;/phase&gt;</span>
</span><span class='line'>      <span class="nt">&lt;goals&gt;</span>
</span><span class='line'>        <span class="nt">&lt;goal&gt;</span>exec<span class="nt">&lt;/goal&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/goals&gt;</span>
</span><span class='line'>      <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>        <span class="nt">&lt;executable&gt;</span>curl<span class="nt">&lt;/executable&gt;</span>
</span><span class='line'>        <span class="nt">&lt;arguments&gt;</span>
</span><span class='line'>          <span class="nt">&lt;argument&gt;</span>-s<span class="nt">&lt;/argument&gt;</span>
</span><span class='line'>          <span class="nt">&lt;argument&gt;</span>-S<span class="nt">&lt;/argument&gt;</span>
</span><span class='line'>          <span class="nt">&lt;argument&gt;</span>-X<span class="nt">&lt;/argument&gt;</span>
</span><span class='line'>          <span class="nt">&lt;argument&gt;</span>DELETE<span class="nt">&lt;/argument&gt;</span>
</span><span class='line'>          <span class="nt">&lt;argument&gt;</span>http://${db.server}:${db.port}/db_name<span class="nt">&lt;/argument&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/arguments&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/execution&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/executions&gt;</span>
</span><span class='line'><span class="nt">&lt;/plugin&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>而在Gradle中则一切变得非常简单。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">task</span> <span class="nf">dropDB</span><span class="o">(</span><span class="nl">type:</span> <span class="n">Exec</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'> <span class="n">commandLine</span> <span class="err">‘</span><span class="n">curl</span><span class="err">’</span><span class="o">,</span><span class="err">’</span><span class="o">-</span><span class="n">s</span><span class="err">’</span><span class="o">,</span><span class="err">’</span><span class="n">s</span><span class="err">’</span><span class="o">,</span><span class="err">’</span><span class="o">-</span><span class="n">x</span><span class="err">’</span><span class="o">,</span><span class="err">’</span><span class="n">DELETE</span><span class="err">’</span><span class="o">,</span><span class="s2">&quot;http://${db.server}:{db.port}/db_name&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在创建自定义插件方面，Maven和Gradle的机制都差不多，都是继承自插件基类，然后实现要求的方法。这里就不展开说明。</p>

<hr />

<p>从以上五个方面可以看出Maven和Gradle的主要差异。Maven的设计核心<code>Convention Over Configuration</code>被Gradle更加发扬光大，而Gradle的<code>配置即代码</code>又超越了Maven。在Gradle中任何配置都可以作为代码被执行的，我们也可以随时使用已有的Ant脚本（Ant task是Gradle中的一等公民）、Java类库、Groovy类库来辅助完成构建任务的编写。</p>

<p>这种采用本身语言实现的DSL对本身语言项目进行构建管理的例子比比皆是。比如Rake和Ruby、Grunt和JavaScript、Sbt和Ruby&hellip;..而Gradle之所以使用Groovy语言实现，是因为Groovy比Java语言更具表现力，其语法特性更丰富，又兼具函数式的特点。这几年兴起的语言（比如Scala、Go、Swift）都属于强类型的语言，兼具面向对象和函数式的特点。</p>

<p>最后想说的Gradle的命令行比Maven的要强大的多。以前写过一篇文章专门讲述了Gradle的命令行操作，详情请见<a href="http://www.huangbowen.net/blog/2013/09/01/command-line-of-gradle/">Gradle命令行黑魔法</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[膝盖中了一箭之康复篇-第七个月暨1月份目标总结]]></title>
    <link href="http://www.huangbowen.net/blog/2016/02/05/acl-recovery-for-7th-month/"/>
    <updated>2016-02-05T10:50:19+08:00</updated>
    <id>http://www.huangbowen.net/blog/2016/02/05/acl-recovery-for-7th-month</id>
    <content type="html"><![CDATA[<p>前交叉韧带术后已经7个月。</p>

<!-- more -->


<p>上一次见主治医生还是2015年11月初的时候。按理说术后复查时间表应该是1个月、2个月、3个月、半年。但由于长期出差，再加上主治医生只有每周二坐诊，而且挂他的号都要提前一周预约，时间实在不好把握。所以我只在2个多月的时候和4个多月的时候去复查过。而4月份复查时拍的MRI底片还没有拿给他看。</p>

<p>2016年新年伊始我改革了做新一年计划的方式，以前笼统的按年计划的方式变为按月进行。1月份的计划为跑步200公里，其中包括4个半程马拉松。由于2015年11月份、12月份跑量都在180公里左右，所以这样的计划也不算太冒进。再加上自我感觉膝盖恢复的还可以，所以还是相当自信的。</p>

<p>以下是咕咚记录的1月份跑步情况。</p>

<p><img src="http://www.huangbowen.net/images/201601_run_record.jpg" width="300"></p>

<ul>
<li>一月份总跑量220公里+，有10公里是在跑步机上跑的</li>
<li>一月份共31天，出勤了19天</li>
<li>一月份完成半程马拉松4个，其中一次半程马拉松耗时1小时43分13秒，将个人半程马拉松记录提高了2分钟30秒</li>
</ul>


<p>这样的成绩总体来说还是比较满意的。基本上每次训练都是堆量为主，以自己最适应的配速跑完就行。之所以没上速度训练是考虑到伤腿肌肉力量还未完全恢复，怕再次受伤。就这样慢悠悠的拉拉耐力也好，不过2月份还是要多搞点速度训练，彻底把速度提上去，这样全马400大关甚至330大关才有可能突破。</p>

<p>1月10日公司举办away day的时候我也趁机踢了场足球。5对5的小场子，最后10多分钟作为替补踢了一会儿。已经1年没有踢球了，能够重新踢球的感觉真好。当然为了保险起见，没有太多的身体对抗。</p>

<p>力量训练在1月份也在开展当中。在酒店附近换了个健身房，晚上时不时过去练一练。卧推现在只能推50公斤了，60公斤没保护心里还真没底，有氧训练太多感觉自己的力量也在流失。再加上为了减脂，蛋白质摄入也不够。2月份蛋白粉喝起，还不知道家里的那罐蛋白粉过期了没有。</p>

<p>体重自11月底降至70公斤以后就再没动过，直到现在还未降到70公斤以下。这次的平台期可真够长的，虽然这个月对自己挺狠的，但就是达不到效果。2月份过年，避免不了胡吃海喝，看来辛苦降下来的体重又要有所回升。</p>

<p>12月初恢复腹肌撕裂者训练，到现在已经2个月。感觉腹肌状态已经超过了2014年9月份的时候，但还是由于腹部脂肪太多，只能隐约看到四块。现在腹肌撕裂者整套动作可以完全跟完了，中间不需要休息。腹肌撕裂者再练一段时间估计就要加负重动作来练腹肌了。</p>

<p>现在正是国内上半年各大越野赛报名的时刻，但由于自己早已安排好去印度，6月中旬才回国，所以华丽丽的错过了上半年所有的越野赛。2016年暂定大理100越野赛作为自己第二次向百公里发起冲击。不过在此之前必须先拿到报名资格，所以还需要完成一个短纪录的越野赛或者一个全马赛事来达到报名要求。这也挺让我头痛的，需要在7月份左右为自己安排一场赛事，时间还是挺赶的。</p>

<p>2月份的目标是4000个俯卧撑和4篇技术博客。待到月底再看完成情况吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用微博自动记录俯卧撑个数]]></title>
    <link href="http://www.huangbowen.net/blog/2016/02/02/use-weibo-to-track-workout/"/>
    <updated>2016-02-02T10:07:42+08:00</updated>
    <id>http://www.huangbowen.net/blog/2016/02/02/use-weibo-to-track-workout</id>
    <content type="html"><![CDATA[<p>根据SMART原则我制定了2016年的目标。每个月都有一个小目标，每个目标都是specific(具体)、Measurable(可度量)、Attainable(可实现)、Relevant(相关性)、Time-bound(时限)的。1月份的目标是跑步200公里，其中包含4个半程马拉松。1月底验收的时候发现这个目标轻松达成，整个1月份我总共跑了220公里+，其中跑了4个半程马拉松。而且第二次的马拉松打破我的个人记录，成绩为1小时43分30秒，把我的个人最好成绩提高了2分钟。</p>

<!-- more -->


<p><img src="http://www.huangbowen.net/images/201601_run_record.jpg" width="300"></p>

<p>2月份我的目标的是做4000个俯卧撑+撰写4篇技术博客。跑步的时候我可以使用跑步软件（咕咚或者悦跑圈）来记录我的跑步里程，而记录俯卧撑虽然有一些现成的软件(比如Push-Ups)，但是我感觉太重量级，想要一种轻量的方式来记录。后来我想到了一种方式，只需在命令行终端输入一条简单的命令，比如<code>pushups 30</code>，那么我的微博会自动多出来一条博文，记录我本次做了多少俯卧撑，本月已经完成了多少俯卧撑，距离目标还剩下多少俯卧撑。这样子每做完一组，我只需敲一行命令就可以轻松记录下来，并且还有广大网友进行监督。</p>

<p>这个主意很好，可是怎么实现那？其实整个过程并不复杂，我周末花了两个小时就完成了。新浪微博提供了一个<a href="http://open.weibo.com/wiki/%E9%A6%96%E9%A1%B5">微博开放平台</a>，在微博开放平台上其开放了<a href="http://open.weibo.com/wiki/API%E6%96%87%E6%A1%A3">一系列API</a>，其中发送微博就属于其中一个。我们只需把我们要发送的内容组装好，编写程序调用其发送微博的API即可。</p>

<p>发送微博的API文档<a href="http://open.weibo.com/wiki/Statuses/update">在这里</a>。通过文档可以看出其实只要发送一个http请求，包含相应的内容就好。其中有两个字段比较重要，一个是access token，一个是status。access token是认证令牌，确定是哪个应用向哪个微博发送内容，status是需要推送的微博正文。</p>

<p>获取access_token的过程比较复杂，需要你了解OAuth2.0认证流程,详情请看<a href="http://open.weibo.com/wiki/%E6%8E%88%E6%9D%83%E6%9C%BA%E5%88%B6%E8%AF%B4%E6%98%8E">授权机制说明</a>。简单来说就是用你的微博账号登陆微博开放平台，注册一个应用，然后得到一个应用Id，然后用该应用Id调用相应的API来授权访问你的个人微博，最后得到一个access token。</p>

<p>如果调用这个API那？因为之前曾经写过一个插件向微博推送我的博客信息，所以只需把相关代码拿出来重用即可。相关代码采用Ruby写的。代码如下：</p>

<figure class='code'><figcaption><span>WeiboPoster</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;faraday&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;yaml&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;json&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">WeiboPoster</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>    <span class="vi">@weibo_config</span> <span class="o">=</span> <span class="no">YAML</span><span class="o">.</span><span class="n">load_file</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="bp">__FILE__</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;/weibo-config.yml&#39;</span><span class="p">))</span>
</span><span class='line'>    <span class="vi">@pushups</span> <span class="o">=</span> <span class="no">YAML</span><span class="o">.</span><span class="n">load_file</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="bp">__FILE__</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;/pushups.yml&#39;</span><span class="p">))</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">post_weibo</span><span class="p">(</span><span class="n">number</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@number</span> <span class="o">=</span> <span class="n">number</span>
</span><span class='line'>    <span class="n">conn</span> <span class="o">=</span> <span class="no">Faraday</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:url</span> <span class="o">=&gt;</span> <span class="s2">&quot;https://api.weibo.com&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">post</span> <span class="s1">&#39;/2/statuses/update.json&#39;</span><span class="p">,</span>
</span><span class='line'>                       <span class="ss">:access_token</span> <span class="o">=&gt;</span> <span class="vi">@weibo_config</span><span class="o">[</span><span class="s1">&#39;access_token&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>                       <span class="ss">:status</span> <span class="o">=&gt;</span> <span class="n">generate_post</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">responseJSON</span> <span class="o">=</span> <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span> <span class="n">result</span><span class="o">.</span><span class="n">body</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">responseJSON</span><span class="o">[</span><span class="s1">&#39;error_code&#39;</span><span class="o">]</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s1">&#39;post error:&#39;</span> <span class="o">+</span> <span class="n">responseJSON</span><span class="o">[</span><span class="s1">&#39;error&#39;</span><span class="o">]</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;post to weibo successfully&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">generate_post</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">total</span> <span class="o">=</span> <span class="n">get_history</span>
</span><span class='line'>    <span class="n">total</span> <span class="o">=</span> <span class="n">total</span> <span class="o">+</span> <span class="vi">@number</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'>    <span class="n">number_rest</span> <span class="o">=</span> <span class="mi">4000</span> <span class="o">-</span> <span class="n">total</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">save_to_history</span> <span class="n">total</span>
</span><span class='line'>    <span class="n">post_template</span> <span class="o">=</span> <span class="vi">@weibo_config</span><span class="o">[</span><span class="s1">&#39;post_template&#39;</span><span class="o">].</span><span class="n">force_encoding</span><span class="p">(</span><span class="s2">&quot;utf-8&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">post_template</span> <span class="o">%</span> <span class="p">{</span><span class="ss">:number_done</span> <span class="o">=&gt;</span> <span class="vi">@number</span><span class="p">,</span> <span class="ss">:total</span> <span class="o">=&gt;</span> <span class="n">total</span><span class="p">,</span><span class="ss">:number_rest</span> <span class="o">=&gt;</span> <span class="n">number_rest</span><span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">get_history</span>
</span><span class='line'>    <span class="vi">@pushups</span><span class="o">[</span><span class="s1">&#39;total&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">save_to_history</span><span class="p">(</span><span class="n">total</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@pushups</span><span class="o">[</span><span class="s1">&#39;total&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="n">total</span>
</span><span class='line'>    <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s1">&#39;pushups.yml&#39;</span><span class="p">,</span><span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">h</span><span class="o">|</span>
</span><span class='line'>    <span class="n">h</span><span class="o">.</span><span class="n">write</span> <span class="vi">@pushups</span><span class="o">.</span><span class="n">to_yaml</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">poster</span> <span class="o">=</span> <span class="no">WeiboPoster</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">poster</span><span class="o">.</span><span class="n">post_weibo</span> <span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>整个逻辑就是先从一个配置文件中读出当前完成的俯卧撑个数，再配合通过命令行参数传入的当前组做的个数，结合微博模板生成微博内容，再调用API发送HTTP请求。</p>

<p>accecs token和微博模板存放在weibo-config.yml文件中。</p>

<figure class='code'><figcaption><span>weibo-config.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="c1"># Sina Weibo Post</span>
</span><span class='line'><span class="l-Scalar-Plain">access_token</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">YOUR_ACCESS_TOKEN</span>
</span><span class='line'><span class="l-Scalar-Plain">post_template</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">刚才做了%{number_done}个俯卧撑，2月份总共完成了%{total}个俯卧撑，距离4000个俯卧撑目标还差%{number_rest}个</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后我在Rakefile中配置了一个任务，用于调用WeiboPoster类。</p>

<figure class='code'><figcaption><span>Rakefile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s2">&quot;rubygems&quot;</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;bundler/setup&quot;</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;stringex&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">desc</span> <span class="s2">&quot;post pushups to weibo&quot;</span>
</span><span class='line'><span class="n">task</span> <span class="ss">:pushups</span><span class="p">,</span> <span class="ss">:number</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="p">,</span> <span class="n">args</span><span class="o">|</span>
</span><span class='line'>    <span class="n">args</span><span class="o">.</span><span class="n">with_defaults</span><span class="p">(</span><span class="ss">:number</span> <span class="o">=&gt;</span> <span class="mi">50</span><span class="p">)</span>
</span><span class='line'>    <span class="n">number</span> <span class="o">=</span> <span class="n">args</span><span class="o">.</span><span class="n">number</span>
</span><span class='line'>    <span class="nb">system</span> <span class="s2">&quot;ruby post_weibo.rb &quot;</span> <span class="o">+</span> <span class="n">number</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后再用一个shell脚本封装一下，支持shell调用。</p>

<figure class='code'><figcaption><span>pushups</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'>rake pushups<span class="o">[</span><span class="nv">$1</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>OK这样就齐活了。做完一组俯卧撑之后，只需在命令行输入<code>pushups 35</code>,然后就可以看到我的微博多了一篇推文。</p>

<p>最终效果如下。</p>

<p><img src="http://www.huangbowen.net/images/weibo_pushups.png" width="600"></p>

<p>我的微博地址：<a href="http://www.weibo.com/hbw0925">@无敌北瓜</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[理解Maven中的SNAPSHOT版本和正式版本]]></title>
    <link href="http://www.huangbowen.net/blog/2016/01/29/understand-official-version-and-snapshot-version-in-maven/"/>
    <updated>2016-01-29T16:56:44+08:00</updated>
    <id>http://www.huangbowen.net/blog/2016/01/29/understand-official-version-and-snapshot-version-in-maven</id>
    <content type="html"><![CDATA[<p>Maven中建立的依赖管理方式基本已成为Java语言依赖管理的事实标准，Maven的替代者Gradle也基本沿用了Maven的依赖管理机制。在Maven依赖管理中，唯一标识一个依赖项是由该依赖项的三个属性构成的，分别是groupId、artifactId以及version。这三个属性可以唯一确定一个组件（Jar包或者War包）。</p>

<!-- more -->


<p>其实在Nexus仓库中，一个仓库一般分为public(Release)仓和SNAPSHOT仓，前者存放正式版本，后者存放快照版本。如果在项目配置文件中（无论是build.gradle还是pom.xml）指定的版本号带有’-SNAPSHOT’后缀，比如版本号为&#8217;Junit-4.10-SNAPSHOT’，那么打出的包就是一个快照版本。</p>

<p>快照版本和正式版本的主要区别在于，本地获取这些依赖的机制有所不同。假设你依赖一个库的正式版本，构建的时候构建工具会先在本次仓库中查找是否已经有了这个依赖库，如果没有的话才会去远程仓库中去拉取。所以假设你发布了Junit-4.10.jar到了远程仓库，有一个项目依赖了这个库，它第一次构建的时候会把该库从远程仓库中下载到本地仓库缓存，以后再次构建都不会去访问远程仓库了。所以如果你修改了代码，向远程仓库中发布了新的软件包，但仍然叫Junit-4.10.jar，那么依赖这个库的项目就无法得到最新更新。你只有在重新发布的时候升级版本，比如叫做Junit-4.11.jar，然后通知依赖该库的项目组也修改依赖版本为Junit-4.11,这样才能使用到你最新添加的功能。</p>

<p>这种方式在团队内部开发的时候会变的特别蛋痛。假设有两个小组负责维护两个组件，example-service和example-ui,其中example-ui项目依赖于example-service。而这两个项目每天都会构建多次，如果每次构建你都要升级example-service的版本，那么你会疯掉。这个时候SNAPSHOT版本就派上用场了。每天日常构建时你可以构建example-service的快照版本，比如example-service-1.0-SNAPSHOT.jar，而example-ui依赖该快照版本。每次example-ui构建时，会优先去远程仓库中查看是否有最新的example-service-1.0-SNAPSHOT.jar，如果有则下载下来使用。即使本地仓库中已经有了example-service-1.0-SNAPSHOT.jar，它也会尝试去远程仓库中查看同名的jar是否是最新的。有的人可能会问，这样不就不能充分利用本地仓库的缓存机制了吗？别着急，Maven比我们想象中的要聪明。在配置Maven的Repository的时候中有个配置项，可以配置对于SNAPSHOT版本向远程仓库中查找的频率。频率共有四种，分别是always、daily、interval、never。当本地仓库中存在需要的依赖项目时，always是每次都去远程仓库查看是否有更新，daily是只在第一次的时候查看是否有更新，当天的其它时候则不会查看；interval允许设置一个分钟为单位的间隔时间，在这个间隔时间内只会去远程仓库中查找一次，never是不会去远程仓库中查找（这种就和正式版本的行为一样了）。</p>

<p>Maven版本的配置方式为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;repository&gt;</span>
</span><span class='line'>    <span class="nt">&lt;id&gt;</span>myRepository<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>    <span class="nt">&lt;url&gt;</span>...<span class="nt">&lt;/url&gt;</span>
</span><span class='line'>    <span class="nt">&lt;snapshots&gt;</span>
</span><span class='line'>        <span class="nt">&lt;enabled&gt;</span>true<span class="nt">&lt;/enabled&gt;</span>
</span><span class='line'>        <span class="nt">&lt;updatePolicy&gt;</span>XXX<span class="nt">&lt;/updatePolicy&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/snapshots&gt;</span>
</span><span class='line'><span class="nt">&lt;/repository&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中updatePolicy就是那4种类型之一。如果配置间隔时间更新，可以写作<code>interval:XX</code>(XX是间隔分钟数)。daily配置是默认值。</p>

<p>而在Gradle，可以设置本地缓存的更新策略。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>configurations.all {
</span><span class='line'>
</span><span class='line'>// check for updates every build
</span><span class='line'>resolutionStrategy.cacheChangingModulesFor  0,&#39;seconds&#39;
</span><span class='line'>
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>当然也可以按照分钟或者小时来设置.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>configurations.all {
</span><span class='line'>
</span><span class='line'>resolutionStrategy.cacheChangingModulesFor  10, ‘minutes&#39;
</span><span class='line'>
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>configurations.all {
</span><span class='line'>
</span><span class='line'>resolutionStrategy.cacheChangingModulesFor  4, ‘hours&#39;
</span><span class='line'>
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>所以一般在开发模式下，我们可以频繁的发布SNAPSHOT版本，以便让其它项目能实时的使用到最新的功能做联调；当版本趋于稳定时，再发布一个正式版本，供正式使用。当然在做正式发布时，也要确保当前项目的依赖项中不包含对任何SNAPSHOT版本的依赖，保证正式版本的稳定性。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一个程序员的2015年总结]]></title>
    <link href="http://www.huangbowen.net/blog/2016/01/07/summary-of-2015/"/>
    <updated>2016-01-07T01:08:58+08:00</updated>
    <id>http://www.huangbowen.net/blog/2016/01/07/summary-of-2015</id>
    <content type="html"><![CDATA[<p>又到了年末写总结的时候。每年写总结时的心情都不一样，有的时候收获满满，有的时候诚惶诚恐，有的时候有些许遗憾&hellip;.今年写年终总结，心情则特别复杂，这一年经历的事情不可谓不多，自己的成长也不可谓不大，但自己却时不时被一种焦虑的情绪烦扰。奈何你做再多的事情，它也会时不时的冒出来。难道这是传说中的三十而立前的磨练？我不得而知。</p>

<!-- more -->


<p>言归正传，还是从几个方面来总结一下吧。</p>

<h2>工作</h2>

<p>今年的工作大体分两部分，前半年呆在办公室的项目上。3月份的时候换到了一个新的小组，采用一些最新的技术栈开发一个小项目。我在里面也学到了很多东西，了解并尝试了Spring 4.0，使用了Spring Boot，使用Grunt实现对前端项目的完整构建，前端项目的包管理，用Protractor+PhantomJS实现端到端自动化测试，并且在这种纯JS框架中使用了Page Object模式。</p>

<p>后半年就跑到了咨询项目上，开始了疯狂的出差，前后呆了好多个城市。这是我又一次跳出了自己的舒适区，个人成长是巨大的，咨询团队的每个人都是非常优秀的，都有自己的闪光点，我趁和他们pair时偷师不少。当然压力也是非常大的，为了准备材料，为了做出成果，通宵过好几次，第二天一早又强打精神上班。最惨的时候被客户指着鼻子骂。这种成长是蜕变式的，只要自己不退缩，万事可解决。在与客户工作中种种机缘下我也结识了很多志趣相同的朋友，只要你用心做事，总会被人认可。</p>

<h2>社区活动</h2>

<p>2015年前半年负责DevOps社区的工作，并组织举办了几次公开的DevOps活动。每次举办活动前都有一帮小伙伴们利用业余时间准备材料，中午利用午饭时间catch up，过计划，预演练。后半年虽不在办公室，但DevOps小组依然正常运作，还在成都首次举办了CDConf。很感谢大家的付出啊。</p>

<p>自己在组织活动之余，也作为Speaker参加了Open Party、TID、CDConf等会议，贡献了一些Session。这些都是对自己平时工作中内容的思考与升华，并且也锻炼了自己的演讲能力。</p>

<p>还有自己在极客学院上开设了一门关于AWS的课程，并录制了几集在线课程。</p>

<h2>博客</h2>

<p>2015年只写了20多篇博客。实话说产量不高，并没有达成一周一篇的要求。主要是工作太忙，事情太多，虽然有很多可以写的，但就是没时间静下心来仔细梳理。自己的一些博客想法也一直没有付诸实施。这里要自我检讨一下。</p>

<h2>健身/跑步</h2>

<p>2014年迷上了健身与跑步。这一习惯也延续到了2015年。2015年跑了一次重庆马拉松，不幸跑崩，花了5个多小时才完成；龙山60公里越野赛也在55公里处被惨遭关门；打击最大的是大连100越野赛在72公里处由于伤痛无奈退赛。之后去医院检查得知右膝前十字韧带在2014年12月份一次日常踢球时早已断裂。确诊后我消沉了一阵子，健身房也不去了，跑步也没法跑了，胡吃海喝。直到7月份我做了手术，重新接上了一根韧带，开始了康复之旅。为了早日回到越野跑道和绿茵场，我采用了激进的康复方式，8天脱拐，10天出差，20天后正式上班，2个月开始跑步训练，当月就跑了最长15公里，4个月时挑战半马成功，5个多月时完成背靠背半马。我这恢复速度成为了叉友群中的传奇。虽然状态比负伤前差远了，但好歹是在缓慢恢复。随着膝盖的恢复，我也逐渐开始了力量训练，并控制体重，争取把涨的肉再减回去。</p>

<h2>翻译</h2>

<p>去年轻轻松松翻译了2本书。今年一本书一整年才翻译了不到一半。主要是这本书我不是很喜欢，感觉废话太多，所以翻译的断断续续，跟这本的编辑都换了好几个了。这本书都成了我的心病，必须想办法尽快解决掉。</p>

<p>另外自己成为了InfoQ的绿色译者，平时翻译一些小文章也可以拿到稿酬了。</p>

<p>还有机缘巧合下，我作为Ansible文档的核心译者，翻译了Ansible的官方文档，放置在<a href="http://www.ansible.com.cn/">http://www.ansible.com.cn/</a>。</p>

<h2>读书</h2>

<p>今年读的技术书不多，只有几本。小说之类的倒读的不少，比如《三体》三部曲等科幻小说、东野圭吾的几本悬疑小说等。读这些书大都是利用等飞机和坐飞机时候用kindle看的。我发现现在可以利用的读书时间非常至少，可能主要还是自己的心静不下来。</p>

<h2>家庭</h2>

<p>2014年出差了5个月，2015年有过之而无不及。以前出差觉得没什么，可以开阔自己的视野，快速成长。现在出差则时不时感到痛苦。儿子在逐渐长大，长期不在他身边，每次见到他都会发现他学会了一些新本领，也感觉自己错过了什么。为了弥补母子俩，我每到一个城市出差，都会争取把她们接过来利用周末时间玩几天。感谢老婆对我工作的大力支持。</p>

<hr />

<p>2016年是我的而立之年，出差也少不了。这一年我希望能做更多没做过的事情，更多想做的事情。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[膝盖中了一箭之康复篇-第六个月]]></title>
    <link href="http://www.huangbowen.net/blog/2016/01/04/acl-recovery-for-6th-month/"/>
    <updated>2016-01-04T00:27:03+08:00</updated>
    <id>http://www.huangbowen.net/blog/2016/01/04/acl-recovery-for-6th-month</id>
    <content type="html"><![CDATA[<p>时间过的很快，已经术后半年了。</p>

<!-- more -->


<p>12月份照样出差，不过地点比较固定，就呆在深圳。之前9月份的时候曾经在深圳这边的健身房练过一段时间，所以这次酒店还选择的是上次那家，就为了能在健身房好好恢复一下腿部肌肉。但是不巧的是我去过的那家健身房关门了，不得已找了一家远一点的。</p>

<p>就这样开始了力量训练，一周能去个3到4次。已经有好几个月没做力量训练了，再加上有氧运动做多了，肌肉退化的厉害。卧推以前一边15公斤杠铃能轻松推个3组。现在发现只能推一组就累的不要不要的。其它部分的肌肉也变弱了，尤其是腹肌，坐30个仰卧起坐都要慢慢来。哎，从头练起吧。扔了好久的腹肌撕裂者又开始练了。好在经过这一个月的腹肌特训，腹肌耐力有了明显的提高。</p>

<p>这段时间减肥到了瓶颈期，体重保持在71公斤左右，怎么也下不了70公斤。每天晚上除了和同事有饭局外，其它时间自己都不吃晚饭，就吃点水果，运动完吃10个考生蚝，但是体重就是纹丝不动。这是一场攻坚战。去年为了体重下70公斤，那个月我练的非常苦的。现在吃不了那么多苦，但可以把时间拉长，反正我不着急，离夏天还远着那。</p>

<p>跑步训练也在继续。这个月跑了三场线上半程马拉松，其中两场是背靠背，状态不错。但唯一报名的一场线下马拉松-新川杯慈善马拉松在开跑前一周竟然宣布取消了，太坑爹了。我的报名费都交了，你们也太不靠谱了。12月份共跑步14次，总跑量177公里。其中有一次是越野跑训练，五上五下黄金山，海拔爬升200米。对！黄金山就是个海拔落差40米的小土包子。</p>

<p>本来计划是术后半年挑战一次全马的，照现在恢复的情况来看全马肯定是没有问题的。只不过还没找到一个合适的比赛去达成。全马不像半马。半马我可以不带任何补给就能完成。全马还是需要带补给的，而且4个多小时好无聊，没人陪很难熬得下来。</p>

<p>我在11月的时候拍了核磁共振的片子，但一直没时间拿给主治医生看。我得抽个时间去和主治医生见上一面，就等他批准我可以进行对抗运动了。已经1年没有打球、踢球了，我都忘记了那种感觉了。是时候把这种感觉找回来了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[博客即代码]]></title>
    <link href="http://www.huangbowen.net/blog/2015/12/08/bloging-as-code/"/>
    <updated>2015-12-08T01:59:35+08:00</updated>
    <id>http://www.huangbowen.net/blog/2015/12/08/bloging-as-code</id>
    <content type="html"><![CDATA[<p>之前我写过一篇博客，<a href="http://www.huangbowen.net/blog/2013/04/01/min-jie-de-xie-bo-ke/">敏捷的写博客</a>，借鉴了敏捷看板的思想来管理博客。</p>

<!-- more -->


<p>而在DevOps领域有一个很火的技术实践叫做基础设施即代码。Kief对基础设施即代码的解释是这样子的：</p>

<blockquote><p>基础设施即代码是一种使用新的技术来构建和管理动态基础设施的方式。它把基础设施、工具和服务以及对基础设施的管理本身作为一个软件系统，采纳<strong>软件工程实践</strong>以结构化的安全的方式来管理对系统的变更。</p></blockquote>

<p>里面的关键一点是以<strong>软件工程实践</strong>的方式来管理基础设施。那么对于我们的博客可不可以也采纳软件工程实践的方式来管理那？答案是可行的。</p>

<ol>
<li><p>选取合适的<strong>语法</strong></p>

<p> 既然想写代码一样写博客，那么首先要选择一种语法了，这种语法就是<a href="(https://en.wikipedia.org/wiki/Markdown)">Markdown</a>。<a href="(https://en.wikipedia.org/wiki/Markdown)">Markdown</a>非常容易上手，包含的tag刚刚够用，尤其展示代码非常方便，自从用了它再也不用和烦人的CSS打交道了。人们不仅用<a href="(https://en.wikipedia.org/wiki/Markdown)">Markdown</a>在stackoverflow上发问题、解答问题，还在GITHUB上track issue，甚至现在写邮件也用<a href="(https://en.wikipedia.org/wiki/Markdown)">Markdown</a>了。拿它来写技术文章简直不用太爽。</p></li>
<li><p>选取合适的<strong>框架</strong></p>

<p> 实现基础设施代码需要选择一款基础设施自动化工具，这些工具的特点是全命令行操作，很容易实现自动化。那么建立自己的技术博客站点也需要选择一个博客框架，支持全命令行操作的博客框架有<a href="https://jekyllrb.com/">Jekyll</a>、<a href="http://octopress.org/">Octopress</a>、<a href="https://hexo.io/">Hexo</a>等。它们各自的特点不在本文的讨论范围。但我多说一句，我现在使用的是Octopress，我也用过Hexo，我更喜欢Hexo，原因有二，一是速度快，二是环境简单。</p></li>
<li><p>选取顺手的<strong>编辑器</strong></p>

<p> 这些博客框架的特点是可以Offline写作，然后一键发布。所以你可以选用任何你喜欢的编辑器来写文章，不用使用在线编辑器和各种样式问题、网络问题抗争了。Atom、Sublime或者专业编辑工具MacDown、Mou等都行。</p></li>
<li><p><strong>一切纳入版本管理</strong></p>

<p> 这些博客框架创建博客、生成博客、发布博客全部可以命令行操作。而且所有的配置（包括对站点的基本配置、插件的配置、主题的配置）都可以直接修改配置文本，博客也是以MarkDown的格式存储，所以整个站点都可以存放在GIT之类的版本控制库中。比如我的整站博客源码都放置在<a href="https://github.com/huangbowen521/huangbowen521.github.com/commits?author=huangbowen521">GitHub</a>上，从此再也不用更担心博客内容丢失了。</p></li>
<li><p><strong>灵活的发布策略</strong></p>

<p> 它们通过命令可以生成纯静态的博客，所以无需任何web服务器都可以运行。你可以将其放置到<a href="https://pages.github.com/">GitHub Pages</a>上，或者<a href="https://www.heroku.com/">Heroku</a>上都行，或者自己随便找台免费的云主机装个nignx即可。当然也有更高大上的做法，我把整个博客放置在AWS的S3上。S3是亚马逊推出的对象存储服务，并且我还是用了亚马逊提供的全球CDN加速功能CloudFront，对我的博客进行了全球CDN加速。无论是澳洲海边还是中国内陆，访问速度都是杠杠的。</p></li>
<li><p><strong>定制开发的能力</strong></p>

<p> 漂亮的主题风格也是选取一个博客框架需要考虑的一个因素。想要更换皮肤就太简单了，也是全命令行操作。拿Octopress举例，网上有很多热心用户制作的皮肤，都托管在github上，相中以后直接通过命令行操作就可以给你的博客换上最In的皮肤。</p>

<p> 另外还有对博客的定制化也是我们关心的。每款博客框架都有丰富的插件，这些插件的代码都放置在GitHub上，完全开源，安装配置插件也非常简单，命令行全部搞定。我自己也写了一些定制化的插件，比如当我发布一个新博客的时候，只需<code>rake deploy</code>一条命令就可以把我的博客推送到我的weibo和linkedin上，也可以把整个博客内容同步到我在博客园的<a href="http://www.cnblogs.com/huang0925/">博客站点</a>上。这些插件也开源在GitHub上，分别是<a href="https://github.com/huangbowen521/octopress-linkedin">octopress-linkedin</a>和<a href="https://github.com/huangbowen521/octopress-syncPost">octopress-syncPost</a>。</p></li>
</ol>


<hr />

<p>这样子，写博客变成了一种享受。进入咨询团队以后，坚持写博客也带来了其它一些好处。比如和客户讨论一个问题时，直接把我文章链接发给他说，说这个东西我之前专门写过博客，你看了就懂了。这样瞬间在客户面前树立了专业的形象。更有甚者，客户当着我的面搜索某个技术名词，第一页第一条赫然就是我写的博客。所以可以少费些口舌，把精力用到其它地方去。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[膝盖中了一箭之康复篇-第五个月]]></title>
    <link href="http://www.huangbowen.net/blog/2015/12/01/recovery-after-acl-5th-month/"/>
    <updated>2015-12-01T17:23:25+08:00</updated>
    <id>http://www.huangbowen.net/blog/2015/12/01/recovery-after-acl-5th-month</id>
    <content type="html"><![CDATA[<p>7月1日的右膝前叉韧带重建手术，到现在已经术后满5个月了。</p>

<!-- more -->


<p>11月份跌跌撞撞就这样过去了。11月10日去主治医生那里做了复查。高医生查体以后说我恢复的相当不错，并让我再做一次MRI看看结果如何。高医生同时严重警告我在未满6个月前严谨任何剧烈运动，他说一般像我这样恢复比较好的早都蠢蠢欲动想去打球、踢球，而韧带在4-6个月的时候是非常危险的。</p>

<p>在四川省骨科医院做MRI每次都要排很长时间，我下午就又要去出差，就预约了21日做MRI。21日凌晨才从上海回来，早上6点多就爬起来去医院做MRI。拿到结果看了一下感觉结论还是比较乐观的，不过要让高医生看过片子才知道具体怎么样。TMD又要预约，每次高医生只有周二才坐诊，预约基本上要提前一周。</p>

<p>整个11月份腿部感觉良好，但是还有好几个问题。一是伤腿肌肉力量与好腿仍然不均衡，导致运动发力时不平均，运动时间长了以后两个腿的感觉是不一样的；二是伤腿仍然无法完全过伸，和好腿保持一样的完全角度；三是山地跑步训练时仍然无法完全放开，伤腿总是小心翼翼，而且还有不适感（所以至今未开展任何越野跑训练）。</p>

<p>整个11月份大部分时间在上海，在成都和武汉也呆了几天。由于到处漂泊，所以也没找一个健身房锻炼。只能偶尔到附近学校拉拉单双杠了。正手引体现在一组可以做6个了。</p>

<p>11月8日参加了上海线上马拉松活动，在锦城湖公园跑了一个半马。平均配速为6分，跑完除了肌肉有些酸痛外，膝盖没有明显不适。自3月多的重庆马拉松后又收获了马拉松完赛奖牌一只。</p>

<p>以下是11月份的训练情况。</p>

<p>11月1日跑步10公里；
11月3日跑步10公里；
11月5日跑步10公里；
11月8日跑步22公里；
11月10日跑步10公里；
11月11日跑步10公里；
11月13日跑步10公里；
11月14日跑步10公里；
11月15日跑步10公里；
11月16日跑步10公里；
11月21日跑步3公里；
11月22日跑步10公里；
11月25日跑步10公里；
11月26日跑步12公里；
11月27日跑步12公里；
11月29日跑步12公里；
11月30日跑步12公里。</p>

<p>整个11月份总共跑了180多公里。但是这180多公里基本上都是堆量，每次都是以比较舒服的节奏在跑，很少push自己。如果仅以完赛100公里越野跑为目标，我认为速度现在不是重点，重点是把耐力以及坡度训练提上日程。另外越野跑需要的肌肉群较多，所以还是要注重其它肌肉群的锻炼，尤其是腹肌。好在我整个12月份很有可能就呆在深圳，所以可以就近找一个健身房开展力量训练。有了力量训练以后可能跑步时间就要相应的减少。</p>

<p>12月份也报名了两场马拉松活动。一个是12月6日的广州线上马拉松，一个是12月19日的成都慈善马拉松。距离都是半程，也就是21公里。现在对于跑全程还是底气不足。</p>

<p>再过一个月术后就要满半年了。希望能让伤腿早日彻底康复，最好能赶得上明年4月份的大连100。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[学习Scala第一篇-从hello World开始]]></title>
    <link href="http://www.huangbowen.net/blog/2015/11/15/hello-world-in-scala/"/>
    <updated>2015-11-15T01:41:24+08:00</updated>
    <id>http://www.huangbowen.net/blog/2015/11/15/hello-world-in-scala</id>
    <content type="html"><![CDATA[<p>最近开始系统性的学习scala。其实之前使用过scala的，比如我在用Gatling这款性能测试工具的时候就接触到了scala了。Gatling本身就是用Scala写的，而且Gatling的性能测试配置文件本身就是一个scala类，可以随意使用scala甚至是Java提供的各种类库。当时觉得用Gatling特别舒服的原因就在于配置文件强大的表现力。而这种表现力就是由Scala语言提供的。</p>

<!-- more -->


<p>言归正传，学习Scala还是从最简单的Hello world开始。在Scala官网中显著的标题就是：</p>

<blockquote><blockquote><p>Object-Oriented Meets Functional</p>

<p>Have the best of both worlds. Construct elegant class hierarchies for maximum code reuse and extensibility, implement their behavior using higher-order functions. Or anything in-between.</p></blockquote></blockquote>

<p>从中可以看出Scala结合了面向对象及函数式编程这两种编程范式。在本文中我将会拿Java语言和其比较，看看到底Scala强在那里。</p>

<p>使用Java语言实现一个Hello World的代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloWorld</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Hello World!&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>以下是Scala的实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">object</span> <span class="nc">HelloWorld</span>  <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">main</span><span class="o">(</span><span class="n">args</span><span class="k">:</span> <span class="kt">Array</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">println</span><span class="o">(</span><span class="s">&quot;Hello, World!&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>好吧，如果标点符号不算代码行，Java版本和Scala版本的实现的代码行数是一致的。貌似Scala并没有减少什么。唯一减少的就在于println不用指定类名，以及对main方法不用声明为static。</p>

<p>在这里对Scala实现与Java实现的几个不同之处做个介绍。</p>

<ul>
<li><p>第一是Scala对HelloWorld的修饰符使用的是object。其实Scala中也有class关键字，那么object关键字和class关键字有什么区别那？简单来说object关键字定义了一个匿名类，并且创建了该匿名类的单个实例（采用单例模式），该实例名为HelloWorld。所以object中定义的方法自动都是static的。我觉得object关键字存在的价值之一就是建立起了面向对象和函数式的桥梁。因为在面向对象的系统中，所有方法都必须存在于类中，而函数式编程中没有类的概念，使用函数无需new类的实例，所以object中的方法都是静态方法，可以直接被调用。进一步解读请到<a href="http://stackoverflow.com/questions/1755345/difference-between-object-and-class-in-scala">这里</a>。</p></li>
<li><p>第二是Scala中对变量的类型的定义方式是变量名在前，类型在后，中间用冒号相隔。原因之一是代码更可读。因为我们更关心变量名，而类型其次，尤其是你拥有一个超级长的类型的情况下（比如
HashMap&lt;Shape, Pair&lt;String, String>>)；原因之二据说是这样的方式在实现Scala类型时技术上要简单些。进一步解读请到<a href="http://stackoverflow.com/questions/6085576/why-does-scala-choose-to-have-the-types-after-the-variable-names">这里</a>。</p></li>
<li><p>第三是main函数的返回值是Unit，而不是Java中的Void。为什么是这样那？我想是因为Scala为了实现自己的类型系统，对于无显式返回值的函数直接使用Void是不合适的。在<a href="http://www.scala-lang.org/api/current/index.html#scala.Unit">Scala.Unit文档</a>中是这样定义Unit的：</p></li>
</ul>


<blockquote><blockquote><p>Unit is a subtype of scala.AnyVal. There is only one value of type Unit, (), and it is not represented by any object in the underlying runtime system. A method with return type Unit is analogous to a Java method which is declared void.</p></blockquote></blockquote>

<ul>
<li>第四是Scala中表达式最后的分号是可选的。原因就是为了契合函数式编程的哲学，即一切尽可能的简单。不写分号程序员一天可以多敲一些代码出来。</li>
</ul>


<p>好吧，其实在Scala中Hello World还有一种写法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">object</span> <span class="nc">HelloWordV2</span> <span class="k">extends</span> <span class="nc">App</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">println</span><span class="o">(</span><span class="s">&quot;Hello, World!&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>代码从三行减少到了两行，Scala终于胜出了。那么App是个什么鬼？<a href="https://github.com/scala/scala/blob/v2.11.7/src/library/scala/App.scala#L1">App</a>是一个trait。trait又是什么鬼？<a href="http://docs.scala-lang.org/tutorials/tour/traits.html">trait</a>是Scala中的一个特殊类型，它与Java中的interface很相似，但比interface强大。HelloWordV2添加了对App的扩展后，就自动成为了一个可以运行的程序，由于App中定义了main方法，所以HelloWorldV2中就无需再定义了，牛逼的地方在于HelloWorldV2的body中的代码都会作为main方法中的代码被执行。以下是App源码中对main方法的定义：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="nd">@deprecatedOverriding</span><span class="o">(</span><span class="s">&quot;main should not be overridden&quot;</span><span class="o">,</span> <span class="s">&quot;2.11.0&quot;</span><span class="o">)</span>
</span><span class='line'><span class="k">def</span> <span class="n">main</span><span class="o">(</span><span class="n">args</span><span class="k">:</span> <span class="kt">Array</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'><span class="k">this</span><span class="o">.</span><span class="nc">_args</span> <span class="k">=</span> <span class="n">args</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="o">(</span><span class="n">proc</span> <span class="k">&lt;-</span> <span class="n">initCode</span><span class="o">)</span> <span class="n">proc</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">util</span><span class="o">.</span><span class="nc">Properties</span><span class="o">.</span><span class="n">propIsSet</span><span class="o">(</span><span class="s">&quot;scala.time&quot;</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">total</span> <span class="k">=</span> <span class="n">currentTime</span> <span class="o">-</span> <span class="n">executionStart</span>
</span><span class='line'>
</span><span class='line'><span class="nc">Console</span><span class="o">.</span><span class="n">println</span><span class="o">(</span><span class="s">&quot;[total &quot;</span> <span class="o">+</span> <span class="n">total</span> <span class="o">+</span> <span class="s">&quot;ms]&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>看来App在实现main方法时还设置了一个计时器，通过scala.time这个属性来开关。所以没事翻翻源码还是挺好玩的。</p>

<p>不知有没注意到其实main方法是有个叫args的参数的，那么新版HelloWorld中如何使用该参数那？直接使用它就行。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">object</span> <span class="nc">HelloWordV2</span> <span class="k">extends</span> <span class="nc">App</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">println</span><span class="o">(</span><span class="s">&quot;Hello, World!&quot;</span> <span class="o">+</span> <span class="n">args</span><span class="o">(</span><span class="mi">0</span><span class="o">))</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ok，Scala版的Hello World就到这里吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在ThoughtWorks工作这几年我学到了什么？]]></title>
    <link href="http://www.huangbowen.net/blog/2015/11/11/what-i-learn-in-thoughtworks/"/>
    <updated>2015-11-11T00:24:39+08:00</updated>
    <id>http://www.huangbowen.net/blog/2015/11/11/what-i-learn-in-thoughtworks</id>
    <content type="html"><![CDATA[<p>不知不觉，从2012年5月1日加入ThoughtWorks到现在，已经3年有余了。时间过得很快，这三年多我干了很多事情，但仔细想想也没有什么特别值得一提的。在一个公司呆久了总觉得很多事情是理所当然的，直到今年进入了咨询团队，走马观花般见识了很多其他公司的团队和项目，才发现在ThoughtWorks的准则和其它公司的玩法是完全不同的。</p>

<!-- more -->


<p>仔细想想，在ThoughtWorks给我带来了那些东西那？</p>

<ol>
<li><p>英语的提升。遥想加入ThoughtWorks之前，在前公司打算跳槽的时候，专门花了很长时间来学习英语，因为那时候我知道搞IT这行英文好就可以如虎添翼。但由于英文丢的太久了，词汇量不到500，发音更是全忘光了。到了ThoughtWorks后又要练英语，又要学技术，压力山大。不过挺过去以后就好了。这几年来不知不觉翻译了3本书（第4本进行中），和无数篇文章；也在海外工作过半年；平时看的各种英文资料更是不计其数。当你把英文真正作为获取知识的工具时，你会发现英文一点也不讨厌，它能让你瞬间拉开与他人的差距。</p></li>
<li><p>敢于走出舒适区。我喜欢一句话，稳定不是在一个公司一呆就是10年，而是今天辞职明天就能找到工作。这句话的霸气在于你要时刻保持一种警惕，不要随波逐流。过安逸的生活是人的本性，而这种生活会让你逐渐丧失竞争力。所以我们不仅敢于变化，还要主动求变，走出舒适区，进入学习区，甚至恐慌区，锤炼自己，把自己的知识区扩大。</p></li>
<li><p>坚持，水滴石穿。严格来说这点不算是ThoughtWorks带给我的，不过我在ThoughtWorks里得到了良好的贯彻。我最早开博是在2008年，后来断断续续一直在写，但后来由于各种原因中断了很久。2012年重新开博以后，基本上每月都有几篇，现在累计了100多篇。不说大话，定目标，然后一步一步向目标前进，这种方式不仅可以用在工作中，也可以用在生活中。但凡有了这种坚持的精神，那么干什么事情都不怕半途而废。</p></li>
<li><p>高效的学习方式。IT这个行业基本上是知识爆炸的行业，每天都有大量的信息涌出。而个人的精力是有限的，知识是无限的。所以在学习的时候要有所取舍，既要广也要精。而据我观察大多数人都是既没有做到广，也没有做到精。很多人学习方式、学习态度都是有问题的，而在ThoughtWorks有大量优秀的人在不停的分享他们的学习方式，我也在不断的总结。正是这种专业的学习方式促使我们能高效的学习。</p></li>
<li><p>学会反思。我们拒绝做流水线上的员工，我们欢迎每个人有自己独立的思维。在思维的碰撞之中我们都在不断的前进。不能光顾着埋头犁地，我们需要时不时的停下来，休整一下，做好规划，再继续前行。</p></li>
</ol>


<p>在ThoughtWorks你很容易就能找到有想法的人，和他们聊一聊总会有所收获。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[膝盖中了一箭之康复篇第四个月]]></title>
    <link href="http://www.huangbowen.net/blog/2015/11/05/acl-recovery-for-4th-month/"/>
    <updated>2015-11-05T23:51:19+08:00</updated>
    <id>http://www.huangbowen.net/blog/2015/11/05/acl-recovery-for-4th-month</id>
    <content type="html"><![CDATA[<p>7月1日的右膝前叉韧带重建手术，到现在已经是4个月了。</p>

<!-- more -->


<p>9月底的时候情况是步态基本正常，上下楼也没问题。跑步训练一次10公里后也无异常，只是速度放的很慢。
国庆节期间去了老婆老家，那几天基本都在玩，没有进行任何恢复性的训练。由于国庆节几天的放纵，把我9月份辛苦减的脂肪全吃回来了，胖了不少。国庆后重新开始跑步训练，并且配合节食减肥。</p>

<ul>
<li>10月7日跑步10公里；</li>
<li>10月8日跑步5公里；</li>
<li>10月9日跑步14公里；</li>
<li>10月11日跑步10公里；</li>
<li>10月14日跑步5公里；</li>
<li>10月17日跑步10公里；</li>
<li>10月18日跑步10公里；</li>
<li>10月23日跑步10公里；</li>
<li>10月26日跑步10公里；</li>
<li>10月28日跑步10公里；</li>
<li>10月30日跑步5公里。</li>
</ul>


<p>整个10月份基本上都在上海出差，在酒店附近没有找到适合的健身房，但是周边有个上海市第二工业大学，所以绝大部分跑步都是在学校操场进行的，跑完以后再做做引体向上，臂屈伸。现在一次能拉6个标准的正手引体向上了，离受伤前的10个还差4个。这段时间还是专心一减脂为主，待有条件了再进行力量训练。</p>

<p>每次跑步右膝并没有太大的异常反应，跑完以后感觉还好。但是能明显感觉出来右膝盖的肌肉力量不足，对膝盖的保护不够，所以要接下来要加强右膝的肌肉锻炼，只是苦于没有条件。我更习惯使用健身房的器械进行腿部的肌肉训练，徒手无器械的方式不是很喜欢。</p>

<p>现在10公里跑的时间已经可以跑进55分钟，但是离最佳的48分钟差距还是明显。下周二预约了主治医生，对我的腿部再进行一下检查，如果检查结果良好，那么我就可以放心的继续训练了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[膝盖中了一箭之康复篇9-12周]]></title>
    <link href="http://www.huangbowen.net/blog/2015/09/30/acl-recovery-part-3/"/>
    <updated>2015-09-30T01:00:33+08:00</updated>
    <id>http://www.huangbowen.net/blog/2015/09/30/acl-recovery-part-3</id>
    <content type="html"><![CDATA[<p>2015年7月1日做的ACL手术，上一篇写到了4-8周的恢复情况，也就是8月份的恢复情况。当时情况是走路稍微有点瘸，速度和正常人无异，弯腿角度140度左右。训练情况是每周去健身房3次左右，每次椭圆机20分钟，固定自行车30分钟，另外加上一些力量训练。</p>

<!-- more -->


<p>整个8月份基本都在出差，8月底回到了成都。我预约了9月8日和主治医生的复查。8日那天早上到了医院发现门诊的人很少，所以没怎么排队。高医生给我做了一下抽屉实验，然后试了一下角度，说我恢复的很不错。我问医生可以跑步了不？高医生说可以了，我问跑多长时间，高医生说以不痛不肿为主。整个复查过程不超过5分钟，感觉有些坑爹。可能高医生认为我恢复的不错，所以没有多问。</p>

<p>刚复查完就接到出差通知，于是9号就飞到了深圳。到了深圳的当晚在酒店附近找到了一个很小的公园，开始了我术后第一次跑步训练。我围着广场跑了5公里，耗时42分钟，非常慢的配速。整个过程感觉还好，右腿膝盖没有明显不适，膝盖也没有变肿。自从4月份败走大连后，这还是第一次跑步训练，时间跨越了5个月之久。长时间的不训练+伤病使我的身体素质大大下降，跑步的感觉也全无。</p>

<p>9月中旬在新的酒店附近找到了一家健身房，可以团购按次数记的体验卷，10块钱一次。整个健身房条件一般，不过对于我来说够用了，唯一缺少的设备就是椭圆机，好在几个练腿的设备都有。我把训练调整为跑步30分钟，曲申膝器械4*20组，然后再辅助一些上肢力量训练，把力量再练回来。去年9月的时候是我身材的巅峰，体重为68公斤，体脂比13.8，引体向上可以拉10个。而一年后被打回原形，体重暴增至73公斤，引体向上一度一个都做不了。至少要花半年才能再回去年的巅峰，哎。</p>

<p><img src="http://www.huangbowen.net/images/thumb_IMG_2440_1024.jpg" width="300"></p>

<p>跑完第二天膝盖感觉还好，跟平时一样。这说明我可以逐步恢复跑步训练了，又要减脂了。之后每隔一两天就去跑一次，每次都在30分钟多点，距离是3公里多。跑完以后拉伸一下，做几个引体向上，臂屈伸。这样终于找回了点以前运动的感觉。</p>

<p>9月20日去了南京出差，21日晚上坐地铁夜游玄武湖，发现这是个跑步的好地方，所以一口气就跑了15公里，耗时将近2小时。跑的整个过程中节奏把握的比较好，速度控制的很慢，所以身体没有明显的不适。跑完以后感觉也比较好，第二天也没觉得累，看来身体底子还在。</p>

<p><img src="http://www.huangbowen.net/images/xuanwuhu_run.jpg" width="300"></p>

<p>9月22日晚上又飞回深圳。我在健身房花50团购卷买了张周卡，基本每天下班就去健身房。虽然白天在客户现场压力很大，下班后事情也是多的很，但健身也可以算是减压的一种。基本也恢复了每天练一个大块集群的节奏，而腿部锻炼则天天做。不过锻炼时的状态不是很好，每次都感觉没有尽全力。为了减脂，我也特意控制了饮食。每天早、中饭照常，晚饭隔一天吃一次，不吃的那天只吃点水果。</p>

<p>很快也就9月底了。目前我有个问题是伤腿过伸无法和好腿一致，所以这可能是走路还是稍微有点瘸的原因。我以前认为只要肌肉上来了，自然就过伸了，所以没有怎么专门练过过伸。不过我认为这不是个大问题。</p>

<p>接下来是继续持续性的腿部康复训练，另外把跑步训练、减脂及力量训练都再搞起来。我报名了今年广州马拉松的半马比赛，时间是11月份多，所以还要抓紧时间恢复，继续开始我的拿牌之旅。惭愧的是一直没找到一个室内游泳馆，不能进行游泳训练，铁三也无从谈起。</p>

<p>心里计划术后半年左右就开始参加全马比赛，以便赚取越野赛的参赛资格。现在跑越野右膝还是不行，希望半年后能开始越野跑训练，以便伺机找个轻松点的比赛赚取百公里越野的资格。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Chef管理windows集群]]></title>
    <link href="http://www.huangbowen.net/blog/2015/09/06/use-chef-to-manage-windows-cluster/"/>
    <updated>2015-09-06T12:06:23+08:00</updated>
    <id>http://www.huangbowen.net/blog/2015/09/06/use-chef-to-manage-windows-cluster</id>
    <content type="html"><![CDATA[<p>但凡服务器上了一定规模（百台以上），普通的ssh登录管理的模式就越来越举步维艰。试想Linux发布了一个高危漏洞的补丁，你要把手下成百上千台机器都更新该补丁，如果没有一种自动化方式，那么至少要耗上大半天时间。虽然你编写了大量的shell（或python，perl）脚本来实现各种自动化场景，但最后会发现你又陷入了脚本的汪洋大海之中，管理和维护这么多的脚本的成本也不小。你需要一款基础设施自动化工具，希望它能具有以下功能。</p>

<!-- more -->


<ol>
<li><p><strong>批量执行。</strong>这个不多说了吧，试想要为每一台机器打补丁的情形吧。</p></li>
<li><p><strong>任务编排。</strong>现在稍微复杂点的应用都需要N台服务器来部署，而部署的过程中肯定有个先后的依赖顺序。那么由此看来任务编排肯定必不可少。</p></li>
<li><p><strong>对业务场景的抽象，也就是DSL化。</strong>之所以抛弃自己用shell(或其它语言的)脚本来实现各种自动化的原因之一就是这些脚本很难懂，除了你以外其他人几乎无法修改。而作为一个成熟的工具，自然对咱们复杂的应用场景要做抽象，比如对服务器节点、角色的抽象，对服务器上的各种安装、配置操作的抽象，对不同环境的抽象等。通过抽象出来的DSL，大家很容易达成一致，协同工作。</p></li>
<li><p><strong>安全机制。</strong>既然是基础设施自动化工具，免不了包含各种敏感信息，如何去敏也是挺重要的。而且既然能控制整个服务器集群，控制方式也要绝对安全。</p></li>
</ol>


<p>除了这几个基本功能以外，当然我们还希望有更多功能，比如脚本重用、审计功能、完善的文档等。这里就不多说了。</p>

<p>类似的工具肯定已经有了，现在市场上比较流行的开源软件有Puppet、Chef、Ansible、SaltStack等。关于它们的优劣不是这篇文章的重点。</p>

<p>而谈起集群管理，大家似乎默认的都是对Linux系统集群的管理，对于Windows集群则很少涉及。我想这大抵有两方面的原因，一方面是大部分公司中机器集群类型大都是Linux系统，另一方面是Windows机器在批量化管理方面天然有缺陷，比如缺乏各种方便的脚本命令、很难对机器配置完全脚本化等。但对Windows集群的管理问题无法回避，因为在企业中Windows集群的确存在。微软也在致力改善这些问题，比如Window PowerShell就是为了解决校本化的问题。</p>

<p>而笔者的上一个项目就涉及对数百台Windows和Linux集群的管理。Windows集群的主要操作系统是Windows Server 2008，Linux集群的主要操作系统是Ubuntu 12.04。要实现对这样的集群的自动化配置和管理，笔者积累了一些经验，特意分享给大家。</p>

<h2>自动化工具的选型</h2>

<p>凡是牵扯到工具选型的时候，如果你发现你处于一个非常纠结的地位，那可能是因为竞品工具没有一个能突出重围，导致你在它们各自的优缺点之间难以取舍。我也理解，工具选型要考虑的因素太多。这个项目的选型其实没经过太大波折，很快就决定使用Chef。原因我可以简单说一下，Puppet的API太不友好，ansible和salt对windows的支持程度未知，而根据我以前的经验，Chef对windows的支持还是比较成熟的。所以我们就快刀斩乱麻选择了Chef。</p>

<h2>搭建Chef生态环境</h2>

<p>既然决定了Chef，那么接下来很多问题都不得不考虑。</p>

<h3>使用自建的Chef Server</h3>

<p>原因很简单，因为客户不会把自己的node暴露在公共的chef server之上。所以我们在企业内网搭建了一个Chef server，放置在一台ubuntu机器上。</p>

<h3>workstation选择windows机器(windows 7)</h3>

<p>考虑到我们要同时管理Linux集群和Windows集群，所以workstation的选择也很重要。在bootstrap一个node的时候，workstation和linux node的通讯方式是ssh，而和windows node的通讯方式是通过WinRM。如果使用Linux通过WinRM和Windows系统通讯，理论上是可行的，我们可以借助一些第三方工具实现，但过程肯定比较曲折。而如果使用Windows机器和Linux及Windows系统通讯，则没有太大问题。</p>

<h3>搭建自己的软件仓库</h3>

<p>对于Linux系统而言有很多成熟的包管理工具，想要安装什么软件基本上一条命令即可。而对于Windows系统而言，虽然有<a href="https://chocolatey.org/">chocolatey</a>之类的工具，但在分发一些企业内部的软件方面仍捉襟见肘。所以我们选择搭建自己的软件仓库。刚开始为了简便起见就搭建了一个ftp服务器作为软件仓库。后期会考虑迁移到<a href="http://www.sonatype.com/nexus/product-overview">Sonatype Nexus</a>之类能提供更多功能的包管理服务器上去。</p>

<p>创建Chef repo并纳入源代码管理之类的事情由于没有太多特殊性，所以这里就不展开了。</p>

<h2>应用Chef管理windows集群</h2>

<p>使用Chef来管理windows集群肯定没有像管理Linux集群那么容易，以下是几个需要注意的点。</p>

<h3>配置Windows node开启WinRM服务</h3>

<p>WinRM服务是微软提供的用于进行远程通讯的服务（Windows 7及以后的系统内置支持），你可以简单理解为Windows版的SSH。在Windows server 2008 R2操作系统中，WinRM服务默认是关闭的，我们需要启用它。首先需要修改两个组策略。在组策略的计算机配置->策略->Windows组件->Windows远程管理(WinRM)->WinRM服务中，选择“允许自动配置监听器”，把该策略选为启用，并修改IPv4和IPv6过滤器为*。然后在控制面板中选择windows防火墙，单击例外选项卡，选择Windows 远程管理复选框。如果看不到该复选框，请单击添加程序以添加 Windows 远程管理。
（具体请参见<a href="http://www.briantist.com/how-to/powershell-remoting-group-policy/">http://www.briantist.com/how-to/powershell-remoting-group-policy/</a>）</p>

<p>这两项的配置也可以通过PowerShell脚本来实现。想要了解的可以参见这篇文章<a href="https://powertoe.wordpress.com/2011/05/16/enable-winrm-with-group-policy-but-use-powershell-to-create-the-policy/">https://powertoe.wordpress.com/2011/05/16/enable-winrm-with-group-policy-but-use-powershell-to-create-the-policy/</a>。</p>

<p>然后就可以启用和配置WinRM了。只需要在PowerShell终端输入<code>winrm quickconfig -q</code>即可。另外Chef还推荐对WinRM进行一些进阶配置，具体请参见<a href="https://github.com/Chef/knife-windows#requirementssetup">https://github.com/Chef/knife-windows#requirementssetup</a>。</p>

<h3>使用windows cookbook</h3>

<p><a href="https://github.com/opscode-cookbooks/windows">windows</a> cookbook是Chef专为windows平台写的cookbook。里面包含了非常多的针对windows平台特性的功能，是操纵windows平台不可或缺的利器。比如解压缩文件、执行batch(PowerShell)命令、安装认证、安装卸载windows包、配置执行计划任务&hellip;&hellip;</p>

<p>使用方式也很简单，安装可以通过chef的supermarket执行，具体参见<a href="https://supermarket.chef.io/cookbooks/windows#knife">https://supermarket.chef.io/cookbooks/windows#knife</a>。如果在其它cookbook需要使用该cookbook的模块，只需在其它cookbook的metadata.rb中加入<code>depends ‘windows’</code>即可。</p>

<h3>升级Windows node上的PowerShell版本</h3>

<p>PowerShell之于Windows就相当于shell之于Linux。Windows Server 2008 R2上的PowerShell默认版本是3.0，最好能够升级到高级版本。而<a href="https://github.com/opscode-cookbooks/powershell">https://github.com/opscode-cookbooks/powershell</a>中的cookbook则可以方便的对Windows node的PowerShell进行升级和配置,以及安装各种PowerShell module，执行PowerShell脚本等。</p>

<h3>实现对软件的静默安装</h3>

<p>Linux上的每种软件基本都有通过命令行静默安装的方式。而Windows下的软件却不尽然。如果软件是以.msi方式打包的，那么可以使用Windows Installer来实现静默安装。如果是以.exe的方式来打包的，倒也不被惊慌，可以仔细分析其是否是以inno、NSIS、installshield等方式打包的，然后根据各自方式的静默方式实现自动化安装。如果以上皆不适用，则可以分析该软件是否为绿色软件，尝试把安装后的整个文件夹打包放置于软件仓库之上，以后安装只需要解压缩即可。如果软件既没有规范的打包方式，也不是绿色软件，那么就比较麻烦了，需要分析安装后创建了那些文件，以及执行了那些脚本，然后尝试把这些操作命令行化（不过这样的软件非常少，不必过于担心）。</p>

<h3>使用push jobs功能</h3>

<p>通常我们需要对节点进行批量化操作，而通过chef-client的方式功能有限。chef提供了push jobs这样的扩展功能，允许我们对节点进行随心所欲的批量操作。详情请参见<a href="https://docs.chef.io/push_jobs.html">https://docs.chef.io/push_jobs.html</a>。</p>

<h3>熟练使用PowerShell脚本</h3>

<p>之前我说过，PowerShell在Windows上的地位就如同Shell在Linux上的地位。Windows PowerShell提供了对COM组建和WMI组件的完全访问，而且可以轻松调用.net framework框架中的功能，而且也包含强大的文档。如果你想配置一个DHCP服务器，或者配置一个IIS网站服务，抑或修改注册表，使用PowerShell能轻松让你达到目标，彻底摆脱图形化界面。</p>

<hr />

<p>总体来说，Chef对于Windows平台的支持力度还是相当完善的，如果你想实现对Windows集群的自动化管理，那么Chef不失为一种可行的方案。至于其它几种自动化工具，笔者有时间也会进行深入调研，再出具报告。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[膝盖中了一箭之康复篇4-8周]]></title>
    <link href="http://www.huangbowen.net/blog/2015/08/29/acl-surgery-recovery-phase-two/"/>
    <updated>2015-08-29T15:54:49+08:00</updated>
    <id>http://www.huangbowen.net/blog/2015/08/29/acl-surgery-recovery-phase-two</id>
    <content type="html"><![CDATA[<p>7月1日做的手术，经过一个月的康复，走路已经可以完全不用拐杖了，护具也只是在办公室的时候带着，下班回到家里一般就不带了。前4周的恢复情况请参加我前一篇文章。</p>

<!-- more -->


<p>7月29日去杭州出差，保险起见还是带了护具，装在了行李箱里。也带了一个冰袋，因为膝盖还是有些肿，希望能多冰敷消肿。（事实是直到出差结束冰袋根本没从行李箱中拿出来过）到了机场过安检好多人啊，后悔没有把护具拿出来带上，还可以走特殊通道。飞机上坐的是经济舱，右腿长期保持一个不能伸直的姿势还是有点难受，但比7月中旬的那次出差好多了。</p>

<p>到了杭州的当天晚上就刮了一阵妖风，那风刮的我路都走不动。目前膝盖虽然有点肿，但是走平路还是比较快，就是由于右腿不能过伸，有点瘸。上楼梯的时候能够交叉步，还是习惯性的要扶楼梯把手。而下楼梯的时候就不能交叉步了，只能一步一步慢慢走。来之前一直担心客户现场的厕所不是马桶的那种。来了以后发现这客户现场卫生间还是非常干净的，和我司的一样。</p>

<p>由于到了客户现场工作强度比较大，回到酒店以后比较累，渐渐就荒废了康复训练。举腿那些都好久没做了，感觉效果不大。静蹲也只试了几次。伤腿的肌肉萎缩还是非常厉害的，左腿股四头肌还能看到轮廓，右腿则什么轮廓都没有了。想当年我双腿推起160公斤杠铃无压力，还能做组，这下怕是80公斤都吃力了。掰腿的话也是想起来掰一下，没认真对待。</p>

<p>就这样随性的样子过了两周。之所以这么随性，一是因为工作忙，二是我认为健身房康复才是效果最好的。所以再术后6周的时候，我就想在周边找一个健身房，一方面开始膝盖的康复训练，另一方面也恢复我的力量训练。杭州这边的健身房好多，光我周边1公里以内的就有7，8家。但是能够提供按次付费的却不多，有的还要必须买私教。因为我在杭州的呆的时间不长，总共也就一个月左右，所以我希望能按次付费。最后终于找到一家可以办月卡的，500元一个月，健身房也比较大，有三层，分别是有氧运动区、力量训练区和恒温游泳池，而且离我住的酒店只有800米左右。这正是完全符合我理想的健身房。我立马办了一个月的，当即就开始训练了。</p>

<p>针对膝盖训练我想先从椭圆仪和固定自行车开始。椭圆仪对膝盖压力较小，能够锻炼股四头肌。我踩了20分钟依然累成狗。这就是好几个月没怎么运动的下场。固定自行车我刚开始蹬的时候伤腿还是有些不适应的，尤其是弯曲到最大的时候有些痛。不过蹬了一会就没什么大的感觉了。蹬了30分钟自行车后我又练了一会力量，就去游泳了。游泳是个非常好的运动，尤其是有关节创伤的人。因为在水中有浮力，会减轻关节的压力，而游泳消耗的也是很大的。为了不使伤腿过分运动，我泳姿采用的是仰泳。没办法，只会仰泳和蛙泳这两个姿势。有大半年没游泳了，如何踩水都给忘记了。</p>

<p>之后有断断续续去过几次健身房。每次基本上是20分钟椭圆仪、30分钟自行车，然后力量训练半小时+游泳半小时。经过这样的康复训练感觉体力逐步恢复了。这样到术后8周的时候，体重也下降了1公斤，到72公斤多了。上下楼也能交叉走了。甚至感觉我都能跑了（但是慎重起见，还是没有跑步）。角度也好久没掰了，试了一下已经能够轻松到140度了，基本没有粘连的风险了。我也没有强求角度，自角度到达了120左右以后，我认为就要加强力量训练了。只要腿部肌肉力量起来了，角度就自然起来了。</p>

<p>现在是术后8周的样子，平时走路没有任何不适，基本恢复到了正常人的水平，速度也没问题。就是稍微有点瘸，应该还是腿部没完全过伸。这个我觉得再进行一些腿部肌肉力量的训练就行。</p>

<p>接下来的目标是尽早的恢复跑步。把体重给控制下来，并且恢复力量训练，把胸肌练出来，消失的腹肌再练出来。</p>

<p>对了，术后到现在还没有找主治医生复查过，一方面是因为出差，另一方面是自己感觉恢复的还可以，没有找的必要。我想等到快3个月的时候再找主治医生复查，然后根据他的建议是否能够恢复高强度训练。</p>
]]></content>
  </entry>
  
</feed>
