<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[黄博文的地盘]]></title>
  <link href="http://www.huangbowen.net/atom.xml" rel="self"/>
  <link href="http://www.huangbowen.net/"/>
  <updated>2013-03-02T21:49:03+08:00</updated>
  <id>http://www.huangbowen.net/</id>
  <author>
    <name><![CDATA[黄博文]]></name>
    <email><![CDATA[huangbowen521@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Haskell-函数式编程语言之初体验]]></title>
    <link href="http://www.huangbowen.net/blog/2013/03/02/haskell-programming-language-first-touch/"/>
    <updated>2013-03-02T14:55:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/03/02/haskell-programming-language-first-touch</id>
    <content type="html"><![CDATA[<p>如果你是使用面向对像语言进行编程的程序员，那么你应该去了解掌握一门动态语言。而动态语言的魔力之一就是函数式编程。而要学习了解函数式编程，那么haskell是一个不错的选择。</p>

<p>Haskell是是一门纯函数式编程语言(purely functional programming language)。在其世界中函数是第一等对象。并且在haskell中没有赋值，例如你指派a的值为5，然后你无法再给a分配其它的值。所以你不能像命令式语言那样命令电脑“要做什么”，而是通过函数来描述出问题“是什么”。</p>

<p>作为一个纯的函数式编程语言，它支持惰性求值、模式匹配、列表解析、类型类、类型多态……</p>

<p>别着急，让我们慢慢来解开函数式编程的面纱。</p>

<h2>安装Haskell</h2>

<ol>
<li><p>可以去<a href="http://www.Haskell.org/Haskellwiki/Haskell">官网</a>下载安装包进行安装。</p></li>
<li><p>mac平台的用户可以通过<a href="http://mxcl.github.com/homebrew/">homebrew</a>进行安装。</p></li>
</ol>


<p>在terminal下输入<code>brew install haskell-platform</code>即可。</p>

<h2>使用Haskell</h2>

<p>安装完毕后haskell platform的解释器GHC就已经在你的电脑上了。GHC可以解释执行Haskell脚本，即后缀名为.hs的文件。你可可以通过在terminal输入<code>ghci</code>进入交互模式。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>twer@bowen-huang:~<span class="nv">$ </span>ghci
</span><span class='line'>GHCi, version 7.4.2: http://www.haskell.org/ghc/ :? <span class="k">for </span><span class="nb">help</span>
</span><span class='line'>Loading package ghc-prim ... linking … <span class="k">done</span>.
</span><span class='line'>Loading package integer-gmp ... linking … <span class="k">done</span>.
</span><span class='line'>Loading package base ... linking … <span class="k">done</span>.
</span><span class='line'>Prelude&gt; 1+2
</span><span class='line'>3
</span><span class='line'>Prelude&gt; 3*4
</span><span class='line'>12
</span><span class='line'>Prelude&gt; 5/1
</span><span class='line'>5.0
</span></code></pre></td></tr></table></div></figure>


<p>关于Haskell的编辑器你可以使用任何喜欢的编辑器:Vim、Emacs、Sublime、TextMate…..我比较喜欢Sublime。因为在Sublime自带Haskell的快捷编译执行。只需要按Ctrl+B来直接运行Scripts脚本。</p>

<p>在ghci交互模式下可以使用<code>:l</code>命令来load一个Haskell脚本，然后就可以调用此脚本中的函数。我们先写一个&#8217;Hello world!’程序，然后通过ghci来load和调用.</p>

<figure class='code'><figcaption><span>HelloWorld.hs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">main</span> <span class="ow">=</span> <span class="n">print</span> <span class="o">$</span> <span class="s">&quot;Hello world!&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Prelude&gt; :l HelloWorld.hs
</span><span class='line'><span class="o">[</span>1 of 1<span class="o">]</span> Compiling Main <span class="o">(</span> HelloWorld.hs, interpreted <span class="o">)</span>
</span><span class='line'>Ok, modules loaded: Main.
</span><span class='line'>*Main&gt; main
</span><span class='line'><span class="s2">&quot;Hello world!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果对文件进行了修改，也可以直接通过<code>:r</code>来重新加载文件。</p>

<h2>Haskell的基本语法</h2>

<h3>加减乘除操作</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Prelude&gt; 1 + 2
</span><span class='line'>3
</span><span class='line'>Prelude&gt; 3 - 1
</span><span class='line'>2
</span><span class='line'>Prelude&gt; 3 * 4
</span><span class='line'>12
</span><span class='line'>Prelude&gt; 5 / 1
</span><span class='line'>5.0
</span><span class='line'>Prelude&gt; 10 / <span class="o">(</span>-5<span class="o">)</span>
</span><span class='line'>-2.0
</span></code></pre></td></tr></table></div></figure>


<p>注意对负数进行操作时要将其用()括起来，否则系统会报错。</p>

<h3>判等与比较操作</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Prelude&gt; <span class="nv">5</span> <span class="o">==</span> 5
</span><span class='line'>True
</span><span class='line'>Prelude&gt; <span class="nv">10</span> <span class="o">==</span> 8
</span><span class='line'>False
</span><span class='line'>Prelude&gt; 5 /<span class="o">=</span> 5
</span><span class='line'>False
</span><span class='line'>Prelude&gt; 10 /<span class="o">=</span> 8
</span><span class='line'>True
</span><span class='line'>Prelude&gt; 5 &gt;<span class="o">=</span> 3
</span><span class='line'>True
</span><span class='line'>Prelude&gt; 5 &lt;<span class="o">=</span> 3
</span><span class='line'>False
</span><span class='line'>Prelude&gt; True <span class="o">&amp;&amp;</span> True
</span><span class='line'>True
</span><span class='line'>Prelude&gt; True <span class="o">&amp;&amp;</span> False
</span><span class='line'>False
</span><span class='line'>Prelude&gt; False <span class="o">||</span> False
</span><span class='line'>False
</span><span class='line'>Prelude&gt; True <span class="o">||</span> False
</span><span class='line'>True
</span><span class='line'>Prelude&gt; not True
</span><span class='line'>False
</span><span class='line'>Prelude&gt; not False
</span><span class='line'>True
</span></code></pre></td></tr></table></div></figure>


<h3>控制流转</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Prelude&gt; <span class="nb">let </span>isHello <span class="nv">x</span> <span class="o">=</span> <span class="k">if </span><span class="nv">x</span> <span class="o">==</span> <span class="s2">&quot;Hello&quot;</span> <span class="k">then </span>True <span class="k">else </span>False
</span><span class='line'>Prelude&gt; isHello <span class="s2">&quot;Hello&quot;</span>
</span><span class='line'>True
</span><span class='line'>Prelude&gt; isHello <span class="s2">&quot;World&quot;</span>
</span><span class='line'>False
</span></code></pre></td></tr></table></div></figure>


<p>注意这里的条件判断中的else是不可以省略的，这样保证条件语句总会返回一个值。</p>

<p>如果在脚本文件中写的话不需要使用<code>let</code>关键字。并且也可以采用另一个写法。</p>

<figure class='code'><figcaption><span>isHello.hs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">isHello</span> <span class="n">x</span>
</span><span class='line'> <span class="o">|</span> <span class="n">x</span> <span class="o">==</span> <span class="s">&quot;Hello&quot;</span> <span class="ow">=</span> <span class="kt">True</span>
</span><span class='line'> <span class="o">|</span> <span class="n">otherwise</span>     <span class="ow">=</span> <span class="kt">False</span>
</span></code></pre></td></tr></table></div></figure>


<p>|表示或，otherwise关键字表示其它的情况。当然你也可以将这三行代码写成一行，这样也是能够正常运行的。分成三行只是为了更加可读。</p>

<p>还有第三种写法，实际上与面对对象语言中的<code>switch…case</code>语句有些类似。</p>

<figure class='code'><figcaption><span>isHello.hs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">isHello</span> <span class="n">x</span> <span class="ow">=</span> <span class="kr">case</span> <span class="n">x</span> <span class="kr">of</span>
</span><span class='line'> <span class="s">&quot;Hello&quot;</span> <span class="ow">-&gt;</span> <span class="kt">True</span>
</span><span class='line'> <span class="n">otherwise</span> <span class="ow">-&gt;</span> <span class="kt">False</span>
</span></code></pre></td></tr></table></div></figure>


<p>另外，在Haskell中是没有各种循环语句的，如果要实现相似的特性当然要使用递归了。</p>

<p>第二节中，我们会讨论这个问题。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ThoughtWorks developer 读书路线图]]></title>
    <link href="http://www.huangbowen.net/blog/2013/02/18/thoughtworks-reading-book/"/>
    <updated>2013-02-18T13:31:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/02/18/thoughtworks-reading-book</id>
    <content type="html"><![CDATA[<p>作为一名合格的ThoughtWorker,每年不读个几十本书都不好意思跟别人打招呼。从读书的角度来说，我还真不算是一名合格的ThoughtWorker。不过没关系，发现了问题就要解决问题。2013年来已经读了2，3本书了，按照这个频率下去今年30本书的目标应该问题不大。但是面对庞大的书籍，那些书是值得一读的那？尤其是技术类书籍，更是种类繁多，参差不齐。作为一个合格的程序员，常常纠结如此。</p>

<p>不用怕，ThoughtWorks考虑到这些问题，特推出了《ThoughtWorks Dev 读书路线图》。感谢Longjun和Zhangyi的贡献。</p>

<p>请注意，这里只是列出了一些推荐书籍，难免有些遗漏。你可以把这些书籍当成一个指引，带领你进入知识的海洋。站在别人的肩上才能看的更远。</p>

<p><img src="http://www.huangbowen.net/images/reading.jpg" width="700" height="700" title="ThoughtWorks Dev 读书路线图" alt="ThoughtWorks Dev 读书路线图"></p>

<p>点击<a href="http://www.huangbowen.net/images/reading.jpg">这里</a>查看大图。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2007年的一篇总结文章]]></title>
    <link href="http://www.huangbowen.net/blog/2013/02/17/2007nian-de-pian-zong-jie-wen-zhang/"/>
    <updated>2013-02-17T00:48:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/02/17/2007nian-de-pian-zong-jie-wen-zhang</id>
    <content type="html"><![CDATA[<p>今天整理电脑，偶然翻出一篇写于2007年的演讲稿。那是在一次班级团组织生活上向大家介绍自己学习计算机经验的一些感悟。</p>

<p>如今六年过去了，看到六年前自己的感悟，百般滋味涌上心头。六年的时间，从一个意气奋发的少年成长为孩子眼中的叔叔，不变的是对技术的从一而终的热爱。</p>

<p>看着当初稚嫩的自己进行的总结，某些条款至今让我受用，某些甚至自己至今还没做好。看来进步的pattern就是一个实践+总结+实践&#8230; 没有总结光有实践是万万不行的，这就像驴拉一辈子磨也不知道想办法用机器代替一样。</p>

<p>现在将演讲稿的内容贴出来，以后可以继续回味与总结。</p>

<p>我们学习计算机已经两年了。两年里大家到底学到多少东西，恐怕每个人的感受都不一样。无论你外表再花哨，肚子里有多少知识自己最清楚。我回顾以下自己的大学经历，并浅谈一下自己目前对学计算机的一点感受。</p>

<p>刚入大一，我对计算机了解很少，只会打游戏，和简单的OFFICE操作。但是我一向对计算机高手有种崇拜的感觉，老是幻想什么时候自己能成为其中一员。</p>

<p>大一的上半学期的时候，想自学 FLASH。自己就从图书馆借了好几本关于FLASH的书，找时间蹭机房钻研。恰逢那时侯要搞团组织生活，要我做个FLASH，我就带者压力开始钻研了。我发现自己钻研的好处是，我先是想实现某种效果，我才看书上是如何实现的，然后再操作实现，这样理解很深刻，能明白它的具体原理。</p>

<p>从第一次打开FLASH这个软件到作出第一个FLASH，不到两个月的时间。虽然它很丑，但是我很喜欢。可惜那时侯不知道把FLASH导成自带播放器的格式，结果在开团组织生活的时候由于机子上没装播放器而无法播放。</p>

<p>大一下半学期我们开了FLASH课，我渐渐明白不是所有的知识只有老师教了我们后，我们才能学会。上FLASH课的时候我基本没听过讲，因为感觉老师讲的好简单。后来就是那个第三届技能大赛开始了，我想自己既然学了FLASH，不如做个作品交上去吧。有好多人说就我那水平怎么可能获奖？我自己想贵在参与，得不得奖无所谓，就花了快一个月的时间做了个动画，在比赛截止的最后一天交过去了。最后竟然得了奖。看起来说的很轻松，做的过程中很辛苦。作动画要一层层的累加，一个场景一个场景的赶，有多少次都想放弃了，但是最终是坚持了下来。我从这个事情得出的结论是，如果你想好一件事情的话，你要付出更多的努力，要不厌其烦，想不劳而获只能让时间白白流逝。</p>

<p>后来放暑假了，计协要选一批人搞技术培训，我就参加了。那时侯培训分美工和编程两部分。我之所以没有选美工是发现我1没有艺术天分。就比如做FLASH动画，我懂的如何使用这个软件，但是却创作不出原始素材。2，鉴于我们这个专业我想往深层次钻。</p>

<p>师兄培训教我们的是ASP。在没培训之前我根本不知道ASP是什么东西，连dreamweaver也是第一次用。总共培训了5天，每天3个小时，其中一个半小时师兄讲，剩下的一个半小时自己上机操作，不会的问师兄。我给大家说下当时培训情况。第一天讲的是怎么配置IIS和建立站点。第二天讲dreamweaver的一些基本操作。第三天讲如何使用数据库，配数据源，并实现了登陆注册。第四天教我们做了个很简单的留言版。第五天没讲什么具体的东西，大概介绍了一个网站的开发过程。就这么短短的五天过后，师兄就让我们交个作品上来。</p>

<p>我做的是小型的魔兽论坛,被选中了成了协会的编程干部。</p>

<p>可是我来协会还没站稳，师兄给我们下达了一项任务，让我们几个搞编程的和搞美工的在开学前做个协会的新网站出来。我一听眼黑了。这个难度也太大了。但是心想有什么不会的可以问师兄，就硬者头皮做了。由于是第一次做网站，根本不懂什么规划，上去就编数据库写代码，结果给后来造成了不少的麻烦。</p>

<p>刚开始的时候，我们编程的还有不少人做，可是做着做着我发现好多都跑光了，只有我们班的几个还坚持在，我想可能是耐不住枯燥吧。暑假那段时间我相当于要同时学三门语言，HTML语言，ASP语言，外带个SQL查询语句。我经常碰到令人头痛的问题，刚开始，师兄还给我解答，后来干脆不耐烦说自己查书去，可能嫌我问的问题太幼稚了。我只好天天在BAIDU来BAIDU去的。</p>

<p>我们不是好多同学也选了网站建设课吗？不知道大家学的怎么样？这种东西就是入门有点痛苦，但是之后的路就好走多了，当你学的有感觉的时候，你就能感到你头脑中有一棵知识树，随着你知识的积累，那棵树越长越大，你越学越自信。我给大家建议个学习网站建设的方法，那网站建设课本后面不是有几个综合性的例子吗？你把那些代码都敲进去，调试运行成功，你就会发现你对ASP已经有了很深的了解了。这就是要先学会看别人的代码，要多思考。大家记得SESSION这个属性吧。老师给我们讲了如何用，但是好多人没整明白。我做协会网站的时候根本不知道有个SESSION这个属性。我在做会员专区的时候，遇到了一个问题，就是会员注册登陆后，进了会员专区要进行各种操作，可是我怎么能区别是那个会员在进行操作那，我想如果有一个变量传值能老跟着这个会员的操作多好。哪个时候我知道两种传值方式，表单传值和问号传值，但是这两种都只能传往一个页面，要在不同页面间传送很不方便。我从网上查资料，发现了SESSION这个属性，它很好的解决了我的问题。这样你就不会再犯糊涂它是干什么用的。</p>

<p>本来我们计划是开学前把网站做好挂出去的，可是我能力太差劲了，边学边做很慢，而且其他人都不知道跑那里去了。后来总算是都开学了一个多月才正式把网站做好，挂出来。通过做这个网站我学到了很多的东西。这对我以后的学习起到了很大的作用。</p>

<p>但在大二上半学期我走了弯路，那段时间我不知怎么想的，先弄了下XML，后来看了下ｊａｖａ的书，又编了好长时间的JSP代码，正是由于我学的太杂了，最后什么东西都没有学到，全是学一段时间觉的没什么收获就换了。我忘了当时刚开始学习ASP要吃好多的苦。而且我总想老师讲的课没用，不如自己学，忽略了对理论的学习，象数据结构，汇编我就学的不是很好。后来学期快结束时我才发现了问题的严重性，饿补了下，但是毕竟还有好多夹生的。</p>

<p>寒假里我看了点VC的书，LINUX方面的光盘，但是玩心太大，没掌握多少东西，感觉这个寒假是荒废了。</p>

<p>这个学期到现在，我加重了对理论的学习。这个学期的专业课我很少矿过，课上也大多认真听了。</p>

<p>我已经感觉到了学习理论的好处，使你能更地层的了解一个程序的运行。</p>

<p>我选了WINDOWS程序设计的课，恰巧我寒假里看了本VC的书，感觉能把书里的项目做出来。于是就花了些工夫，边看书，边听课，边做。不会了就从网上查资料，本来想问老师，可是问了一次老师后就不想问了。因为我的问题都太简单了，老师不好好给我说，不如看BAIDU来的快。</p>

<p>要知道当时我对VC++的MFC编程一无所知，甚至连建个工程都不会。没办法只好咬牙坚持了下来。由于这个学期时间很紧，为了赶进度，我就经常通宵。那个课本好烂，有好多错误的地方，我改的好痛苦.我这个人比较怪，白天很难静下心来写代码，只有晚上才能保持头脑清醒。终于在前几天是完成了程序大部分功能。</p>

<p>这个系统用了网络编程，数据库编程，对VC的涵盖还是很广的。我通过做这个学到了好多好多的东西。</p>

<p>比如说注册表编程。不知道有多少人能说出来WINDOWS的注册表是干什么用的，更别提对它的使用了。我这个系统就是需要把软件的一些基本配置保存在注册表中，看似很高深，其实用两个函数轻松搞定。有些东西根本没有你想象中的那么难，只要你做了一次就会发现。</p>

<p>说的这么乱，大家一定都晕了。</p>

<p>我本来想把我的感受总结成一，二，三等几个大点的。可是写作能力太差，搞不定。</p>

<p>简单说下吧。学计算机理论一定要抓好。千万不要忽略理论。理论不扎实的后果就是永远只能浮在很浅的层次上，想要深入就很难了。</p>

<ul>
<li><p><strong>学计算机要有钻劲，有恒心。</strong></p></li>
<li><p><strong>学计算机不能跟着老师走。</strong>如果你做东西时发现那里不会的时候，不要想老师没讲我就不会，就不去钻。这是很错误的。</p></li>
<li><p><strong>学计算机要明确自己的方向，不能东学一块，西学一块。</strong>要让自己的知识成为一个完整的系统。我上个学期就吃了这个亏，浪费了半个多学期。</p></li>
<li><p><strong>学计算机要学会取舍。</strong>人都是有惰性的。我的惰性就很大。现在我平常要上课，平时协会还有不少的日常事务要处理，有些空闲时间还想打会游戏，休闲下，这样很难有大的成就。我现在就在努力改观。</p></li>
<li><p><strong>学计算机要多做项目。</strong>只有做项目是最快的途径，最好的途径。我们不是开了课程设计吗？相信只要认真做了课程设计的同学每人的收获一定不少。我们以前是站在软件使用者角度上的，如果我们站在开发者角度上，就会学到很多东西。我们的VB。NET课，老师整天讲那些空间怎么用，我觉的稍微难点的有点价值听外，其他的完全可以自己去摸索，用不了多久你就会用了。如果你在学VB。NET的时候是报着做一个什么图书管理系统啊的什么的话，你如果能坚持下来的话，你就会发现你进步很快。</p></li>
<li><p><strong>学计算机要做学会思考。</strong>思考是小到对一个算法如何实现。大到对整个计算机编程的认识。这个我无法具体说，只能意会，不能言传。举个简单的例子，VC++与C++的区别，可能很多人还没搞不明白。</p></li>
<li><p><strong>学计算机不能浮躁，不能自嗷，不能不懂装懂。</strong>浮躁是大敌，我这方面做的还不够，但是我最起码知道要克服他。还有千万不要骄傲，目中无人，无论你是不是搞计算机的，千万不要盲目自大，这是做人的基本原则。不能不懂装懂，如果有人问了你一个问题你不会，你要勇敢的说出来你不会，并马上查资料去找答案。</p></li>
</ul>


<p> 我只是一个普通的计算机科学与技术专业的学生。以前我梦想成为一名计算机高手，但是现在我甚至无法描绘一个真正的计算机高手是什么样的。</p>

<p> 每当我做出一个东西，哪怕只有一个人去使用它，那也是有用的。我也会高兴的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gtShell - 为你常用的目录建立标签并快速跳转]]></title>
    <link href="http://www.huangbowen.net/blog/2013/02/16/gtshell/"/>
    <updated>2013-02-16T17:18:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/02/16/gtshell</id>
    <content type="html"><![CDATA[<p>使用场景：
如果你有很多工作目录，需要每天在这些目录中跳来跳去。那么你就应该试试goShell. 一个使用简单、功能恰到好处的terminal下的小工具。
gtShell支持将常用的一些目录保存为bookmark，提供快速跳转功能。这样你就不需要在使用cd后面跟随一长串的目录名称。
它也支持自动完成，你只需要输入开头的几个字母，然后按tab键就可以自动匹配。
目前源码被我host在<a href="https://github.com/huangbowen521/gtShell">github</a>上。</p>

<p>下面是主要文件gt.sh的源码。</p>

<figure class='code'><figcaption><span>gt.sh</span><a href='https://github.com/huangbowen521/gtShell/blob/master/gt.sh'>gt.sh</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#! /bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="nv">DIRS</span><span class="o">=</span><span class="s2">&quot;$HOME/.gtDirs&quot;</span>
</span><span class='line'><span class="k">if </span><span class="nb">test</span> ! -e <span class="nv">$DIRS</span>
</span><span class='line'><span class="k">then</span>
</span><span class='line'><span class="k">  </span>touch <span class="nv">$DIRS</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'>gt <span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="nv">$1</span> in
</span><span class='line'>      -d<span class="o">)</span>
</span><span class='line'>          <span class="nv">temp</span><span class="o">=</span><span class="sb">`</span>mktemp -t .gtDirs-XXXXXX<span class="sb">`</span>
</span><span class='line'>          sed <span class="s2">&quot;/^$2=/&quot;</span>d <span class="nv">$DIRS</span> &gt; <span class="nv">$temp</span>
</span><span class='line'>          mv <span class="nv">$temp</span> <span class="nv">$DIRS</span>
</span><span class='line'>          rm -f <span class="nv">$temp</span>
</span><span class='line'>          ;;
</span><span class='line'>      -a<span class="o">)</span>
</span><span class='line'>          validate_bookmark_name <span class="s2">&quot;$@&quot;</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">[</span> -z <span class="s2">&quot;$result&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">              </span><span class="nv">CURDIR</span><span class="o">=</span><span class="nv">$PWD</span>
</span><span class='line'>               <span class="nb">echo</span> <span class="s2">&quot;$2=$CURDIR&quot;</span> &gt;&gt; <span class="nv">$DIRS</span>
</span><span class='line'>          <span class="k">fi</span>
</span><span class='line'>          ;;
</span><span class='line'>      -l<span class="o">)</span>
</span><span class='line'>          cat <span class="nv">$DIRS</span>
</span><span class='line'>          ;;
</span><span class='line'>      -h<span class="o">)</span>
</span><span class='line'>          print_usage
</span><span class='line'>          ;;
</span><span class='line'>      *<span class="o">)</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">[</span> -z <span class="nv">$1</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">              </span>print_usage
</span><span class='line'>          <span class="k">elif</span> <span class="o">[[</span> ! -z <span class="sb">`</span>awk -F <span class="s1">&#39;=&#39;</span> <span class="s1">&#39;/^&#39;</span><span class="s2">&quot;$1&quot;</span><span class="s1">&#39;=/ {print $2 }&#39;</span> <span class="nv">$DIRS</span><span class="sb">`</span> <span class="o">]]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">              </span><span class="nb">cd</span> <span class="sb">`</span>awk -F <span class="s1">&#39;=&#39;</span> <span class="s1">&#39;/^&#39;</span><span class="s2">&quot;$1&quot;</span><span class="s1">&#39;=/ {print $2 }&#39;</span> <span class="nv">$DIRS</span><span class="sb">`</span>
</span><span class='line'>              <span class="k">else</span>
</span><span class='line'><span class="k">              </span><span class="nb">echo</span> <span class="s1">&#39;error: bookmark name not found&#39;</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="k">  esac</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c">#validate names</span>
</span><span class='line'><span class="k">function </span>validate_bookmark_name <span class="o">{</span>
</span><span class='line'>  <span class="nv">result</span><span class="o">=</span><span class="s2">&quot;&quot;</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">[</span> -z <span class="nv">$2</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">      </span><span class="nv">result</span><span class="o">=</span><span class="s1">&#39;error: bookmark name required!&#39;</span>
</span><span class='line'>      <span class="nb">echo</span> <span class="nv">$result</span>
</span><span class='line'>  <span class="k">elif</span> <span class="o">[</span> -z <span class="sb">`</span><span class="nb">echo</span> <span class="nv">$2</span> | sed <span class="s1">&#39;s/[^A-Za-z0-9_]//g&#39;</span> <span class="sb">`</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">      </span><span class="nv">result</span><span class="o">=</span><span class="s1">&#39;error: bookmark name is invalid!&#39;</span>
</span><span class='line'>      <span class="nb">echo</span> <span class="nv">$result</span>
</span><span class='line'>  <span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">function </span>print_usage <span class="o">{</span>
</span><span class='line'>      <span class="nb">echo</span>  <span class="s1">&#39;Usage:&#39;</span>
</span><span class='line'>          <span class="nb">echo</span>  <span class="s1">&#39;-a &lt;bookmark_name&gt; - Saves the current directory as &quot;bookmark_name&quot;&#39;</span>
</span><span class='line'>          <span class="nb">echo</span>  <span class="s1">&#39;-d &lt;bookmark_name&gt; - Deletes the bookmark&#39;</span>
</span><span class='line'>          <span class="nb">echo</span>  <span class="s1">&#39;-l                 - Lists all available bookmarks&#39;</span>
</span><span class='line'>          <span class="nb">echo</span>  <span class="s1">&#39;-h(-help,--help)   - Lists usage&#39;</span>
</span><span class='line'>          <span class="nb">echo</span>  <span class="s1">&#39;&lt;bookmark_name&gt;    - Jump to the bookmark&#39;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">function </span>_l <span class="o">{</span>
</span><span class='line'>  awk -F <span class="s1">&#39;=&#39;</span> <span class="s1">&#39; {print $1} &#39;</span> <span class="nv">$DIRS</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">function </span>_comp <span class="o">{</span>
</span><span class='line'>    <span class="nb">local </span>curw
</span><span class='line'>    <span class="nv">COMPREPLY</span><span class="o">=()</span>
</span><span class='line'>    <span class="nv">curw</span><span class="o">=</span><span class="k">${</span><span class="nv">COMP_WORDS</span><span class="p">[COMP_CWORD]</span><span class="k">}</span>
</span><span class='line'>    <span class="nv">COMPREPLY</span><span class="o">=(</span><span class="k">$(</span><span class="nb">compgen</span> -W <span class="s1">&#39;`_l`&#39;</span> -- <span class="nv">$curw</span><span class="k">)</span><span class="o">)</span>
</span><span class='line'>    <span class="k">return </span>0
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># ZSH completion command</span>
</span><span class='line'><span class="k">function </span>_compzsh <span class="o">{</span>
</span><span class='line'>    <span class="nv">reply</span><span class="o">=(</span><span class="k">$(</span>_l<span class="k">)</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="nv">$ZSH_VERSION</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">  </span>compctl -K _compzsh gt
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="k">  </span><span class="nb">shopt</span> -s progcomp
</span><span class='line'>  <span class="nb">complete</span> -F _comp gt
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>安装:</strong></p>

<ol>
<li><p><code>git clone git@github.com:huangbowen521/gtShell.git</code> 或者直接拷贝 gt.sh文件内容。</p></li>
<li><p>add gt.sh file path to your <code>~/.bash_profile</code> or <code>~/.bashrc</code> file</p></li>
<li><p>reload your profile or restart your terminal</p></li>
</ol>


<p><strong>用例:</strong></p>

<ul>
<li><p><code>gt -a &lt;bookmark_name&gt;</code> - 保存当前目录的标签为 给定的bookmark_name</p></li>
<li><p><code>gt -d &lt;bookmark_name&gt;</code> - 删除给定的标签</p></li>
<li><p><code>gt -l</code>                 - 列除所有标签</p></li>
<li><p><code>gt -h</code> - 帮助信息</p></li>
<li><p><code>gt &lt;bookmark_name&gt;</code>    - 跳转到指定的标签目录</p></li>
</ul>


<p><strong>例子:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>current_user:~<span class="nv">$ </span><span class="nb">cd </span>sourcecode/study/
</span><span class='line'>current_user:~/sourcecode/study<span class="nv">$ </span>gt -a study
</span><span class='line'>current_user:~/sourcecode/study<span class="nv">$ </span><span class="nb">cd</span> ~
</span><span class='line'>current_user:~<span class="nv">$ </span>gt study
</span><span class='line'>current_user:~/sourcecode/study<span class="nv">$ </span>gt -l
</span><span class='line'><span class="nv">goAgent</span><span class="o">=</span>/Users/twer/sourcecode/goagent/goagent-goagent-9c1edd3/local
</span><span class='line'><span class="nv">octopress</span><span class="o">=</span>/Users/twer/sourcecode/octopress
</span><span class='line'><span class="nv">goShell</span><span class="o">=</span>/Users/twer/sourcecode/shell/goShell
</span><span class='line'><span class="nv">study</span><span class="o">=</span>/Users/twer/sourcecode/study
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>current_user:~/sourcecode/study<span class="nv">$ </span>gt -d study
</span><span class='line'>current_user:~/sourcecode/study<span class="nv">$ </span>gt -l
</span><span class='line'><span class="nv">goAgent</span><span class="o">=</span>/Users/twer/sourcecode/goagent/goagent-goagent-9c1edd3/local
</span><span class='line'><span class="nv">octopress</span><span class="o">=</span>/Users/twer/sourcecode/octopress
</span><span class='line'><span class="nv">goShell</span><span class="o">=</span>/Users/twer/sourcecode/shell/goShell
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>current_user:~/sourcecode/study<span class="nv">$ </span>gt -h
</span><span class='line'>Usage:
</span><span class='line'>-a &lt;bookmark_name&gt; - Saves the current directory as <span class="s2">&quot;bookmark_name&quot;</span>
</span><span class='line'>-d &lt;bookmark_name&gt; - Deletes the bookmark
</span><span class='line'>-l                 - Lists all available bookmarks
</span><span class='line'>-h<span class="o">(</span>-help,--help<span class="o">)</span>   - Lists usage
</span><span class='line'>&lt;bookmark_name&gt;    - Jump to the bookmark
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>current_user:~/sourcecode/study<span class="nv">$ </span>gt go&lt;Tab&gt;
</span><span class='line'>goAgent  goShell
</span><span class='line'>current_user:~/sourcecode/study<span class="nv">$ </span>gt goShell
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[正则表达式必知必会]]></title>
    <link href="http://www.huangbowen.net/blog/2013/02/14/zheng-ze-biao-da-shi-bi-zhi-bi-hui/"/>
    <updated>2013-02-14T23:22:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/02/14/zheng-ze-biao-da-shi-bi-zhi-bi-hui</id>
    <content type="html"><![CDATA[<p>读了《正则表达式必知必会》（Regular Expressions - in 10 minutes）一书，很有收获。这本书不厚，只有120多页。但是其由浅入深的系统的介绍了正则表达式。全书内容详实，配了很多实例，是学习正则表达式的一本很好的入门书籍。</p>

<p>我根据这本书画了个Mind Map，来记录自己学到的东西。</p>

<p><img src="http://www.huangbowen.net/images/RegularExpression.png" width="700" height="700" title="《正则表达式必知必会》Mind Map" alt="《正则表达式必知必会》Mind Map"></p>

<p>点击<a href="http://www.huangbowen.net/images/RegularExpression.png">这里</a>查看大图。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[避免每次输入bundler exec命令]]></title>
    <link href="http://www.huangbowen.net/blog/2013/02/04/bi-mian-mei-ci-shu-ru-bundler-execming-ling/"/>
    <updated>2013-02-04T00:24:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/02/04/bi-mian-mei-ci-shu-ru-bundler-execming-ling</id>
    <content type="html"><![CDATA[<p>bundle在ruby的世界里是个好东西，它可以用来管理应用程序的依赖库。它能自动的下载和安装指定的gem，也可以随时更新指定的gem。</p>

<p><a href="https://rvm.io/">rvm</a>则是一个命令行工具，能帮助你轻松的安装，管理多个ruby环境。每个环境可以指定一系列的gem。它允许你为每一个项目指定其ruby的版本，需要的gem的版本。这能最大限度的避免由于ruby环境的差异，或者不同版本的gem造成的各种问题。</p>

<p>当我在项目中引入了rvm后，使用rake命令时，每次都会出现这样的异常。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake aborted!
</span><span class='line'>You have already activated rake 10.0.0, but your Gemfile requires rake 0.9.2.2. Using bundle <span class="nb">exec </span>may solve this.
</span><span class='line'>/usr/local/rvm/gems/ruby-1.9.3-p194/gems/bundler-1.2.3/lib/bundler/runtime.rb:31:in <span class="sb">`</span>block in setup<span class="s1">&#39;</span>
</span><span class='line'><span class="s1">/usr/local/rvm/gems/ruby-1.9.3-p194/gems/bundler-1.2.3/lib/bundler/runtime.rb:17:in `setup&#39;</span>
</span><span class='line'>/usr/local/rvm/gems/ruby-1.9.3-p194/gems/bundler-1.2.3/lib/bundler.rb:116:in <span class="sb">`</span>setup<span class="s1">&#39;</span>
</span><span class='line'><span class="s1">/usr/local/rvm/gems/ruby-1.9.3-p194/gems/bundler-1.2.3/lib/bundler/setup.rb:7:in `&lt;top (required)&gt;&#39;</span>
</span><span class='line'>/Users/twer/sourcecode/octopress/Rakefile:2:in <span class="sb">`</span>&lt;top <span class="o">(</span>required<span class="o">)</span>&gt;<span class="err">&#39;</span>
</span><span class='line'><span class="o">(</span>See full trace by running task with --trace<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>从这个异常中我们可以看到，由于我在自己机器上已经安装了rake的<code>10.0.0</code>版本，但是这个项目中配置的rake版本却是<code>0.9.2.2</code>，所以在执行rake命令时应该使用Gemfile的。</p>

<p>而<code>bundle exec</code>可以在当前bundle的上下文中执行一段脚本。通过它可以调用本项目中指定的rake版本来执行命令。</p>

<p>下面是官方文档的说明。</p>

<blockquote><p>In some cases, running executables without bundle exec may work, if the executable happens to be installed in your system and does not pull in any gems that conflict with your bundle. However, this is unreliable and is the source of considerable pain. Even if it looks like it works, it may not work in the future or on another machine.</p></blockquote>

<p>所以我们只要每次执行命令的时候加上<code>bundle exec</code>的前缀就可以额。但是这样搞的很烦人，试想每天都要敲上百次这样的字符，而且还常常忘记。</p>

<p>有一个方法可以避免每次都要键入<code>bundle exec</code>作为前缀。</p>

<p>安装<a href="https://github.com/mpapis/rubygems-bundler">rubygems-bundler</a>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>gem install rubygems-bundler
</span></code></pre></td></tr></table></div></figure>


<p>然后运行：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>gem regenerate_binstubs
</span></code></pre></td></tr></table></div></figure>


<p>启用RVM hook:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rvm get head <span class="o">&amp;&amp;</span> rvm reload
</span><span class='line'><span class="nv">$ </span>chmod +x <span class="nv">$rvm_path</span>/hooks/after_cd_bundler
</span></code></pre></td></tr></table></div></figure>


<p>为自己的项目创建bundler stubs.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd </span>your_project_path
</span><span class='line'><span class="nv">$ </span>bundle install --binstubs<span class="o">=</span>./bundler_stubs
</span></code></pre></td></tr></table></div></figure>


<p>最后重新打开terminal就可以直接执行ruby命令，不需要加上<code>bundler exec</code>前缀。</p>

<p>如果想禁用次bundler的话，只需要在命令前面加上<code>NOEXEC_DISABLE=1</code>前缀。更详细的信息可以看[rubygems-bundler]的<a href="https://github.com/mpapis/rubygems-bundler">文档</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[my first blog]]></title>
    <link href="http://www.huangbowen.net/blog/2013/01/28/my-first-blog/"/>
    <updated>2013-01-28T22:27:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/01/28/my-first-blog</id>
    <content type="html"><![CDATA[<p>dfjkdjkfjkdfjjfjf</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ThoughtWorks Immersion 小计]]></title>
    <link href="http://www.huangbowen.net/blog/2013/01/19/thoughtworks-immersion-xiao-ji/"/>
    <updated>2013-01-19T23:08:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/01/19/thoughtworks-immersion-xiao-ji</id>
    <content type="html"><![CDATA[<p>2012年12月18日，第11期TWI在中国西安举行了。这次参加培训的角色有admin，有hr，有Ux,当然更多的是QA和Dev，估计是最齐全的一届。</p>

<p>虽然TWI已经过去好几天了，但是我还在回味那培训中的一幕幕。</p>

<p>关于这几天的经历，我可以用几个关键字来形容。</p>

<p><strong>吃：</strong></p>

<p>虽然我们来到西安是学习滴，但是也不能委屈了自己的胃。刚到西安就先吃了羊肉泡馍，外加一个肉夹馍才感觉有些饱。第一天中午办公室定的凉皮和肉夹馍，典型的北方特色，符合我的胃口。第二天晚上我们team building，去的小杨烤肉，刚开始打不到车，气氛有些低落，但是到了饭馆气氛慢慢火热起来，最后吃完了大家大摆龙门阵，海量重量级八卦被爆出，气氛异常火热。</p>

<hr />

<p><strong>玩：</strong></p>

<p>TWI第一天就玩了一个破冰游戏，大家将办公室地板想象成为一个中国地图，按照每个人的省份站位，并且用家乡话介绍自己，使大家尽快的熟悉起来。</p>

<p>在TWI，早上有游戏，中午也有pacha chucha，下午还有大型游戏。不少的session也穿插了不少游戏。通过这些游戏，大家都很放松，也更容易从游戏中接收到知识。这种寓教于乐的方式很合我们的胃口。尤其是乐高游戏和拍卖游戏。</p>

<p>乐高游戏生动的显示了一个敏捷团队是如何work的，通过游戏我们体现了：需求分析，story划分与估点，itration plan，迭代开发，用户验收测试与retro。我想通过这样的游戏大家能够快速的理解的这些名词的含义与好处。</p>

<p>拍卖游戏则是最后的压轴游戏。大家分成3组，以抢答的方式来回答这几天中学到的东西。最后的梭哈把气氛带到了最高潮。</p>

<hr />

<p><strong>学：</strong></p>

<p>前面说了那么多，大家还因为我们是去玩的。错了，最大的目的就是：好好学习，天天向上。3天N个session，真是狂轰乱炸，讲师阵容也超级豪华。</p>

<p>酱油男胡凯给我们讲了两个session，就消失了。TW历史就讲了将近两个小时，让我们对TW有了一个立体全面的认识。对于Agile我也有了新认识，以前还没注意到两点：1，并不是4个准则中后半部分没有价值，而是前面的价值更大。2，agile有一个重要的前提，就是只能应用与知识工作者的生产工作。</p>

<p>庆敏的soft skill training穿插各种情景剧，游戏，和同学们互动中体验到了软技能的重要性。并且经过实战演练大家迅速掌握到了技巧。</p>

<p>棹显静作为我们公司知名的女developer兼这次TWI的主要组织者,也给我们带来了一系列的session，充分展现了我司女员工的强势一面。她的迭代开发session激发了我们的热烈讨论，结对编程的情景剧也给我们留下了深刻的印象。</p>

<p>最后一位大师是徐昊。透露一下他是第一天晚上凌晨到的西安，由于酒店已经没有房间，他愣是写了一个通宵的代码。他的session就不用说了。我们学员轮番上阵都没challenge住他。</p>

<hr />

<p>据说以前TWI是在印度举行了，后来被cut了，只有中国保留了它。这次TWI还引入了pacha kucha，锻炼了大家的演讲能力。希望以后的TWI越办越红火。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[《JavaScript语言精粹》读书笔记]]></title>
    <link href="http://www.huangbowen.net/blog/2013/01/16/%3C%3Cjavascriptyu-yan-jing-cui-%3E%3E-du-shu-bi-ji/"/>
    <updated>2013-01-16T00:22:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/01/16/<<javascriptyu-yan-jing-cui->>-du-shu-bi-ji</id>
    <content type="html"><![CDATA[<p>《JavaScript语言精粹》这本书句句是精华。如果你想只读一本书了解JavaScript,这本是你的不二选择。</p>

<p>这么薄的一本书讲JavaScript的特点介绍的非常清楚，是我对JavaScript的认识更加的深入。以前总觉得函数式编程很难理解，但是看了这本书以后我觉得对其有了一个新的认识。严格意义上说JavaScript并不仅仅是一门函数式编程语言，书中有一句话对它的特性做了一个精彩的描述：JavaScript的许多特性都借鉴自其他语言。语法借鉴自java，函数借鉴自Scheme,原型继承借鉴自Self，而JavaScript的正则表达式特性则借鉴自Perl。</p>

<p>JavaScript的简单类型有：数字、字符串、布尔值、null值和undefined值。在JavaScript中，数组是对象，函数是对象，正则表达式是对象。可以使用对象字面量来创建一个新对象： var empty_object = { };</p>

<p>每个对象都连接到一个原型对象，并继承其属性。使用typeof可以确定属性的类型。使用delete可以删除对象的属性。</p>

<p>函数也是对象，其原型对象为Function.prototype.函数有一个call属性，当JavaScript调用函数时，可理解为调用该函数的call属性。函数有四种调用模式：方法调用模式，函数调用模式，构造器调用模式和apply调用模式。这些模式主要是初始化关键字this存在差异，分别是：调用对象，全局对象，隐藏连接到该函数的prototype成员的新对象，apply方法的第一个参数。当函数被调用时，会得到一个arguments数组，可以通过它访问传递给该函数的所有参数。一个函数总是会返回一个值，如果没有制定返回值，则返回underfined.</p>

<p>JavaScript中的数组其实是一种伪数组。她把数组的下标转变成字符串，用其作为属性。可以通过数组字面量来声明一个数组：var empty = [];数组第一个值将获得属性名0，第二个属性名将获得属性名1，以此类推。</p>

<p>JavaScript中的正则表达式也是一个对象。正则表达式的分组有4中：捕获型，使用圆括号包括；非捕获型，使用(?:前缀;向前正向匹配，使用(?=前缀；向前负向匹配，使用（？！前缀。 &nbsp;</p>

<p>读完这本书，彻底颠覆了我对JavaScript的理解。最近在翻译《Effective JavaScript: 68 Specific Ways to Harness the Power of JavaScript (Effective Software Development Series)》这本书，正得益于我从《JavaScript语言精粹》掌握了JavaScript的核心。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[《卓有成效的程序员》读书笔记]]></title>
    <link href="http://www.huangbowen.net/blog/2012/11/11/%3C%3Czhuo-you-cheng-xiao-de-cheng-xu-yuan-%3E%3E-du-shu-bi-ji/"/>
    <updated>2012-11-11T23:52:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2012/11/11/<<zhuo-you-cheng-xiao-de-cheng-xu-yuan->>-du-shu-bi-ji</id>
    <content type="html"><![CDATA[<p>在今年的的ThoughtWorks China away day上，我见到了这本书的作者neal ford, 我们还有过简单的交流，并一起去爬了长城。惭愧的是当时我并没有读过他写的这本书。直到今天我拿到了这本书，并花了大半天的时间通读了一遍。看完以后，我觉得这本书真是太好了，非常值得一读。</p>

<p>但是，我想读这本书的读者，大体会分为两个反应。一种是看了一下前面，觉得没有意思，大概翻了翻，发现作者真是太罗嗦了，就丢到了一边。另一种是爱不释手的从头看到尾，看到有些段落会会心一笑，有些段落则加上重重的标记，并决定马上就要开始实践。</p>

<p>如果换做半年前的我，我是第一种反应，而现在，我当然是第二种反应。主要是这半年在ThoughtWorks的历练，使我变得越来越有成效。列举一个真实的例子。在我的前一个项目中，我们做的产品是一个提交保险单的系统，用户要讲过一个一个的page
 flow直到完成一个保单。如果我要开发的或者测试的feature在第7页上，我每次都需要输入大量的数据，点击大量的按钮从第一页走到第7页。试想每天要重复N次真让人崩溃。后来有人就写了一个JavaScript脚本，可以一次填充一页的数据，并自动跳到下一页。我们把这个脚本保存到一个bookmark上，每次只要点击6下就能到第7页。</p>

<p>也许你们说这样已经简化很多了，但是追求卓越的我们并没有止步。我后来了解了selenium IDE这个在firefox下的插件。这个插件作者在书中有提到过。我用selenium IDE录制了一个脚本，只需要点击一个按键，程序就会自动的走到第7页。这样比手动输入速度至少提高了10倍以上。正如作者所说，我们这样的尽量实现自动化操作节省时间不是第一目标，最重要的目标是不要让程序员在一遍遍的手动操作中变傻，而是让我们精力变的更加集中，focus到更具有价值的地方上去。</p>

<p>我觉得每个程序员都想变得高效，但是面对新的方法，新的工具总是或多或少有点畏惧心理，这是因为他们无法体会到采用一种新方法或者新工具带来的震撼的效果。所以对于我们程序员来说绝对要勇于尝试，勇于突破现状。</p>

<p>回顾了一下作者在书中列举的自己感兴趣的东西，顺便对自己做一个总结。（本人使用的是mac pro，所以tool和plugin只关心mac上的。）</p>

<ol>
<li><p>加载器。作者介绍了quicksilver，而我使用的是launcher。我一般使用它快速打开某个application，还有尝试其他功能，接下来要好好挖掘下。</p></li>
<li><p>剪贴版。我还真不知道可以有多个寄存器的剪贴板，out了，立马download了jumpcut,打算试用。</p></li>
<li><p>IDE 快捷键。身为程序员每天与IDE打交道最多了，一定要熟练运用每一个快捷键。作者提到了快捷键我基本都在用。</p></li>
<li><p>搜索优于导航。使用command line来进行各种搜素是我的短板，可怜的我只会基本的shell命令，这部分需要加强。</p></li>
<li><p>虚拟桌面。这个还真没尝试过。</p></li>
<li><p>自动化法则。我们已经使用了一些自动化技术，比如使用maven或rake来运行build，使用selenium来构建web自动化测试。但是和作者书中讲到的还差很远。</p></li>
<li><p>规范性法则。目前我们只实现了将部分配置信息统一管理起来，这一方便还有很大的提高。</p></li>
<li><p>TDD。在我们公司，如果你写了一段没测试的代码，你的pair会毫不留情的喊你全部删掉，先写测试，再写实现。&nbsp;</p></li>
<li><p>代码的度量。目前我们有一些测试覆盖率之类的度量，但是圈复杂度这些还是一片空白。</p></li>
<li><p>静态分析。这块在我们项目中是一片空白，我已经把它记到sticker,强烈需要马上应用。</p></li>
<li><p>元编程。正在学习groovy,ruby等动态语言，只是看到了元编程的妙处，还没有切身体会。</p></li>
<li><p>多语言编程。好吧，我承认这是目前的趋势，当我尝试了ruby on rails是如此高效时，我已经对它欲罢不能了。</p></li>
</ol>


<p>作者总结了这个多，我也给大家推荐一个爱不释手的tool:一款浏览器插件<a href="http://vimium.github.com/" title="vimium">vimium</a>,支持chrome和firefox。这是一款很酷的插件，能让你浏览网站的速度至少提高50%，你再也不用用鼠标去点击你想访问的链接，使用vimium只需要按几个键就行。借用作者的一句话，没有它我都不知道该怎么浏览网页了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在ThoughtWorks工作两个多月的总结]]></title>
    <link href="http://www.huangbowen.net/blog/2012/08/08/zai-thoughtworksgong-zuo-liang-ge-duo-yue-de-zong-jie/"/>
    <updated>2012-08-08T01:49:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2012/08/08/zai-thoughtworksgong-zuo-liang-ge-duo-yue-de-zong-jie</id>
    <content type="html"><![CDATA[<p>从5月份加入ThoughtWorks到今天，已经接近3个月了。这3个月对我来说意义重大，时间虽然很短，但是我学到了很多很多的东西。我感到需要对自己做一番总结，使自己能够持续快速的进步。
先说说这2个多月在ThoughtWorks中我的改变。</p>

<ol>
<li><p><strong>行为意识的改变，变得更加积极主动。</strong>在ThoughtWorks是没有Title的，每天没有人会强迫你干什么，而自己要非常的积极主动来做事情，为团队的发展贡献出自己的力量。</p></li>
<li><p><strong>思考方式的改变，多问为什么，而不盲从。</strong>ThoughtWorks的每个人都很健谈，尤其是谈论技术来滔滔不绝，这些都是建立在对目标了解透彻的基础上。所以我在思考问题的时候，应该抓住重点，往深处挖掘，而不是停留在表面浅尝辄止。</p></li>
<li><p><strong>学习能力的改变。</strong>一个人能力有多大，很大一部分取决于他的自我学习能力。学习能力强，接收新事物快，他的知识会源源不断的涌来。在公司这段时间，我发现大家的自我学习能力都很强，一个新技术、新工具很快就能上手使用。我在平时注意收集和观察别人的学习方式，并且尝试使用到自己身上，收到了一定的效果。</p></li>
</ol>


<p>当然，在enjoy的同时，也伴随着巨大的压力。我认真的分析了一下自身，发现自身的不足主要存在与两个方面：</p>

<p><strong>一是英语。</strong>自己大学毕业后在工作中就基本没怎么用过口语了，只是有时候看文档接触下英语。这种情况导致我的英语退化的厉害，而且这点是短时间内无法改善的。</p>

<p><strong>二是技术。</strong>虽然自己有三年工作经验，但是主要都是C#方面的，而自己的目前项目中却使用的是Java。自己面临短时间内迅速掌握Java Spring，Spring Web Flow，Spring security，Maven，jasmine…..等以前自己几乎没接触过的东西，这对自己是一个巨大的挑战。</p>

<p>认识到了自己的不足，接下来就是要拿出实际的Action。随着这段时间的学习，我找了一些方法来尽快的弥补自身的不足。</p>

<p><strong>英语方面：</strong></p>

<ol>
<li><p>针对词汇量少的问题，在平时工作中将自己遇到的不认识的单词或发音有误的单词记在本子上或者电子词典中。每天抽出半小时时间来将这些单词过一遍，不求一次记住，随着review的次数增多，好多单词都会变成自己的亲密伙伴。</p></li>
<li><p>针对
自己听力差的问题，我将一些VOA的音频放在MP3里，在上下班的路上的反复的倾听，体会那种英文的感觉。</p></li>
<li><p>针对自己浓重的“河南”口音问题，我在iCal里schedule了个时间，每天晚上的11点到12点跟着《英语导读1000句》念英语，训练口腔肌肉。</p></li>
<li><p>针对自己英文书写的问题，每天发给团队的邮件，比较important和difficult的让同组中的英文比较好的同事帮忙review，自己从review中总结需要注意的地方，使英文表达更专业和清晰。</p></li>
<li>在平时需要使用英语的时候，尽量克服自己胆怯的心理，发出自己的声音，不怕别人的嘲笑。（这点自己虽然意识到了，但是目前做的不是很好，还需要继续努力。）</li>
</ol>


<p><strong>技术方面：</strong></p>

<ol>
<li><p>积极参加公司的session和workshop，从中吸收到营养。</p></li>
<li><p>平时的pair过程中积极向同伴学习。</p></li>
<li><p>每天晚上下班回家后坚持主动学习,多多动手实践。</p></li>
<li><p>对于自己的每个技术点，尽量拿出一定的成果，比如写成博客或者写一个demo，眼看千遍不如手过一遍。</p></li>
<li><p>我们team规定每周每个人都要做一次内部session。通过准备session和讲session加深自己对内容的理解。</p></li>
</ol>


<p>当然，这些措施只是自己目前能够想到的和在做的。也许大家有更好的方法，可以互相学习。</p>

<p>感谢Yaoyao同学和Matt对我英文的指导，感谢周周同学的周末Workshop和平时对我的严格要求，感谢公司其他人对我的帮助和feedback。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在本地安装git的HTML帮助文档]]></title>
    <link href="http://www.huangbowen.net/blog/2012/08/08/zai-ben-di-an-zhuang-gitde-htmlbang-zhu-wen-dang/"/>
    <updated>2012-08-08T00:48:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2012/08/08/zai-ben-di-an-zhuang-gitde-htmlbang-zhu-wen-dang</id>
    <content type="html"><![CDATA[<p>当我们想查询git某条指令如何使用时，<a href="http://git-scm.com/documentation">git</a>官网有详尽的文档供我们查看。在命令行下我们也可以随时通过 git &#8211;help的方法查看某条命令的详细帮助。</p>

<p>相对于在Terminal中内置的帮助文档，HTML格式更清晰，更详尽。</p>

<p>但是如果我想在无法上网的情况下也能查看git官网的详尽的帮助文档，有没有办法那？当然有了，下面就教大家如何在本机搭建git的HTML帮助文档。</p>

<p>在Windows上设置很简单，主需要安装<a href="http://code.google.com/p/msysgit/">Msysgit</a>,就会自动为你设置起本地的HTML帮助文档。所以这篇文章主要讲在Mac和Linux下该如何实现。</p>

<p><strong>一，运行git help –-web commit查看git默认的保存html文件的路径。</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git <span class="nb">help</span> --web commit
</span><span class='line'>
</span><span class='line'><span class="c">#Attempt to open the html help for the commit command</span>
</span><span class='line'>
</span><span class='line'><span class="c">#fatal: &#39;/usr/local/git/share/doc/git-doc&#39;: not a documentationdirectory.</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们得到了git默认的存放html文件的路径是<code>/usr/local/git/share/doc/git-doc</code>。当然你得到的路径有可能和这个不一样。</p>

<p><strong>二，切换到这个路径下，迁出存放在git repo中的html文件。</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo mkdir -p /usr/local/git/share/doc
</span><span class='line'><span class="c"># Create the path for the docs to be installed to cd #/usr/local/git/share/doc</span>
</span><span class='line'><span class="nv">$ </span>sudo git clone git://git.kernel.org/pub/scm/git/git-htmldocs.git git-doc
</span><span class='line'><span class="c"># Clone the git repo and check out the html documents branch</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>三，运行 vim ~/.gitconfig 命令，在.gitconfig文件中加入如下配置。</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>[help]
</span><span class='line'>
</span><span class='line'>        format = web
</span><span class='line'>
</span><span class='line'>[web]
</span><span class='line'>
</span><span class='line'>        browser = open
</span></code></pre></td></tr></table></div></figure>


<p>当然也可以使用其他的编辑器来编辑.gitconfig文件。</p>

<p>只要这三步就设置起了本地的HTML帮助文档。你可以再次运行<code>git help -–web commit</code>，就可以查看在浏览器中自动打开的HTML帮助说明页面了。</p>

<p>如果git的帮助文档更新了，如何同步到本地那？很简单，运行<code>git pull</code>命令就行。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> /usr/local/git/share/doc/git-doc
</span><span class='line'><span class="nv">$ </span>sudo git pull
</span></code></pre></td></tr></table></div></figure>


<p>如何查看这些帮助文档那？更简单了，例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git remote --help
</span></code></pre></td></tr></table></div></figure>


<p>就会自动在浏览器中打开针对remote的帮助文档。</p>
]]></content>
  </entry>
  
</feed>
