<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[黄博文的地盘]]></title>
  <link href="http://www.huangbowen.net/atom.xml" rel="self"/>
  <link href="http://www.huangbowen.net/"/>
  <updated>2014-03-13T02:18:15+10:00</updated>
  <id>http://www.huangbowen.net/</id>
  <author>
    <name><![CDATA[黄博文]]></name>
    <email><![CDATA[huangbowen521@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Spring-Context之三:使用XML和Groovy DSL配置Bean]]></title>
    <link href="http://www.huangbowen.net/blog/2014/03/13/use-groovy-dsl-in-spring/"/>
    <updated>2014-03-13T02:13:00+10:00</updated>
    <id>http://www.huangbowen.net/blog/2014/03/13/use-groovy-dsl-in-spring</id>
    <content type="html"><![CDATA[<p>在第一讲中显示了如何使用注解配置bean，其实这是Spring3引进的特性,Spring2使用的是XML的方式来配置Bean，那时候漫天的XML文件使得Spring有着<code>配置地狱</code>的称号。Spring也一直在力求改变这一缺陷。Spring3引入的注解方式确实使配置精简不少，而Spring4则引入了Groovy DSL来配置，其语法比XML要简单很多，而且Groovy本身是门语言，其配置文件就相当于代码，可以用来实现复杂的配置。</p>

<!-- more -->


<p>废话少说，让我们来对Groovy DSL配置来个第一次亲密接触。</p>

<p>首先我们先实现一个XML的bean配置，沿用第一讲中的例子。</p>

<figure class='code'><figcaption><span>configuration.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.springframework.org/schema/beans&quot;</span>
</span><span class='line'>       <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>       <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://www.springframework.org/schema/beans</span>
</span><span class='line'><span class="s">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;movieService&quot;</span> <span class="na">class=</span><span class="s">&quot;huangbowen.net.service.DefaultMovieService&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;cinema&quot;</span> <span class="na">class=</span><span class="s">&quot;huangbowen.net.service.Cinema&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;movieService&quot;</span> <span class="na">ref=</span><span class="s">&quot;movieService&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'><span class="nt">&lt;/beans&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个XML文件就不用我多做解释了，很清晰明了。Ok，照例写个测试来测一下。</p>

<figure class='code'><figcaption><span>XmlConfigurationTest.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">huangbowen</span><span class="o">.</span><span class="na">net</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">huangbowen.net.service.Cinema</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">huangbowen.net.service.DefaultMovieService</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.junit.runner.RunWith</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.context.ApplicationContext</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.test.context.ContextConfiguration</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.test.context.junit4.SpringJUnit4ClassRunner</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">hamcrest</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">IsInstanceOf</span><span class="o">.</span><span class="na">instanceOf</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">junit</span><span class="o">.</span><span class="na">Assert</span><span class="o">.</span><span class="na">assertNotNull</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">junit</span><span class="o">.</span><span class="na">Assert</span><span class="o">.</span><span class="na">assertThat</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@RunWith</span><span class="o">(</span><span class="n">SpringJUnit4ClassRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="nd">@ContextConfiguration</span><span class="o">(</span><span class="n">locations</span> <span class="o">=</span> <span class="o">{</span><span class="s">&quot;/configuration.xml&quot;</span><span class="o">})</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">XmlConfigurationTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Autowired</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">ApplicationContext</span> <span class="n">applicationContext</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Autowired</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Cinema</span> <span class="n">cinema</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">shouldGetCinemaInstance</span><span class="o">()</span>  <span class="o">{</span>
</span><span class='line'>        <span class="n">Cinema</span> <span class="n">cinema</span> <span class="o">=</span> <span class="n">applicationContext</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="n">Cinema</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>        <span class="n">assertNotNull</span><span class="o">(</span><span class="n">cinema</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">shouldGetAutowiredCinema</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">assertNotNull</span><span class="o">(</span><span class="n">cinema</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">shouldGetMovieServiceInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">assertNotNull</span><span class="o">(</span><span class="n">cinema</span><span class="o">.</span><span class="na">getMovieService</span><span class="o">());</span>
</span><span class='line'>        <span class="n">assertThat</span><span class="o">(</span><span class="n">cinema</span><span class="o">.</span><span class="na">getMovieService</span><span class="o">(),</span> <span class="n">instanceOf</span><span class="o">(</span><span class="n">DefaultMovieService</span><span class="o">.</span><span class="na">class</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个测试与第二讲中的测试基本上一样，不过Spring配置的读取是从configuration.xml来的，在@ContextConfiguration中指定了该xml文件为Spring配置文件。</p>

<p>如果想使用Groovy DSL的话第一步需要引入groovy依赖。</p>

<figure class='code'><figcaption><span>pom.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>org.codehaus.groovy<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>groovy-all<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version&gt;</span>2.2.2<span class="nt">&lt;/version&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后就可以新建一个groovy文件来实现配置编写。</p>

<figure class='code'><figcaption><span>Configuration.groovy</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">beans</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">movieService</span> <span class="n">huangbowen</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">service</span><span class="o">.</span><span class="na">DefaultMovieService</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">cinema</span> <span class="n">huangbowen</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">service</span><span class="o">.</span><span class="na">Cinema</span><span class="o">,</span> <span class="n">movieService</span> <span class="o">:</span> <span class="n">movieService</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这其实体现不出来Groovy DSL的强大灵活，因为我们的例子太简单了。</p>

<p>beans相当于xml中的beans标签，第一行中是 bean id + class的形式。
第二行是bean id + class + properties map的形式。第二个参数是一个map数组，分别对应property和值。</p>

<p>实现同样的Bean配置有很多种写法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">movieService</span> <span class="o">(</span><span class="n">huangbowen</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">service</span><span class="o">.</span><span class="na">DefaultMovieService</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">cinema</span><span class="o">(</span><span class="n">huangbowen</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">service</span><span class="o">.</span><span class="na">Cinema</span><span class="o">,</span> <span class="o">{</span><span class="n">movieService</span> <span class="o">:</span> <span class="n">movieService</span><span class="o">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面这种其实是Groovy语法的一个特性，在调用方法时括号是可选的，既可以加，也可以不加。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">movieService</span> <span class="n">huangbowen</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">service</span><span class="o">.</span><span class="na">DefaultMovieService</span>
</span><span class='line'>
</span><span class='line'><span class="nf">cinema</span> <span class="o">(</span><span class="n">huangbowen</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">service</span><span class="o">.</span><span class="na">Cinema</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">movieService</span> <span class="o">:</span><span class="n">ref</span> <span class="n">movieService</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面这中使用了另一个设置属性的方法，通过一个闭包将属性设置进去。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">movieService</span> <span class="n">huangbowen</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">service</span><span class="o">.</span><span class="na">DefaultMovieService</span>
</span><span class='line'>
</span><span class='line'><span class="nf">cinema</span> <span class="o">(</span><span class="n">huangbowen</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">service</span><span class="o">.</span><span class="na">Cinema</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">movieService</span> <span class="o">:</span> <span class="n">movieService</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这种更好理解了，ref方法也是可选的。</p>

<p>来照旧写个测试来测一下。</p>

<figure class='code'><figcaption><span>GroovyDSLConfigurationTest.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">huangbowen</span><span class="o">.</span><span class="na">net</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">huangbowen.net.service.Cinema</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">huangbowen.net.service.DefaultMovieService</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.junit.runner.RunWith</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.support.BeanDefinitionReader</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.context.ApplicationContext</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.context.support.GenericApplicationContext</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.test.context.ContextConfiguration</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.test.context.junit4.SpringJUnit4ClassRunner</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.test.context.support.AbstractGenericContextLoader</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">huangbowen</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">GroovyDSLConfigurationTest</span><span class="o">.*;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">hamcrest</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">IsInstanceOf</span><span class="o">.</span><span class="na">instanceOf</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">junit</span><span class="o">.</span><span class="na">Assert</span><span class="o">.</span><span class="na">assertNotNull</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">junit</span><span class="o">.</span><span class="na">Assert</span><span class="o">.</span><span class="na">assertThat</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@RunWith</span><span class="o">(</span><span class="n">SpringJUnit4ClassRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="nd">@ContextConfiguration</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;classpath:Configuration.groovy&quot;</span><span class="o">,</span> <span class="n">loader</span> <span class="o">=</span> <span class="n">GenericGroovyContextLoader</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">GroovyDSLConfigurationTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">GenericGroovyContextLoader</span> <span class="kd">extends</span>
</span><span class='line'>            <span class="n">AbstractGenericContextLoader</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">protected</span> <span class="n">BeanDefinitionReader</span> <span class="nf">createBeanDefinitionReader</span><span class="o">(</span>
</span><span class='line'>                <span class="n">GenericApplicationContext</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">new</span> <span class="nf">GroovyBeanDefinitionReader</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">protected</span> <span class="n">String</span> <span class="nf">getResourceSuffix</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="s">&quot;.groovy&quot;</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Autowired</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">ApplicationContext</span> <span class="n">applicationContext</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Autowired</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Cinema</span> <span class="n">cinema</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">shouldGetCinemaInstance</span><span class="o">()</span>  <span class="o">{</span>
</span><span class='line'>        <span class="n">Cinema</span> <span class="n">cinema</span> <span class="o">=</span> <span class="n">applicationContext</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="n">Cinema</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>        <span class="n">assertNotNull</span><span class="o">(</span><span class="n">cinema</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">shouldGetAutowiredCinema</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">assertNotNull</span><span class="o">(</span><span class="n">cinema</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">shouldGetMovieServiceInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">assertNotNull</span><span class="o">(</span><span class="n">cinema</span><span class="o">.</span><span class="na">getMovieService</span><span class="o">());</span>
</span><span class='line'>        <span class="n">assertThat</span><span class="o">(</span><span class="n">cinema</span><span class="o">.</span><span class="na">getMovieService</span><span class="o">(),</span> <span class="n">instanceOf</span><span class="o">(</span><span class="n">DefaultMovieService</span><span class="o">.</span><span class="na">class</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在集成测试中如果加载xml配置文件，Spring提供了GenericXmlContextLoader类，如果加载注解方式的配置类，Spring提供了AnnotationConfigContextLoader类。但是对于Groovy配置文件Spring testContext框架还未提供相应的Loader，所以在本测试方法中需要自己实现一个Loader，其实也简单，只要实现两个方法即可。</p>

<p>本例中的源码请在<a href="https://github.com/huangbowen521/Study">我的GitHub</a>上自行下载。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring-Context之二:使用Spring提供的测试框架进行测试]]></title>
    <link href="http://www.huangbowen.net/blog/2014/03/12/use-spring-test/"/>
    <updated>2014-03-12T01:01:00+10:00</updated>
    <id>http://www.huangbowen.net/blog/2014/03/12/use-spring-test</id>
    <content type="html"><![CDATA[<p>Spring框架是无侵入性的，所以你的代码可以完全是POJO（plain old java object），直接使用Junit就可以完成大部分的单元测试。但是在集成测试方面就比较吃力了。单元测试层面你可以mock一些依赖对象，但是集成测试时需要真实的依赖对象，而这些对象都是在Spring容器的控制之下。那么如何在引入了Spring的情况下进行集成测试那？别着急，Spring框架早为我们想到了这点，本身提供了集成测试的功能。</p>

<!-- more -->


<p>就拿上一次那个简单的例子来做实验吧。</p>

<p>首先引入对junit以及spring-test库的依赖。</p>

<figure class='code'><figcaption><span>pom.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>   <span class="nt">&lt;dependencies&gt;</span>
</span><span class='line'>        <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>            <span class="nt">&lt;groupId&gt;</span>junit<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;artifactId&gt;</span>junit<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;version&gt;</span>4.11<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>            <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>        <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>            <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;artifactId&gt;</span>spring-test<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;version&gt;</span>4.0.2.RELEASE<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/dependencies&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>spring-test模块是专门为使用了spring框架的项目进行集成测试的辅助类库。其有以下几个目的。</p>

<ul>
<li><p>提供在运行测试时对Spring IOC容器的缓存，提高集成测试速度。</p></li>
<li><p>对测试实例提供依赖注入功能。</p></li>
<li><p>集成测试中提供事务管理。</p></li>
<li><p>提供一些辅助类库帮助开发者更好的编写集成测试。</p></li>
</ul>


<p>然后新建一个ApplicationTest.java类，代码如下所示。</p>

<figure class='code'><figcaption><span>ApplicationTest.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">huangbowen</span><span class="o">.</span><span class="na">net</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">huangbowen.net.service.Cinema</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.junit.runner.RunWith</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.context.ApplicationContext</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.test.context.ContextConfiguration</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.test.context.junit4.SpringJUnit4ClassRunner</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">junit</span><span class="o">.</span><span class="na">Assert</span><span class="o">.</span><span class="na">assertNotNull</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@RunWith</span><span class="o">(</span><span class="n">SpringJUnit4ClassRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="nd">@ContextConfiguration</span><span class="o">(</span><span class="n">classes</span> <span class="o">=</span> <span class="o">{</span><span class="n">Application</span><span class="o">.</span><span class="na">class</span><span class="o">})</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ApplicationTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Autowired</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">ApplicationContext</span> <span class="n">applicationContext</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Autowired</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Cinema</span> <span class="n">cinema</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">shouldGetCinemaInstance</span><span class="o">()</span>  <span class="o">{</span>
</span><span class='line'>        <span class="n">Cinema</span> <span class="n">cinema</span> <span class="o">=</span> <span class="n">applicationContext</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="n">Cinema</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>        <span class="n">assertNotNull</span><span class="o">(</span><span class="n">cinema</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">shouldGetAutowiredCinema</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">assertNotNull</span><span class="o">(</span><span class="n">cinema</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">shouldGetMovieServiceInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">assertNotNull</span><span class="o">(</span><span class="n">cinema</span><span class="o">.</span><span class="na">getMovieService</span><span class="o">());</span>
</span><span class='line'>        <span class="n">assertThat</span><span class="o">(</span><span class="n">cinema</span><span class="o">.</span><span class="na">getMovieService</span><span class="o">(),</span> <span class="n">instanceOf</span><span class="o">(</span><span class="n">DefaultMovieService</span><span class="o">.</span><span class="na">class</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在本例中ApplicationTest有两个注解。@RunWith(SpringJUnit4ClassRunner.class).是Spring TestContext 框架提供的一个自定义的JUnit runner，这样在测试类中就可以获取ApplicationContext，甚至直接进行依赖注入，使用事务控制测试方法执行等。声明了@RunWith(SpringJUnit4ClassRunner.class)以后一般还要声明@ContextConfiguration注解。这个注解是用于告诉测试类本项目中的Spring配置。这里我们传入Application.class类，因为这个类中配置了Spring的bean。</p>

<p>然后就可以在测试类中使用强大的@Autowired功能了。我们写了三个测试方法，第一个是通过Autowired功能拿到ApplicationContext，第二个是通过Autowired功能直接拿到cinema，第三个则是验证Cinema中的MovieService是被正确注入了的。</p>

<p>Ok,今天就到这里。本例中的源码请在<a href="https://github.com/huangbowen521/Study">我的GitHub</a>上自行下载。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring-Context之一:一个简单的例子]]></title>
    <link href="http://www.huangbowen.net/blog/2014/03/11/first-exmaple-of-spring-conext/"/>
    <updated>2014-03-11T02:27:00+10:00</updated>
    <id>http://www.huangbowen.net/blog/2014/03/11/first-exmaple-of-spring-conext</id>
    <content type="html"><![CDATA[<p>很久之前就想系统的学习和掌握Spring框架，但是拖了很久都没有行动。现在趁着在外出差杂事不多，就花时间来由浅入深的研究下Spring框架。Spring框架这几年来已经发展成为一个巨无霸产品。从最初的只是用来作为依赖注入到现在已经是无法不包。其涉及的领域有依赖注入、MVC、JMS、Web flow、Batch job、Web service、Security…..几乎是涵盖了技术开发的所有方面。本人虽然从事Java语言开发时间不长，但是对Spring中的很多组件都有所涉猎，比如上面列出的那几个都有用过。可以说Spring是Java程序员必须要掌握的一个库。</p>

<!-- more -->


<p>现在Spring的最新的稳定版本是4.0.2,该版本中包含了大量的新特性，是比较重要的一次release。本系列将基本使用该版本进行讲解。</p>

<p>第一讲就用一个简单的例子开始吧，初步学会使用Spring-Context的依赖注入功能。</p>

<p>首先使用maven创建一个新的项目。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$:</span> mvn archetype:generate
</span></code></pre></td></tr></table></div></figure>


<p>创建成功后在pom.xml文件中加入对Spring-Context的依赖。</p>

<figure class='code'><figcaption><span>pom.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;dependencies&gt;</span>
</span><span class='line'>    <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>        <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>        <span class="nt">&lt;artifactId&gt;</span>spring-context<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>        <span class="nt">&lt;version&gt;</span>4.0.2.RELEASE<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependencies&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后我们创建一个MovieService的接口。</p>

<figure class='code'><figcaption><span>MovieService.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">huangbowen</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">service</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">MovieService</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">String</span> <span class="nf">getMovieName</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>创建一个DefaultMovieService来实现这个接口。</p>

<figure class='code'><figcaption><span>DefaultMovieService.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">huangbowen</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">service</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DefaultMovieService</span> <span class="kd">implements</span> <span class="n">MovieService</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getMovieName</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;A Touch of Sin&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>然后创建一个Cinema类，会使用MoviceService来放电影。</p>

<figure class='code'><figcaption><span>Cinema.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">huangbowen</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">service</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.stereotype.Component</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Component</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Cinema</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Autowired</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">MovieService</span> <span class="n">movieService</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">printMovieName</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">movieService</span><span class="o">.</span><span class="na">getMovieName</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>建立一个Application类。</p>

<figure class='code'><figcaption><span>Application.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">huangbowen</span><span class="o">.</span><span class="na">net</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">huangbowen.net.service.Cinema</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">huangbowen.net.service.DefaultMovieService</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">huangbowen.net.service.MovieService</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.AnnotationConfigApplicationContext</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.ComponentScan</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Configuration</span>
</span><span class='line'><span class="nd">@ComponentScan</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Application</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Bean</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">MovieService</span> <span class="nf">getMovieService</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">DefaultMovieService</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span> <span class="n">String</span><span class="o">[]</span> <span class="n">args</span> <span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="n">AnnotationConfigApplicationContext</span> <span class="n">applicationContext</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="n">Application</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Cinema</span> <span class="n">cinema</span> <span class="o">=</span> <span class="n">applicationContext</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="n">Cinema</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>        <span class="n">cinema</span><span class="o">.</span><span class="na">printMovieName</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ok,运行main函数，得到控制台输出：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>A Touch of Sin
</span></code></pre></td></tr></table></div></figure>


<p>本例子中主要使用Annotation功能来实现对MoviceService的注入。我们将Cinema.java的头部标注为@Component说明该类交由Spring托管。而Cinema.java中的属性MoviceService标注为@Autowired，则Spring在初始化Cinema类时会从Application Context中找到类型为MovieService的Bean，并赋值给Cinema。在Application.java中我们声明了一个类型为MovieService的Bean。并且标注Application.java为@Configuration,这是告诉Spring在Application.java中定义了一个或多个@Bean方法，让Spring容器可以在运行时生成这些Bean。@ComponentScan则会让Spring容器自动扫描当前package下的标有@Component的class，这些class都将由Spring托管。</p>

<p>本例中的源码请在<a href="https://github.com/huangbowen521/Study">我的GitHub</a>上自行下载。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActiveMQ第五弹:增加ReDelivery功能]]></title>
    <link href="http://www.huangbowen.net/blog/2014/03/10/use-redelivery-in-activemq/"/>
    <updated>2014-03-10T01:17:00+10:00</updated>
    <id>http://www.huangbowen.net/blog/2014/03/10/use-redelivery-in-activemq</id>
    <content type="html"><![CDATA[<p>在使用Message Queue的过程中，总会由于种种原因而导致消息失败。一个经典的场景是一个生成者向Queue中发消息，里面包含了一组邮件地址和邮件内容。而消费者从Queue中将消息一条条读出来，向指定邮件地址发送邮件。消费者在发送消息的过程中由于种种原因会导致失败，比如网络超时、当前邮件服务器不可用等。这样我们就希望建立一种机制，对于未发送成功的邮件再重新发送，也就是重新处理。重新处理超过一定次数还不成功，就放弃对该消息的处理，记录下来，继续对剩余消息进行处理。</p>

<!-- more -->


<p>ActiveMQ为我们实现了这一功能，叫做ReDelivery(重新投递)。当消费者在处理消息时有异常发生，会将消息重新放回Queue里，进行下一次处理。当超过重试次数时，消息会被放置到一个特殊的Queue中，即Dead Letter Queue,简称DLQ，用于进行后续分析。</p>

<p>废话不多说，一起来实现吧。（该示例中的全部代码已放置到<a href="https://github.com/huangbowen521/SpringJMSSample">GitHub</a>上，请自行下载。）</p>

<p>还是接着本系列中的示例代码来进行。要实现ReDelivery功能，要给LinsterContainer加上事务处理。设置SimpleMessageListenerContainer的sessionTransacted属性为true。</p>

<figure class='code'><figcaption><span>activeMQConnection.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>    <span class="c">&lt;!-- Message Receiver Definition --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;messageReceiver&quot;</span> <span class="na">class=</span><span class="s">&quot;huangbowen.net.jms.retry.MessageReceiver&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">&quot;org.springframework.jms.listener.SimpleMessageListenerContainer&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;connectionFactory&quot;</span> <span class="na">ref=</span><span class="s">&quot;connectionFactory&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;destinationName&quot;</span> <span class="na">value=</span><span class="s">&quot;${jms.queue.name}&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;messageListener&quot;</span> <span class="na">ref=</span><span class="s">&quot;messageReceiver&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;sessionTransacted&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后创建一个ReDeliveryPolicy，来定义ReDelivery的机制。</p>

<figure class='code'><figcaption><span>activeMQConnection.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>    <span class="nt">&lt;amq:redeliveryPolicy</span> <span class="na">id=</span><span class="s">&quot;activeMQRedeliveryPolicy&quot;</span> <span class="na">destination=</span><span class="s">&quot;#defaultDestination&quot;</span> <span class="na">redeliveryDelay=</span><span class="s">&quot;100&quot;</span> <span class="na">maximumRedeliveries=</span><span class="s">&quot;4&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里设置ReDelivery的时间间隔是100毫秒，最大重发次数是4次。</p>

<p>在ActiveMQ的Connection Factory中应用这个Policy。就是给Connection Factory设置属性redeliveryPolicy为我们刚刚创建的Policy。</p>

<figure class='code'><figcaption><span>activeMQConnection.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>    <span class="c">&lt;!-- Activemq connection factory --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;amqConnectionFactory&quot;</span> <span class="na">class=</span><span class="s">&quot;org.apache.activemq.ActiveMQConnectionFactory&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;brokerURL&quot;</span> <span class="na">value=</span><span class="s">&quot;${jms.broker.url}?&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;useAsyncSend&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;redeliveryPolicy&quot;</span> <span class="na">ref=</span><span class="s">&quot;activeMQRedeliveryPolicy&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样ReDelivery机制就设置好了。那么怎么能证明我不是在忽悠你们那？当然最好的办法是写自动化测试来测试这个功能了。</p>

<p>首先修改下broker的配置，将其对消息的持久化设置为false，这样每次运行测试时Queue中消息都为0，用于还原现场。然后设置一个Destination Policy，当消息超过重试次数仍未被正确处理时，就把它放入到以<code>DLQ.</code>为前缀的Queue中。由于ActiveMQ默认对非持久化的Message不放入DLQ中的，所以手动设置processNonPersistent为true。</p>

<figure class='code'><figcaption><span>activeMQConnection.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>    <span class="nt">&lt;amq:broker</span> <span class="na">id=</span><span class="s">&quot;activeMQBroker&quot;</span> <span class="na">persistent=</span><span class="s">&quot;false&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;amq:transportConnectors&gt;</span>
</span><span class='line'>            <span class="nt">&lt;amq:transportConnector</span> <span class="na">uri=</span><span class="s">&quot;${jms.broker.url}&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/amq:transportConnectors&gt;</span>
</span><span class='line'>        <span class="nt">&lt;amq:destinationPolicy&gt;</span>
</span><span class='line'>            <span class="nt">&lt;amq:policyMap&gt;</span>
</span><span class='line'>                <span class="nt">&lt;amq:policyEntries&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;amq:policyEntry</span> <span class="na">queue=</span><span class="s">&quot;&gt;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;amq:deadLetterStrategy&gt;</span>
</span><span class='line'>                            <span class="nt">&lt;amq:individualDeadLetterStrategy</span>
</span><span class='line'>                                    <span class="na">queuePrefix=</span><span class="s">&quot;DLQ.&quot;</span> <span class="na">useQueueForQueueMessages=</span><span class="s">&quot;true&quot;</span> <span class="na">processExpired=</span><span class="s">&quot;true&quot;</span>
</span><span class='line'>                                    <span class="na">processNonPersistent=</span><span class="s">&quot;true&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;/amq:deadLetterStrategy&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;/amq:policyEntry&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/amq:policyEntries&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/amq:policyMap&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/amq:destinationPolicy&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/amq:broker&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后新建一个MessageListener，当接收到消息就抛出一个异常，这样用以启动ReDelivery机制。</p>

<figure class='code'><figcaption><span>retry/MessageReceiver</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">huangbowen</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">jms</span><span class="o">.</span><span class="na">retry</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.jms.support.JmsUtils</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.jms.JMSException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.jms.Message</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.jms.MessageListener</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.jms.TextMessage</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MessageReceiver</span> <span class="kd">implements</span> <span class="n">MessageListener</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onMessage</span><span class="o">(</span><span class="n">Message</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span><span class="o">(</span><span class="n">message</span> <span class="k">instanceof</span> <span class="n">TextMessage</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">TextMessage</span> <span class="n">textMessage</span> <span class="o">=</span> <span class="o">(</span><span class="n">TextMessage</span><span class="o">)</span> <span class="n">message</span><span class="o">;</span>
</span><span class='line'>            <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">String</span> <span class="n">text</span> <span class="o">=</span> <span class="n">textMessage</span><span class="o">.</span><span class="na">getText</span><span class="o">();</span>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;Received: %s&quot;</span><span class="o">,</span><span class="n">text</span><span class="o">));</span>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="nf">JMSException</span><span class="o">(</span><span class="s">&quot;process failed&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">JMSException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;there is JMS exception: &quot;</span> <span class="o">+</span> <span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">()</span> <span class="o">);</span>
</span><span class='line'>                <span class="k">throw</span> <span class="n">JmsUtils</span><span class="o">.</span><span class="na">convertJmsAccessException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后新建一个集成测试类。</p>

<figure class='code'><figcaption><span>ReDeliveryFunctionIntegrationTest.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">huangbowen</span><span class="o">.</span><span class="na">net</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">huangbowen.net.jms.MessageSender</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.jms.core.BrowserCallback</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.jms.core.JmsTemplate</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.test.annotation.DirtiesContext</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.test.context.ContextConfiguration</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.test.context.junit4.AbstractJUnit4SpringContextTests</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.jms.JMSException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.jms.QueueBrowser</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.jms.Session</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.Enumeration</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">hamcrest</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">Is</span><span class="o">.</span><span class="na">is</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">junit</span><span class="o">.</span><span class="na">Assert</span><span class="o">.</span><span class="na">assertThat</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@ContextConfiguration</span><span class="o">(</span><span class="n">locations</span> <span class="o">=</span> <span class="o">{</span><span class="s">&quot;/retry/activeMQConnection.xml&quot;</span><span class="o">})</span>
</span><span class='line'><span class="nd">@DirtiesContext</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ReDeliveryFunctionIntegrationTest</span> <span class="kd">extends</span> <span class="n">AbstractJUnit4SpringContextTests</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="kd">static</span> <span class="n">String</span> <span class="n">DLQ</span> <span class="o">=</span> <span class="s">&quot;DLQ.bar&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="nd">@Autowired</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">JmsTemplate</span> <span class="n">jmsTemplate</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Autowired</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">MessageSender</span> <span class="n">messageSender</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="nf">getMessagesInDLQ</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">jmsTemplate</span><span class="o">.</span><span class="na">browse</span><span class="o">(</span><span class="n">DLQ</span><span class="o">,</span> <span class="k">new</span> <span class="n">BrowserCallback</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="n">Integer</span> <span class="nf">doInJms</span><span class="o">(</span><span class="n">Session</span> <span class="n">session</span><span class="o">,</span> <span class="n">QueueBrowser</span> <span class="n">browser</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">JMSException</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">Enumeration</span> <span class="n">messages</span> <span class="o">=</span> <span class="n">browser</span><span class="o">.</span><span class="na">getEnumeration</span><span class="o">();</span>
</span><span class='line'>                <span class="kt">int</span> <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>                <span class="k">while</span><span class="o">(</span><span class="n">messages</span><span class="o">.</span><span class="na">hasMoreElements</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">messages</span><span class="o">.</span><span class="na">nextElement</span><span class="o">();</span>
</span><span class='line'>                    <span class="n">total</span><span class="o">++;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">return</span>  <span class="n">total</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">});</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">shouldRetryIfExceptionHappened</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">assertThat</span><span class="o">(</span><span class="n">getMessagesInDLQ</span><span class="o">(),</span> <span class="n">is</span><span class="o">(</span><span class="mi">0</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">messageSender</span><span class="o">.</span><span class="na">send</span><span class="o">(</span><span class="s">&quot;this is a message&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">5000</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">assertThat</span><span class="o">(</span><span class="n">getMessagesInDLQ</span><span class="o">(),</span> <span class="n">is</span><span class="o">(</span><span class="mi">1</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们通过Spring的Autowired功能拿到配置中的JmsTemplate和MessageSender。使用JmsTemplate的brower方法来读取当前DLQ.bar Queue中有多少剩余的消息。用MessageSender来发送一条消息，这样即使我们有Listener来处理这条消息，但是由于每次都会抛出异常，超过限定次数后，被放置到了DLQ.bar中。我们检测DLQ.bar中的消息数量就可以知道ReDelivery功能是否正确。</p>

<p>运行测试，成功通过。这是日志信息：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>send: this is a message
</span><span class='line'>Received: this is a message
</span><span class='line'>there is JMS exception: process failed
</span><span class='line'>Received: this is a message
</span><span class='line'>there is JMS exception: process failed
</span><span class='line'>Received: this is a message
</span><span class='line'>there is JMS exception: process failed
</span><span class='line'>Received: this is a message
</span><span class='line'>there is JMS exception: process failed
</span><span class='line'>Received: this is a message
</span><span class='line'>there is JMS exception: process failed
</span><span class='line'>
</span><span class='line'>Process finished with exit code 0
</span></code></pre></td></tr></table></div></figure>


<p>本系列的全部示例代码请在<a href="https://github.com/huangbowen521/SpringJMSSample">https://github.com/huangbowen521/SpringJMSSample</a>下载。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何让你的简历脱颖而出]]></title>
    <link href="http://www.huangbowen.net/blog/2014/02/24/build-your-outstanding-resume/"/>
    <updated>2014-02-24T00:50:00+10:00</updated>
    <id>http://www.huangbowen.net/blog/2014/02/24/build-your-outstanding-resume</id>
    <content type="html"><![CDATA[<p>年后的2、3月份是每年换工作的高峰期。可能很多人在过年以前早都萌生了换工作的想法。过年时在亲朋好友的刺激下，更坚定了这个想法。年终奖既已到手，对前公司的最后一丝留恋也随之逝去。在各大招聘网上更新自己的简历，主动和猎头联系让其帮忙物色，新一轮大潮已经开始。</p>

<!-- more -->


<p>IT行业的招聘是个怪圈。企业缺人，很难招到合适的人才；程序员想要工作，找到理想的工作却不易。企业的要求应聘者达不到，应聘者的期望企业却无法满足。好工作职位不多，应聘者却于过江之鲫。</p>

<p>如果你是个大牛，那么恭喜你，不是你找工作，而是工作找你。如果你自认为是一个屌丝，那么在找工作的时候只能自求多福。如果你自认为自己是个小牛，只是苦于没有伯乐发现你，那就要看看你准备了那些东西来博得眼球。在当今在是个阿猫阿狗都敢在简历上写上精通XX，熟悉XX的时代，如何让自己的简历能够第一时间博得HR的芳心，顺利进行面试的环节，甚至通过面试最终环节，升职加薪，当上总经理，出任CEO，赢取白富美，走上人生巅峰那？</p>

<p>笔者在IT行业已经呆了5年多，时间不算长也不算短。期间有很多面试和被面试的经历。随着工作年限的增加，如何能够让自己的简历更加出色，是我一直在思考的问题。结合自己最近的面试经验和从HR那里得到的情报，我发现如果能在简历上列下以下东西，绝对会让你的简历立马脱颖而出。</p>

<ol>
<li><p>在简历中列出自己的博客地址。IT行业是个很特别的行业，似乎没有其他行业能够像IT行业这样能够从网络中学到几乎所有专业所需的知识。如何能展示出自己学习到的知识，证明自己肚里有货，博客无疑是一个既用不了多少成本，却能给自己带来丰厚回报的手段。关于写博客的好处我已不想累述。在简历中列出你的博客地址，会让HR直观的感受到你的积极主动、热爱学习的态度，无疑会给你加分不少。</p></li>
<li><p>给出自己在GitHub上的链接。当2008年GitHub横空出世时，用户轻而易举就超过了10万人。现在就连我那学校里的研究生师弟、师妹都开始使用GitHub，Social coding势不可挡。饭店应聘厨子都要试菜，公司招聘程序员当然希望能够看到应征者的程序作品。到底应征者能不能满足要求，在他的Github上随便查阅几次check in历史便可快速判定。你的项目有没有自动构建脚本?有没有单元测试?有没有自动化功能测试？你的代码是否clean？命名是否合理？应用了那些设计模式？使用了那些语言的特性？如果你真的有货，那么就不用和招聘方多费口舌，直接看以前写过的代码吧，那上面啥都有。</p></li>
<li><p>列出自己的豆瓣读书记录。网络虽然是IT行业萃取知识的最大途径，但是我们仍不能忽略书籍的力量。读一本好书远远胜过你在网上读100篇文章。网络资源的特点是碎片化、细节化。这样的知识大而全，没有脉络，读者往往捡了芝麻，丢了西瓜。而一本好书能够有效的将你学到的知识串联起来，形成体系。去年自己计划全年读30本书，后来读了将近20本，感觉收获巨大。应征者的读书记录也能在一定程度上反映出应征者的能力水平。如果能够再花时间写一些读书笔记那更再好不过了。</p></li>
<li><p>列出自己的翻译的文章、书籍，甚至出版自己的技术书籍。如果身为一个IT工程师，英文不行，那么你注定成为不了一个牛逼的工程师。练好英文，会给自己打开一扇大门，就像一条鱼从湖里游到了海里。自己在学习到第一手知识之余，将其翻译为中文，造福国内其他的程序员，百利而无一害。这也能让你的简历增色不少。翻译的文章多了，会有编辑找你翻译书籍，甚至自己出书也不无可能。</p></li>
</ol>


<p>以上四点足以让你在众多千篇一律的&#8221;精通XX,熟悉XX&#8221;的简历中脱颖而出。但是以上四点有个共同的特点，就是需要积累，需要坚持，这样才有实质的内容。这需要你好好的经营，短则一年，长则整个职业生涯。</p>

<p>从现在开始，坚持每周至少写一篇技术文章，一年就有50多篇。给自己定一个目标，一个月读2本书，那么一年就有24本。注册一个GitHub账号，将自己平时做练习的代码、做的小项目放上去，争取一年有超过200次提交。英文不行的开始学习英文，至少达到阅读技术文章无压力，一年的时间也够了吧，每个月翻译一篇自己喜欢的技术文章，一年也有12篇。</p>

<p>这样子坚持一年，就算一年前是个屌丝，现在你一定有底气说自己这一年来绝非一事无成。相信你应聘工作的时候会多份从容，少分自卑。如果一年时间你都坚持不下来，那么你就就要扪心自问究竟你比别人强在哪里？凭什么要求面试者多给你机会？</p>

<p>贫者愈贫，富者愈富，是马太效应在经济界的直白阐述。其实在IT届也可以应用马太效应，即知识丰富的人随着时间推移会越来越出色，得到机会更多，而平庸的人会越来越平庸，最后泯然众人。我毕业2年后才开始如饥似渴的学习知识，现在毕业不到5年，已经感受到了马太效应的力量。</p>

<p>现在是今年的招聘高峰期，还未找到理想工作的同仁不要气馁，厚积薄发一年，绝对会有惊喜。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActiveMQ第四弹:在HermesJMS中创建ActiveMQ session]]></title>
    <link href="http://www.huangbowen.net/blog/2014/02/23/configure-activemq-session-in-hermesjms/"/>
    <updated>2014-02-23T15:03:00+10:00</updated>
    <id>http://www.huangbowen.net/blog/2014/02/23/configure-activemq-session-in-hermesjms</id>
    <content type="html"><![CDATA[<p>Hermes JMS是一个开源免费的跨平台的JMS消息监听工具。它可以很方便和各种JMS框架集成和交互，可以用来监听、发送、接收、修改、存储消息等。这篇文章将讲解HermesJMS如何集成ActiveMQ并与其交互。</p>

<!-- more -->


<p>ActiveMQ在通过命令行运行时会自动启动一个Web终端，默认地址是<a href="http://localhost:8161/admin">http://localhost:8161/admin</a>，默认用户名/密码为admin/admin。通过这个web终端可以监控和操作ActiveMQ。但是这个Web终端有两个缺陷，第一是功能较弱，有些需求不能满足；第二是只有通过命令行启动ActiveMQ才会启动这个Web终端，如果是使用内置的broker，则无法使用该Web终端。而HermesJMS恰好弥补了这两个缺陷。</p>

<p>要想使用HermesJMS，首先要下载它。HermesJMS的官方网站是<a href="http://www.hermesjms.com/confluence/display/HJMS/Home">http://www.hermesjms.com/confluence/display/HJMS/Home</a>。其源码放置在sourceforge上。目前最新版本是1.14，已经两年多没推出新版本了。下载地址:<a href="http://sourceforge.net/projects/hermesjms/files/hermesjms/1.14/">http://sourceforge.net/projects/hermesjms/files/hermesjms/1.14/</a>。MAC系统的要下载dmg文件，其余系统可下载jar文件。</p>

<p>下载完成以后，要配置ActiveMQ到provider去。打开Hermes，点击<code>create new session</code>按钮，然后在界面下方选中Providers tab，添加对ActiveMQ的配置。我们以ActiveMQ5.8.0版本为例。首先创建一个名为ActiveMQ5.8.0的group，然后向其添加两个jar包:activemq-all-5.8.0.jar及geronimo-j2ee-management_1.1_spec_1.0.1.jar。这两个jar包都可以在ActiveMQ安装目录下找到。</p>

<p><img src="http://www.huangbowen.net/images/setupProvider.png" width="800"></p>

<p>然后就可以创建一个ActiveMQ的Session了。点击Sessions tab，输入以下配置信息。</p>

<p><img src="http://www.huangbowen.net/images/setupSession.png" width="800"></p>

<p>设置Plugin为ActiveMQ是为了能够自动检测当前Provider中的Queue和Topic信息。</p>

<p>然后启动一个ActiveMQ broker。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$:</span>/usr/local/Cellar/activemq/5.8.0/libexec<span class="nv">$ </span>activemq console xbean:./conf/activemq-demo.xml
</span></code></pre></td></tr></table></div></figure>


<p>这样就可以通过hermesJMS和其进行交互了。双击左侧菜单树中的msgQueue节点，可以查看该Queue中的信息。右键点击该节点选择<code>send message</code>向Queue中发送信息。</p>

<p><img src="http://www.huangbowen.net/images/sendMessage.png" width="800"></p>

<p>然后刷新Queue就可以看到消息已经在Queue里了。</p>

<p><img src="http://www.huangbowen.net/images/monitorQueue.png" width="800"></p>

<p>我们也可以打开ActiveMQ的Web终端向msgQueue中发送消息。地址:<a href="http://localhost:8161/admin/queues.jsp">http://localhost:8161/admin/queues.jsp</a></p>

<p><img src="http://www.huangbowen.net/images/webconsole.png" width="800"></p>

<p>然后在HermesJMS中刷新即可看到新的消息。</p>

<p><img src="http://www.huangbowen.net/images/msgFromWebConsole.png" width="800"></p>

<p>Hermes JMS还支持将消息存储到一个JDBC数据库中，具体可以查阅官方文档。</p>

<p>在使用Hermes JMS的过程中可以说到处是坑，软件弹出异常的次数不少于20次。可以说这个软件在健壮性、和兼容性方面还需要增强。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActiveMQ第三弹:在Spring中使用内置的Message Broker]]></title>
    <link href="http://www.huangbowen.net/blog/2014/02/22/using-embeded-broker-in-spring/"/>
    <updated>2014-02-22T19:16:00+10:00</updated>
    <id>http://www.huangbowen.net/blog/2014/02/22/using-embeded-broker-in-spring</id>
    <content type="html"><![CDATA[<p>在上个例子中我们演示了如何使用Spring JMS来向ActiveMQ发送消息和接收消息。但是这个例子需要先从控制台使用ActiveMQ提供的命令行功能启动一个Message Broker,然后才能运行示例。这个Message Broker就相当于一个server，无论是发送方还是接收方都可以连接到这个Server进行消息的处理。在某些情况下，让Message Broker和consumer启动在同一个JVM里面，通信效率肯定会高不少。</p>

<!-- more -->


<p>ActiveMQ提供了很多方式来创建内置的broker。这篇文章主要介绍使用Spring及XBean来创建一个内置的broker。</p>

<p>首先需要在项目中引入xbean-spring依赖项。</p>

<figure class='code'><figcaption><span>pom.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>      <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>          <span class="nt">&lt;groupId&gt;</span>org.apache.xbean<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;artifactId&gt;</span>xbean-spring<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;version&gt;</span>3.16<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后在Spring配置文件中加入以下代码:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>    <span class="nt">&lt;amq:broker</span> <span class="na">id=</span><span class="s">&quot;activeMQBroker&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;amq:transportConnectors&gt;</span>
</span><span class='line'>            <span class="nt">&lt;amq:transportConnector</span> <span class="na">uri=</span><span class="s">&quot;${jms.broker.url}&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/amq:transportConnectors&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/amq:broker&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意在Spring配置文件中还要加入Namespace的定义。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.springframework.org/schema/beans&quot;</span>
</span><span class='line'>       <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>       <span class="na">xmlns:amq=</span><span class="s">&quot;http://activemq.apache.org/schema/core&quot;</span>
</span><span class='line'>       <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span>
</span><span class='line'><span class="s">       http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core-5.8.0.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>...
</span><span class='line'>...
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/beans&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>完整的Spring配置如下。</p>

<figure class='code'><figcaption><span>embedBroker.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.springframework.org/schema/beans&quot;</span>
</span><span class='line'>       <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>       <span class="na">xmlns:amq=</span><span class="s">&quot;http://activemq.apache.org/schema/core&quot;</span>
</span><span class='line'>       <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span>
</span><span class='line'><span class="s">       http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core-5.8.0.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">&quot;org.springframework.beans.factory.config.PropertyPlaceholderConfigurer&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;location&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;value&gt;</span>application.properties<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- Activemq connection factory --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;amqConnectionFactory&quot;</span> <span class="na">class=</span><span class="s">&quot;org.apache.activemq.ActiveMQConnectionFactory&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="c">&lt;!--&lt;property name=&quot;brokerURL&quot; value=&quot;${jms.broker.url}&quot;/&gt;--&gt;</span>
</span><span class='line'>        <span class="nt">&lt;constructor-arg</span> <span class="na">index=</span><span class="s">&quot;0&quot;</span> <span class="na">value=</span><span class="s">&quot;${jms.broker.url}&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;useAsyncSend&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;amq:broker</span> <span class="na">id=</span><span class="s">&quot;activeMQBroker&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;amq:transportConnectors&gt;</span>
</span><span class='line'>            <span class="nt">&lt;amq:transportConnector</span> <span class="na">uri=</span><span class="s">&quot;${jms.broker.url}&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/amq:transportConnectors&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/amq:broker&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- ConnectionFactory Definition --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;connectionFactory&quot;</span> <span class="na">class=</span><span class="s">&quot;org.springframework.jms.connection.CachingConnectionFactory&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;constructor-arg</span> <span class="na">ref=</span><span class="s">&quot;amqConnectionFactory&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!--  Default Destination Queue Definition--&gt;</span>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;defaultDestination&quot;</span> <span class="na">class=</span><span class="s">&quot;org.apache.activemq.command.ActiveMQQueue&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;constructor-arg</span> <span class="na">index=</span><span class="s">&quot;0&quot;</span> <span class="na">value=</span><span class="s">&quot;${jms.queue.name}&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- JmsTemplate Definition --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;jmsTemplate&quot;</span> <span class="na">class=</span><span class="s">&quot;org.springframework.jms.core.JmsTemplate&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;connectionFactory&quot;</span> <span class="na">ref=</span><span class="s">&quot;connectionFactory&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;defaultDestination&quot;</span> <span class="na">ref=</span><span class="s">&quot;defaultDestination&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- Message Sender Definition --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;messageSender&quot;</span> <span class="na">class=</span><span class="s">&quot;huangbowen.net.jms.MessageSender&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;constructor-arg</span> <span class="na">index=</span><span class="s">&quot;0&quot;</span> <span class="na">ref=</span><span class="s">&quot;jmsTemplate&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- Message Receiver Definition --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;messageReceiver&quot;</span> <span class="na">class=</span><span class="s">&quot;huangbowen.net.jms.MessageReceiver&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">&quot;org.springframework.jms.listener.SimpleMessageListenerContainer&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;connectionFactory&quot;</span> <span class="na">ref=</span><span class="s">&quot;connectionFactory&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;destinationName&quot;</span> <span class="na">value=</span><span class="s">&quot;${jms.queue.name}&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;messageListener&quot;</span> <span class="na">ref=</span><span class="s">&quot;messageReceiver&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/beans&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在<a href="https://github.com/huangbowen521/SpringJMSSample">示例项目</a>中我新加了一个Main方法来进行测试。可以运行EmbedBrokerApp中的Main方法来进行测试。</p>

<p><img src="http://www.huangbowen.net/images/messageTest.png"></p>

<p>如果客户端和broker在相同的JVM进程中，客户端连接时可以使用broker url为“vm://localhost:61616”,进程外连接则需要使用”tcp://localhost:61616&#8221;。如果有多个broker的话可以给每个broker起个名字。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>    <span class="nt">&lt;amq:broker</span> <span class="na">brokerName=</span><span class="s">&quot;broker1&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;amq:transportConnectors&gt;</span>
</span><span class='line'>            <span class="nt">&lt;amq:transportConnector</span> <span class="na">uri=</span><span class="s">&quot;tcp://localhost:61616&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/amq:transportConnectors&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/amq:broker&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;amq:broker</span> <span class="na">brokerName=</span><span class="s">&quot;broker2&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;amq:transportConnectors&gt;</span>
</span><span class='line'>            <span class="nt">&lt;amq:transportConnector</span> <span class="na">uri=</span><span class="s">&quot;tcp://localhost:61617&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/amq:transportConnectors&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/amq:broker&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>客户端连接时候可以直接使用broker名称连接，比如使用”vm://broker1”来使用第一个broker。</p>

<p>本章中的完整源码可从完整代码可从<a href="https://github.com/huangbowen521/SpringJMSSample">https://github.com/huangbowen521/SpringJMSSample</a>下载。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActiveMQ第二弹:使用Spring JMS与ActiveMQ通讯]]></title>
    <link href="http://www.huangbowen.net/blog/2014/02/20/spring-jms-and-activemq-sample/"/>
    <updated>2014-02-20T23:18:00+10:00</updated>
    <id>http://www.huangbowen.net/blog/2014/02/20/spring-jms-and-activemq-sample</id>
    <content type="html"><![CDATA[<p>本文章的完整代码可从我的github中下载：<a href="https://github.com/huangbowen521/SpringJMSSample.git">https://github.com/huangbowen521/SpringJMSSample.git</a></p>

<p>上一篇文章中介绍了如何安装和运行ActiveMQ。这一章主要讲述如何使用Spring JMS向ActiveMQ的Message Queue中发消息和读消息。</p>

<!-- more -->


<p>首先需要在项目中引入依赖库。</p>

<ul>
<li><p>spring-core: 用于启动Spring容器，加载bean。</p></li>
<li><p>spring-jms:使用Spring JMS提供的API。</p></li>
<li><p>activemq-all:使用ActiveMQ提供的API。</p></li>
</ul>


<p>在本示例中我使用maven来导入相应的依赖库。</p>

<figure class='code'><figcaption><span>pom.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>  <span class="nt">&lt;dependencies&gt;</span>
</span><span class='line'>    <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>      <span class="nt">&lt;groupId&gt;</span>junit<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>      <span class="nt">&lt;artifactId&gt;</span>junit<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>      <span class="nt">&lt;version&gt;</span>4.11<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>      <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>      <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>          <span class="nt">&lt;groupId&gt;</span>org.apache.activemq<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;artifactId&gt;</span>activemq-all<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;version&gt;</span>5.9.0<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>      <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>          <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;artifactId&gt;</span>spring-jms<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;version&gt;</span>4.0.2.RELEASE<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>      <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>          <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;artifactId&gt;</span>spring-core<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;version&gt;</span>4.0.2.RELEASE<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/dependencies&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>接下来配置与ActiveMQ的连接，以及一个自定义的MessageSender。</p>

<figure class='code'><figcaption><span>springJMSConfiguration.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.springframework.org/schema/beans&quot;</span>
</span><span class='line'>       <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>       <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://www.springframework.org/schema/beans</span>
</span><span class='line'><span class="s"> http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">&quot;org.springframework.beans.factory.config.PropertyPlaceholderConfigurer&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;location&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;value&gt;</span>application.properties<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- Activemq connection factory --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;amqConnectionFactory&quot;</span> <span class="na">class=</span><span class="s">&quot;org.apache.activemq.ActiveMQConnectionFactory&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;constructor-arg</span> <span class="na">index=</span><span class="s">&quot;0&quot;</span> <span class="na">value=</span><span class="s">&quot;${jms.broker.url}&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- ConnectionFactory Definition --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;connectionFactory&quot;</span> <span class="na">class=</span><span class="s">&quot;org.springframework.jms.connection.CachingConnectionFactory&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;constructor-arg</span> <span class="na">ref=</span><span class="s">&quot;amqConnectionFactory&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!--  Default Destination Queue Definition--&gt;</span>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;defaultDestination&quot;</span> <span class="na">class=</span><span class="s">&quot;org.apache.activemq.command.ActiveMQQueue&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;constructor-arg</span> <span class="na">index=</span><span class="s">&quot;0&quot;</span> <span class="na">value=</span><span class="s">&quot;${jms.queue.name}&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- JmsTemplate Definition --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;jmsTemplate&quot;</span> <span class="na">class=</span><span class="s">&quot;org.springframework.jms.core.JmsTemplate&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;connectionFactory&quot;</span> <span class="na">ref=</span><span class="s">&quot;connectionFactory&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;defaultDestination&quot;</span> <span class="na">ref=</span><span class="s">&quot;defaultDestination&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- Message Sender Definition --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;messageSender&quot;</span> <span class="na">class=</span><span class="s">&quot;huangbowen.net.jms.MessageSender&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;constructor-arg</span> <span class="na">index=</span><span class="s">&quot;0&quot;</span> <span class="na">ref=</span><span class="s">&quot;jmsTemplate&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'><span class="nt">&lt;/beans&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在此配置文件中，我们配置了一个ActiveMQ的connection factory,使用的是ActiveMQ提供的ActiveMQConnectionFactory类。然后又配置了一个Spring JMS提供的CachingConnectionFactory。我们定义了一个ActiveMQQueue作为消息的接收Queue。并创建了一个JmsTemplate，使用了之前创建的ConnectionFactory和Message Queue作为参数。最后自定义了一个MessageSender，使用该JmsTemplate进行消息发送。</p>

<p>以下MessageSender的实现。</p>

<figure class='code'><figcaption><span>MessageSender.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">huangbowen</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">jms</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.jms.core.JmsTemplate</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MessageSender</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">JmsTemplate</span> <span class="n">jmsTemplate</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">MessageSender</span><span class="o">(</span><span class="kd">final</span> <span class="n">JmsTemplate</span> <span class="n">jmsTemplate</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">jmsTemplate</span> <span class="o">=</span> <span class="n">jmsTemplate</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">send</span><span class="o">(</span><span class="kd">final</span> <span class="n">String</span> <span class="n">text</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">jmsTemplate</span><span class="o">.</span><span class="na">convertAndSend</span><span class="o">(</span><span class="n">text</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个MessageSender很简单，就是通过jmsTemplate发送一个字符串信息。</p>

<p>我们还需要配置一个Listener来监听和处理当前的Message Queue。</p>

<figure class='code'><figcaption><span>springJMSReceiver.xml </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.springframework.org/schema/beans&quot;</span>
</span><span class='line'>       <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>       <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://www.springframework.org/schema/beans</span>
</span><span class='line'><span class="s"> http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- Message Receiver Definition --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;messageReceiver&quot;</span> <span class="na">class=</span><span class="s">&quot;huangbowen.net.jms.MessageReceiver&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">&quot;org.springframework.jms.listener.SimpleMessageListenerContainer&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;connectionFactory&quot;</span> <span class="na">ref=</span><span class="s">&quot;connectionFactory&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;destinationName&quot;</span> <span class="na">value=</span><span class="s">&quot;${jms.queue.name}&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;messageListener&quot;</span> <span class="na">ref=</span><span class="s">&quot;messageReceiver&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/beans&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>在上述xml文件中,我们自定义了一个MessageListener，并且使用Spring提供的SimpleMessageListenerContainer作为Container。</p>

<p>以下是MessageLinser的具体实现。</p>

<figure class='code'><figcaption><span>MessageReceiver.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">huangbowen</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">jms</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.jms.*</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MessageReceiver</span> <span class="kd">implements</span> <span class="n">MessageListener</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onMessage</span><span class="o">(</span><span class="n">Message</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span><span class="o">(</span><span class="n">message</span> <span class="k">instanceof</span> <span class="n">TextMessage</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">TextMessage</span> <span class="n">textMessage</span> <span class="o">=</span> <span class="o">(</span><span class="n">TextMessage</span><span class="o">)</span> <span class="n">message</span><span class="o">;</span>
</span><span class='line'>            <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">String</span> <span class="n">text</span> <span class="o">=</span> <span class="n">textMessage</span><span class="o">.</span><span class="na">getText</span><span class="o">();</span>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;Received: %s&quot;</span><span class="o">,</span><span class="n">text</span><span class="o">));</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">JMSException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个MessageListener也相当的简单，就是从Queue中读取出消息以后输出到当前控制台中。</p>

<p>另外有关ActiveMQ的url和所使用的Message Queue的配置在application.properties文件中。</p>

<figure class='code'><figcaption><span>application.properties</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>jms.broker.url=tcp://localhost:61616
</span><span class='line'>jms.queue.name=bar
</span></code></pre></td></tr></table></div></figure>


<p>好了，配置大功告成。如何演示那？我创建了两个Main方法，一个用于发送消息到ActiveMQ的MessageQueue中，一个用于从MessageQueue中读取消息。</p>

<figure class='code'><figcaption><span>SenderApp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">huangbowen</span><span class="o">.</span><span class="na">net</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">huangbowen.net.jms.MessageSender</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.context.ApplicationContext</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.context.support.ClassPathXmlApplicationContext</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.util.StringUtils</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.BufferedReader</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.InputStreamReader</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SenderApp</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span> <span class="n">String</span><span class="o">[]</span> <span class="n">args</span> <span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">MessageSender</span> <span class="n">sender</span> <span class="o">=</span> <span class="n">getMessageSender</span><span class="o">();</span>
</span><span class='line'>        <span class="n">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="n">InputStreamReader</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">text</span> <span class="o">=</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">while</span> <span class="o">(!</span><span class="n">StringUtils</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">(</span><span class="n">text</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;send message: %s&quot;</span><span class="o">,</span> <span class="n">text</span><span class="o">));</span>
</span><span class='line'>            <span class="n">sender</span><span class="o">.</span><span class="na">send</span><span class="o">(</span><span class="n">text</span><span class="o">);</span>
</span><span class='line'>            <span class="n">text</span> <span class="o">=</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">MessageSender</span> <span class="nf">getMessageSender</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">ApplicationContext</span> <span class="n">context</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="s">&quot;springJMSConfiguration.xml&quot;</span><span class="o">);</span>
</span><span class='line'>       <span class="k">return</span> <span class="o">(</span><span class="n">MessageSender</span><span class="o">)</span> <span class="n">context</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">&quot;messageSender&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>ReceiverApp.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">huangbowen</span><span class="o">.</span><span class="na">net</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.context.support.ClassPathXmlApplicationContext</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ReceiverApp</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span> <span class="n">String</span><span class="o">[]</span> <span class="n">args</span> <span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="k">new</span> <span class="nf">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="s">&quot;springJMSConfiguration.xml&quot;</span><span class="o">,</span> <span class="s">&quot;springJMSReceiver.xml&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>OK，如果运行的话要先将ActiveMQ服务启动起来（更多启动方式参见我上篇文章）。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$:</span>/usr/local/Cellar/activemq/5.8.0/libexec<span class="nv">$ </span>activemq start xbean:./conf/activemq-demo.xml
</span></code></pre></td></tr></table></div></figure>


<p>然后运行SenderApp中的Main方法，就可以在控制台中输入消息发送到ActiveMQ的Message Queue中了。运行ReceiverApp中的Main方法，则会从Queue中将消息读出来，打印到控制台。</p>

<p>这就是使用Spring JMS与ActiveMQ交互的一个简单例子了。完整代码可从https://github.com/huangbowen521/SpringJMSSample下载。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActiveMQ第一弹:安装与运行]]></title>
    <link href="http://www.huangbowen.net/blog/2014/02/20/install-and-run-activemq/"/>
    <updated>2014-02-20T00:12:00+10:00</updated>
    <id>http://www.huangbowen.net/blog/2014/02/20/install-and-run-activemq</id>
    <content type="html"><![CDATA[<p>ActiveMQ使用java写的，所以天然跨平台，windows，各种类Unix系统都可运行，只需要下载对应的分发包即可。当前AciveMQ的最新版本是5.9.0。我目前在自己机子上安装的版本是5.8.0。</p>

<!-- more -->


<p>安装ActivceMQ需要先设置好系统环境。</p>

<ol>
<li><p>空间剩余磁盘大于60M。（这个肯定没问题）</p></li>
<li><p>需要预装JDK，版本为1.6.x及其以上。（ActiveMQ就是用java写的，肯定要装java环境的嘛）</p></li>
</ol>


<p>接下来就可以安装ActiveMQ了。</p>

<p>一种是直接下载分发包，地址是<a href="http://activemq.apache.org/">http://activemq.apache.org/</a>。找到想要安装的版本后解压缩即可。</p>

<p>另一种是通过源代码安装，地址是<a href="http://activemq.apache.org/download.html">http://activemq.apache.org/download.html</a>。该源代码是使用maven作为构建工具的，所以需要先安装maven，如何安装可参见<a href="http://maven.apache.org/">maven官网</a>（MAC用户如果安装了homebrew的话，直接运行<code>brew install maven</code>即可）。    然后使用<code>mvn clean install -Dmaven.test.skip=true</code>来构建源代码。如果构建成功的话在target目录下可以看到生成的activemq-x.x-SNAPSHOT.zip文件，解压缩以后就可以使用了。</p>

<p>当然MAC用户的话安装就简单了，直接使用<code>brew install activemq</code>就行（不知道homebrew为何物的参见我写的文章：
<a href="http://www.huangbowen.net/blog/2013/07/01/homebrew-in-mac/">Homebrew- MAC上的包管理利器</a>）。ActiveMQ会被默认安装到/usr/local/Cellar/activemq。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$:</span>/usr/local/Cellar/activemq<span class="nv">$ </span>ls
</span><span class='line'>5.7.0 5.8.0
</span><span class='line'><span class="nv">$:</span>/usr/local/Cellar/activemq<span class="nv">$ </span><span class="nb">cd </span>5.8.0
</span><span class='line'><span class="nv">$:</span>/usr/local/Cellar/activemq/5.8.0<span class="nv">$ </span>ls
</span><span class='line'>INSTALL_RECEIPT.json NOTICE               bin
</span><span class='line'>LICENSE              README.txt           libexec
</span></code></pre></td></tr></table></div></figure>


<p>HomeBrew会自动将activemq加入到系统路径中。</p>

<p>下表列出了与ActiveMQ有关的一些重要的环境变量。</p>

<ul>
<li><p>ACTIVEMQ_HOME: /usr/local/Cellar/activemq/5.8.0/libexec</p></li>
<li><p>ACTIVEMQ_BASE: /usr/local/Cellar/activemq/5.8.0/libexec</p></li>
<li><p>ACTIVEMQ_CONF: /usr/local/Cellar/activemq/5.8.0/libexec/conf</p></li>
<li><p>ACTIVEMQ_DATA: /usr/local/Cellar/activemq/5.8.0/libexec/data</p></li>
</ul>


<p><strong>注意一下所有命令有时基于ActiveMQ 5.8.0版本，不同版本命令稍有不同。</strong></p>

<p>先运行<code>activemq setup ~/.activemqrc</code>来指定activemq的环境配置文件。在这个文件中可以自定义activemq使用的JDK路径，jvm参数等信息。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$:</span>/usr/local/Cellar/activemq/5.8.0<span class="nv">$ </span>activemq setup ~/.activemqrc
</span><span class='line'>INFO: Loading <span class="s1">&#39;/Users/twer/.activemqrc&#39;</span>
</span><span class='line'>INFO: Creating configuration file: /Users/twer/.activemqrc
</span><span class='line'>INFO: It<span class="s1">&#39;s recommend to limit access to &#39;</span>/Users/twer/.activemqrc<span class="s1">&#39; to the priviledged user</span>
</span><span class='line'><span class="s1">INFO: (recommended: chown &#39;</span>twer<span class="s1">&#39;:nogroup &#39;</span>/Users/twer/.activemqrc<span class="s1">&#39;; chmod 600 &#39;</span>/Users/twer/.activemqrc’<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行<code>activemq</code>可以显示activemq相应的配置信息及可用的命令。（注意低版本中此命令是启动ActiveMQ）</p>

<p>运行<code>activemq start</code>可以在一个独立进程中启动activemq。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$:</span>/usr/local/Cellar/activemq/5.8.0<span class="nv">$ </span>activemq start
</span><span class='line'>INFO: Loading <span class="s1">&#39;/Users/twer/.activemqrc&#39;</span>
</span><span class='line'>INFO: Using java <span class="s1">&#39;/System/Library/Frameworks/JavaVM.framework/Home/bin/java&#39;</span>
</span><span class='line'>INFO: Starting - inspect logfiles specified in logging.properties and log4j.properties to get details
</span><span class='line'>INFO: pidfile created : <span class="s1">&#39;/usr/local/Cellar/activemq/5.8.0/libexec/data/activemq-bowen-huang.local.pid&#39;</span> <span class="o">(</span>pid <span class="s1">&#39;50873&#39;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到进程id是50873.</p>

<p>终止ActiveMQ的运行有两种方式。一种是使用<code>activemq stop</code>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$:</span>/usr/local/Cellar/activemq/5.8.0<span class="nv">$ </span>activemq stop
</span><span class='line'>INFO: Loading <span class="s1">&#39;/Users/twer/.activemqrc&#39;</span>
</span><span class='line'>INFO: Using java <span class="s1">&#39;/System/Library/Frameworks/JavaVM.framework/Home/bin/java&#39;</span>
</span><span class='line'>INFO: Waiting at least 30 seconds <span class="k">for </span>regular process termination of pid <span class="s1">&#39;50873&#39;</span> :
</span><span class='line'>Java Runtime: Apple Inc. 1.6.0_65 /System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home
</span><span class='line'>  Heap sizes: <span class="nv">current</span><span class="o">=</span>1035520k  <span class="nv">free</span><span class="o">=</span>1033420k  <span class="nv">max</span><span class="o">=</span>1035520k
</span><span class='line'>    JVM args: -Xms1G -Xmx1G -Djava.util.logging.config.file<span class="o">=</span>logging.properties -Dactivemq.classpath<span class="o">=</span>/usr/local/Cellar/activemq/5.8.0/libexec/conf; -Dactivemq.home<span class="o">=</span>/usr/local/Cellar/activemq/5.8.0/libexec -Dactivemq.base<span class="o">=</span>/usr/local/Cellar/activemq/5.8.0/libexec -Dactivemq.conf<span class="o">=</span>/usr/local/Cellar/activemq/5.8.0/libexec/conf -Dactivemq.data<span class="o">=</span>/usr/local/Cellar/activemq/5.8.0/libexec/data
</span><span class='line'>Extensions classpath:
</span><span class='line'>  <span class="o">[</span>/usr/local/Cellar/activemq/5.8.0/libexec/lib,/usr/local/Cellar/activemq/5.8.0/libexec/lib/camel,/usr/local/Cellar/activemq/5.8.0/libexec/lib/optional,/usr/local/Cellar/activemq/5.8.0/libexec/lib/web,/usr/local/Cellar/activemq/5.8.0/libexec/lib/extra<span class="o">]</span>
</span><span class='line'>ACTIVEMQ_HOME: /usr/local/Cellar/activemq/5.8.0/libexec
</span><span class='line'>ACTIVEMQ_BASE: /usr/local/Cellar/activemq/5.8.0/libexec
</span><span class='line'>ACTIVEMQ_CONF: /usr/local/Cellar/activemq/5.8.0/libexec/conf
</span><span class='line'>ACTIVEMQ_DATA: /usr/local/Cellar/activemq/5.8.0/libexec/data
</span><span class='line'>Connecting to pid: 50873
</span><span class='line'>.Stopping broker: localhost
</span><span class='line'>… FINISHED
</span></code></pre></td></tr></table></div></figure>


<p>另一种则是暴力的杀死进程,即<code>kill 50873</code>。</p>

<p>运行<code>activemq console</code>则会在当前console中启动activemq。这种好处是不用多开一个进程，而且可以直接从console中看到log。关闭activemq也很简单，直接按<code>ctrl</code>+<code>C</code>终止终端运行。</p>

<p>ActiveMQ的默认端口是61616，可以检测这端口来判断ActiveMQ是否启动成功。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$:</span>/usr/local/Cellar/activemq/5.8.0<span class="nv">$ </span>netstat -an|grep 61616
</span><span class='line'>tcp46      0      0  *.61616                *.*                    LISTEN
</span></code></pre></td></tr></table></div></figure>


<p>也可以访问web终端<a href="http://localhost:8161/admin">http://localhost:8161/admin</a>来查看和管理ActiveMQ。（默认用户名密码是admin/admin，你也可以修改配置，其在ActiveMQ安装目录下的libexec/conf/jetty-real.properties文件中）。</p>

<p>ActiveMQ支持xml文件格式对其进行配置。其实我们运行<code>activemq start</code>时，ActiveMQ就是默认使用了其安装目录下的libexec/conf/activemq.xml文件。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$:</span>/usr/local/Cellar/activemq/5.8.0/libexec/conf<span class="nv">$ </span>ls
</span><span class='line'>activemq-command.xml                 broker.ks
</span><span class='line'>activemq-demo.xml                    broker.ts
</span><span class='line'>activemq-dynamic-network-broker1.xml camel.xml
</span><span class='line'>activemq-dynamic-network-broker2.xml client.ks
</span><span class='line'>activemq-jdbc.xml                    client.ts
</span><span class='line'>activemq-scalability.xml             credentials-enc.properties
</span><span class='line'>activemq-security.xml                credentials.properties
</span><span class='line'>activemq-specjms.xml                 jetty-demo.xml
</span><span class='line'>activemq-static-network-broker1.xml  jetty-realm.properties
</span><span class='line'>activemq-static-network-broker2.xml  jetty.xml
</span><span class='line'>activemq-stomp.xml                   jmx.access
</span><span class='line'>activemq-throughput.xml              jmx.password
</span><span class='line'>activemq.xml                         log4j.properties
</span><span class='line'>broker-localhost.cert                logging.properties
</span></code></pre></td></tr></table></div></figure>


<p>我们当然可以使用自定义的配置文件，比如我们改用activemq-demo.xml。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$:</span>/usr/local/Cellar/activemq/5.8.0/libexec<span class="nv">$ </span>activemq start xbean:./conf/activemq-demo.xml
</span><span class='line'>INFO: Loading <span class="s1">&#39;/Users/twer/.activemqrc&#39;</span>
</span><span class='line'>INFO: Using java <span class="s1">&#39;/System/Library/Frameworks/JavaVM.framework/Home/bin/java&#39;</span>
</span><span class='line'>INFO: Starting - inspect logfiles specified in logging.properties and log4j.properties to get details
</span><span class='line'>INFO: pidfile created : <span class="s1">&#39;/usr/local/Cellar/activemq/5.8.0/libexec/data/activemq-bowen-huang.local.pid&#39;</span> <span class="o">(</span>pid <span class="err">&#39;</span>51375’<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>ActiveMQ在5.8.0版本及之后在安装包中包含了一些demo来演示对ActiveMQ的使用。使用方式很简单，首先采用activemq-demo.xml配置文件来启动ActiveMQ，然后访问<a href="http://localhost:8161/demo/">http://localhost:8161/demo/</a>尽情探索把。</p>

<p>这些demo的源码都在ActiveMQ安装目录下的libexec目录中，里面有个<code>user-guide.html</code>，可以用浏览器直接打开，它详细描述了该如何使用这些demo。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如果让我完善几年前的一个项目，我会做哪些改进?]]></title>
    <link href="http://www.huangbowen.net/blog/2014/02/17/how-to-improve-a-legacy-project/"/>
    <updated>2014-02-17T00:18:00+10:00</updated>
    <id>http://www.huangbowen.net/blog/2014/02/17/how-to-improve-a-legacy-project</id>
    <content type="html"><![CDATA[<p>在08年的时候，我还没有大学毕业，当时在一家公司实习。那时候老板接了一个项目，是一个给中石油某下属公司做的一个web版本的管理系统，我和一个同学硬着头皮接下来做完了。这个系统后端用的是c#的web form,前端普通的html+css+javascript，数据库使用的是sql server2005，部署服务器使用的是Microsoft Server 2008。现在回顾这个系统，虽然代码写的烂，架构写的烂，但是能够正常运行，这是偶尔有一些莫名其妙难以解决的小bug。毕竟是自己5年前的代码嘛，那时候自己太嫩了，好多东西都不知道，没有多少经验。</p>

<!-- more -->


<p>那如果现在要我给这个系统做功能升级，甚至重做这个系统，我会进行哪些改进那？这是个有意思的话题，如果你能真的找出很多可供改进的店出来，那么说明这几年来你真的在进步。</p>

<p>现在还真有可能会对这个系统做功能升级。我想了一下，会在一下几个方面做出改进和调整。</p>

<ol>
<li><p>使用最新的Visual Studio IDE,并且装上ReSharper插件。现在自己已经成了一个快捷键控、重构控。俗话说，工欲成其事,必先利其器。好的程序员当然要用最好的工具了。新的Visual Studio在效率方面、智能提示方面都有改善。ReSharper作为.net下的重构利器当然必不可少。</p></li>
<li><p>将代码托管到github的私有代码库中，使用git作为源代码管理工具。以前项目中使用的是svn，使用的公司服务器作代码托管，而公司服务器不是那么的稳定。git作为一款分布式源代码管理工具，脱离了中央服务器的束缚，并且拥有快速创建、切换分支，本地提交等特性，完爆svn。github作为全球最大的代码托管中心，方便实用，最便宜的会员7$每月，经济实惠。</p></li>
<li><p>给系统中的重要功能打好LOG。想当年我们想要记录一些程序log，还要自己写一个简易的log类库。现在有很多成熟的log框架可以被c#使用。试想当你的程序部署到服务器上以后，如果没有充足的log，那么排查bug是多么的困难。服务器上又不能让你还原现场，不能调试，唯一能帮上忙的就是那些log了。当然打log也有很多学问，比如log等级设置，输出设置等，这里就不细说了。</p></li>
<li><p>使用事务机制处理复杂逻辑。在这个系统中有很多并发操作，当时自己并不是很懂事务，使用了一些很蹩脚的方法来处理可能的数据异常。现在我会采用成熟的分布式事务机制来处理这些并发逻辑，使程序更加健壮。</p></li>
<li><p>使用TDD，提高单元测试覆盖率。以前的系统中没有任何单元测试，一段简单的代码都需要启动程序手工验证。这样的反馈太耗时，并且不具备重复性。测试驱动开发能够保证代码简洁、正确，并且能快速得到反馈，保证测试覆盖率。遇到遗留代码时，也可以先添加单元测试，建立保护网，使重构更有信心。</p></li>
<li><p>使用webdriver进行自动化功能性测试。曾经在给客户演示前，我改了一段代码，没想到这段代码恰好破坏了给客户演示的一个重要功能。如果有自动化的功能性测试那么就可以避免这一切。自动化功能测试能增强对产品的信心，每次改动都在可控范围之内。</p></li>
<li><p>编写构建脚本，实现持续集成。即使只有一个人工作在这个项目中，也应当编写构建脚本，应用持续集成。这样才能保证你的每一次提交都是安全的；并且将一些重复的工作自动化起来，可以解放你的大脑关注到更重要的地方去。</p></li>
<li><p>自动化部署。每次部署项目到服务器上是一个痛苦的经历，需要手动的替换项目中的某些文件，将文件复制到服务器上，终止当前服务器服务&#8230;..哪一个环节出错都是一个致命的打击。手动不仅效率低，而且极易出错。通过编写脚本实现自动化部署可以一劳永逸，和繁琐的手动操作说拜拜吧。</p></li>
<li><p>使用Nuget作为依赖项管理工具。如果你想要引用一个第三方依赖项，还需要手动从网上下载并添加到项目中的话，那你就out了。作为一个Java程序员，maven,gradle等构建工具已是标配，它们都提供了对依赖项的自动化管理。你只需要添加一行字符串来说明你想要使用那个类库，下载、引用就全交给管理工具来实现了。在c#世界中当然也有相应的产品，那就是Nuget，从此依赖项管理再也不是一件头痛的事情了。</p></li>
<li><p>多使用c#自身的特性，如LINQ，委托，函数式编程等。比起不思进取的java语言，c#不知道强多少倍。java在java 8版本才正式引入Lambda,而c#的LINQ早都出来多少年了。如果在进行列表操作时，你还只使用foreach，那么你太老土了。列表操作无非是filter,map,sort&#8230;而c#早为我们提供了一系列扩展方法，如Where,Select,Sort&#8230;.可怜Java中只能使用Guava这种不伦不类的第三方类库来实现相应的效果，而且远没有c#的原生功能漂亮。c#既然每年都会引用那么多的特性，那么就要学习、掌握和使用。很多人一边使用着c#的老土语法，一边说自己精通c#,真让人无语。放着那么多好特性不用，让我们这些java程序员真是羡慕嫉妒恨。</p></li>
<li><p>使用一些前端框架和JavaScript框架。对于我这种前端小白，想让我设计出漂亮的页面还真是力不从心。不用怕，设计者已经考虑到了前端无能者的感受，譬如bootstrap之类的前端UI框架简直为我们而生。这些不但使用简单，效果明显，还自带响应式设计，实在是前端小白的利器，实现自己精美的web站点不再是梦。JavaScript就不多说了，什么jQuery，AngularJs，ExtJs&#8230;..各种框架类库层出不穷，涵盖了前端开发的方方面面。无论你是想画图，操作DOM元素，创建单页应用,使用MVC架构&#8230;..在JavaScript的世界里你总有多种选择。想当年我为了在web页面中展现一张统计图，采用了使用.net在后台实时绘制成图片加载到前台显示，都是泪啊。现在好了，只需要将数据模型绑定给图表控件，分分钟搞定。</p></li>
</ol>


<p>好了，就写这么多了。如何判断一个程序员真的具有N年工作经验，而不是1年工作经验重复使用了N年？一个好的办法就是和拿出一个以前的项目出来，看他都会做哪些改进。</p>

<p>对于工作多年的程序员来说，知识面、视野一定要广，这样才有竞争力。这靠的是平时的学习和积累，还要善于思考，如何能把手头的事情做得更好。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[做一张故事卡时的感悟]]></title>
    <link href="http://www.huangbowen.net/blog/2014/02/11/thoughts-when-doing-user-story/"/>
    <updated>2014-02-11T17:36:00+10:00</updated>
    <id>http://www.huangbowen.net/blog/2014/02/11/thoughts-when-doing-user-story</id>
    <content type="html"><![CDATA[<p>今天和同事一起领了一个故事卡来做。看完用户故事卡中的描述和验收准则后一头雾水，不知道从哪里下手。由于卡中提到了几个模块都属于遗留系统中的功能，以前没有触及这些模块，对业务、对代码都不太了解。而且还要对这些模块进行修改，而这部分代码都是陈旧的EJB代码，复杂冗长，配置繁琐，修改点无法确定，影响范围无法预估。</p>

<!-- more -->


<p>那么接下来该怎么办那？</p>

<p>可能很多人都选择深入代码内部，从代码入手来搞清楚功能。我们刚开始想尝试这种方式，在EJB的代码群里跳来跳去，还是不明就里。我想这样不行啊，看到猴年马月去了。</p>

<p>这时候我就意识到我的方向错了。代码是业务逻辑的实现，应该先有业务逻辑，再有代码。我们这样反推只能会深陷细节，很难从中了解到整个业务逻辑的来龙去脉。</p>

<p>咋办那？找BA（需求分析师）呗。我们把BA拉过来，让她挨个把这张故事卡中的关联模块讲清楚。为什么我们要做这样的事情？这样做对用户来说能带来什么好处？做这样事情的场景是怎样的？&#8230;..</p>

<p>解答了这些问题以后，我们逐渐明白了这个故事卡的业务逻辑，也有信心来完成这张卡了。</p>

<p>接下来是不是要回到代码来看具体实现了那？非也，我们并没有急着看代码，而是消化了业务知识以后，打开了我们的功能性测试的项目，在里面查与该模块功能相关的功能性测试。由于这些测试是使用BDD框架写的，所以可读性非常强，并且本身就描述了使用场景与案例。看了这些功能性测试我们一可以加深对需求的了解；二知道了当前这张故事卡牵扯到的模块的覆盖率是个什么情况，有助于我们修改后不会破坏已有的功能；三是有助于我们为修改后的功能补上功能性测试。并且我们可以顺着功能性测试来查看该功能模块的调用情况，根据调用情况来深入该功能的代码细节，找到潜在的修改点。</p>

<p>通过功能性测试入手，我们阅读代码确实快了不少，很快就找到了潜在修改点。那么现在要动手修改吗？答案是否定的。我们又回到了功能性测试的项目，为我们即将要改变的功能加上了自动化测试。这个时候测试应该是跑不过的。然后我们才动手修改代码，完成功能修改。然后再次运行针对新功能的测试，一切OK。</p>

<p>完成了这个故事卡给我带来了成就感。不只是因为我们解决了这个故事卡上的问题，而是让我们学到了额外的知识。我们不能整天只为写代码而写代码，而是应该真正的以业务需求为核心，把需求吃透。一个程序员能够保证把事情做正确是远远不够的，而是能够确保他做的事情是正确的。</p>

<p>一个程序员在领到一个故事卡时，不应当急着写怎么实现，而是应该向业务分析师质疑，为什么我要做这个功能？加了这个功能能给用户带来什么价值？有没有其他简单的方式来达到甚至超越这个卡给用户带来的价值？只有当这些问题都被解决了以后，才能进行开发。现在你已经是了解需求的专家了，相信在编写代码考虑实现方式时，有足够的上下文了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[持续集成及部署利器:Go]]></title>
    <link href="http://www.huangbowen.net/blog/2014/01/27/introduction-of-go/"/>
    <updated>2014-01-27T18:39:00+10:00</updated>
    <id>http://www.huangbowen.net/blog/2014/01/27/introduction-of-go</id>
    <content type="html"><![CDATA[<p>Go是一款先进的持续集成和发布管理系统,由ThoughtWorks开发。（不要和Google的编程语言Go混淆了！）其前身为Cruise,是ThoughtWorks在做咨询和交付交付项目时自己开发的一款开源的持续集成工具。后来随着持续集成及持续部署的火热，ThoughtWorks专门成立了一个项目组，基于Cruise开发除了Go这款工具。</p>

<!-- more -->


<p>Go的官方网站是<a href="http://www.thoughtworks.com/products/go-continuous-delivery/">http://www.thoughtworks.com/products/go-continuous-delivery/</a>,其文档是<a href="http://www.thoughtworks.com/products/docs/go/13.3/help/welcome_to_go.html">http://www.thoughtworks.com/products/docs/go/13.3/help/welcome_to_go.html</a>。</p>

<p>在我目前的项目中，持续集成及部署工具使用的就是Go这款工具。使用Go来建立起一个项目的持续部署pipeline是非常快的，非常方便。</p>

<h2>Go的架构设计</h2>

<p>Go使用了Server-Agent的模式。Server用来展示和配置pipeline的DashBoard，并存放构建出来的Artifacts（存档文件，比如一个war包); Agent则用来执行真正的构建操作，一个Server可以和多个Agent建立连接，Agent支持多个主流的操作系统。</p>

<p><img src="http://www.huangbowen.net/images/Server-Agent.png"></p>

<p>这样的好处是：</p>

<ol>
<li><p>测试可以运行在不同的平台上，保证你的软件在多个平台都能良好的工作；</p></li>
<li><p>你可以将测试划分为不同的群组并并行的运行在多个Agent上，节省运行测试时间；</p></li>
<li><p>可以方便的管理Agent，及时响应不同的环境要求。</p></li>
</ol>


<h2>Agent的lifecycle</h2>

<p>下图是Agent工作的生命周期。</p>

<p><img src="http://www.huangbowen.net/images/AgentLifeCycle.png"></p>

<p>每一台Go的构建节点机器上都需要安装Go Agent软件（这个名字蛋痛，不是翻墙的那个软件），其用来建立起与Go Server的连接。
Go Agent会以轮询的方式来询问Go Server是否有当前有构建工作。如果有的话，Go Server会将其分配给处于ready状态的Agent。该Agent会在自己机器目录上创建一个目录，并下载同步最新的材料（比如配置的SVN repo地址）,然后执行指定的task，比如构建项目，运行单元测试或功能性测试等。如果配置了artifacts（比如构建的结果，一个war包），Agent执行完毕后将这个artifacts发布到Go Server上，这样artifacts就会被接下来的stage用到。</p>

<h2>Go中的一些概念</h2>

<p>Go对复杂的构建和部署活动进行了合理的抽象，并提供了GUI和XML两种方式来配置pipeline。</p>

<p><img src="http://www.huangbowen.net/images/GoConcepts.png"></p>

<p>在Go的世界中，多个pipeline可以共同组成一个group，这叫做pipeline group。没个pipeline又由多个stage组成。假设一个pipeline需要做如下事情： 构建项目->部署到测试环境->部署到生产环境。那么每一个环节都可以设置为一个stage。而一个stage则由1个或多个job组成。比如构建项目这个stage，可能会分为编译及验证->功能性测试，每一步可以作为一个job。job则由一个或多个task组成。比如功能性测试这个job可以分为两个task来完成，先将artifacts部署到测试机上，再运行功能性测试。</p>

<h2>Go和Jenkins的比较</h2>

<p>Go在设计之初就是一款持续部署工具，而Jenkins其实只是一款持续集成工具，如果要实现持续部署需要安装相应的插件。
Go由于是收费软件，有一定售后服务，而Jenkins作为开源软件，虽然免费，但是出现问题要么自己动手解决，要么等待维护社区修复。
Jenkins作为开源产品，社区比较活跃，文档资料和插件都比较多，而Go的文档或资料较少。</p>

<hr />

<p>Go的设计思想还是挺前卫的，在别人还在做持续集成这一步时，它已经做到了持续部署这个层次。但是目前就国内而言能做到持续部署的公司真的不多，甚至很多公司连持续集成这个实践都没有达到。所以Go作为一款收费产品很难在国内打开市场。</p>

<p>我觉得Go可以做出一个免费版来让个人试用，提供一些基本功能。然后为企业应用定制一些高级功能，放置到收费版中，可以扩大自己的市场占用率。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[记一次在StackOverFlow上问问题的经历]]></title>
    <link href="http://www.huangbowen.net/blog/2014/01/21/ask-question-on-stackoverflow/"/>
    <updated>2014-01-21T12:47:00+10:00</updated>
    <id>http://www.huangbowen.net/blog/2014/01/21/ask-question-on-stackoverflow</id>
    <content type="html"><![CDATA[<p>最近一直在做测试方面的事情，被测的一些功能需要连接到FTP服务器上。而我在做本地测试时为了方便，就使用java写了一个简单的ftp服务器，可以在命令行下直接启动运行。</p>

<!-- more -->


<p>当时在main函数里是这样写的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">App</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">FtpServer</span> <span class="n">ftpServer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FtpServer</span><span class="o">();</span>
</span><span class='line'>        <span class="n">ftpServer</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后在命令行运行<code>java -jar ftpserver.jar</code>就可以启动这个FTP服务。一切都很完美。当我想关闭FTP服务时，直接按了<code>Ctrl</code> + <code>C</code>来终止了这个JVM实例。但是我发现ftpserver.jar这个文件删不了了,原因是虽然我终止了该JVM实例，但是FTP服务器并没有被正确的退出。</p>

<p>那么如何实现在按<code>Ctrl</code>+<code>C</code>终止该JVM实例时，能够让程序调用FtpServer中的stop方法来关闭FTP服务？我想在Google上寻找答案，但是连续换了几个关键词都没找到解决方案。</p>

<p>这个时候我都有点差点放弃了，心想反正也不是一个很严重的问题。后来想到不如在StackOverFlow上问一下吧。说实话虽然我经常上StackOverFlow，但是很少在上面问问题。</p>

<p>我在StackOverFlow上发布了这个问题，链接如下。
<a href="http://stackoverflow.com/questions/21108059/stop-the-process-when-press-command-c-in-terminal">http://stackoverflow.com/questions/21108059/stop-the-process-when-press-command-c-in-terminal</a></p>

<p><img src="http://www.huangbowen.net/images/ftpquestion.png"></p>

<p>过了不到20分钟，就收到了一个回答。</p>

<p><img src="http://www.huangbowen.net/images/ftpanswer.png"></p>

<p>从上面可以看出，其实我这个问题之前已经有人问过了，并且收到了满意的答案。我根据回答中提供的链接，很快实现了方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">FtpServer</span> <span class="n">ftpServer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FtpServer</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Runtime</span><span class="o">.</span><span class="na">getRuntime</span><span class="o">().</span><span class="na">addShutdownHook</span><span class="o">(</span><span class="k">new</span> <span class="n">Thread</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">ftpServer</span><span class="o">.</span><span class="na">stop</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">});</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">ftpServer</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在oracle的官方文档中有对<a href="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Runtime.html#addShutdownHook%28java.lang.Thread%29">addShutdownHook</a>方法的详细解释。</p>

<p>通过文档可以看出JVM在两种事件下会响应shutdown：</p>

<ol>
<li><p>程序正常退出，比如最后的非后台线程退出或System.exit方法被调用。</p></li>
<li><p>用户终止了JVM，比如按下Ctrl+C，或者登出或关闭系统。</p></li>
</ol>


<p>某些情况下JVM是不会响应shutdown的，比如直接用kill命令杀死进程。JVM在shutdown时，会自动触发注册的hook线程，并以并行的方式来运行，JVM并不保证这些hook的调用顺序。</p>

<p>通过这个小事件给了我两个启示：</p>

<ol>
<li><p>当碰到技术困难时，不要轻言放弃，努力找出解决方案。即使找不到完美的解决方案，也要想一些替代方案。</p></li>
<li><p>在StackOverFlow上问问题时不要太着急，先查找下有没有类似的已经解决的问题，这样可以节省时间。</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java中的Set, List, Map漫谈]]></title>
    <link href="http://www.huangbowen.net/blog/2014/01/02/set/"/>
    <updated>2014-01-02T23:45:00+10:00</updated>
    <id>http://www.huangbowen.net/blog/2014/01/02/set</id>
    <content type="html"><![CDATA[<p>在编程语言中，集合是指代表一组对象的对象。Java平台专门有一个集合框架(Collections Framework)。集合框架是指表示和操作集合的统一架构，隔离了集合的操作和实现细节。</p>

<!-- more -->


<p>集合框架中的集合接口主要分为两大部分，一部分继承自<code>java.util.Collection</code>，另一部分继承自<code>java.util.Map</code> （其实Map本质上并不是集合，只是看起来好像可以像集合一样操作）。一个有趣的事情是这些接口的实现不一定都需要实现这些接口中的修改方法（如add，remove等），可以给某些不想实现的修改方法抛出一个运行时异常(UnsupportedOperationException)。</p>

<h2>List</h2>

<p>List是Java中的一个接口，继承了Collection接口。它是一个有序集合，又称序列，允许存储重复元素。其实现类常用的有ArrayList、LinkedList等。ArrayList是实现了List接口的可变长数组。它的特点是add方法操作时间复杂度为分期常量时间（amortized constant time），意思即如果添加n个元素则耗时O(n)，其它操作耗时则是线性时间。每个ArrayList都有个容量，即存放元素能力的大小。这个容量是list中元素个数。当添加新的元素时，这个容量也会自动添加，这需要消耗一定时间。如果要添加大量数据到ArrayList，可以先调用<code>ensureCapacity</code>操作，从而减少每次添加新元素容量自动调整的时间。</p>

<p>需要注意的是ArrayList并不是线程同步的。如果多个线程同时访问一个ArrayList实例，至少一个线程修改了其结构（添加或删除元素，或显式的调整了其大小，仅仅设置元素值并不属于结构修改），则会使程序进入不确定的状态。解决方式之一就是使用一个线程同步的对象来封装该ArrayList。或者也可以用Collections.synchronizedList来封装。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">List</span> <span class="n">list</span> <span class="o">=</span> <span class="n">Collections</span><span class="o">.</span><span class="na">synchronizedList</span><span class="o">(</span><span class="k">new</span> <span class="n">ArrayList</span><span class="o">(...));</span>
</span></code></pre></td></tr></table></div></figure>


<p>实现原理就是Collections.synchronizedList返回的类的iterator做了特殊处理。如果iterator被创建后，除了自己的add和delete方法，有其他行为导致了List结构被修改，iterator将会抛出一个<code>ConcurrentModificationException</code>异常。当然iterate这种处理方式并不能担保它能处理所有的异步并发修改，只能降低程序陷入不确定状态的概率。</p>

<p>LikedList是一个双重链表，它既实现了List接口，也实现了Deque接口。LikedList也不是线程安全的，解决方式与ArrrayList基本相同。</p>

<h2>Set</h2>

<p>Set也是Java中的一个接口，同样继承于Collection。与List不同的是，Set不允许放置重复元素,并且最多只能放置一个null元素。其实现类有HashSet、TreeSet等。</p>

<p>HashSet的实现其实是依托了一个HashMap的实例。HashSet并不保证元素的迭代顺序每次都是一致的。HashSet的基本操作（add,remove,contains及size）耗时都是常数时间，即迭代Set的耗时与Set的大小乘以HashMap实例的乘积成正比。HashSet也不是线程安全的。</p>

<h2>Map</h2>

<p>Map则是另一种重要的数据结构，是一组键值对的集合。Map不允许有重复的key存在。
它的实现中有HashTable和HashMap。两者非常相似，最大的不同是HashMap不是线程安全的，并且允许null值作为key或value，而HashTable则不允许。</p>

<p>HashMap的性能取决于两个因素：一个是初始容量，一个是负载因数。容量是哈希表中bucket的数量。初始容量则是HashMap被创建时容量。负载因数则是当容量需要自动增加的阀值。当HashMap中的元素超过了负载因数和当前容量的乘积，HashMap则会重新进行hash计算，以便bucket数量增加到以前的近似两倍。一般负载因子的默认值是0.75，这能达到时间和空间的一个平衡。负载因子过大，虽然会减少空间消耗，但是增加查找时间。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的2013年总结]]></title>
    <link href="http://www.huangbowen.net/blog/2014/01/02/my-conclusion-of-2013/"/>
    <updated>2014-01-02T21:30:00+10:00</updated>
    <id>http://www.huangbowen.net/blog/2014/01/02/my-conclusion-of-2013</id>
    <content type="html"><![CDATA[<ol>
<li><p>读了20多本书，有些书让人拍案叫绝，有些书则没产生多大共鸣。上半年读的多些，下半年有些懒散，读的相对少些。</p></li>
<li><p>翻译了一本书,《Effective JavaScript》并且已经出版，还在翻译另一本。翻译书这事情咋个说那？看似难，其实不难，只是需要花大量时间;看似不难其实难，英文好不一定就翻译的信、达、雅。</p></li>
<li><p>去澳洲出差了一个月，第一次跑这么远，跑到另一块大陆上。在那里感受到了国外的生活，开阔了自己的视野。</p></li>
<li><p>经过1个月的准备，英语考过了4个5，算是满足了拿澳洲457visa的要求。但是自我感觉英文在2013年提高并不大，还未到随心所欲的地步。</p></li>
<li><p>坚持写博客。虽然从2008年就开始写博客，但是中间断断续续，甚至2012年丢掉了之前所有的博客数据。索性在2013年又坚持起来，每个月至少5篇（11月份准备考雅思写的不多）。</p></li>
<li><p>2013年也尝试了很多新东西，AWS、node.js、ruby、haskell、groovy&#8230;&#8230;收获了很多的东西，但是感觉自己总结的力度还是不够。</p></li>
</ol>


<p>总的来说，2013年是充实的一年，2014年要给自己更大的压力，因为2014年就要为人父了，担上的压力会更重。 不过我对技术的热情和追求不会消退。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C#中的ThenBy是如何实现的]]></title>
    <link href="http://www.huangbowen.net/blog/2013/12/26/how-to-implement-thenby-in-c-number/"/>
    <updated>2013-12-26T23:14:00+10:00</updated>
    <id>http://www.huangbowen.net/blog/2013/12/26/how-to-implement-thenby-in-c-number</id>
    <content type="html"><![CDATA[<p>C#中给继承自IEnumerable的对象（最熟知的就是List了）提供了很丰富的扩展方法，涉及列表操作的方方面面。而扩展方法ThenBy就是很有意思的一个，它的实现也很巧妙。</p>

<!-- more -->


<p>如果有这样的一个Team类，里面有三个属性。</p>

<figure class='code'><figcaption><span>Team.cs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Team</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="nf">Team</span> <span class="p">(</span><span class="kt">string</span> <span class="n">name</span><span class="p">,</span> <span class="kt">int</span> <span class="n">timeCost</span><span class="p">,</span> <span class="kt">int</span> <span class="n">score</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">Name</span> <span class="p">=</span> <span class="n">name</span><span class="p">;</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">TimeCost</span> <span class="p">=</span> <span class="n">timeCost</span><span class="p">;</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">Score</span> <span class="p">=</span> <span class="n">score</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">get</span><span class="p">;</span>
</span><span class='line'>        <span class="k">private</span> <span class="k">set</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="kt">int</span> <span class="n">TimeCost</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">get</span><span class="p">;</span>
</span><span class='line'>        <span class="k">private</span> <span class="k">set</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="kt">int</span> <span class="n">Score</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">get</span><span class="p">;</span>
</span><span class='line'>        <span class="k">private</span> <span class="k">set</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后我们有一个Team的List。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">List</span><span class="p">&lt;</span><span class="n">Team</span><span class="p">&gt;</span> <span class="n">teams</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Team</span><span class="p">&gt;</span> <span class="p">();</span>
</span><span class='line'><span class="n">teams</span><span class="p">.</span><span class="n">Add</span> <span class="p">(</span><span class="k">new</span> <span class="n">Team</span> <span class="p">(</span><span class="s">&quot;teamA&quot;</span><span class="p">,</span> <span class="m">10</span><span class="p">,</span> <span class="m">22</span><span class="p">));</span>
</span><span class='line'><span class="n">teams</span><span class="p">.</span><span class="n">Add</span> <span class="p">(</span><span class="k">new</span> <span class="n">Team</span> <span class="p">(</span><span class="s">&quot;teamB&quot;</span><span class="p">,</span> <span class="m">12</span><span class="p">,</span> <span class="m">20</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="n">teams</span><span class="p">.</span><span class="n">Add</span> <span class="p">(</span><span class="k">new</span> <span class="n">Team</span> <span class="p">(</span><span class="s">&quot;teamC&quot;</span><span class="p">,</span> <span class="m">8</span><span class="p">,</span> <span class="m">18</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>那么如何求出teams中得分最高的那个队伍那？这个很简单，只需要一句话即可。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="n">teams</span><span class="p">.</span><span class="n">OrderByDescending</span> <span class="p">(</span><span class="n">team</span> <span class="p">=&gt;</span> <span class="n">team</span><span class="p">.</span><span class="n">Score</span><span class="p">).</span><span class="n">First</span> <span class="p">();</span>
</span><span class='line'><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span> <span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="n">Name</span><span class="p">);</span> <span class="c1">// teamA</span>
</span></code></pre></td></tr></table></div></figure>


<p>由于List实现了IEnumerable接口，而System.Linq中的Enumerable类中有针对IEnumerable接口的名为OrderByDescending的扩展方法，所以我们直接调用这个扩展方法可以对List按照指定的key进行降序排列，再调用First这个扩展方法来获取列表中的第一个元素。</p>

<p>如果我的List变成这个样子。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">List</span><span class="p">&lt;</span><span class="n">Team</span><span class="p">&gt;</span> <span class="n">teams</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Team</span><span class="p">&gt;</span> <span class="p">();</span>
</span><span class='line'><span class="n">teams</span><span class="p">.</span><span class="n">Add</span> <span class="p">(</span><span class="k">new</span> <span class="n">Team</span> <span class="p">(</span><span class="s">&quot;teamA&quot;</span><span class="p">,</span> <span class="m">10</span><span class="p">,</span> <span class="m">18</span><span class="p">));</span>
</span><span class='line'><span class="n">teams</span><span class="p">.</span><span class="n">Add</span> <span class="p">(</span><span class="k">new</span> <span class="n">Team</span> <span class="p">(</span><span class="s">&quot;teamB&quot;</span><span class="p">,</span> <span class="m">12</span><span class="p">,</span> <span class="m">16</span><span class="p">));</span>
</span><span class='line'><span class="n">teams</span><span class="p">.</span><span class="n">Add</span> <span class="p">(</span><span class="k">new</span> <span class="n">Team</span> <span class="p">(</span><span class="s">&quot;teamC&quot;</span><span class="p">,</span> <span class="m">8</span><span class="p">,</span> <span class="m">18</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>由于有可能两组以上的队伍都可能拿到最高分，那么在这些最高分的队伍中，我们选取用时最少的作为最终优胜者。有人说那可以这样写。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="n">teams</span><span class="p">.</span><span class="n">OrderByDescending</span> <span class="p">(</span><span class="n">team</span> <span class="p">=&gt;</span> <span class="n">team</span><span class="p">.</span><span class="n">Score</span><span class="p">).</span><span class="n">OrderBy</span><span class="p">(</span><span class="n">team</span> <span class="p">=&gt;</span> <span class="n">team</span><span class="p">.</span><span class="n">TimeCost</span><span class="p">).</span><span class="n">First</span> <span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>先对列表按Score降序排列，再对列表按TimeCost升序排列，然后取结果中的第一个元素。看来貌似是正确的，但其实是错误的。因为第一次调用OrderByDescending方法后返回了一个排序后的数组，再调用OrderBy是另外一次排序了，它会丢弃上一次排序，这与我们定的先看积分，如果积分相同再看耗时的规则违背。</p>

<p>那么应该如何实现那？C#给我们提供了一个叫做ThenBy的方法，可以满足我们的要求。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="n">teams</span><span class="p">.</span><span class="n">OrderByDescending</span> <span class="p">(</span><span class="n">team</span> <span class="p">=&gt;</span> <span class="n">team</span><span class="p">.</span><span class="n">Score</span><span class="p">).</span><span class="n">ThenBy</span><span class="p">(</span><span class="n">team</span> <span class="p">=&gt;</span> <span class="n">team</span><span class="p">.</span><span class="n">TimeCost</span><span class="p">).</span><span class="n">First</span> <span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span> <span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="n">Name</span><span class="p">);</span> <span class="c1">// teamC</span>
</span></code></pre></td></tr></table></div></figure>


<p>新的问题又来了。第一次调用OrderByDescending方法时返回的是一个新对象，再对这个新对象调用ThenBy时，它只有记录了上一次排序规则，才能达到我们想要的效果。那么C#是如何记录上次排序使用的key那？</p>

<p>这就先要看OrderByDescending方法是如何实现了的。查看源码发现OrderByDescending有两个重载，实现如下。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="n">IOrderedEnumerable</span><span class="p">&lt;</span><span class="n">TSource</span><span class="p">&gt;</span> <span class="n">OrderByDescending</span><span class="p">&lt;</span><span class="n">TSource</span><span class="p">,</span> <span class="n">TKey</span><span class="p">&gt;</span> <span class="p">(</span><span class="k">this</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">TSource</span><span class="p">&gt;</span> <span class="n">source</span><span class="p">,</span> <span class="n">Func</span><span class="p">&lt;</span><span class="n">TSource</span><span class="p">,</span> <span class="n">TKey</span><span class="p">&gt;</span> <span class="n">keySelector</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">source</span><span class="p">.</span><span class="n">OrderByDescending</span> <span class="p">(</span><span class="n">keySelector</span><span class="p">,</span> <span class="k">null</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="n">IOrderedEnumerable</span><span class="p">&lt;</span><span class="n">TSource</span><span class="p">&gt;</span> <span class="n">OrderByDescending</span><span class="p">&lt;</span><span class="n">TSource</span><span class="p">,</span> <span class="n">TKey</span><span class="p">&gt;</span> <span class="p">(</span><span class="k">this</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">TSource</span><span class="p">&gt;</span> <span class="n">source</span><span class="p">,</span> <span class="n">Func</span><span class="p">&lt;</span><span class="n">TSource</span><span class="p">,</span> <span class="n">TKey</span><span class="p">&gt;</span> <span class="n">keySelector</span><span class="p">,</span> <span class="n">IComparer</span><span class="p">&lt;</span><span class="n">TKey</span><span class="p">&gt;</span> <span class="n">comparer</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Check</span><span class="p">.</span><span class="n">SourceAndKeySelector</span> <span class="p">(</span><span class="n">source</span><span class="p">,</span> <span class="n">keySelector</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="n">OrderedSequence</span><span class="p">&lt;</span><span class="n">TSource</span><span class="p">,</span> <span class="n">TKey</span><span class="p">&gt;</span> <span class="p">(</span><span class="n">source</span><span class="p">,</span> <span class="n">keySelector</span><span class="p">,</span> <span class="n">comparer</span><span class="p">,</span> <span class="n">SortDirection</span><span class="p">.</span><span class="n">Descending</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在第二个重载中我们看到OrderByDescending方法返回时的是一个继承了IOrderedEnumerable接口的对象OrderedSequence。这个对象记录了我们的排序规则。</p>

<p>而我们再查看下ThenBy方法的定义。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="n">IOrderedEnumerable</span><span class="p">&lt;</span><span class="n">TSource</span><span class="p">&gt;</span> <span class="n">ThenBy</span><span class="p">&lt;</span><span class="n">TSource</span><span class="p">,</span> <span class="n">TKey</span><span class="p">&gt;</span> <span class="p">(</span><span class="k">this</span> <span class="n">IOrderedEnumerable</span><span class="p">&lt;</span><span class="n">TSource</span><span class="p">&gt;</span> <span class="n">source</span><span class="p">,</span> <span class="n">Func</span><span class="p">&lt;</span><span class="n">TSource</span><span class="p">,</span> <span class="n">TKey</span><span class="p">&gt;</span> <span class="n">keySelector</span><span class="p">,</span> <span class="n">IComparer</span><span class="p">&lt;</span><span class="n">TKey</span><span class="p">&gt;</span> <span class="n">comparer</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Check</span><span class="p">.</span><span class="n">SourceAndKeySelector</span> <span class="p">(</span><span class="n">source</span><span class="p">,</span> <span class="n">keySelector</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">source</span><span class="p">.</span><span class="n">CreateOrderedEnumerable</span><span class="p">&lt;</span><span class="n">TKey</span><span class="p">&gt;</span> <span class="p">(</span><span class="n">keySelector</span><span class="p">,</span> <span class="n">comparer</span><span class="p">,</span> <span class="k">false</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="n">IOrderedEnumerable</span><span class="p">&lt;</span><span class="n">TSource</span><span class="p">&gt;</span> <span class="n">ThenBy</span><span class="p">&lt;</span><span class="n">TSource</span><span class="p">,</span> <span class="n">TKey</span><span class="p">&gt;</span> <span class="p">(</span><span class="k">this</span> <span class="n">IOrderedEnumerable</span><span class="p">&lt;</span><span class="n">TSource</span><span class="p">&gt;</span> <span class="n">source</span><span class="p">,</span> <span class="n">Func</span><span class="p">&lt;</span><span class="n">TSource</span><span class="p">,</span> <span class="n">TKey</span><span class="p">&gt;</span> <span class="n">keySelector</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">source</span><span class="p">.</span><span class="n">ThenBy</span> <span class="p">(</span><span class="n">keySelector</span><span class="p">,</span> <span class="k">null</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们可以看到ThenBy这个扩展方法追加到的对象类型要实现IOrderedEnumerable接口，而OrderBy方法恰好返回的就是这个类型接口对象。那我们再看看IOrderedEnumerable接口的定义。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Collections</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nn">System.Linq</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">interface</span> <span class="n">IOrderedEnumerable</span><span class="p">&lt;</span><span class="n">TElement</span><span class="p">&gt;</span> <span class="p">:</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">TElement</span><span class="p">&gt;,</span> <span class="n">IEnumerable</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">//</span>
</span><span class='line'>        <span class="c1">// Methods</span>
</span><span class='line'>        <span class="c1">//</span>
</span><span class='line'>        <span class="n">IOrderedEnumerable</span><span class="p">&lt;</span><span class="n">TElement</span><span class="p">&gt;</span> <span class="n">CreateOrderedEnumerable</span><span class="p">&lt;</span><span class="n">TKey</span><span class="p">&gt;</span> <span class="p">(</span><span class="n">Func</span><span class="p">&lt;</span><span class="n">TElement</span><span class="p">,</span> <span class="n">TKey</span><span class="p">&gt;</span> <span class="n">keySelector</span><span class="p">,</span> <span class="n">IComparer</span><span class="p">&lt;</span><span class="n">TKey</span><span class="p">&gt;</span> <span class="n">comparer</span><span class="p">,</span> <span class="kt">bool</span> <span class="k">descending</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其继承自IEnumerable接口，并且要实现一个名为CreateOrderedEnumerable的方法，正是ThenBy方法实现中调用的这个方法。</p>

<p>所以玄机在OrderedSequence这个类上。实现了IEnumerable接口对象调用OrderBy后会返回OrderedSequence这个对象。而该对象记录了当前排序的规则，其实现了IOrderedEnumerable接口。而ThenBy扩展方法被加到了IOrderedEnumerable接口对象上，其返回值也是一个具有IOrderedEnumerable接口的对象。</p>

<p>照这么说，调用了一次OrderBy后，然后调用多次ThenBy也是可以工作的。我也从官方MSDN中找到了答案：</p>

<blockquote><blockquote><p>ThenBy and ThenByDescending are defined to extend the type IOrderedEnumerable<TElement>, which is also the return type of these methods. This design enables you to specify multiple sort criteria by applying any number of ThenBy or ThenByDescending methods.</p></blockquote></blockquote>

<p>翻译为: ThenBy及ThenByDescending是IOrderedEnumerable类型的扩展方法。ThenBy和ThenByDescending方法的返回值也是IOrderedEnumerable类型。这样设计是为了能够调用任意数量的ThenBy和ThenByDescending方法实现多重排序。</p>

<p>至此，ThenBy的神秘面纱就解开了，但是我不知道如何查看OrderedSequence类的源码，如果能看到这个类的源码就太完美了。知道的同学请告知方法。</p>

<p>注: 上述类的源码来自于Mono的实现。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gatling->次时代性能测试利器]]></title>
    <link href="http://www.huangbowen.net/blog/2013/12/23/the-power-of-gatling/"/>
    <updated>2013-12-23T23:07:00+10:00</updated>
    <id>http://www.huangbowen.net/blog/2013/12/23/the-power-of-gatling</id>
    <content type="html"><![CDATA[<p>Gatling作为一款开源免费的性能测试工具越来越受到广大程序员的欢迎。免费当然是好的，最缺钱的就是程序员了;开源更好啊，缺啥功能、想做定制化的可以自己动手，丰衣足食。其实我最喜欢的原因是其提供了简洁强大的API，原生支持命令行运行，不像JMeter那样需要在界面上点来点去。另外其出色的扩展API和轻量级的HTML报表都值得让人称道。</p>

<!-- more -->


<h2>Gatling版本</h2>

<p>Gatling的的官方网站是<a href="http://gatling-tool.org/">http://gatling-tool.org/</a>。目前Gatling有两个主线版本，一个是Gatling 1,最新版本是1.5.3;一个是Gatling 2,最新版本是2.0.0-M3a。Gatling 2使用了JDK7进行编译，使用的Scala版本是2.10，它对Gatling的API进行了一些重构和重新设计,内部也有一些调整。 目前Gatling 2还在开发阶段，所以如果要在项目中使用的话最好还是使用Gatling 1.5.3。</p>

<h2>安装Gatling</h2>

<p>其实Gatling是款绿色软件，可以直接从<a href="https://github.com/excilys/gatling/wiki/Downloads">https://github.com/excilys/gatling/wiki/Downloads</a>下载指定的版本。下载下来解压缩以后，我们可以看到其目录结构。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>twer@bowen-huang:~/sourcecode/GatlingWorkShop/gatling-charts-highcharts-1.5.2<span class="nv">$ </span>tree -L 2
</span><span class='line'>.
</span><span class='line'>├── bin                             //可执行文件目录
</span><span class='line'>│   ├── gatling.bat
</span><span class='line'>│   ├── gatling.sh
</span><span class='line'>│   ├── recorder.bat
</span><span class='line'>│   └── recorder.sh
</span><span class='line'>├── conf                            //配置目录
</span><span class='line'>│   ├── application.conf
</span><span class='line'>│   ├── gatling.conf
</span><span class='line'>│   └── logback.xml
</span><span class='line'>├── lib                             //依赖的程序库
</span><span class='line'>│   ├── akka-actor-2.0.4.jar
</span><span class='line'>│   ├── async-http-client-1.7.18.20130621.jar
</span><span class='line'>│   ├── commons-io-2.4.jar
</span><span class='line'>│   ├── commons-lang-2.6.jar
</span><span class='line'>│   ├── commons-math3-3.1.1.jar
</span><span class='line'>│   ├── commons-pool-1.6.jar
</span><span class='line'>│   ├── compiler-interface-0.12.3-sources.jar
</span><span class='line'>│   ├── config-1.0.1.jar
</span><span class='line'>│   ├── gatling-app-1.5.2.jar
</span><span class='line'>│   ├── gatling-charts-1.5.2.jar
</span><span class='line'>│   ├── gatling-charts-highcharts-1.5.2.jar
</span><span class='line'>│   ├── gatling-core-1.5.2.jar
</span><span class='line'>│   ├── gatling-http-1.5.2.jar
</span><span class='line'>│   ├── gatling-jdbc-1.5.2.jar
</span><span class='line'>│   ├── gatling-metrics-1.5.2.jar
</span><span class='line'>│   ├── gatling-recorder-1.5.2.jar
</span><span class='line'>│   ├── gatling-redis-1.5.2.jar
</span><span class='line'>│   ├── grizzled-slf4j_2.9.2-0.6.10.jar
</span><span class='line'>│   ├── incremental-compiler-0.12.3.jar
</span><span class='line'>│   ├── jaxen-1.1.6.jar
</span><span class='line'>│   ├── joda-convert-1.2.jar
</span><span class='line'>│   ├── joda-time-2.2.jar
</span><span class='line'>│   ├── jodd-core-3.4.4.jar
</span><span class='line'>│   ├── jodd-lagarto-3.4.4.jar
</span><span class='line'>│   ├── json-path-0.8.2.fix24.jar
</span><span class='line'>│   ├── json-smart-1.1.1.jar
</span><span class='line'>│   ├── jsoup-1.7.2.jar
</span><span class='line'>│   ├── logback-classic-1.0.12.jar
</span><span class='line'>│   ├── logback-core-1.0.12.jar
</span><span class='line'>│   ├── netty-3.6.6.Final.jar
</span><span class='line'>│   ├── opencsv-2.3.jar
</span><span class='line'>│   ├── redisclient_2.9.2-2.10.jar
</span><span class='line'>│   ├── scala-compiler-2.9.3.jar
</span><span class='line'>│   ├── scala-library-2.9.3.jar
</span><span class='line'>│   ├── scalate-core_2.9-1.6.1.jar
</span><span class='line'>│   ├── scalate-util_2.9-1.6.1.jar
</span><span class='line'>│   ├── scopt_2.9.2-2.1.0.jar
</span><span class='line'>│   ├── slf4j-api-1.7.5.jar
</span><span class='line'>│   ├── xercesImpl-2.11.0.jar
</span><span class='line'>│   ├── xml-apis-1.4.01.jar
</span><span class='line'>│   ├── xstream-1.4.3.jar
</span><span class='line'>│   └── zinc-0.2.5.jar
</span><span class='line'>├── results            //性能测试结果存放目录
</span><span class='line'>│   └── blogsimulation-20131218210445
</span><span class='line'>├── target             //性能测试脚本编译结果
</span><span class='line'>│   ├── cache
</span><span class='line'>│   ├── classes
</span><span class='line'>│   └── zincCache
</span><span class='line'>└── user-files     //性能测试脚本源文件
</span><span class='line'>    ├── data
</span><span class='line'>    ├── request-bodies
</span><span class='line'>    └── simulations
</span></code></pre></td></tr></table></div></figure>


<p>Gatling在user-files目录中提供了几个性能测试脚本的示例。不过由于脚本中被测试的网站已经无法访问，所以我自己写了几个简单的测试脚本，已经放置到了Github上，可以通过<a href="https://github.com/huangbowen521/GatlingWorkShop">https://github.com/huangbowen521/GatlingWorkShop</a>下载。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>twer@bowen-huang:~/sourcecode/GatlingWorkShop/gatling-charts-highcharts-1.5.2/user-files<span class="nv">$ </span>tree simulations
</span><span class='line'>simulations
</span><span class='line'>└── blog
</span><span class='line'>    ├── blog.scala
</span><span class='line'>    └── github.scala
</span><span class='line'>
</span><span class='line'>1 directory, 2 files
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>可以看到在simulations目录下有两个文件，一个是我给自己的博客写的性能测试脚本，一个是给github写的一个性能测试脚本。</p>

<h2>运行Gatling</h2>

<p>在命令行下运行bin目录下的Gatling.sh(如果是windows用户，请运行Gatling.bat)。Gatling会自动列出当前所有的测试脚本供自己选择，然后会让填写simulation id(模拟Id)以及run description（运行描述）。输入完毕后按回车键测试即可启动。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>twer@bowen-huang:~/sourcecode/GatlingWorkShop/gatling-charts-highcharts-1.5.2<span class="nv">$ </span>./bin/gatling.sh
</span><span class='line'>GATLING_HOME is <span class="nb">set </span>to /Users/twer/sourcecode/GatlingWorkShop/gatling-charts-highcharts-1.5.2
</span><span class='line'>Choose a simulation number:
</span><span class='line'>     <span class="o">[</span>0<span class="o">]</span> blog.BlogSimulation
</span><span class='line'>     <span class="o">[</span>1<span class="o">]</span> blog.GithubSimulation
</span><span class='line'>1
</span><span class='line'>Select simulation id <span class="o">(</span>default is <span class="s1">&#39;githubsimulation&#39;</span><span class="o">)</span>. Accepted characters are a-z, A-Z, 0-9, - and _
</span><span class='line'>github
</span><span class='line'>Select run description <span class="o">(</span>optional<span class="o">)</span>
</span><span class='line'>testing github
</span><span class='line'>
</span><span class='line'>Simulation blog.GithubSimulation started…
</span><span class='line'>
</span><span class='line'>……
</span><span class='line'>……
</span><span class='line'>……
</span><span class='line'>
</span><span class='line'>Simulation finished.
</span><span class='line'>Simulation successful.
</span><span class='line'>Generating reports...
</span><span class='line'>Reports generated in 0s.
</span><span class='line'>Please open the following file : /Users/twer/sourcecode/GatlingWorkShop/gatling-charts-highcharts-1.5.2/results/github-20131223214957/index.html
</span></code></pre></td></tr></table></div></figure>


<p>可以看到命令行中最后一行中标示了性能测试报表的存放路径。</p>

<h2>查看测试报告</h2>

<p>Gatling的测试报表其实就是一个html文件。Gatling使用了HighCharts这款JavaScript库来进行报表的展示。另外Gatling还提供了方便的接口用来自定义报告的展示。</p>

<p>以下是报表的部分截图。</p>

<p><img src="http://www.huangbowen.net/images/gatlingReport1.png" width="800"></p>

<p><img src="http://www.huangbowen.net/images/gatlingReport2.png" width="800"></p>

<h2>测试脚本示例</h2>

<p>这是GithubSimulation的性能测试脚本。其实它就是Scala的一个类，继承自Simulation。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">package</span> <span class="nn">blog</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="nn">com.excilys.ebi.gatling.core.Predef._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">com.excilys.ebi.gatling.http.Predef._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">com.excilys.ebi.gatling.jdbc.Predef._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">com.excilys.ebi.gatling.http.Headers.Names._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">akka.util.duration._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">bootstrap._</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">GithubSimulation</span> <span class="k">extends</span> <span class="nc">Simulation</span> <span class="o">{</span>
</span><span class='line'>     <span class="k">var</span> <span class="n">httpConf</span> <span class="k">=</span> <span class="n">httpConfig</span><span class="o">.</span>
</span><span class='line'>     <span class="n">baseURL</span><span class="o">(</span><span class="s">&quot;https://github.com&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>     <span class="k">var</span> <span class="n">scn</span> <span class="k">=</span> <span class="n">scenario</span><span class="o">(</span><span class="s">&quot;search in github.com&quot;</span><span class="o">)</span>
</span><span class='line'>     <span class="o">.</span><span class="n">exec</span><span class="o">(</span>
</span><span class='line'>          <span class="n">http</span><span class="o">(</span><span class="s">&quot;home page&quot;</span><span class="o">)</span>
</span><span class='line'>          <span class="o">.</span><span class="n">get</span><span class="o">(</span><span class="s">&quot;/&quot;</span><span class="o">)</span>
</span><span class='line'>          <span class="o">.</span><span class="n">check</span><span class="o">(</span><span class="n">status</span><span class="o">.</span><span class="n">is</span><span class="o">(</span><span class="mi">200</span><span class="o">)))</span>
</span><span class='line'>     <span class="o">.</span><span class="n">pause</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">12</span><span class="o">)</span>
</span><span class='line'>     <span class="o">.</span><span class="n">exec</span><span class="o">(</span>
</span><span class='line'>          <span class="n">http</span><span class="o">(</span><span class="s">&quot;do search&quot;</span><span class="o">)</span>
</span><span class='line'>          <span class="o">.</span><span class="n">get</span><span class="o">(</span><span class="s">&quot;/search&quot;</span><span class="o">)</span>
</span><span class='line'>          <span class="o">.</span><span class="n">queryParam</span><span class="o">(</span><span class="s">&quot;q&quot;</span><span class="o">,</span> <span class="s">&quot;gatling&quot;</span><span class="o">)</span>
</span><span class='line'>          <span class="o">.</span><span class="n">check</span><span class="o">(</span><span class="n">status</span><span class="o">.</span><span class="n">is</span><span class="o">(</span><span class="mi">200</span><span class="o">)))</span>
</span><span class='line'>
</span><span class='line'>     <span class="n">setUp</span><span class="o">(</span><span class="n">scn</span><span class="o">.</span><span class="n">users</span><span class="o">(</span><span class="mi">500</span><span class="o">).</span><span class="n">ramp</span><span class="o">(</span><span class="mi">10</span><span class="o">).</span><span class="n">protocolConfig</span><span class="o">(</span><span class="n">httpConf</span><span class="o">))</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>在这个类中定义了一个httpConf，指定了被测网站的根目录。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>     <span class="k">var</span> <span class="n">httpConf</span> <span class="k">=</span> <span class="n">httpConfig</span><span class="o">.</span>
</span><span class='line'>     <span class="n">baseURL</span><span class="o">(</span><span class="s">&quot;https://github.com&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后定义了一个测试场景，用户先访问Github首页，检查http返回状态码是否为200，然后暂停一段时间后再执行一个查询操作，查询关键字是gatling，检查http返回状态码是否为200。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>     <span class="k">var</span> <span class="n">scn</span> <span class="k">=</span> <span class="n">scenario</span><span class="o">(</span><span class="s">&quot;search in github.com&quot;</span><span class="o">)</span>
</span><span class='line'>     <span class="o">.</span><span class="n">exec</span><span class="o">(</span>
</span><span class='line'>          <span class="n">http</span><span class="o">(</span><span class="s">&quot;home page&quot;</span><span class="o">)</span>
</span><span class='line'>          <span class="o">.</span><span class="n">get</span><span class="o">(</span><span class="s">&quot;/&quot;</span><span class="o">)</span>
</span><span class='line'>          <span class="o">.</span><span class="n">check</span><span class="o">(</span><span class="n">status</span><span class="o">.</span><span class="n">is</span><span class="o">(</span><span class="mi">200</span><span class="o">)))</span>
</span><span class='line'>     <span class="o">.</span><span class="n">pause</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">12</span><span class="o">)</span>
</span><span class='line'>     <span class="o">.</span><span class="n">exec</span><span class="o">(</span>
</span><span class='line'>          <span class="n">http</span><span class="o">(</span><span class="s">&quot;do search&quot;</span><span class="o">)</span>
</span><span class='line'>          <span class="o">.</span><span class="n">get</span><span class="o">(</span><span class="s">&quot;/search&quot;</span><span class="o">)</span>
</span><span class='line'>          <span class="o">.</span><span class="n">queryParam</span><span class="o">(</span><span class="s">&quot;q&quot;</span><span class="o">,</span> <span class="s">&quot;gatling&quot;</span><span class="o">)</span>
</span><span class='line'>          <span class="o">.</span><span class="n">check</span><span class="o">(</span><span class="n">status</span><span class="o">.</span><span class="n">is</span><span class="o">(</span><span class="mi">200</span><span class="o">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后指定500个用户模拟该测试场景。500个用户以每秒50个递增，持续10秒。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>     <span class="n">setUp</span><span class="o">(</span><span class="n">scn</span><span class="o">.</span><span class="n">users</span><span class="o">(</span><span class="mi">500</span><span class="o">).</span><span class="n">ramp</span><span class="o">(</span><span class="mi">10</span><span class="o">).</span><span class="n">protocolConfig</span><span class="o">(</span><span class="n">httpConf</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>


<h2>技术栈</h2>

<p>这里列出了Gatling的一些主要的技术栈。</p>

<ul>
<li><p><strong>Akka Actors.</strong> Gatling 使用了Akka作为其并发编程的运行时。Akka的Actors模式能够有效的绕过JVM上多线程带来的性能问题。</p></li>
<li><p><strong>Scala.</strong>选择Scala最大的原因是因为Scala可以很好的集成Akka,另一原因是作为一款运行在JVM上的语言，Scala更容易提供给用户简洁强大的API设计。</p></li>
<li><p><strong>Async Http Client.</strong> 使用这款开源库来是实现异步http通讯。并且使用了Netty调用http。</p></li>
<li><p><strong>Highcharts及Highstock.</strong> Gatling使用Highcarts和Highstock这两款JavaScript库来进行测试结果报表的展示。</p></li>
</ul>


<hr />

<p>其实Gatling并不完美，比如目前支持的协议并不多，不支持对数据库的性能测试，不能进行分布式性能测试等。当然Gatling也在不断的进步，看好你哦！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用media queries实现一个响应式的菜单]]></title>
    <link href="http://www.huangbowen.net/blog/2013/12/15/responsive-menu-by-media-queries/"/>
    <updated>2013-12-15T21:56:00+10:00</updated>
    <id>http://www.huangbowen.net/blog/2013/12/15/responsive-menu-by-media-queries</id>
    <content type="html"><![CDATA[<p>Media queries是CSS3引入的一个特性，使用它可以方便的实现各种响应式效果。在这个示例中我们将会使用media queries实现一个响应式的菜单。这个菜单会根据当前浏览器屏幕的大小变化而自动的呈现出不同的样式。如果浏览器屏幕大于800px，菜单则会显示在页面左侧；如果浏览器屏幕介于401px到800px之间，菜单则会显示在页面上方，与其他内容是上下关系；如果屏幕小于400px，则菜单仍在页面上方，但是菜单会变为下拉列表形式。</p>

<!-- more -->


<p>预览地址: <a href="http://htmlpreview.github.io/?https://github.com/huangbowen521/ResponsiveDesignTrial/blob/master/responsiveMenu.html">http://htmlpreview.github.io/?https://github.com/huangbowen521/ResponsiveDesignTrial/blob/master/responsiveMenu.html</a></p>

<p>要实现这样的特效，首先要创建一个下拉列表形式的菜单，如下所示。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;small-menu&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;form&gt;</span>
</span><span class='line'>        <span class="nt">&lt;select</span> <span class="na">name=</span><span class="s">&quot;URL&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;option</span> <span class="na">value=</span><span class="s">&quot;home.html&quot;</span><span class="nt">&gt;</span>我的博客首页<span class="nt">&lt;/option&gt;</span>
</span><span class='line'>            <span class="nt">&lt;option</span> <span class="na">value=</span><span class="s">&quot;blog.html&quot;</span><span class="nt">&gt;</span>我的博客列表<span class="nt">&lt;/option&gt;</span>
</span><span class='line'>            <span class="nt">&lt;option</span> <span class="na">value=</span><span class="s">&quot;whoami.html&quot;</span><span class="nt">&gt;</span>我的个人简介<span class="nt">&lt;/option&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/select&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/form&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后还要创建一个使用了ul和li元素的菜单，放置在上面菜单的后面。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;large-menu&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ul&gt;</span>
</span><span class='line'>        <span class="nt">&lt;li&gt;</span>
</span><span class='line'>            <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;home.html&quot;</span><span class="nt">&gt;</span>我的博客首页<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>        <span class="nt">&lt;li&gt;</span>
</span><span class='line'>            <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;blog.html&quot;</span><span class="nt">&gt;</span>我的博客列表<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>        <span class="nt">&lt;li&gt;</span>
</span><span class='line'>            <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;whoami.html&quot;</span><span class="nt">&gt;</span>我的个人简介<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后再加一个div元素，用来放置一些文本以填充页面其他部分。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;content&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;p&gt;</span>
</span><span class='line'>        上周五的时候我对某个项目做了一个更改，将里面的构建脚本由maven换成了gradle。原因之一是因为maven的配置太繁琐，由于其引入了lifecycle的机制，
</span><span class='line'>        导致其不够灵活，而gradle作为用groovy写的DSL，代码清爽、简单、灵活。原因之二是我们所有的项目构建都换成了gradle，为了保持技术栈单一，此项目
</span><span class='line'>        做迁移也是大势所趋。<span class="nt">&lt;/p&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>接下来就要设置media queries了，指定在不同屏幕尺寸下菜单表现出不同的样式。</p>

<p>当屏幕宽度小于400px时，我们需要隐藏ul菜单，显现下拉框菜单。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="k">@media</span> <span class="nt">screen</span> <span class="nt">and</span> <span class="o">(</span> <span class="nt">max-width</span><span class="o">:</span> <span class="nt">400px</span> <span class="o">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="nc">.small-menu</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">display</span><span class="o">:</span> <span class="k">inline</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nc">.large-menu</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">display</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当屏幕介于401px和800px时，显示ul菜单，并且将其设置为水平排列。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="k">@media</span> <span class="nt">screen</span> <span class="nt">and</span> <span class="o">(</span> <span class="nt">min-width</span><span class="o">:</span> <span class="nt">401px</span> <span class="o">)</span> <span class="nt">and</span> <span class="o">(</span> <span class="nt">max-width</span><span class="o">:</span> <span class="nt">800px</span> <span class="o">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nc">.small-menu</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">display</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nc">.large-menu</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">display</span><span class="o">:</span> <span class="k">inline</span><span class="p">;</span>
</span><span class='line'>        <span class="k">width</span><span class="o">:</span> <span class="m">100</span><span class="o">%</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nc">.large-menu</span> <span class="nt">ul</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">list-style-type</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nc">.large-menu</span> <span class="nt">ul</span> <span class="nt">li</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">display</span><span class="o">:</span> <span class="k">inline</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nc">.content</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">width</span><span class="o">:</span> <span class="m">100</span><span class="o">%</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当屏幕尺寸大于800px时，则将ul菜单设置为页面左边，并且菜单排列为垂直排列。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="k">@media</span> <span class="nt">screen</span> <span class="nt">and</span> <span class="o">(</span> <span class="nt">min-width</span><span class="o">:</span> <span class="nt">801px</span> <span class="o">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nc">.small-menu</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">display</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nc">.large-menu</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">display</span><span class="o">:</span> <span class="k">inline</span><span class="p">;</span>
</span><span class='line'>        <span class="k">float</span><span class="o">:</span> <span class="k">left</span><span class="p">;</span>
</span><span class='line'>        <span class="k">width</span><span class="o">:</span> <span class="m">20</span><span class="o">%</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nc">.content</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">float</span><span class="o">:</span> <span class="k">right</span><span class="p">;</span>
</span><span class='line'>        <span class="k">width</span><span class="o">:</span> <span class="m">80</span><span class="o">%</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样就简单实现了一个响应式的菜单，其实主要就是根据media queries来设置screen的条件，根据不同screen宽度来给页面元素设置对应的样式。当屏幕宽度发生变化时，会自动应用相应的样式。</p>

<p>代码已经被放置到了github上了，地址是<a href="https://github.com/huangbowen521/ResponsiveDesignTrial">https://github.com/huangbowen521/ResponsiveDesignTrial</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[翻译:反思极限编程]]></title>
    <link href="http://www.huangbowen.net/blog/2013/12/12/reflection-of-extreme-programming/"/>
    <updated>2013-12-12T23:19:00+10:00</updated>
    <id>http://www.huangbowen.net/blog/2013/12/12/reflection-of-extreme-programming</id>
    <content type="html"><![CDATA[<p>译者注: Bob大叔14年后再次谈论极限编程。极限编程经历了14年的风风雨雨后，Bob大叔将会给它怎么样的定义那？</p>

<!-- more -->


<p>在我手中拿着的一本白皮薄书，在14年前彻底的改变了软件世界。这本书的标题是解析极限编程，副标题是拥抱变化。作者是Kent Beck,出版时间为1999年。</p>

<p>这本书很薄，不到200页。排版很宽，间隔很远。写作风格即自由散漫又平易近人。章节不多，概念简单。</p>

<p>但是其影响却像地震一样，甚至至今震动仍未平息下来。</p>

<p>起始于第53页的章节10，列出了12项实践，引爆了行业内的大辩论。并催生了一场革命，改变了我们编写软件的所有方式。这些实践是:</p>

<ul>
<li><p><strong>计划游戏</strong>：当今被成为SCRUM。此观点认为软件应该按照任务列表中的优先级循序渐进的开发。</p></li>
<li><p><strong>小版本</strong>：应当频繁和渐进式地部署软件。</p></li>
<li><p><strong>隐喻</strong>：该概念最终在Eric Evans编写的《领域驱动设计》一书中明确化。系统结构应当建立在针对问题域的简单的智力模型之上。</p></li>
<li><p><strong>简单设计</strong>：任何时候都要保证系统尽可能的简单，不用考虑对未来的担心。</p></li>
<li><p><strong>测试</strong>：程序员和客户一起编写自动化测试来验证产品代码的行为与预期一致。当今我们称之为测试驱动开发（TDD）及验收测试驱动开发(ATDD)。</p></li>
<li><p><strong>重构</strong>：软件内部结构能够并且应当被持续改进。</p></li>
<li><p><strong>结对编程</strong>：如果团队成员各自单独工作，那么这称不上一个团队。真正的团队需要经常通过键盘进行合作。这样可以相互充分的分享知识, 正是团队成员的义务。</p></li>
<li><p><strong>集体所有权</strong>：代码归属于整个团队，而不是某个个体。</p></li>
<li><p><strong>每周工作40小时</strong>：经常加班的团队是失败的团队。</p></li>
<li><p><strong>现场客户</strong>：在团队中加入一名真正的客户，用于对需求负责，开发团队能够始终轻易的接触到他。</p></li>
<li><p><strong>编码标准</strong>：团队应当使用一致的编码风格保证代码整洁，易于沟通。</p></li>
</ul>


<h2>争议？</h2>

<p>很奇怪是不是？是不是并不是所有实践都有争议？但是14年前引起了疯狂争议。确实，整本书出版时，人们争议书中的描述不可能应用于实践，争议所有拥护者是如何的必躬屈膝，不听劝解，甚至是一行代码没写过的傻子&#8230;&#8230;</p>

<p>呃，我不应当让这些过去的感受压倒我。因为，毕竟它们早已消失不再，而我们依然存在。</p>

<p>看看这12项实践，你没有践行其中哪项？我温柔的读者中的大多数可能长期的践行大多数实践。如果说它们已经被普及肯定稍显夸张，但是更不夸张的说，它们现在已经成为主流。更重要的是，还未践行这些实践的团队至少在尝试它们。这些实践已经可以被完美的落地实施，而不再是一个被唾骂的异端。</p>

<h2>崛起</h2>

<p>过去的14年已经变得陌生。极限编程论战催生出来的敏捷运动，飞速成功，随后被项目经理接受，推动程序员。我们已经看到了确定性的、疯狂的成功，以及相应的（可预见的）无力的认证。我们看到了只采用了计划游戏（例如SCRUM)而忽略其他11个实践的策略失败了。这种策略被Martin Fowler称为<strong>无力的Scrum</strong>。我们已经经历了咨询师和作者们持续的加工和宣传，以及看板、精益及每一个新的项目管理方法的竞争。我们已经看到了软件工艺运动的发展，以及敏捷基因被逐渐的退化和稀释。</p>

<p>在所有的炒作和翻腾中，这12项实践依然留存，只是其中一些名字有稍微改变。一周工作40小时变成了可持续增长率。测试变成了TDD。隐喻变成了DDD。小版本变成了持续集成和持续部署。但是尽管名称改变，但是这些实践依然和14年前描述的差不多。</p>

<p>我们也看到极限编程这个名称几乎完全不用了。极少数人现在还使用这个词。一些人仍然使用XP这个缩写，但名称的大部分都已经消失。如果听到一个团队描述他们正在做的是极限编程，甚至正在践行所描述的这12项实践，我会觉得非常罕见。名称变了，但是实践未变。这些实践是持久的。
在翻腾，炒作，争议的咆哮和胡言乱语中，在人类争夺一个又一个位置的风雨中，在人类的贪婪，激情和骄傲的杂乱中，在所有的政治中，这些实践依然留存。</p>

<h2>稳定的价值观</h2>

<p>我相信这些实践这么持久是因为他们基于稳定的价值观这个坚实的基础。Kent Beck在他的书中第7章第29页描述了这样的价值观：</p>

<ul>
<li><p>沟通</p></li>
<li><p>简单</p></li>
<li><p>反馈</p></li>
<li><p>勇气</p></li>
</ul>


<p>我可以尝试论证为什么这些价值观是正确的，但是我他们自身已经论证了这些。软件工匠能够拒绝这些价值观中的任何一个吗？软件工匠能够不努力争取在工作中保证这些价值观的展现吗？这些价值观正是软件工艺的价值观。</p>

<p>我可以尝试辩论书中这12项实践拥抱和体现了这些价值观，但是这些实践的持久性足够证明,尽管围绕这些实践的名词和运动已经消散。</p>

<h2>成功</h2>

<p>极限编程已经成功了！它成功的超越了其支持者的最疯狂的梦想。它的成功是因为从诞生时的争议中幸存下来，在不可避免的倡导者的流失中幸存下来。它成功了是因为它活的比自己的名字更久！</p>

<p>极限编程的成功正像结构化编程的成功。甚至没人再会考虑结构化编程，因为他们一直在使用结构化编程。我们正在尝试达到没人再会考虑极限编程的目标。</p>

<p>这就是成功！一个想法从这场运动诞生一直存活到成为我们日常生活的一部分，这就是成功！</p>

<h2>回顾</h2>

<p>所以现在，2013年的最后几个星期，我花了些时间回顾1999年。那个时间Kent Beck写了一个突破性的书。这本书改变了一切。回顾并谨记:极限编程。简单的说，请承认它是:</p>

<p><strong>优秀的软件实践的核心</strong></p>

<p>原文出处: <a href="http://blog.8thlight.com/uncle-bob/2013/12/10/Thankyou-Kent.html">http://blog.8thlight.com/uncle-bob/2013/12/10/Thankyou-Kent.html</a>, 作者Uncle Bob Martin。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Gradle运行集成测试]]></title>
    <link href="http://www.huangbowen.net/blog/2013/12/10/integration-test-in-gradle/"/>
    <updated>2013-12-10T13:17:00+10:00</updated>
    <id>http://www.huangbowen.net/blog/2013/12/10/integration-test-in-gradle</id>
    <content type="html"><![CDATA[<p>如果Gradle构建的项目是一个web项目的话，里面可能包含一些集成测试和功能性测试。这些测试和单元测试不同之处是在运行之前要先在本地将web服务启动起来，并且跑完测试后能够自动的关闭web服务。</p>

<!-- more -->


<p>在本地启动web服务我们可以使用Gradle内置的jetty插件。jetty是一个轻量级的web容器，其执行速度快，配置简单，远程调试方便。启用jetty只需在build.gradle中加入对这个插件的引用。</p>

<figure class='code'><figcaption><span>build.gradle</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;jetty&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>之后可以配置war包的名称，启动的端口等属性。</p>

<figure class='code'><figcaption><span>build.gradle</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;jetty&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">httpPort</span> <span class="o">=</span> <span class="mi">9876</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="n">jettyRun</span><span class="o">,</span> <span class="n">jettyRunWar</span><span class="o">,</span> <span class="n">jettyStop</span><span class="o">]*.</span><span class="na">stopPort</span> <span class="o">=</span> <span class="mi">9966</span>
</span><span class='line'><span class="o">[</span><span class="n">jettyRun</span><span class="o">,</span> <span class="n">jettyRunWar</span><span class="o">,</span> <span class="n">jettyStop</span><span class="o">]*.</span><span class="na">stopKey</span> <span class="o">=</span> <span class="s1">&#39;stopKey&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们需要将集成测试与一般的单元测试分开。因为单元测试并不需要事先启动web服务，保证其执行速度快，能够得到更快的反馈。一般做法是单元测试后缀名为Test.java，集成测试后缀名为IntegrationTest.java。</p>

<p>配置单元测试执行的测试集合。</p>

<figure class='code'><figcaption><span>build.gradle</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">test</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">include</span> <span class="s1">&#39;**/*Test.class&#39;</span>
</span><span class='line'>  <span class="n">exclude</span> <span class="s1">&#39;**/*IntegrationTest.class&#39;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后新建一个Task，用于运行集成测试。</p>

<figure class='code'><figcaption><span>build.gradle</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">task</span> <span class="nf">intTest</span><span class="o">(</span><span class="nl">type:</span> <span class="n">Test</span><span class="o">,</span> <span class="nl">dependsOn:</span> <span class="n">test</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">include</span> <span class="s1">&#39;**/*IntegrationTest.class&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">doFirst</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">jettyRun</span><span class="o">.</span><span class="na">daemon</span> <span class="o">=</span> <span class="kc">true</span>
</span><span class='line'>      <span class="n">jettyRun</span><span class="o">.</span><span class="na">execute</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">doLast</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">jettyStop</span><span class="o">.</span><span class="na">execute</span><span class="o">()</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上述代码首先是创建一个名为intTest的task，其类型为Test,依赖于test task。该集成测试只会运行后缀名为IntegrationTest的测试类。在运行测试之前，首先采用后台模式启动jetty服务器，运行完测试后再调用jettyStop task停止jetty服务。</p>

<p>为了使我们在运行<code>gradle build</code>时也会运行intTest task，可以添加对intTest的依赖。</p>

<figure class='code'><figcaption><span>build.gradle</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">build</span><span class="o">.</span><span class="na">dependsOn</span> <span class="n">intTest</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样在运行<code>gradle build</code>时也会运行集成测试。并且在集成测试前后web服务会自动的启动和关闭。</p>
]]></content>
  </entry>
  
</feed>
