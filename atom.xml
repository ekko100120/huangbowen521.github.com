<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[黄博文的地盘]]></title>
  <link href="http://www.huangbowen.net/atom.xml" rel="self"/>
  <link href="http://www.huangbowen.net/"/>
  <updated>2017-09-15T18:37:41+08:00</updated>
  <id>http://www.huangbowen.net/</id>
  <author>
    <name><![CDATA[黄博文]]></name>
    <email><![CDATA[huangbowen521@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[OpenShift中的持续交付]]></title>
    <link href="http://www.huangbowen.net/blog/2017/09/15/ci-cd-and-production-deployment-in-openshift/"/>
    <updated>2017-09-15T18:04:42+08:00</updated>
    <id>http://www.huangbowen.net/blog/2017/09/15/ci-cd-and-production-deployment-in-openshift</id>
    <content type="html"><![CDATA[<p>上一文中讲述了如何在AWS下搭建OpenShift集群。这篇文章将目光转向如何在OpenShift中实现CI/CD以及产品环境的部署。</p>

<!-- more -->


<h2>持续交付</h2>

<p>如果要打造一个持续交付的流水线，首先要考虑多环境的问题。一般一个应用程序会有多个环境，比如开发环境、集成测试环境、系统测试环境、用户验收测试环境、类生产环境、生产环境。如何在OpenShift中隔离并建立对这些环境的部署流程有多种方案可以选择。</p>

<ol>
<li>同一个project中使用label和唯一名称来区分不同的环境；</li>
<li>集群中的不同project来隔离环境；</li>
<li>跨集群来隔离环境。</li>
</ol>


<p>我们以第二种方式为例，演示下多环境管理问题。</p>

<p><img src="http://www.huangbowen.net/images/oc_mutl_env.png" width="500"></p>

<p>在上图中，我们有一个build project。build project包含了一组相互依赖性比较强的应用，每个应用对应一个build config，产生的Image Stream存放在image register中。而每个环境各对应一个project，其中包含了该应用的deployment config，其镜像输入是build config产生的Image Stream。之所以这样做，有以下几点考虑：</p>

<ol>
<li><p>不同的环境分布在不同的project中，可以很好的借助project的特性进行环境隔离。比如sys project的容器只能部署在label为sys的node上，prod project的容器只能部署在label为prod的node上。</p></li>
<li><p>不同的project可以分别定义权限访问和控制。比如只有QA才能操作sys project中的资源，运维工程师才能操作prod project中的资源。</p></li>
<li><p>不同的环境共用一个Image Stream，保证了应用程序镜像在不同环境中的是完全一致的，防止由于测试环境和生产环境不一致而引入缺陷。</p></li>
</ol>


<p>那么大家共用同一个Image Stream，如何实现应用的promotion那？解决方案就是使用tag。</p>

<p><img src="http://www.huangbowen.net/images/oc_promotion.png" width="500"></p>

<p>如上图所示，一个image stream里面有多个版本的镜像，而OpenShift可以为版本添加自定义tag。在不同的project里面，我们配置image的来源为”ImageStreamTag”，名称为”applicationName:environmentName”。比如sys project的镜像名为”App1:sys”，prod project的镜像为”App1:prod”。如果想将version 3的镜像推送到sys环境，只需要简单的给version 3的镜像打上sys的tag，这样部署sys环境时就会自动使用version 3的镜像。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>oc tag App1:latest App1:sys
</span></code></pre></td></tr></table></div></figure>


<p>如果在Deployment Config里面配置了自动监听tag的变动的操作，那么一旦你修改了ImageStream的tag，就会自动触发对应环境的部署。</p>

<p>由于应用程序镜像在不同的环境中是一致的，那么变动的部分都被抽取到了外部配置中。如何根据不同的环境来加载对应的外部配置那？实现方式有很多种，这里介绍了使用Spring Cloud Config的方案。</p>

<p><img src="http://www.huangbowen.net/images/oc_config.png" width="500"></p>

<p>首先我们将针对不同环境的配置放置在一个git仓中，然后通过Spring Cloud Config Server将其转换为http服务。而我们在应用中嵌入Spring Cloud Config Client，其会接收一个环境变量来拉取指定环境的配置。而该环境变量可以通过Deployment Config来进行注入。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>oc env dc/sys <span class="nv">PROFILE</span><span class="o">=</span>sys
</span></code></pre></td></tr></table></div></figure>


<p>使用Spring Cloud Config给予了我们更多的灵活性。我们可以选择在应用程序第一次启动的时候拉取配置，也可以设置每隔一段时间自动更新配置，从而实现热更新。</p>

<p>OpenShift虽然提供了构建和部署的能力，我们有时也需要使用Jenkins之类的工具来可视化以及编排整个流水线。</p>

<p><img src="http://www.huangbowen.net/images/oc_jenkins.png" width="500"></p>

<p>既然OpenShift是个容器化的管理平台，那么我们完全也可以将Jenkins作为一个应用纳入到OpenShift中来托管，这样Jenkins的Master和Slave都是容器化的。OpenShift官方提供了一个Jenkins2.0的镜像，其预装了OpenShift pipeline插件，可以很方便地进行构建、部署等操作。</p>

<h2>生产环境的部署</h2>

<p>OpenShift在产品环境的部署默认是rolling的方式。</p>

<p><img src="http://www.huangbowen.net/images/oc_rolling.png" width="500"></p>

<p>每次部署时，它会启动一个新的Replica Controller，部署一个pod，然后削减旧的Replica Controller的pod，如此往复，直到旧的Replica Controller中的所有pod都被销毁，新的Replica Controller的所有pod都在线。整个过程保证了服务不宕机以及流量平滑切换，对用户是无感知的。</p>

<p>而有的时候部署场景要负责些，比如我们想在产品环境对新版本做了充分的PVT（product version testing）才切换到新版本。那么就可以使用蓝绿部署的方式。</p>

<p><img src="http://www.huangbowen.net/images/oc_blue_green.png" width="500"></p>

<p>蓝绿部署方案的关键点在于一个Router对应两个Service。而Route作为向外界暴露的服务端口是不变的，两个Service分别对应我们的生产蓝环境和生产绿环境。同时只有一个Service能接入Router对外服务，另一个Service用来进行PVT测试。切换可以简单的修改Router的配置即可。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>port:
</span><span class='line'>  targetPort: app-blue-http
</span><span class='line'>to:
</span><span class='line'>  kind: Service
</span><span class='line'>  name: app-blue
</span></code></pre></td></tr></table></div></figure>


<h2>结语</h2>

<p>OpenShift在应用的构建以及部署方面为我们提供了大量开箱即用的功能和解决方案,所以实现持续交付不再那么艰难。我们可以将更多的精力花费在提升应用程序质量以及架构方面，交付更好的产品。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在AWS中部署OpenShift平台]]></title>
    <link href="http://www.huangbowen.net/blog/2017/08/20/deploy-openshift-platform-to-aws/"/>
    <updated>2017-08-20T22:55:47+08:00</updated>
    <id>http://www.huangbowen.net/blog/2017/08/20/deploy-openshift-platform-to-aws</id>
    <content type="html"><![CDATA[<p>OpenShift是RedHat出品的PAAS平台。OpenShift做为PAAS平台最大的特点是它是完全容器化的PAAS平台，底层封装了Docker和Kubernetes，上层暴露了对开发者友好的接口来完成对应用程序的集成、部署、弹性伸缩等任务。</p>

<!-- more -->


<p>Docker提供了对打包和创建基于Linux的轻量级容器的抽象。而Kubernetes提供了多主机集群管理和Docker容器编排。OpenShift基于Docker和Kubernetes加入了新的功能：</p>

<ul>
<li>源代码管理、构建和部署</li>
<li>在系统中集成镜像的管理</li>
<li>按需扩展的应用程序管理</li>
<li>在大型开发者组织中进行团队管理和用户追踪</li>
</ul>


<p>OpenShift直接提供支持的应用程序镜像有：</p>

<p><img src="http://www.huangbowen.net/images/oslanguage.png" width="700"></p>

<p>OpenShift直接提供支持的数据库镜像有：</p>

<p><img src="http://www.huangbowen.net/images/osdatabase.png" width="700"></p>

<p>除此之外，OpenShift还让你通过一键点击便生成相应的应用，比如几秒之内搭建好一个Jenkins服务。包括以下：</p>

<p><img src="http://www.huangbowen.net/images/osapplication.png" width="700"></p>

<h2>OpenShift架构概览</h2>

<p><img src="http://www.huangbowen.net/images/openshiftart.png" width="700"></p>

<p>从上图可以看出，OpenShift的典型用户分为两种，开发人员和运维人员。开发人员可以通过现有的代码管理工具和持续集成、交付工具利用OpenShift完成对应用程序的打包、部署、扩容操作。而运维人员可以利用现有的自动化工具实现对OpenShift平台的维护。</p>

<p>OpenShift中的Kubernetes用来管理跨宿主机（或容器）的容器化应用程序，并提供部署、维护和应用程序扩容机制。对于一个Kubernetes集群来说，它包括一个或多个master以及一组node。</p>

<p>Master主机托管了API服务器、controller manager服务器以及etcd实例。Master管理Kubernetes集群中的节点并控制运行在节点上的pod。</p>

<p>Node则提供了容器的运行时环境。Kubernetes节点中的每个node会运行受Master管理的服务，当然也包括Docker、Kubelet及serverice proxy服务。node可以为云机器、物理系统或者虚拟系统。Kubelet用来更新node上的运行的容器状态。Service Proxy用于运行一个简单的网络代理，来反映定义在node的API中的服务，从而使node可以跨后端进行简单的TCP和UDP流转发。</p>

<h2>OpenShift架设要求</h2>

<p>如果想自己架设OpenShift平台作为商业用途，必须要获取OpenShift Enterprise的付费订阅。目前OpenShift Enterprise的最新版本为3.6版。对于Master和Node节点的系统要求如下。</p>

<p>Master:</p>

<ul>
<li>物理或虚拟机，或者运行于公有云或私有云之上的实例</li>
<li>基础操作系统为Red Hat企业版Linux（RHEL）7.1，并包含最小的安装选项</li>
<li>2核CPU</li>
<li>最小8GB内存</li>
<li>最小30GB硬盘空间</li>
</ul>


<p>Node：</p>

<ul>
<li>物理或虚拟机，或者运行于公有云或私有云之上的实例</li>
<li>基础操作系统为Red Hat企业版Linux（RHEL）7.1，并包含最小的安装选项</li>
<li>Docker 1.6.2及以上版本</li>
<li>1核CPU</li>
<li>最小8GB内存</li>
<li>最小15GB硬盘空间</li>
<li>另外最小15GB的未分配空间，需要通过docker-storage-setup进行配置</li>
</ul>


<h3>环境要求：</h3>

<ul>
<li>需要一个DNS zone来解析OpenShift router的IP地址。比如*.cloudapps.example.com. 300 IN  A 192.168.133.2</li>
<li>Master和Node之间必须要有共享的网络，两者之间可以互相通讯。</li>
<li>需要一个Git Server和能够访问该Server的账号。</li>
</ul>


<h2>AWS中部署OpenShift平台</h2>

<p>下图是一个在AWS中的OpenShift集群的示例。</p>

<p><img src="http://www.huangbowen.net/images/refarch-ocp-on-aws-v3.png" width="700"></p>

<ul>
<li><p>Master节点：包含3个Master实例，实现高可用，上面运行etcd、通过一个external load balancer向外暴露服务。</p></li>
<li><p>Infra Node: 由三个实例组成，这三个实例用来运行支撑OpenShift集群服务的一系列容器。</p></li>
<li><p>App Node：用于运行应用程序容器的实例，可以按需进行扩展。</p></li>
<li><p>Bastion：用于限制对集群中实例的ssh访问，增强安全性。</p></li>
<li><p>存储：OpenShift使用EBS作为实例的文件系统并用于持久化容器的存储；另外还使用S3这个对象存储服务作为OpenShift registry的存储。
ELB：总共有三个.一个用来在集群外访问OpenShift API、OpenShift console。一个在集群内访问OpenShift API。另一个用来访问通过route暴露的部署在集群中的应用程序服务。最后通过AWS的Route53来管理DNS。</p></li>
</ul>


<h2>部署OpenShift集群的三个阶段</h2>

<p>在AWS中部署OpenShift集群包括三个阶段：</p>

<ul>
<li>第一阶段：在AWS中设置好基础设施</li>
<li>第二阶段： 在AWS上部署OpenShift Container平台</li>
<li>第三阶段： 部署后的环境检查</li>
</ul>


<p>关于整个部署活动绝大多数都是可以自动化的。RedHat提供了一个GitHub repo：openshift-ansible-contrib。openshift-ansible-contrib提供了将OpenShift集群部署到不同的Cloud供应商的解决方案，当然也包括了AWS。里面包含了相应的文档、代码以及脚本。RedHat提供了一个叫做openshift-ansible-playbooks的RPM包，openshift-ansible-contrib利用该RPM包来完成阶段1和阶段2，在阶段3中我们可以利用一些现有的脚本工具实现环境检查和认证。</p>

<h3>对AWS环境的要求</h3>

<p>选择部署的AWS区域需要至少有三个可用区以及2个EIP。该OpenShift平台需要新建三个公共子网和三个私有子网。
由于需要新建一大批的AWS资源，所以必须要提供一个有适当权限的AWS用户，包括创建账号、使用S3、Route53、ELB、EC2等。</p>

<p>六个子网需要在一个VPC中。Ansible脚本会建立一个NAT Gateway用来供内部的EC2实例访问外网。同时也会建立8个Security Groups来限制不同的实例、ELB和外部网络间的访问。</p>

<p>openshift-ansible-contrib提供了部署基础设施、安装和配置OpenShift以及扩展router和registry的功能。运行Ansible的机器必须是RHEL7操作系统。具体的安装过程可参见<a href="https://access.redhat.com/documentation/en-us/reference_architectures/2017/html/deploying_openshift_container_platform_3.5_on_amazon_web_services/deploying_openshift%E3%80%82">https://access.redhat.com/documentation/en-us/reference_architectures/2017/html/deploying_openshift_container_platform_3.5_on_amazon_web_services/deploying_openshift%E3%80%82</a></p>

<p>安装完毕后的环境检查可以参见<a href="https://access.redhat.com/documentation/en-us/reference_architectures/2017/html/deploying_openshift_container_platform_3.5_on_amazon_web_services/operational-management%E3%80%82">https://access.redhat.com/documentation/en-us/reference_architectures/2017/html/deploying_openshift_container_platform_3.5_on_amazon_web_services/operational-management%E3%80%82</a></p>

<h2>总结</h2>

<p>在AWS上部署OpenShift平台并不是一件轻松的事情，一方面需要对AWS的各种服务了如执掌，一方面也需要对OpenShift的架构和核心概念有所了解。虽然RedHat提供了一些Ansible脚本和RPM包来简化安装，但整个过程也绝非一片坦途。安装完备之后，如何和企业现有的应用程序开发流程、持续交付流水线结合起来无缝过度，也是一件非常考验人的事情。下一篇文章会对这些方面进行揭秘。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[壮美大山包-2017中国大山包国际超百公里ITRA积分赛赛记]]></title>
    <link href="http://www.huangbowen.net/blog/2017/08/17/dashanbao-100km-running/"/>
    <updated>2017-08-17T23:56:58+08:00</updated>
    <id>http://www.huangbowen.net/blog/2017/08/17/dashanbao-100km-running</id>
    <content type="html"><![CDATA[<p>2017年4月份用时28个多小时跑完江南100，付出的代价是双脚多达8个以上的水泡。所以接下来的4月29日的环汶川越野赛果断的从60公里换到了30公里组，慢悠悠的完成了。</p>

<!-- more -->


<p>虽然在赛道上一度想再也不参加超长距离越野赛了，但是赛后没几天就好了伤疤忘了痛。看到跑友发的大山包越野赛的报名帖子后，心里又蠢蠢欲动。大山包离成都只有500多公里，可以坐火车过去，而且看了大山包景区的照片，是那么的漂亮，晚上还可以看到每天的星空，运气好还有流星雨。而且大山包还有一个翼装飞行基地，简直不能再酷。所以就报了名，并拉上了黄奎一起。</p>

<p><img src="http://www.huangbowen.net/images/IMG_5827.JPG" width="500"></p>

<p><img src="http://www.huangbowen.net/images/IMG_5828.JPG" width="500"></p>

<p>由于比赛在8月12日，整个5月份和6月份没有任何比赛，所以训练也比较懈怠。每次只是早上起来跑个5公里左右，拉拉速度。5月份出勤13次，总跑步距离71公里。6月份出勤15次，总跑步距离77公里。到了7月份我才有些慌了，打算加大运动量，并且报了7月29日的曾家山越野赛60公里组作为赛前拉练。</p>

<p>曾家山越野赛前我突击训练了几次，每次10公里，一个LSD也没拉过。结果比赛中状态不是很好，在第47公里处心态崩溃，主动退赛。在退赛的那一刻我觉得自己已经不可能完成大山包百公里越野了，想弃赛。但交通、住宿都已经订好了，而且报名费又那么贵，还是硬着头皮上吧。</p>

<p>离比赛还有10多天的时间，我开启了突击训练计划。7月31日到8月6日这一周，前五天每天跑10公里，第六天跑了5公里，星期天去龙泉山参加李科大神的训练课，学习上下坡技巧，并小小的拉练一下。接下来的一周只跑了一次10公里和一次5公里。</p>

<p>8月9号晚上完成赛前最后一练已经是夜里11点多了，刚躺下准备睡觉就发现几个跑群炸锅了。原来是大山包百公里由于不可抗拒的原因路线变了。新的路线和爬升还不清楚。这也太狗血了吧！第二天我才收到了新的路线和各CP点的关门情况。看来以前规划的策略都要变了。</p>

<p>8月11日早上我和黄奎、蔡立飞从火车北站出发，前往昭通。路上为了打发时间，我们斗地主，惩罚是做俯卧撑。打了几个小时我总过做了差不多200个。以前曾经突击训练过俯卧撑，这么点对我来说不算什么，就当是为明天比赛热身了。</p>

<p><img src="http://www.huangbowen.net/images/IMG_0033_2.jpg" width="500"></p>

<p>达到昭通已经是晚上9点多了，还好赶上了组委会的一个小车去大山包。到了大山包已经是凌晨12点多了，赶紧整理装备，冲个澡睡觉，3点半起来去集合点准备做摆渡车到起终点。这一夜总共睡了3个小时，接下来还要奋战20多个小时不能合眼，命苦啊。</p>

<p>这次大山包比赛我的装备有了一定的升级，买了压缩裤和压缩衣。</p>

<p>我的穿着是：</p>

<ul>
<li>魔术头巾两条；</li>
<li>CS空顶帽一个；</li>
<li>LP压缩服一件；</li>
<li>迪卡侬长袖跑步T一件；</li>
<li>CS压缩腿套一副；</li>
<li>迪卡侬跑步长裤一条；</li>
<li>INJINJI五指袜一双（为了不出水泡，我也是花了血本了）。</li>
<li>泰尼卡闪电2越野跑鞋一双；</li>
<li>tomtom运动手表一个；</li>
<li>迪卡侬登山杖一对；</li>
<li>迪卡侬越野背包一个；</li>
<li>迪卡侬骑行半指手套一双；</li>
<li>跑步腰包一个；</li>
</ul>


<p>越野背包中包含：</p>

<ul>
<li>李宁皮肤风衣一件；</li>
<li>1升水袋；</li>
<li>救生毯和雨衣；</li>
<li>暖宝宝一个；</li>
<li>康比特盐丸5袋和能量胶5条；</li>
<li>移动电源一个；</li>
<li>手机一部；</li>
<li>大山包100路线图一张；</li>
<li>黑钻头灯一个；</li>
<li>景瑶五指袜一双；</li>
<li>Petzl头灯一个；</li>
<li>备用电池一组；</li>
<li>创可贴5个；</li>
</ul>


<p>跑步腰包中包含：</p>

<ul>
<li>手机一部；</li>
<li>能量胶5条；</li>
</ul>


<p>我的换装包中包含：</p>

<ul>
<li>跑步袜N双；</li>
<li>耐克运动裤一条；</li>
<li>排骨羽绒服一件；</li>
<li>硬壳冲锋衣一件；</li>
<li>盐丸5袋和能量胶10个；</li>
<li>泰尼卡闪电2一双；</li>
</ul>


<p><img src="http://www.huangbowen.net/images/IMG_0032_2.jpg" width="500"></p>

<p>我们到达起终点之后没多久，比赛就准时在5点开始了。起点到CP1只有6.8公里。0爬升，680的下降。由于天黑没亮，只有打开头灯跑，这段路是机耕道，但是由于连日下雨泥泞不堪，需要小心躲避各种水坑。本来打算和黄奎一起跑，但是没多久又因为人多加路烂冲散了。前面人太多，路由不好走，我想提速也提不起来，本来计划6分配速跑完，但实际上用了8分多的配速，到达CP1时是5点59分，比预计时间多了10多分钟。CP1人太多，粥都喝完了，我只补充了点可乐，给水袋灌了一瓶矿泉水就又匆忙上路。</p>

<p><img src="http://www.huangbowen.net/images/IMG_5858.JPG" width="500"></p>

<p>CP1到CP2距离12.4公里，爬升368米，下降629米。这段路还是比较轻松的。刚出站就是一段爬升，天已经亮了，不过还有有雾，虽然视野也不是很开阔，但也能感受到大山包的壮美。爬升完后就是连续几公里的下降，一路小跑下去也没觉得累就到了CP2。我在CP2喝了点热水，听说下一个CP点有羊肉汤喝，就赶紧继续前进。</p>

<p><img src="http://www.huangbowen.net/images/IMG_5859.JPG" width="500"></p>

<p>CP2到CP3只有5.6公里，526米的爬升和380米的下降。距离比较近，所以没觉得怎么发力就到了。这个CP点有鸡汤和羊肉汤。我连喝了两碗羊肉汤，然后拉伸了一下肌肉，继续前进。CP3到CP4有12.9公里，爬升569，下降729米。也是先爬升后下降的套路。爬升对我来说还好，不紧不慢的走着。接下来的下降对我来说就有点吃力了，毕竟右膝盖受过伤，做过手术，连续下降冲击开始隐隐作痛。不过我还是比较淡定，因为我早习惯了每次跑到20公里左右右膝就会疼痛，而神奇的是随着距离的加长它会不再疼痛。</p>

<p><img src="http://www.huangbowen.net/images/IMG_5860.JPG" width="500"></p>

<p>到达CP4是10点多，稍作补给，喝了几碗鸡汤，吃了几块鸡肉，还有一些西瓜，开始向CP5进发。这段爬升就比较剧烈了，6.8KM爬升有721米，下降有268米。这是魔鬼赛段的开始，一直爬到有两个巨大石头处到了我们全程的最高点。两个巨大石头前的爬升让我恍然有了环汶川越野赛的感觉，那垂直爬升巨酸爽。CP5到CP6官方路线说爬升有760，下降有140.所以我在CP5就多休息了一下，喝了鸡汤，放松了一下大腿肌肉，然后继续进发。但是跑了好一段路发现都是下降，没看到爬升。一路上都是沿着路标跑的，不可能跑错，那大爬升在哪里那？一路怀疑自己，不知不觉就到了CP6.我一直质疑这是个假的CP6，说好的700多米的爬升那？</p>

<p><img src="http://www.huangbowen.net/images/IMG_5857.JPG" width="500"></p>

<p>CP6是个换装点，所以我在这里呆了有半小时。我脱了长袖长裤，换上了厚的裤子和冲锋衣。脚由于前面数次涉水已经被泡的发白，我洗干净后换了五指袜，又换了一双新的鞋子。穿上新鞋一切轻松，喝了碗姜汤感觉完全恢复了。这时候是下午2点，也就是说前50公里花了9个小时，这个时间我还比较满意。离关门时间还有19个小时，时间绰绰有余。</p>

<p><img src="http://www.huangbowen.net/images/IMG_5834.jpg" width="500"></p>

<p>CP6到CP7距离11.7公里，爬升769米，下井258米，绝对的硬仗。一开始就是连续的爬升，不过都是缓坡，而且是机耕道，路比较好走。我每爬40分钟就休息一下，吃一根能量胶继续前进。我发现能量胶真是个好东西，每次没力气了，吃了根胶又可以继续干。随着不断的爬升，风景也越来越好，最后到达了一个地方，到处是连绵的草甸，还有巨大的太阳能发电厂。CP7就这样不期而遇。CP7的补给比较简单，我只喝了两杯可乐，休息了20分钟才依依不舍的出站。</p>

<p><img src="http://www.huangbowen.net/images/IMG_5843.jpg" width="500"></p>

<p><img src="http://www.huangbowen.net/images/IMG_5838.jpg" width="500"></p>

<p>出站之后就是一段下降。我这时候也没赶时间了。有当地小孩要和我合影，我们一起拍了几张。中途也曾停下来休息，和几个当地小孩聊天。他们问我是不是还在上学？上学难不难？参加这个比赛累不累？那两个长棍子（登山杖）是干嘛的？…我和他们聊了10多分钟，期间拉伸了股四头肌，然后才出发。有一段比较剧烈的下降，让我再次感受到了环汶川越野赛的感觉。由于有些地方有青苔，一不小心摔了好几次。最后不得不降低速度，慢慢挪下来。</p>

<p><img src="http://www.huangbowen.net/images/IMG_5847.jpg" width="500"></p>

<p>挪到底后有一条小河，在这里遇到了跑友曾鹏，我们拍了几张照片后继续前进。过了河又是无尽的爬升。我碰到了一个当地村民，人家背个大包包，左右手各提着一大堆东西，爬这种50度的坡气都不喘。我和他边聊天边往上爬。到了半山腰由于路线原因我们就分开了。天色渐渐暗了，终于在天黑前到达了CP8。我进站前有一群小朋友站在一旁给我加油，让我受宠若惊。站内也只有我一个人，志愿者太热情了，不停的问我需要什么。我喝了点姜汤和羊肉汤，休息了20多分钟，放松了肌肉后才出站。虽然已经跑了70多公里，但感觉身体各方面状态都挺好的，唯一一个地方是压缩裤没有调整好，有点磨档，教训啊！</p>

<p><img src="http://www.huangbowen.net/images/IMG_5855.JPG" width="500"></p>

<p><img src="http://www.huangbowen.net/images/IMG_5833.jpg" width="500"></p>

<p>出站没多久天就黑了，拿出头灯继续前行，期间碰到几个警察热心地给我们鼓励。天气刚黑就起了大雾，由于路上路标太少，而且反光标很少，我一下子就迷路了。往回退了几百米碰到了和我一起出站的范哥和老黄，遂决定一起前行。其实CP8到CP9的路途比较简单，只有264米的爬升和321米的下降，白天跑起来肯定相当轻松。可惜大晚上的雾太大了，我戴着强光头灯能见度不到5米。头灯照着地下都看不清楚路况。我们一个人在前面找路，一个人在后面照明，慢慢前行。这么大的雾绝对是寂静岭的既视感。到了CP9志愿者都劝我们不要继续前进了，前面雾太大，而且山路急弯多，容易出事。我当时想三个人一起还是比较安全的，大不了慢慢走，全程不跑。CP9物资并不多，我只喝了一点白开水。</p>

<p><img src="http://www.huangbowen.net/images/IMG_0028_2.jpg" width="500"></p>

<p>出了CP9没多久我们就迷路了，我去探路，沿着一条大路跑了将近700米都没看到路标，只好原路退回来。在这里折腾了将近20分钟，都没找到前进的路，直到后面来了三个小伙伴，我们才找到了正确的路要从一个小道上切过去。这时候我们组成了一个6人团体，集体前往CP10.前半段我们的速度比较慢，只有20分的配速。大雾也时有时无，我们一路紧紧看着路标，放置迷路。因为在这种大雾里面迷路是致命的，一旦走错了路再返回很容易泄气。后半段石子路的下坡我们越走越快，终于在凌晨1点半时赶到了CP10。</p>

<p>刚到CP10志愿者说恭喜我们完赛了，由于安全考虑组委会已经终止了比赛，凡是到达CP10的都被认为是完赛了。我一听这个第一反应不是高兴，而且彻底懵逼了。当时我身体各方面状态都非常好，下坡也能跑起来，已经干了91.8公里，只有13公里到终点了你告诉我比赛终止了？我想继续前进，奈何没人响应，自己一个人跑也不太安全，只好作罢。</p>

<p>我们在CP10等了3个多小时才等到了转运车，回到酒店已经是凌晨5点多了。洗了澡睡觉真是舒服。早上9点多起来吃饭，取换装包，退手环，领完赛衫和完赛奖牌。这次比赛就告一段落了。</p>

<p>这次比赛组委会有很多地方没做到位，比如路线图和实际不符，CP5到CP6的爬升下降搞反了，CP10到终点的距离绝对不止13公里；路标不太完善，尤其是晚上的路标，在大雾中找路标太难了，反光标又太少，而且一些岔路口甚至没有路标；换装点和运动员预期不符，本来有两个换装点，但实际上只有一个在CP6，很多运动员到了CP8后才发现包在CP6，严重影响运动员接下来的比赛。</p>

<p>当然，我们也可以看到组委会和志愿者都是非常辛苦的。组委会在临时被迫换线的情况下迅速探出了新路线并布线，难度不可谓不大。组委会的贺胜珠一直在忙，赛前还给我打好几个电话联系车的事情，在CP10回起终点的路上也带领运动员去领包和去酒店住宿，可以说是24小时连轴转。而起终点和各个CP点的志愿者们都是超级热情，完全是在全心全意服务。当地的村民也很热情，有些CP点还烤土豆给我们吃。</p>

<p><img src="http://www.huangbowen.net/images/IMG_5861.JPG" width="500"></p>

<p>这是我跑的最轻松的一次百公里，总结了一下原因如下：</p>

<ol>
<li>赛前突击训练，在10天内跑了将近80公里，每次10公里历练。</li>
<li>每个CP点不着急，一边休息一边补给一边拉伸肌肉放松，身体状态保持较好。</li>
<li>由于每个CP点都有进食，胃也没有出现不舒服的情况，时不时的补充能量胶也起了很好的效果。</li>
<li>换装点换了新的鞋子和袜子，买的INJINJI五指袜很给力，涉水后不到几分钟就快干了，有效防止了脚长期沁水。</li>
</ol>


<p>不过也有值得总结经验的地方：</p>

<ol>
<li>手机没有下载轨迹地图，导致迷路的时候无法通过手机GPS回到轨道</li>
<li>赛前还是缺练，尤其是下坡。上坡慢慢晃可以，但下坡必须要把时间赶回来</li>
<li>没有准备鞋套，导致啥子、石子进了鞋子，需要时不时的停下来整理鞋子</li>
</ol>


<p>今年的百公里征战就告一段落了。好好练一练，明年再跑几次，玩玩铁三。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[膝盖中了一箭之康复篇-两周年纪念]]></title>
    <link href="http://www.huangbowen.net/blog/2017/07/02/acl-for-two-years/"/>
    <updated>2017-07-02T22:34:49+08:00</updated>
    <id>http://www.huangbowen.net/blog/2017/07/02/acl-for-two-years</id>
    <content type="html"><![CDATA[<p>右膝盖前十字韧带在2014年12月份的一次踢球中不小心弄断。2015年5月份才确诊。2015年的7月1日做了十字韧带重建术。到现在刚好是术后两年。</p>

<!-- more -->


<p>术后一年的纪念文章在这里：<a href="http://www.huangbowen.net/blog/2016/07/20/acl-for-one-year/">膝盖中了一箭之康复篇-一周年纪念</a>。</p>

<p>整个康复历程的文章在这里：<a href="https://www.google.com.hk/search?safe=active&amp;q=site%3Awww.huangbowen.net+ACL&amp;oq=site%3Awww.huangbowen.net+ACL">https://www.google.com.hk/search?safe=active&amp;q=site%3Awww.huangbowen.net+ACL&amp;oq=site%3Awww.huangbowen.net+ACL</a></p>

<p>这一年总的基调就是稳步前进。右膝盖已经恢复的相当好了，当然离完美还差的远。</p>

<p>2016年重回越野跑行列。并且在一周年之际完成了复出赛，环汶川50公里越野赛成功完赛。这标志着休养生息正式结束，开始主动出击，重回挑战自我的轨道。所以2016年7月份参加了张掖100越野赛，第二次发起百公里冲击。不过50公里处被关门，倒不是因为膝盖的问题，而是自己战术错误没保温，再加上组委会也干了一些傻逼的事情。</p>

<p>之后又去了印度呆了两个月。在这两个月中可把我的膝盖给操练爽了。印度TWU教练团队有爱踢球的、有爱打球的。这些活动我当然要加入啊，能够自由自在的打球和踢球是多么的幸福。我们每周一次踢球、数次打球。膝盖没有什么明显的不适，当然我们的对抗也不是很激烈。</p>

<p>除了打球和踢球，我还每周数次去健身房举铁，周末还要正常的跑步训练。再加上适当的节食，我的身体素质进步的很快。趁着周末我还参加了PUNE当地的两次跑步活动，跑了一个半马和1个10公里。</p>

<p>一切都看起来很美好，似乎我的膝盖已经完全康复了。但是意外往往来的猝不及防。9月份在PUNE当地一个有名的花园中常规刷半马的时候，当我跑到10公里时膝盖突然出现弹响。几乎每跑2步就会响一次。当时暗想遭了，不过还是坚持完成了后10公里的路程。</p>

<p>回去后我发现右腿在从弯曲到伸直的过程中膝盖会发生弹响，感觉里面有组织在摩擦。接下来一周我没事就活动髌骨，按摩膝盖，但效果不大。我一度怀疑是不是接的韧带又断了。</p>

<p>第一次发生弹响的一周后在PUNE有个12小时超级马拉松的比赛。我一直在想要不要弃赛。不过最后一刻还是选择去参加。由于晚到了1个半小时，所以我总共跑了10个半小时，66公里。其实整个赛道并不是平路，而是山路，相当坑爹。跑到30多公里的时候伤膝就痛的不行了。膝盖受伤对平路和上坡影响不大。而下坡就比较痛苦了，身体重量不断冲击膝盖，速度根本不敢提起来。</p>

<p>跑完超级越野赛不久我就回国了。10月份长假去了川西自驾游。由于腿还没有好利索，爬黄龙时非常吃力，心里也是很忐忑是不是韧带又断了。过完长假就去找主治医生复查，也顺便照了核磁共振。高医生看了报告说恢复的非常好。我问弹响是怎么回事？他说接的再好也没有原装的好，我这个比大多数人都算恢复的好的了。</p>

<p>看了医生以后我算吃了一颗定心丸，说明韧带还没有断。不过由于膝盖还是有不适，我只好弃赛了10月中旬的大理100。11月份的四姑娘山越野赛也因为训练太少外加高原反应而被退赛。</p>

<p>由于膝盖不适，接下来我没有进行大量训练，心情糟糕也没有坚持去健身房健身。2016年末的我体重猛增，最高时到了78KG。</p>

<p>过完年后已经是2017年的2月份。这时候在伸直膝盖时还会有弹响，但跑步时影响已经不是很大了。所以我开启了晨练计划。每天早上7点起床，跑步5公里左右，然后做一组引体向上、臂屈伸和垂杠举腿。到现在算起来出勤率大概有50%。</p>

<p>2月份以后也开启了越野跑和马拉松比赛。先后跑过20公里、30公里、40公里等不同组别、不同难度的比赛，也跑过一次全马，不幸的是跑蹦了。这一切也是为了备战4月份的江南100越野赛。</p>

<p>4月份江南100越野赛是我第三次向百公里比赛发起冲击。颇有不成功便成仁的气势。最后我以28小时49分的成绩成功完赛。各中历程就不复述，我的赛记里面写的有。</p>

<p>完成百公里越野赛后，我终于可以考虑铁人三项的训练了。考虑到游泳是我的短板，所以5月初找了一家公司附近的恒温游泳池，办理了年卡。每周差不多去训练4次左右，学习自由泳。都说游泳不伤膝盖，是恢复的好方式，我要试试效果。</p>

<p>2017年前半年去健身房举铁的次数很少，平局1周一次吧。主要是大部分时间都投入到了游泳上。</p>

<p>目前我体重74公斤左右，正在备战8月份的另一场百公里赛事。韧带术后重建的标签已经离我远去。潜意识里我已经不是膝盖做过手术的人了，而是一个正常的人。</p>

<p>自我感觉我的恢复还是相当不错的，整个恢复历程还是比较顺利的，唯一的小波折就是弹响，不过目前对我影响不大。</p>

<p>运动可以重塑一个人的人格，我还在路上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HashiCorp Vault介绍]]></title>
    <link href="http://www.huangbowen.net/blog/2017/07/02/hashicorp-vault-intro/"/>
    <updated>2017-07-02T22:00:44+08:00</updated>
    <id>http://www.huangbowen.net/blog/2017/07/02/hashicorp-vault-intro</id>
    <content type="html"><![CDATA[<p>HashiCorp Vault是一款企业级私密信息管理工具。说起Vault，不得不提它的创造者HashiCorp公司。HashiCorp是一家专注于DevOps工具链的公司，其旗下明星级产品包括Vagrant、Packer、Terraform、Consul、Nomad等，再加上Vault，这些工具贯穿了持续交付的整个流程。</p>

<!-- more -->


<p><img src="http://www.huangbowen.net/images/hashicorp_list.png" width="800"></p>

<p>HashiCorp Vault在2016年四月进入了ThoughtWorks技术雷达，位于Tools分类，处于ACESS级别。在2017年3月份最新一起Tech Radar中，HashiCorp Vault已经处于TRIAL级别。</p>

<p><img src="http://www.huangbowen.net/images/vault_tech_radar.png" width="600"></p>

<p><a href="https://www.thoughtworks.com/radar/tools/hashicorp-vault">https://www.thoughtworks.com/radar/tools/hashicorp-vault</a></p>

<h2>为什么要使用HashiCorp Vault？</h2>

<p>在企业级应用开发过程中，团队每时每刻都需要管理各种各样的私密信息，从个人的登陆密码、到生产环境的SSH Key以及数据库登录信息、API认证信息等。通常的做法是将这些秘密信息保存在某个文件中，并且放置到git之类的源代码管理工具中。个人和应用可以通过拉取仓库来访问这些信息。但这种方式弊端很多，比如跨团队分享存在安全隐患、文件格式难以维护、私密信息难以回收等。</p>

<p>尤其是微服务大行其道的今天，如何让开发者添加私密信息、应用程序能轻松的获取私密信息、采用不同策略更新私密信息、适时回收私密信息等变得越来越关键。所以企业需要一套统一的接口来处理私密信息的方方面面，而HashiCorp Vault就是这样的一款工具。</p>

<h2>HashiCorp Vault的特性</h2>

<p>HashiCorp Vault作为集中化的私密信息管理工具，具有以下特点：</p>

<ul>
<li><p>存储私密信息。 不仅可以存放现有的私密信息，还可以动态生成用于管理第三方资源的私密信息。所有存放的数据都是加密的。任何动态生成的私密信息都有租期，并且到期会自动回收。</p></li>
<li><p>滚动更新秘钥。用户可以随时更新存放的私密信息。Vault提供了加密即服务（encryption-as-a-service）的功能，可以随时将密钥滚动到新的密钥版本，同时保留对使用过去密钥版本加密的值进行解密的能力。 对于动态生成的秘密，可配置的最大租赁寿命确保密钥滚动易于实施。</p></li>
<li><p>审计日志。 保管库存储所有经过身份验证的客户端交互的详细审核日志：身份验证，令牌创建，私密信息访问，私密信息撤销等。 可以将审核日志发送到多个后端以确保冗余副本。</p></li>
</ul>


<p>另外，HaishiCorp Vault提供了多种方式来管理私密信息。用户可以通过命令行、HTTP API等集成到应用中来获取私密信息。HashiCorp Vault也能与Ansible、Chef、Consul等DevOps工具链无缝结合使用。</p>

<h2>HashiCorp 架构</h2>

<p>HashiCorp对私密信息的管理进行了合理的抽象，通过优良的架构实现了很好的扩展性和高可用。</p>

<p><img src="http://www.huangbowen.net/images/hashicorp_vault_art.png" width="600"></p>

<ul>
<li><p>Storage backend: 存储后端，可以为内存、磁盘、AWS等地方。</p></li>
<li><p>Barrier：隔离受信区域和非授信区域，保证内部数据的安全性。</p></li>
<li><p>HTTP API：通过HTTP API向外暴露服务，Vault也提供了CLI，其是基于HTTP API实现的。</p></li>
</ul>


<p>Vault提供了各种Backend来实现对各种私密信息的集成和管理。比如Authentication Backend提供鉴权，Secret Backend用于存储和生成私密信息等。</p>

<h2>总结</h2>

<p>HashiCorp Vault作为私密信息管理工具，比传统的1password等方式功能更强大，更适合企业级的应用场景。在安全问题越来越严峻的今天，值得尝试HashiCorp Vault。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AWS认证权威考经（助理级认证篇）]]></title>
    <link href="http://www.huangbowen.net/blog/2017/06/08/hwo-to-pass-aws-certifications/"/>
    <updated>2017-06-08T22:13:54+08:00</updated>
    <id>http://www.huangbowen.net/blog/2017/06/08/hwo-to-pass-aws-certifications</id>
    <content type="html"><![CDATA[<p>笔者作为AWS官方认证的早期通过者，已经拿到了AWS的助理级解决方案架构师、开发者认证，系统管理员认证。这几年也陆续指导公司多人通过AWS的认证。本篇文章将分享如何通过自学的方式轻松通过AWS的助理级架构师、开发者和系统管理员认证。</p>

<!-- more -->


<h2>为什么要考证</h2>

<p>在讲述AWS的认证体系之前，我们可以先探讨一下为什么要考取这样的认证。根据我接触的考证的人，总结出考证的原因主要是以下几个方面：</p>

<ol>
<li><p>通过考证提高自己的竞争力。这是大部分想考证的人的目的。<a href="https://blog.cbtnuggets.com/2016/07/10-high-paying-it-certifications/">https://blog.cbtnuggets.com/2016/07/10-high-paying-it-certifications/</a>一文中列出了IT领域薪资最高的10个证书，第一名就是AWS解决方案架构师认证。拿到认证的人员的平均年薪为125,871美元。在云计算领域，AWS是当之无愧的NO.1。阿里云在早期就是对标AWS，很多服务都是参照AWS做的。不过阿里云在国内市场的环境下也有创新，比如其开发的云盾产品，在各大云计算厂商中走到了前面。AWS随后也推出了类似的产品。</p></li>
<li><p>公司或部门要求员工考证。现在越来越的传统组织和企业拥抱公有云。据资料统计，目前有将近60%的国内网站运行在阿里云上。在拥抱云计算的同时，这些企业内的IT组织人员就需要掌握云计算相关的知识和技能。而考取认证可能就会成为企业和部门对公司部分员工的要求。另外云计算是一个很大的市场，除了各大云计算厂商外，他们都有很多合作伙伴。AWS也不例外。而要成为AWS的合作伙伴，则对公司内部考取认证的人数有一定要求。这也促使这些合作伙伴要求员工考证。</p></li>
<li><p>通过考证检验自己的技能学习情况。笔者就属于这个原因。笔者自从2012年接触AWS，至今已经将近5年。笔者在2013年通过了AWS的助理级解决方案架构师认证。后来也通过了开发者认证。目前正在积极备战解决方案架构师认证。</p></li>
</ol>


<p>其实无论考证是处于什么目的，我想说应该抱着掌握AWS服务的使用的目的来学习AWS，考证只是对自己掌握情况的检验。有个考取了专家级解决方案架构师认证的同事打过这样一个比喻，AWS认证就像是一名登山者所带的一盒午餐，当他爬到山顶后，可以享用这盒午餐。而他收获的肯定不仅仅是这盒午餐，而是沿途上的风景，午餐只是附赠品。如果单纯为了花费最小的力气来通过认证，往往会事倍功半。</p>

<h2>AWS的认证体系</h2>

<p>AWS的认证有路线图，主要分为Architecting（架构）、Developing（开发）、Operations（运维）三条线。每条线又分为助理级认证和专家级认证，必须通过助理级认证后才能考取相应的专家级认证。架构这条线的两个认证为助理级解决方案架构师认证和专家级解决方案架构师认证。开发这条线的两个认证为开发者认证和DevOps工程师认证。运维这条线的两个认证为SysOps系统管理员认证和DevOps工程师认证。也就是说开发和运维两条线的专家级认证是同一个证书。</p>

<p><img src="http://www.huangbowen.net/images/aws_certs_line.png" width="500"></p>

<p>举个例子，如果想考取专家级解决方案架构师认证，那必须先考取助理级解决方案架构师认证才行。而要考取DevOps工程师认证，则先要考取开发者认证或SysOps系统管理员认证两个证中其中最少一个。</p>

<p>另外每个证书都有有效期，其有效期为两年。到期之后可以重新认证。重新认证的费用和题量减半。由于云计算现在还处于高速发展的阶段，AWS每年都会推出很多新的云服务，也会对现有的服务升级。为了避免你掌握的知识过时，设置证书两年过期还是比较合理的。</p>

<p>本书主要讲述三个助理级认证的考经，由于专家级认证考试范围、考试难度、备考方式完全不一样，所以本文不会过多涉及。</p>

<h2>选择适合自己的证书</h2>

<p>根据笔者的了解，助理级认证中考取解决方案架构师的居多，而开发者和SysOps的人比较少。可能是因为每个IT技术人员都有一个当架构师的梦吧。其实笔者从考试经验来说，无论你选择哪种助理级证书，在备考的时候其实都是差不多的。也就是说用一种备考方式，可以三证通吃。根据笔者的经验，这三个证书考取的难易程度如下：开发者认证&lt;助理级解决方案架构师认证&lt;SysOps系统管理员认证。也就是说开发者认证难度最小，SysOps系统管理员认证稍难些，助理级解决方案架构师认证居中。</p>

<p>每个认证都有一个考试指南，目前只有英文版。上面有对想考取认证的人员的AWS知识和IT知识有要求。大家可以根据这些要求来判断自己考取哪个证书更有把握。</p>

<p>AWS助理级解决方案架构师的考试指南地址为：<a href="http://awstrainingandcertification.s3.amazonaws.com/production/AWS_certified_solutions_architect_associate_blueprint.pdf">http://awstrainingandcertification.s3.amazonaws.com/production/AWS_certified_solutions_architect_associate_blueprint.pdf</a>。</p>

<p>AWS开发者认证的考试指南地址为：<a href="http://awstrainingandcertification.s3.amazonaws.com/production/AWS_certified_developer_associate_blueprint.pdf">http://awstrainingandcertification.s3.amazonaws.com/production/AWS_certified_developer_associate_blueprint.pdf</a>。</p>

<p>AWS SysOps系统管理员认证的考试指南地址为：<a href="http://awstrainingandcertification.s3.amazonaws.com/production/AWS_certified_sysops_associate_blueprint.pdf">http://awstrainingandcertification.s3.amazonaws.com/production/AWS_certified_sysops_associate_blueprint.pdf</a>。</p>

<p>我们以开发者认证的要求为例，看看想考取该证书需要具备什么样的能力。</p>

<p>AWS知识：</p>

<ul>
<li>使用AWS技术的专业经验</li>
<li>使用AWS API的实战经验</li>
<li>了解AWS安全最佳实践</li>
<li>了解自动化和AWS部署工具</li>
<li>了解存储选项和其低层的一致性模型</li>
<li>非常了解至少一种AWS SDK</li>
</ul>


<p>通用IT知识：</p>

<ul>
<li>了解无状态和松散耦合的分布式应用程序</li>
<li>熟悉RESTful API接口开发</li>
<li>对关系型和非关系型数据的理解</li>
<li>熟悉消息和队列服务</li>
</ul>


<p>如果你目前还未达到指定的要求，没关系。至少知道了自己的薄弱点，通过学习补强再考。</p>

<h2>证书题型和考试相关</h2>

<p>目前助理级证书都提供英文和中文试卷。这对于英文不好的同学是一个福音。（想当年笔者考试的时候只有英文试卷）。助理级考试有模拟考试和正式考试。模拟考试为费用为20美元，共有20道题目，考试时间为30分钟。注意模拟考试最多考一次就行了。因为第二次的题目会和第一次的题目一模一样。正式考试费用为150美元，也可以通过中国认证合作伙伴通过人民币购买，费用为1,150人民币。正式考试有55道题，考试时间为80分钟。</p>

<p>AWS的认证题目都是选择题，有单选题和多选题。多选题题目会明确的告诉你有几个正确选项。每个助理级认证都有相应的样题，供你熟悉考试题型。</p>

<p>AWS 助理级解决方案架构师认证的样题及解析可参见我的博客：<a href="http://www.huangbowen.net/blog/2014/10/22/aws-cert-sample-question/">http://www.huangbowen.net/blog/2014/10/22/aws-cert-sample-question/</a>。</p>

<p>AWS 开发者认证的样题及解析可参见我的博客：<a href="http://www.huangbowen.net/blog/2016/07/27/aws-developer-exam-sample-questions/">http://www.huangbowen.net/blog/2016/07/27/aws-developer-exam-sample-questions/</a>。</p>

<p>AWS SysOps系统管理员认证的样题及解析可参见我的博客：<a href="http://www.huangbowen.net/blog/2016/08/01/aws-sysops-exam-sample/">http://www.huangbowen.net/blog/2016/08/01/aws-sysops-exam-sample/</a>。</p>

<p>我们可以助理级解决方案架构师认证的几个题目作为示例。</p>

<p>Amazon Glacier is designed for: (Choose 2 answers)</p>

<p>A.active database storage.</p>

<p>B.infrequently accessed data.</p>

<p>C.data archives.</p>

<p>D.frequently accessed data.</p>

<p>E.cached session data.</p>

<p>这是一个典型的多选题。题目明确告诉有两个正确选项。正确答案为B何C。因为AWS官方文档是这样描述Glacier的：</p>

<blockquote><p>Amazon Glacier is an extremely low-cost cloud archive storage service that provides secure and durable storage for data archiving and online backup. In order to keep costs low, Amazon Glacier is optimized for data that is infrequently accessed and for which retrieval times of several hours are suitable.</p></blockquote>

<p>段落出处为：<a href="http://aws.amazon.com/glacier/?nc2=h_ls">http://aws.amazon.com/glacier/?nc2=h_ls</a></p>

<p>Your web application front end consists of multiple EC2 instances behind an Elastic Load Balancer. You configured ELB to perform health checks on these EC2 instances. If an instance fails to pass health checks, which statement will be true?</p>

<p>A.The instance is replaced automatically by the ELB.</p>

<p>B.The instance gets terminated automatically by the ELB.</p>

<p>C.The ELB stops sending traffic to the instance that failed its health check.</p>

<p>D.The instance gets quarantined by the ELB for root cause analysis.</p>

<p>这是一个单选题，正确答案为C。因为AWS官方文档有这样一项描述：</p>

<blockquote><p>Elastic Load Balancing ensures that only healthy Amazon EC2 instances receive traffic by detecting unhealthy instances and rerouting traffic across the remaining healthy instances.</p></blockquote>

<p>本段落的出处为：<a href="http://aws.amazon.com/elasticloadbalancing/?nc2=h_ls">http://aws.amazon.com/elasticloadbalancing/?nc2=h_ls</a>。</p>

<p>考试并没有详细的分数线。AWS 认证的分数线是依据统计分析结果来设定的，并不固定。AWS 不会公布考试的分数线，因为试题和分数线可能会更改而不另行通知。2013年的时候，根据经验一般正确率达到65%以上就可以通过考试，拿到认证。但近年来这个比例也在上升。目前至少要70%以上才有保险拿到证书。</p>

<h2>认证准备篇</h2>

<p>其实没有必要被认证的考试指南中的要求吓到。有些技能我们可能目前不具备，但可以通过学习来掌握。</p>

<p>AWS目前有近百项服务，分为18个类别。要想全部掌握要花的时间可不少。不过如果想通过AWS的助理级认证，只需要熟悉掌握主要的服务即可。对其他服务只需要明白其使用场景以及一些应用限制。</p>

<p>我认为需要熟练掌握的服务：</p>

<ul>
<li>Amazon EC2</li>
<li>Amazon VPC</li>
<li>Amazon S3</li>
<li>Amazon EBS</li>
<li>Amazon RDS</li>
<li>Amazon DynamoDB</li>
<li>Elastic Load Balancing</li>
<li>Amazon CloudWatch</li>
<li>AWS Identity &amp; Access Management</li>
<li>Amazon Simple Queue Service</li>
</ul>


<p>知道其应用场景和限制条件的服务有：</p>

<ul>
<li>Amazon Glacier</li>
<li>Amazon ElastiCache</li>
<li>Amazon Redshift</li>
<li>Amazon CloudFront</li>
<li>Amazon Route53</li>
<li>AWS CloudFormation</li>
<li>AWS Config</li>
<li>AWS CloudTrial</li>
<li>AWS WAF</li>
<li>Amazon Simple Notification Service</li>
<li>Amazon Simple Email Service</li>
<li>AWS Import/Export</li>
<li>AWS connect</li>
</ul>


<p>对于需要熟练掌握的服务，每个必须都要进行实战演练。而第二类服务，如果不想花费太多时间，可以不必进行实战演练，查看相关的文档即可。</p>

<p>在开始学习之前，请先去aws.amazon.com的官网注册一个新的账号。因为AWS对于新的账号有free tier（免费套餐）服务。AWS 免费套餐服务/产品包括自 AWS 注册之日起 12 个月内可供免费使用的服务，以及在 AWS 免费套餐的 12 个月期限到期后不自动过期的其他服务/产品。我上面列出的所有服务基本上都在AWS免费套餐范围内。拿Amazon EC2来说，在新账号注册后的12月内，你可以享受750 小时 每月 Linux、RHEL 或 SLES t2.micro 实例使用时间，以及750 小时 每月 Windows t2.micro 实例使用时间。 例如，运行 1 个实例 1 个月，或运行 2 个实例半个月都是免费的。这样的免费套餐足够我们进行实战演练了。注意账号时需要绑定一张自己的信用卡，否则无法注册成功。</p>

<p>注意目前AWS分为中国区和全球区，中国区和全球区的账号是不能通用的。并且中国区账号并没有免费套餐服务，所以只有注册全球区的账号才可以使用免费套餐服务。</p>

<h3>认识并熟悉专业术语</h3>

<p>在学习AWS初期，你一定会听到各种各样的缩写词，很容易迷失。这些专业术语有的是和AWS服务紧密相关的，比如ELB（Elastic Load Balancing服务的缩写）、SQS（Amazon Simple Queue Service的缩写）等。有些是跟网络安全紧密相关的，比如ACL、AAD、SG、MFA等；有跟应用程序服务相关的，比如SOAP、WSDL、WAF等。每当你看到一个不懂的术语时，先记下来，然后弄清楚它的意思。这样随着时间的推移不懂的术语会越来越少。你可以查看AWS官方的术语表来进行巩固。英文版本为<a href="http://docs.aws.amazon.com/general/latest/gr/glos-chap.html">http://docs.aws.amazon.com/general/latest/gr/glos-chap.html</a>。中文版本为<a href="http://docs.aws.amazon.com/zh_cn/general/latest/gr/glos-chap.html">http://docs.aws.amazon.com/zh_cn/general/latest/gr/glos-chap.html</a>。</p>

<h3>学会查看AWS官方文档</h3>

<p>要学习AWS，最好的文档当然是AWS的官方文档。目前AWS的官方文档有80%都进行了汉化处理。也就是说如果英文不是很好的同学可以看中文的文档。</p>

<p>访问<a href="https://aws.amazon.com/cn/products/?nc2=h_ql_ny_gsc">https://aws.amazon.com/cn/products/?nc2=h_ql_ny_gsc</a>可以看到AWS提供的所有服务，最上面的菜单可以切换语言。我们以想要了解EC2为例，点击计算类别，可以看到Amazon EC2。点击该服务后就会进入Amazon EC2的主页<a href="https://aws.amazon.com/cn/ec2/?p=tile">https://aws.amazon.com/cn/ec2/?p=tile</a>。这里列出了EC2的介绍以及其优势。这些内容务必仔细学习，能够让你迅速了解一门产品并且明白其使用场景和优势。</p>

<p>点击菜单栏的产品详细信息可以进入到另一个页面：<a href="https://aws.amazon.com/cn/ec2/details/">https://aws.amazon.com/cn/ec2/details/</a>。这里不仅有产品详情，还有开发人员资源、常见问题以及入门手册。如果想动手练习对EC2的使用，可以访问<a href="https://aws.amazon.com/cn/documentation/ec2/">https://aws.amazon.com/cn/documentation/ec2/</a>。里面提供了HTML/PDF/Kindle三种格式的入门指南。可以按照入门指南的操作步骤进行操作学习。</p>

<p>每个服务都有常见问题页，比如EC2的常见问题页是<a href="https://aws.amazon.com/cn/ec2/faqs/">https://aws.amazon.com/cn/ec2/faqs/</a>。每个服务的常见问题页都必须要熟读并掌握，因为至少70%的考题的答案都可以在常见问题中找到。但是单纯背诵这些内容是无意义的，很容易忘记。必须要明白AWS每个问题的答案的背后意义，这样才有助于记忆。</p>

<h3>查看AWS的白皮书</h3>

<p>AWS官方文档对每个服务介绍的非常详细，但内容很多，看起来比较累。而AWS的白皮书则总结了使用AWS的一些最佳实践和方式，并针对一些具体场景结合相应服务的特点给出了最适合的架构设计。<a href="https://aws.amazon.com/cn/whitepapers/">https://aws.amazon.com/cn/whitepapers/</a>列出了AWS的所有白皮书。重点需要掌握的白皮书有：</p>

<ul>
<li><a href="https://d0.awsstatic.com/whitepapers/AWS_Cloud_Best_Practices.pdf">云架构设计：AWS 最佳实践</a></li>
<li><a href="https://d0.awsstatic.com/whitepapers/Security/AWS_Security_Best_Practices.pdf?refid=em_">AWS 安全最佳实践</a></li>
<li><a href="http://d0.awsstatic.com/whitepapers/Security/AWS%20Security%20Whitepaper.pdf">Amazon Web Services：安全流程概览</a></li>
<li><a href="https://d0.awsstatic.com/whitepapers/architecture/AWS_Well-Architected_Framework.pdf">AWS 架构完善的框架</a></li>
<li><a href="http://media.amazonwebservices.com/AWS_Development_Test_Environments.pdf">AWS 上的开发和测试</a></li>
<li><a href="https://d0.awsstatic.com/whitepapers/Backup_Archive_and_Restore_Approaches_Using_AWS.pdf">使用 AWS 的备份与恢复方法</a></li>
<li><a href="http://media.amazonwebservices.com/AWS_Amazon_VPC_Connectivity_Options.pdf">Amazon Virtual Private Cloud 连接选项</a></li>
<li><a href="http://d0.awsstatic.com/whitepapers/aws_pricing_overview.pdf">AWS 的定价机制</a>。</li>
</ul>


<h3>视频和辅助网站</h3>

<p>除了实战操作、查看文档外，观看视频也是学习的途径之一。Youtube有很多操作视频可以观看。另外<a href="https://acloud.guru/">cloudguru</a>和<a href="https://linuxacademy.com">LinuxAcademy</a>网站上也有大量的视频教程。Cloudguru和LinuxAcademy都是需要付费的。LinuxAcademy按月付费为29美元每月，年度费用为228美元。Cloudgruru则按课程收费，比如助理级架构师认证课程费用为29美元。另外还提供打包服务，全部AWS课程的打包服务为149美元，共7门课。我备战AWS考试的时候都用过这两个网站的服务。总体感觉Linux
Academy的课程要丰富一些，并且便宜。这两个网站都提供一站式的服务。在这里你既可以观看视频学习，也可以通过其创建的AWS资源进行免费操练，更可以疯狂刷模拟题。注意这两个网站中的模拟题比正式考题的题目要简单些。模拟题的题库也不大，比如助理级架构师的题库有300多道题。我当时是刷穿了，基本上300道题做完只会错3、4道。</p>

<h2>备考计划篇</h2>

<p>一个没有什么AWS使用经验的IT工作人员，想要考取AWS助理级认证还是要花些时间的。但时间也不是想象中的那么长。我第一个认证当时认真准备了1个半月。每天至少花3个小时，最后以65%的准确率惊险过关。而第二个证则只准备了1周多，只花了20多分钟就做完了55道题，准确率达90%以上，轻松过关。根据我经验判断，如果没有AWS相关的使用经验，每天投入三小时的话，最多3个月就可以去考试了。因为需要熟练掌握的服务差不多有10多个，每三天掌握一个，需要30天的时间，而需要了解的服务也有10多个，每两天掌握一个，需要22天。剩下的一个月可以阅读白皮书、动手做实验加强理解、在网站上刷题，补充薄弱点。</p>

<p>每学习一个服务时，要求动手与文档相结合。尤其是必须要理解AWS管理控制台上操作时每个选项的具体含义。一般官方文档都会给出其具体意义。另外文档也会包含有实战中了解不到的内容。比如个人账户最多只能开启20个EC2，再多就需要申请；SQS消息队列中消息默认的存活时间是14天；S3中存储的最小对象可以为0KB等。这些都有可能会成为考试内容。</p>

<p>个人建议每学习一个服务都要动手记下笔记。俗话说眼过千遍不如手过一遍。这样也可以避免学习了后面的忘记的前面的。笔记可以时不时拿出来复习一下。</p>

<h2>考试篇</h2>

<p>访问<a href="https://www.aws.training/certification?src=cert-prep">https://www.aws.training/certification?src=cert-prep</a>可以安排一场模拟考试或者正式考试。模拟考试在网上可以直接进行。正式考试则需要去相应的考点。目前在中国有成都、重庆、北京、上海、广州、杭州、长沙、大连、济南、南京、青岛、深圳、苏州、武汉、西安、厦门、郑州等城市设有考点。周一和周五都可以考试，一般提前一周报名注册即可。</p>

<p>正式考试时需要带上个人有效证件（比如身份证、护照、户口本）等。考试一本是一个单独的房间，只有你一个人，使用的电脑是考试方提供的电脑。我的几次考试都是在成都考的。成都这边的网络比较差劲，答完一道题后，需要等好几秒才能进入下一题。虽然页面刷新时计时器会暂停，但是非常影响节奏。考试的时候只能带笔和草稿纸，不能带任何电子设备，手机等需要放在外面。做完以后可以提前交卷，也可以等时间到以后自动交卷。交完卷后你会立马知道自己的成绩以及通过与否。</p>

<p>正式考试80分钟要答55道题，每道题的时间只有不到2分钟，所以时间很紧促。由于所有的题目都是选择题，那么有一个窍门是在一张A4纸上划上下面一个表格：</p>

<p><img src="http://www.huangbowen.net/images/examtips.png" width="500"></p>

<p>每道题为一行，对于认为绝对错误的选项划x，对于认为正确的选项划o,对于不确定的选项划？。这样有助于整理思路，然后回头检查时可以缩小范围，提高准确率。</p>

<h2>总结</h2>

<p>洋洋洒洒写了很多，最后再快速总结一下。</p>

<p>需要熟练掌握的服务（需要了解它们的方方面面）：</p>

<ul>
<li>Amazon EC2</li>
<li>Amazon VPC</li>
<li>Amazon S3</li>
<li>Amazon EBS</li>
<li>Amazon RDS</li>
<li>Amazon DynamoDB</li>
<li>Elastic Load Balancing</li>
<li>Amazon CloudWatch</li>
<li>AWS Identity &amp; Access Management</li>
<li>Amazon Simple Queue Service</li>
</ul>


<p>知道其应用场景和限制条件的服务有：</p>

<ul>
<li>Amazon Glacier</li>
<li>Amazon ElastiCache</li>
<li>Amazon Redshift</li>
<li>Amazon CloudFront</li>
<li>Amazon Route53</li>
<li>AWS CloudFormation</li>
<li>AWS Config</li>
<li>AWS CloudTrial</li>
<li>AWS WAF</li>
<li>Amazon Simple Notification Service</li>
<li>Amazon Simple Email Service</li>
<li>AWS Import/Export</li>
<li>AWS connect</li>
</ul>


<p>备考路线图：</p>

<ol>
<li>先注册AWS账号</li>
<li>阅读各个认证的考试大纲及样题</li>
<li>查看AWS常见问题页</li>
<li>根据官网文档依次学习上面的列出的服务；第一类服务需要大量的实战操作，第二类服务实战操作不是强制性，但文档需要查看；</li>
<li>查看各个服务的常见问题页</li>
<li>阅读AWS白皮书，尤其是列出的那些白皮书是必读的</li>
<li>做一遍官方模拟题</li>
<li>如果买了Cloudguru或LinuxAcademy的服务的话，可以疯狂刷网站提供的模拟考试，争取题库中的题目正确率在95%以上。</li>
<li>可以去考试了。</li>
</ol>


<p>平心而论，AWS认证的含金量还是比较高的。因为它的考试题目（尤其是专家级的考试题目）都是综合性的，不会考什么冷僻知识点，都是现实使用中会碰到的问题。尤其是我在备战专家级解决方案架构师的认证中，了解了各种实际场景下如何结合云计算提供的服务进行架构设计。自己的架构设计能力得到了真正的提高。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C#多线程编程实战(原书第2版)译者序]]></title>
    <link href="http://www.huangbowen.net/blog/2017/05/17/multithreading-in-csharp-6-dot-0/"/>
    <updated>2017-05-17T16:37:46+08:00</updated>
    <id>http://www.huangbowen.net/blog/2017/05/17/multithreading-in-csharp-6-dot-0</id>
    <content type="html"><![CDATA[<p>毫不夸张的说，C#可能是这个星球上最与时俱进的语言了。几乎每隔一段时间，微软都会推出新版本的.NET Framework框架。每次版本更迭，C#都会引入一些令人兴奋的新特性，但为了保持向后兼容，它也变的越来越复杂。尤其是C#中的多线程编程方面，有太多的方式和方法可供选择。这可能会导致两种情况，初学者学会一种后就试图匹配任何场景，而有经验的开发人员则往往对某一场景纠结于应该选择哪种多线编程方式。避免该问题的方式就是深入了解C#的多线程编程的整个设施架构。而《Multithreading in C# 5.0 cookbook》一书则是一本能帮助你快速建立起C#中多线程编程世界观的书籍。</p>

<!-- more -->


<p>该书的阅读门槛很低，刚开始讲述了线程基础、线程同步、线程池等基本概念。接下来讲述了C#4.0引入的关于异步操作的任务并行库以及C#6.0中最新的关于异步编程的语法和库。另外也涉猎了并发集合、PLINQ及Reactive Extensions等用于提高异步编程开发效率的实用库。同时也讲述了异步I/O的常用场景和常见的并行编程模式。最后也讲述了在Windows 10以及其他操作系统平台上使用异步编程的一些范例。</p>

<p>作者Eugene Agafonov编写此书时展示了他娴熟的技术功底。本书几乎每一小节都附有详细的可运行的代码，并且作者对代码都进行了细致入微的解读。读者可以一边阅读一边实战，一点也不会觉得吃力。
本人在翻译和校审本书过程中得到了同事和家人的帮助和支持，华章公司的编辑们也给予了很多宝贵的建议，在此一并表示感谢。最后，希望本书能给大家带来一次超凡的阅读体验。</p>

<p>黄博文</p>

<p>购买链接:<a href="https://item.jd.com/12147384.html">https://item.jd.com/12147384.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[五上汶川-熊猫热土环汶川超级越野赛赛记]]></title>
    <link href="http://www.huangbowen.net/blog/2017/05/10/wenchuan-running/"/>
    <updated>2017-05-10T22:37:51+08:00</updated>
    <id>http://www.huangbowen.net/blog/2017/05/10/wenchuan-running</id>
    <content type="html"><![CDATA[<p>2014年12月份我在汶川完成了第一次越野跑，从此入坑。那时候的组织者是热土越野的前身，成都跑客。这次的环汶川越野赛是我第五次来汶川参加越野跑。</p>

<!-- more -->


<p>2017年4月16日用时将近29小时完成了自己的第一个百公里赛事-江南100。完赛很艰难，代价也是很惨重的，左脚磨了6个泡，右脚磨了3个泡。尤其是左脚赛后血泡出现了感染的迹象，愣是瘸了一周才有些好转。之前报了环汶川的60公里组，也只好忍痛改为30公里组。</p>

<p>环汶川越野赛的60公里组赛道相当的虐，60公里爬升就要5200米，相当于江南100的爬升了。如果参加60公里肯定又是一场苦战。30公里组相对来说温柔些，总爬升2000多。</p>

<p>5月29日早上我们一家人自驾来到了汶川。我先领了参赛包，然后把家人安顿好。这次有幸加入了LP战队，整了一套压缩服。30公里组下午两点钟发枪，正是当天最热的时候。</p>

<p>我这次的装备是：</p>

<ul>
<li>凯乐石空顶帽</li>
<li>LP压缩短袖</li>
<li>LP压缩短裤</li>
<li>萨洛蒙5L背包</li>
<li>迪卡侬手杖一对</li>
<li>萨洛蒙跑步袜</li>
<li>泰尼卡闪电2跑步鞋</li>
<li>右腿LP腿套，左腿迪卡侬腿套</li>
<li>用来别号码簿的腰带</li>
</ul>


<p>背包中包含的东西有：</p>

<ul>
<li>救生毯</li>
<li>雨衣</li>
<li>医疗包</li>
<li>奥利奥一包</li>
<li>杏仁一小包</li>
<li>迪卡侬长袖一件</li>
<li>迪卡侬跑步长裤一件</li>
<li>500ML水袋2个</li>
<li>手机一部</li>
<li>头灯一个</li>
</ul>


<p>这次装备精简了很多，并没有带羽绒服、冲锋衣等厚衣服。因为我预估天黑前会从山上下来，不需要准备太厚的衣服。根据前面几个越野跑的完赛经验，我给这次越野跑定下了6小时完赛的目标。</p>

<p>下午两点发枪，30公里组和17公里组一起出发。天气非常热，温度差不多有30度。所以刚开始我只是慢跑。左脚水泡好了以后刚长出新皮肤，频繁接触地面还是有些隐隐作痛。为了不让受伤加深，我没有加速。赛道介绍说起点到CP1只有3.6公里，爬升500多米。这段路比较简单，都是机耕道，爬升也不是很剧烈。我一边快走一边频繁补水。到达CP1其实手表记录距离已经有将近5公里了，耗时接近1个小时。CP1有西瓜，我抢了两块吃。然后把一个水袋灌满饮料，一个水袋灌满水就继续前进。</p>

<p><img src="http://www.huangbowen.net/images/IMG_5606.JPG" width="600"></p>

<p>CP1刚出站就有一个比较陡峭的爬升，很多人也在这里慢了下来。我感觉体力尚可，进入超人模式。连续几公里的爬升后是一个下坡。终于可以飞起来了。但是刚跑一会就觉得不对，这路太险了，只有一人宽，悬崖几乎没有任何遮挡。为了安全起见只好减速慢跑。这次组委会做的特别到位，危险路段都提前有路牌指示，提醒选手小心。下完坡又是一个长上坡。上到顶后有一段在山脊奔跑。在这里拍几张照片绝对是大片。接下来都是下坡了，一路下到底。下坡弱的毛病又显现出来。我按自己最舒服的节奏跑下山。下山之后穿过村庄后到达了CP2。</p>

<p><img src="http://www.huangbowen.net/images/IMG_5607.JPG" width="600"></p>

<p> 到了CP2耗时2小时20多分。如果要6小时完赛，接下来还需要保持相同的速度。但CP2到CP3是最难的一段，短短10公里有1200的爬升。我去年曾登过一次赵公山，1400爬升花了2个小时。而这段路走的比我想象中的要辛苦。我做了短暂补给后，就继续前进。刚开始时一段盘山路，爬完后又是一段碎石路段的爬升。碎石路段的爬升后就进入了野路。眼前的这座大山差不多要爬到顶。刚开始状态还好，爬起来很有劲。随着下午的临近，山上越来越冷。尤其是刮风的时候，短袖有些扛不住。而我感觉肠胃也出了点问题，喉咙很痒，咳嗽的时候干呕。我赶紧停下来取出长袖、长裤穿上。奥利奥也感觉吃不进去，就吃了一小包杏仁。快到山顶的那段路爬的异常艰难。基本上爬10多米就要喘几口气。最后一公里竟然花了个1个小时。到顶后看到机耕道我觉得太亲切了。顿时调整为跑步模式。左脚还是有些隐隐作痛，所以跑的时候也没追求速度。就9-10分的速度。</p>

<p><img src="http://www.huangbowen.net/images/IMG_5613.JPG" width="600"></p>

<p>一路下降就到了CP3，已经是7点20多了。6小时完赛肯定是不行了。所以我就在CP3好好的休息了很久。我喝了3大碗牛肉汤，吃了好几块西瓜。吃饱喝足之后，才心满意足的出发，迎接最后的几公里。出站没多久，天就黑透了。我拿出头灯戴好继续前行。CP3到终点的这段路没什么技术难度，都是平坦的大路，偶尔穿插一些小路。我全程小跑，状态还是比较好的，后来甚至越跑越快。不过左脚水泡处经过长时间的摩擦，痛感也有些加剧。</p>

<p><img src="http://www.huangbowen.net/images/IMG_5615.JPG" width="600"></p>

<p>过了红军桥，离终点越来越近。虽然是晚上9点多了，终点还有很多人在等待。在主持人的欢呼中我冲过了终点。整个比赛用时7小时26分钟。回到终点后坐在一把椅子上休息了半个小时，然后才一拐一瘸的去体育馆退了手环，领了牛奶。参加热土越野的比赛就是划算，这样的牛奶都已经领了好几次了。然后去饭店吃了一碗拉面，感觉又满血复活了。</p>

<p><img src="http://www.huangbowen.net/images/IMG_5611.JPG" width="600"></p>

<p>这次比赛又一次暴露出了肠胃问题。看来以后训练或者比赛一定要养成吃东西的习惯。接下来还要继续参加热土的赛事。第一次穿压缩服上阵，感觉LP的压缩服穿起来很舒服，效果也好，能有效缓解肌肉疲劳，赞一个！组委会也一如既往的给力，各方面都很到位，志愿者都很热情。继续加油。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[解读基础设施即代码]]></title>
    <link href="http://www.huangbowen.net/blog/2017/05/07/infrastructure-as-code/"/>
    <updated>2017-05-07T17:51:03+08:00</updated>
    <id>http://www.huangbowen.net/blog/2017/05/07/infrastructure-as-code</id>
    <content type="html"><![CDATA[<p>现代软件开发对基础设施的管理提出了更苛刻的要求。产品要适应瞬息万变的市场，要求基础设施要有更快的响应速度。而持续交付和DevOps的推行要求产品团队对部署和运维要有更高的自主性。技术的快速进步和演化，也使得基础设施的配置不得不频繁变化。在这种快速变化的过程中，要求基础设施既要灵活，也要安全、可靠。</p>

<!-- more -->


<p>而传统的基础设施运维管理具有以下几个问题。</p>

<ul>
<li><p>被动响应。 产品团队获取服务器资源采用的是申请制，中间存在若干审批过程，以及需要等待运维团队实施，响应不及时。</p></li>
<li><p>自动化缺乏串联。虽然有一定的自动化，但不能做到无人值守，需要执行一些临时命令介入。由于环境释放和重建的成本高，因而倾向于不释放，导致资源利用率低。</p></li>
<li><p>和产品团队脱节。很难根据需求随时动态增加环境。需要额外的文档来描述环境，可能更新不及时。</p></li>
</ul>


<p>产品团队是实施持续交付的过程中，必须考虑将基础设施的维护纳入进来，作为支持产品运行的一部分。以下是产品团队的持续交付流水线全景图。</p>

<p><img src="http://www.huangbowen.net/images/teamcd.png" width="600"></p>

<p>从上图可以看出，产品团队除了管理项目本身代码外，还要管理环境定义脚本。环境定义脚本可以由基础设施自动化工具执行，动态创建和销毁和更新产品运行所需的环境（包括服务器、负载均衡器、防火墙配置、第三方依赖等）。</p>

<p>如果实现了这一点，那么就实现了基础设施即代码的雏形。Kief在《Infarftruce As Code》一书中对基础设施即代码定义如下：</p>

<p>基础设施即代码是一种使用新的技术来构建和管理<strong>动态基础设施</strong>的方式。它把基础设施、工具和服务以及对基础设施的管理本身作为一个软件系统，采纳<strong>软件工程实践</strong>以结构化的安全的方式来管理对系统的变更。</p>

<p>基础设施即代码有四项关键原则。</p>

<ul>
<li>再生性。</li>
</ul>


<p>环境中的任何元素可以轻松复制。</p>

<ul>
<li><p>一致性。 无论何时，创建的环境各个元素的配置是完全相同的。</p></li>
<li><p>快速反馈。 能够频繁、容易地进行变更，并快速知道变更是否正确。</p></li>
<li><p>可见性。 所有对环境的变更应该容易理解，可审计，受版本控制。</p></li>
</ul>


<p>基础设施即代码的目标是：</p>

<ul>
<li><p>标准化。 以代码来定义环境，实现开发环境、测试环境、生产环境的标准化。</p></li>
<li><p>自动化。 以自动化工具来驱动代码准备环境。包括创建环境、更新环境以及销毁环境。</p></li>
<li><p>可视化。 以监控来可视化环境信息。环境当前状态可视、环境变更历史可视、可追溯。</p></li>
</ul>


<p>基础设施即代码实践会产生高成熟度的持续交付和DevOps。</p>

<p><img src="http://www.huangbowen.net/images/infcd.png" width="600"></p>

<p>在实施基础设施即代码时，要遵守以下实践。</p>

<ul>
<li>使用DSL描述环境。</li>
</ul>


<p>Ansible、Chef、SaltStack、Terraform等基础设施自动化工具都有各自的描述性语言实现对基础设施的定义。使用DSL更容易通过描述性的语言定义基础设施，也有助于代码重用。团队成员能建立起共同理解，从而维护脚本。</p>

<p>以下是Ansible的一个playbook示例。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>---
</span><span class='line'>- hosts: local
</span><span class='line'>  tasks:
</span><span class='line'>   - name: Install Nginx
</span><span class='line'>     apt: pkg=nginx state=installed update_cache=true
</span><span class='line'>     notify:
</span><span class='line'>      - Start Nginx
</span><span class='line'>
</span><span class='line'>  handlers:
</span><span class='line'>   - name: Start Nginx
</span><span class='line'>     service: name=nginx state=started
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>自测试系统。</li>
</ul>


<p>在编写环境代码的配置时，也要编写对环境的测试。确保所有服务器都正确进行了配置，遵守了所有的安全规则，网络连通性等进行了验证。我们一般提倡将测试代码和配置代码放在一起维护。这样配置代码更新的化，能保证测试代码也被及时更新。</p>

<p>一些典型的基础设施自动化测试工具有ServerSpec、Testinfra等。以下是一个ServerSpec的示例。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>require 'spec_helper'
</span><span class='line'>
</span><span class='line'>describe package('httpd'), :if =&gt; os[:family] == 'redhat' do
</span><span class='line'>  it { should be_installed }
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>describe package('apache2'), :if =&gt; os[:family] == 'ubuntu' do
</span><span class='line'>  it { should be_installed }
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>describe service('httpd'), :if =&gt; os[:family] == 'redhat' do
</span><span class='line'>  it { should be_enabled }
</span><span class='line'>  it { should be_running }
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>describe service('apache2'), :if =&gt; os[:family] == 'ubuntu' do
</span><span class='line'>  it { should be_enabled }
</span><span class='line'>  it { should be_running }
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>describe service('org.apache.httpd'), :if =&gt; os[:family] == 'darwin' do
</span><span class='line'>  it { should be_enabled }
</span><span class='line'>  it { should be_running }
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>describe port(80) do
</span><span class='line'>  it { should be_listening }
</span><span class='line'>end
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>一切进行版本化。</li>
</ul>


<p>一旦采用了环境定义脚本实现对环境的控制后，需要将环境定义脚本纳入到版本管理中。并且之后所有的环境变更都应该先修改环境定义脚本，由环境定义脚本触发对环境的变更。登录到服务器执行一些临时性命令是被坚决禁止的。因为这极有可能会破坏环境的一致性。当重建服务器时，也不能保证能应用所有需要的变更。</p>

<p>下图是基础设施即代码的一个典型使用场景。</p>

<p><img src="http://www.huangbowen.net/images/infusecase.png" width="600"></p>

<p>除此之外，如果想要在生产环境中创建可伸缩性的服务的话，也需要借助基础设施即代码这一实践。在高峰时期，系统可以根据定义的环境自动创建并加入新的节点实现动态扩容，并在低峰时将其销毁。当监控发现某节点失败，系统可以根据定义的环境自动创建新的节点来替换失败节点，实现自动灾难恢复。</p>

<p>最后是我们在某团队实施基础设施即代码的案例解析。这张图是某团队的基础设施架构图。</p>

<p><img src="http://www.huangbowen.net/images/infexample.png" width="600"></p>

<p>该团队使用AWS作为基础设施平台。我们选用ansible作为基础设施自动化工具，并结合AWS提供的cloudformation服务实现快速创建和销毁资源。所有网元都有清晰的角色划分，配套对应的配置脚本。从网络配置到网元配置以及应用配置都实现了全自动化。所有的配置脚本都和源代码一起托管在GitHub。团队所有成员都可以查看并修改。从无到有构建整套系统从以前的10人天缩短到了短短的2小时。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在那江南烈日与阵雨中-江南100赛记]]></title>
    <link href="http://www.huangbowen.net/blog/2017/04/24/jiangnan-100/"/>
    <updated>2017-04-24T11:24:22+08:00</updated>
    <id>http://www.huangbowen.net/blog/2017/04/24/jiangnan-100</id>
    <content type="html"><![CDATA[<p>人是健忘的动物。江南100已经过去了一周，我在赛道上的经历也已经忘记了7成。作为首次完赛的百公里赛事，还是很有必要记录一下。</p>

<!-- more -->


<p>去年的12月份报名了江南100越野赛的100公里组。之所以报名江南100，一是因为自己没有去过宁波，听过赛道很美，想去看看；二是疯马团有团报，报名费可以便宜不少；三是100公里组爬升5200+，爬升适中，但是关门时间长达30小时，比较容易完赛。之前尝试冲击过2次百公里都没有完赛。第一次是2014年4月份举行的大连100，跑到CP7第72公里处因伤退赛；第二次是2016年的7月份张掖100，在CP3到CP5的山脊上由于下雨失温，差点丢了性命，到达CP5后已经被关门了。江南100是我第三次发起冲击，如果这次不成功，我打算沉寂一段时间。如果成功了，我就可以开始准备铁三的训练，好好把游泳练一练。</p>

<p>2月份开启了我的晨练计划。每天早上早起跑上3到5公里，距离虽然不长，但是注重训练效率。</p>

<p>2月份出勤14次，总跑步113公里；参加28公里越野赛一次，爬升1900+，用时7个半小时。</p>

<p>3月份出勤18次，总跑步153公里；参加40公里越野赛一次，爬升2200+，用时7小时20分钟;参加全程马拉松一次，用时4小时50分钟。</p>

<p>4月份比赛前出勤6次，总跑步50公里；参加30公里越野赛一次，爬升1900+，用时5小时42分钟。</p>

<p>总体跑量还是偏少，体重也比较大。不过进步还是能看的到的，以前路跑时跑进500配速都要累的够呛，后来状态好时420的配速也能跑的出来。越野跑爬山能力也得到了提升。不过有两个隐患为完赛蒙上了阴影，一是毕竟膝盖有伤，一般越野赛20公里后下坡右膝盖会非常疼痛，导致无法跑起来；二是右脚踝跑步时会隐隐作痛，怕运动时间长了会更严重。</p>

<p>14号早上坐飞机到了宁波，先去拜访了高中班主任。高中毕业一晃都12年了，老班还是和以前一样年轻。中午老班请吃了宁波当地的海鲜，那个春笋很是鲜美，很久没喝酒的我也和老班喝了两瓶啤酒。下午坐车来到了奉化镇，领取了参赛包，参加了技术说明会，入住了酒店。这次成都也来了不少人，和二队、西米露、武老师、张团长以及其他地方的跑友一起吃了晚饭。回到酒店后就可以整理参赛包。</p>

<p><img src="http://www.huangbowen.net/images/jiangnanheying.jpg" width="400"></p>

<p>这次江南100我的穿着是：</p>

<ul>
<li>魔术头巾两条；</li>
<li>凯乐石空顶帽一个；</li>
<li>李宁跑步短袖一件；</li>
<li>迪卡侬压缩短裤一条；</li>
<li>迪卡侬绑腿一对；</li>
<li>迪卡侬跑步袜一双；</li>
<li>泰尼卡闪电2越野跑鞋一双；</li>
<li>tomtom运动手表一个；</li>
<li>迪卡侬登山杖一对；</li>
<li>迪卡侬越野背包一个；</li>
<li>黑钻头灯一个；</li>
<li>半指骑行手套一双；</li>
</ul>


<p>越野背包中包含：</p>

<ul>
<li>迪卡侬跑步长袖一件；</li>
<li>李宁皮肤风衣一件；</li>
<li>迪卡侬跑步紧身长裤一件；</li>
<li>1升水袋；</li>
<li>救生毯和雨衣；</li>
<li>康比特盐丸5袋和能量胶5条；</li>
<li>坚果2小包；</li>
<li>移动电源一个；</li>
<li>手机一部；</li>
<li>江南100路线图一张（后面起了大作用）。</li>
</ul>


<p>我的换装包中包含：</p>

<ul>
<li>跑步袜一双；</li>
<li>耐克运动裤一条；</li>
<li>排骨风衣一件；</li>
<li>硬壳冲锋衣一件；</li>
<li>盐丸5袋和能量胶5条；</li>
<li>移动电源一个；</li>
</ul>


<p><img src="http://www.huangbowen.net/images/jiangnanzhuangbei.jpg" width="400"></p>

<p>根据天气预报15日和16日都是大晴天，也就是说不用雨战了。我其实是比较怕雨战的，因为本来下山就弱，一旦下雨更是寸步难行。去年的江南100就是因为大雨而中断比赛。不过我依然随身带着一身长衣服，这是因为被张掖100的失温整怕了，所以决定以后只要进山保暖一定要到位。多背点东西无所谓，一定不要自己难受。在整理参赛包时我本想将头灯放在换装包中。因为根据估算如果下午7点天黑的话，我有将近12个小时完成50公里跑到CP4换装点，所以无需前半程携带头灯。但后来觉得万一没在天黑前到换装点，就惨了。所以把头灯放到了背包中，事后证明这个选择真是太明智了。</p>

<p>15日早上5点多起来排空，给水袋灌满水，和微比一起去吃了美滋滋的牛肉面，顿时浑身充满了力气。我们步行来到起点已经6点半了。随便照了几张照片，热了下身，随着主持人的倒计时，百公里征程又一次开启。</p>

<p><img src="http://www.huangbowen.net/images/jiangnanniuroumian.jpg" width="400"></p>

<p><img src="http://www.huangbowen.net/images/jiangnanqidian.jpg" width="400"></p>

<p>起点到CP1爬升9.5公里，累计上升888，下降393。这一段路主要是在雪窦山景区里穿行，大都是硬化公路和景区台阶。我们路过了弥勒道场、三隐潭等地方，景色非常的漂亮。不过我由于急于赶路，也没有停下来拍照，一直在按自己的节奏前进。9点25分我到达了CP1，比预计时间晚了25分钟。主要是这段路程其实并没有组委会说的9.5公里远，我跑了将近12公里，看来又遇到了加量不加价。赛前我一直担心这么多人会不会导致补给点补给不足，毕竟张掖的教训在那里摆着。不过到了CP1之后我才发现自己的担心是多余的。江南100的补给确实丰富，各种运动饮料、矿泉水、可乐、小番茄、橙子、香蕉、馒头、稀饭、面包&hellip;.太丰富了，我喝了几杯可乐和宝矿力，吃了点水果，把水袋灌满水，包里揣了两节香蕉、手里拿了一个面包就出站了，只在CP站呆了不到10分钟。</p>

<p><img src="http://www.huangbowen.net/images/jiangnancp1pubu.jpg" width="400"></p>

<p><img src="http://www.huangbowen.net/images/jiangnancp1.jpg" width="400"></p>

<p>CP1到CP2距离9.7公里，爬升586，下降556，算是比较轻松的赛段。所以我想在这段路多赶点时间，争取2个小时完成。这时候早上已经过去了，天渐渐的热了起来，我感觉气温已经到了30度以上，跑着真是一种煎熬。这段路主要是在一些景区小路里穿行，有的路段特别漂亮，还穿过了几个江南小镇。不过有一段铁丝网的狭窄小路发生了堵车，足足耽误了将近20分钟的时间。这段里程有不可避免的被加送了里程，到达CP2时间为11点26分，我也没有多做停留，依旧是补完水、揣一个馒头就出发了。</p>

<p><img src="http://www.huangbowen.net/images/jiangnantaohua.jpg" width="400"></p>

<p><img src="http://www.huangbowen.net/images/jiangnancp2-1.jpg" width="400"></p>

<p>CP2到CP3距离13.5公里，爬升628，下降528，也是比较轻松的赛段，但是在高温下却完全不一样了，温度足有35度左右，还未怎么奔跑就疲惫不堪。我的胃也出现了点问题，啃着馒头却咽不下去，结果直接吐了，把刚喝的稀饭、饮料全吐了出来。其实我已经有了轻微中暑了，只是当然自己并没有意识到。无奈扔了馒头继续前进。不过我带的能量胶派上了用场，吃了一个能量胶后感觉恢复了一些体力。路上碰到了空心菜，诧异他怎么这么慢。他说赛前一直感冒，状态很不好。我没有多做停留，就说先走一步，一会来捡我。CP2到CP3有一段连续爬升，是一条古道。古道上也有不少来此爬山的游客和户外队。每隔一段距离就有一个小房子，有一些选手就在里面乘凉。我跑越野的习惯是只在CP点做短暂停留，中途一直保持行走的状态，即使减慢速度也不会停歇。这段路程略显痛苦啊，有些人热的直接在马路边上睡觉休息。这段路有个坡叫做绝望坡，坡度70度，都是松软的砂石泥土，我只能手脚并用爬上去。到了CP3已经是下午3点10分，也就是说这段13.5公里的路我花费了3小时42分钟。本来我想计划是3小时内绝对要完成的，但结果把之前积攒的时间浪费了一些。CP3碰到张团长也在，他说有点中暑，状态不好，想退赛。我知道CP3到CP4是最难的一段路，爬升1024米，下降1600米。这是一场硬仗，跑完这段路完赛就有希望。我在CP3好好的修正了一番，也给水袋加满了水。由于肠胃问题，吃不下东西，只好多喝点稀饭。我之前赛前把2个能量胶放在背包前面口袋，剩余三个放在背包后面。但跑步时我记得所有能量胶都在前面口袋。CP3前吃了两个，再也没找到其他三个。恰好在CP3灌水时发现原来还有三个在后面，赶紧把它拿到了前面口袋。CP3到CP4有3个能量胶的支援，这段路我感觉更有信心了。</p>

<p>我直到3点30才出CP3。CP3会经过一个农家院子，我征得主人同意后用他们的水龙头洗了一把脸，感觉好了很多。CP3要翻越座大山，一座是青虎湾岗，最高海拔979米，两一个是四明山主峰，最高海拔1018米。爬青虎湾岗真让我苦不堪言，爬了一个陡峭的小山包，抬头优势一个小山包。一个接一个爬的让人绝望。这时候我的体力也不行了，爬几个山头后就要坐下来休息一番。爬上青虎湾岗以后，又是一个坡度5、60度的陡降，我只能拿出屁降绝技，慢慢的滑下去。在向四明山主峰进发的过程中，天也渐渐的黑了，我摸出头灯，穿上了长袖、长裤，继续前进。当我爬到一个山脚下时，看到黑暗中有两块明晃晃的牌子，依稀写着佛生什么的，旁边还有个红色的灯一闪一闪，远处也有一些灯忽明忽暗。这完全是鬼片的即时感嘛。不过我胆子大，一点也不怕。不知爬了多久，终于到了四明山主峰了，一个光秃秃的山包，下面灯光点点。到顶后，我连说了10个F**K。根据路线图来看，接下来就是将近1000米的下降就到CP4了。但是这个下降也要了我的命的。刚开始坡度60度度，只能使用登山杖一点一点往下挪。然后又是坡度40多度的羊肠小道，体力消耗大再加上怕滑倒，我根本跑不起来。下山弱的毛病暴露无遗。为了强制自己赶时间，我开始数数，每次跑100步然后走一段路，然后再跑100步再走一段路。也不知过了多久，终于下到了大路上，也看到CP4的灯光，听到了CP4传来的喧哗声。挣扎着跑到CP4打了卡以后一屁股坐在椅子上休息。这时候已经是晚上9点了，提早关门时间2小时，CP3赛段耗时5小时51分钟。CP4早已睡倒了1大片，很多人也在此退赛，有人在大声咒骂农民想钱想疯了，加量又加爬升。我喝了两碗稀饭，给水袋灌满水，拿来换装包穿上了冲锋衣，并把一条厚裤子放到了背包中。无论什么时候保暖都是第一位。然后装上了5个能量胶。这时候我也有点想退赛了，感觉耗尽体能才跑了50公里，后面50公里拿什么来跑？而且头50公里用时14小时，后面50公里只有不到16小时的时间，在身体极度劳累的情况下几乎完不成了。但我又不是很甘心，这是第三次向百公里冲击，事不过三啊。我分析了一下后半段的赛程，CP4到CP5爬升876米，是一场硬仗，CP5到CP6爬升472米，相对比较轻松，CP6到CP7爬升660米，难度适中，CP7到终点爬升只有66米，简直是so easy。也就是说只要能坚持到CP7就肯定可以完赛，我又燃起了完赛的欲望。我休息到了9点30，毅然决然的拿杖前行。</p>

<p>CP4到CP5距离15.2公里，爬升876米，下降296米。这也是一场硬仗。刚开始路程比较简单，是一段缓爬升的土路。这样的土路走起来比较舒服，基本能保持12分的配速。后面数次要过溪水，我都是踩着石头通过的。远处也传来了打雷的声音，宁波春天多阵雨。由于有些地方下了阵雨，导致有些小路都是水，需要踩水过去。平路我走的还可以，但是稍微有些爬升的话走的就比较慢。有一段路我在独自前行时，有一组四个人超过了我，我就跟在他们前行。他们行进速度很快，我在后面竭尽全力跟着。后来前面一男一女不见了，只剩下两个大哥。我跟着这两个大哥一直到了另一段绝望坡。已经凌晨了，看到这么陡峭的绝望坡才能感觉什么叫做绝望。恰在此时来了一阵大雨，如果雨再多下一会儿肯定就爬不上去了。当我爬上了绝望坡后，两位大哥都不见了踪影。此时我的体能已经达到了极限，连走路的力气都没有了。还好CP4的爬升已经够了，只要一段下降就能到CP5。在下降的过程中，我感觉体力恢复了一些，能够小跑起来。这时候困的眼睛都睁不开了，随便看一眼路，然后前进。脑袋也出现了幻觉，感觉地上的草都升了起来，升到了半空。</p>

<p>赶到CP5后是凌晨1点23分。CP4到CP5总耗时4小时21分钟，还算满意。我在CP5连喝了几大碗稀饭，泡了一碗方便面，但就是吃不下去，一旦做出吞咽的动作就会反胃。好在CP点有咖啡，我一口气喝了4杯咖啡，又坐在椅子上吃了很多葡萄干、圣女果，还有哈密瓜。虽然吃了这么多，我还是觉得胃里空空如也，但是固体食物真是吃不进去。我尝试着站起来好几次，都感到头晕的很，差点栽倒在地上。另外还突然有阵雨来袭，引起CP点一阵慌乱。我又动了退赛的念头。那两个大哥已经出站走了。我一直休息到了2点钟才决定出站继续前进。因为我看到CP5到CP6爬升只有400多，下降却有500多，而且距离有10.5公里，不是很难。</p>

<p>出了CP5后我竟然发现我的状态出奇的好，能够一路小跑下山。那些白天都不敢跑的路晚上我竟然能跑起来。可能是太黑了，看不清楚，也不觉得怕滑到了。一段下降之后就到了硬化路面，走在硬化路面上就是舒服，我一路上超了好几个人。之后是一段石板路的连续爬升，一路上一个人默默前行。到CP6是凌晨5点05分。快到CP6时又下了大雨，还好我穿了冲锋衣。在CP6喝了一些粥，也没有加水，只是揣了一瓶宝矿力。由于长时间运动脚上已经有水泡了。我在CP6休息到了5点半才出站。我知道完赛已经问题不大了，因为马上天就要亮了，时间很充裕。</p>

<p><img src="http://www.huangbowen.net/images/jiangnancp6.jpg" width="400"></p>

<p><img src="http://www.huangbowen.net/images/jiangnancp6-1.jpg" width="400"></p>

<p>CP6到CP7距离有14.7公里，爬升660，下降500。刚开始有几公里大路，并且是缓下降。我快走加跑想多赶些时间。天也渐渐的亮了，恰好我的头灯也没电了，我收起头灯继续前行。其实这段赛道还是很漂亮的，在满坡的桃树林中不断的穿梭。我也数次停下来休息做休整，研究爬升图，估摸着还有多远。就这样走走停停到了CP7已经是早上9点了，只剩下8公里的路程了，胜利在望。我在CP7休息到了9点半才出站。天也渐渐的热了起来，我把冲锋衣脱下来绑在腰间，感觉凉快了很多。脚底的血泡的疼痛感越来越大，每走一步都是钻心的痛。本来愉快的8公里下坡也根本跑不起来，只能一步一步的挪。烈日当空，我明确的感觉到自己中暑了，头昏昏沉沉的感觉随时要晕倒。当走到一个下坡处时，有个志愿者说只有2.5公里就到终点了。我在这里洗了脸，感觉好了一些，咬牙跑了起来。可是跑了大约1公里看到路程显示还有96公里，我f**k。不过我并没有停止奔跑，还是继续下降。终于下降到了公路上，离终点只有1公里了。我实在是跑不动了，慢悠悠的走到终点。离终点200米的时候才象征着跑起来跑过终点。</p>

<p><img src="http://www.huangbowen.net/images/jiangnanzhongdian.jpg" width="400"></p>

<p><img src="http://www.huangbowen.net/images/jiangnanzhongdian2.jpg" width="400"></p>

<p>张团长一直在终点等我们。到了终点合完影以后还给我做肌肉拉伸，那酸爽不摆了。整个比赛没抽筋的腿在赛后抽了起来，尤其是大腿股四头肌抽的我要死的心都有了。我挪到了医疗点让医生帮我处理水泡。脱了袜子以后，那水泡简直不忍直视。左脚有大小水泡5个，右脚有鸡蛋大的水泡一个。处理完毕后我根本都走不动路了，主要是水泡在脚板心，每走一步都是煎熬。</p>

<p><img src="http://www.huangbowen.net/images/jiangnanresult.jpg" width="400"></p>

<p>回到家后周一在床上昏睡了一天。周二早上挣扎着上班，但是脚痛的厉害，已经肿了，头也晕得很。只好下午再去医院看了脚，回家休息。其实如果脚上没血泡的话，两天时间应该就能恢复了。可是左脚的血泡比较严重，出现了化脓的现象，直到一周后才减轻了不少。</p>

<p>江南100的比赛组织还是很不错的。补给站的补给很到位，志愿者也是非常的热情，路标很清晰，没有出现跑错路或者迷路的情况。美中不足的是送里程和爬升，赛道距离提示和实际不符，有些CP点间距离过大。希望以后能够继续改进，做成更好的赛事。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[写在2017年环汶川越野赛之前]]></title>
    <link href="http://www.huangbowen.net/blog/2017/04/20/running-in-wenchuan/"/>
    <updated>2017-04-20T16:56:49+08:00</updated>
    <id>http://www.huangbowen.net/blog/2017/04/20/running-in-wenchuan</id>
    <content type="html"><![CDATA[<p>我从2014年4月份开始跑步，到这个月份恰好3年。第一次跑步是我在国外布里斯班出差的时候。布里斯班市有一条布里斯班河穿城而过，市政府在布里斯班河上修了一条10多公里的河上跑道，是一个骑车和跑步不可多得的好地方。当时跑完了我的第一个10公里后，我还写了一篇文章：<a href="http://www.huangbowen.net/blog/2014/04/07/running/">跑在路上的程序员随想</a></p>

<!-- more -->


<p><img src="http://www.huangbowen.net/images/buli1.jpeg" width="400"></p>

<p>在这三年的跑步生涯中，我总共参加过4场在汶川举行的越野跑比赛。四场比赛，不同的心情。</p>

<p>第一场比赛是2014年12月份由成都跑客在汶川龙山举办的龙山越野赛。当时比赛很简陋，我们参赛的人被寂阳拉到龙山半山腰布瓦村上方，然后随便选了个地方作为起点就向龙山进发。我报名的是30公里组别，直达龙山最高处，关门时间8小时。我是最后一个完赛的，当时到终点时离关门只有几分钟的时间。这也是我第一次参加越野跑比赛。第一次越野跑比赛就这么的虐，但却给我带来了非常不一样的体验。我突然发现祖国风光无限好，与其去开发成熟的景区，不如随便找一个野外都有其粗狂之美。</p>

<p><img src="http://www.huangbowen.net/images/longshan1.jpeg" width="400"></p>

<p><img src="http://www.huangbowen.net/images/longshan2.jpeg" width="400"></p>

<p>第二场比赛则是2015年3月份由爱江山举办的爱江山龙山越野挑战赛。我报名的是60公里组别。当时我还写了一篇赛记：<a href="http://www.huangbowen.net/blog/2015/04/02/running-on-the-dragon-mountion/">爱江山越野跑-又上龙山之巅</a>。我还清晰的记得当时还吃上了寂阳给跑客的小伙伴带的私补，一大包牛肉。不过纵然吃了私补也阻挡不了被关门的命运。我在55公里处因晚到了半个小时只能接受被关门的命运。</p>

<p><img src="http://www.huangbowen.net/images/longshan3.jpeg" width="400"></p>

<p><img src="http://www.huangbowen.net/images/longshan4.jpeg" width="400"></p>

<p>我在赛记里面总结了被关门的原因，但其实最主要的原因是自己的膝盖早已经出了大问题，右膝盖十字韧带早在2014年12月份一次踢球时断裂了。接下来的重庆马拉松跑出了PW，大连100越野赛也在72公里处由于膝盖疼痛而无奈退赛。</p>

<p>从大连回来以后我去医院检查，才确诊了右膝盖的伤病。医生说可以保守治疗，但以后就不能再运动了。我不假思索的说要做手术，我要重回赛道。2015年7月1日我做了手术。术后当天就开始积极的康复。2015年9月份的时候我小心翼翼的恢复了跑步，当时每次只敢跑3公里，要花费半小时的时间。除了跑步训练外，我也开始在健身房积极的做力量训练，力求把腿部肌肉练结实了。整个2015年的后半年我都在养伤恢复阶段，没有参加任何跑步比赛，2015年的环汶川越野赛也只好华丽丽的错过了。</p>

<p>2015年后半年和2016年前半年一直都在积极的康复，整个康复历程我都记录着：<a href="http://www.huangbowen.net/blog/categories/acl/">http://www.huangbowen.net/blog/categories/acl/</a>。</p>

<p>当看到2016年环汶川越野赛又要开始报名时，我毫不犹豫的报了名，选择它作为我的复出之战。2016年环汶川越野赛50公里组的赛道那是相当的虐，我还记得那个变态的爬坡，必须拽着绳子才能上去。14小时关门，我花了13小时多才到终点。整个途中伤膝虽然还有些痛，但在可以忍受的范围之内。快到终点时我还差点流下了眼泪。这说明了将近一年的训练康复的汗没有白流，我又可以尽情的享受越野了。这是当时的赛记：<a href="http://www.huangbowen.net/blog/2016/05/27/wenchuan-trail-run/">熊猫热土-环汶川50公里越野赛赛记</a></p>

<p><img src="http://www.huangbowen.net/images/longshan5.jpeg" width="400"></p>

<p><img src="http://www.huangbowen.net/images/longshan6.jpeg" width="400"></p>

<p>熊猫热土的成功完赛让我重新回归了越野跑的赛道。之后我又参加了好几场热土举行的越野赛都成功完赛，同事也给了我膝盖完全康复的错觉。在9月份的一次例行刷半马时，我的右膝盖出现了不适症状，每次曲腿都会带来弹响。和我的主治医生复查后，医生说再好的韧带也没有原装的好，自己要多倾听身体的声音。我不想再让伤势扩大，也不想停止运动。所以之后的比赛我就成了坚定的完赛党，只求完赛，从不拼搏。</p>

<p>转眼到了2016年10月份，热土越野又举行龙山越野跑，作为11月份四姑娘山越野跑的拉练赛。我当时膝盖不适还没有完全消除，所以只报名了一个12公里组别。高手们都去参加更远的组别了，别想到我还捡了个便宜，意外跑了个第一。第二名和第三名其实实力也是非常强，但是他们第一次跑越野赛，不知道看路标的重要性，跑错了路，多跑了将近10公里，把第一拱手让给了我。这也是我第一次跑步得奖，当然恐怕也是最后一次了。</p>

<p><img src="http://www.huangbowen.net/images/longshan7.jpeg" width="400"></p>

<p><img src="http://www.huangbowen.net/images/longshan8.jpeg" width="400"></p>

<p>回想起这四次汶川龙山之行的心情，第一次是兴奋、第二次是遗憾、第三次是激动、第四次是惊喜。2014年第一次来到龙山，那比赛是相当的寒酸。但是短短3年，赛事规模和水平已经有了质的改变。这些年有一些人一直在默默的坚持，推广越野跑的发展。在这里我想对那些对中国越野跑的发展做出贡献的人说，“你们辛苦了”！</p>

<p>这个月末我会再次来到环汶川越野赛的赛道上，愿赛事越办越红火。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[对于持续集成实践的常见问题的解答]]></title>
    <link href="http://www.huangbowen.net/blog/2017/04/01/q-and-a-for-continus-integration/"/>
    <updated>2017-04-01T00:29:47+08:00</updated>
    <id>http://www.huangbowen.net/blog/2017/04/01/q-and-a-for-continus-integration</id>
    <content type="html"><![CDATA[<p>我之前总结了一下自己在做咨询时辅导团队时遇到的问题，并且给出了相应解答。</p>

<!-- more -->


<h2>Q1: 什么是持续集成？</h2>

<p>A: 集成，就是一些孤立的事物或元素通过某种方式集中在一起，产生联系，从而构成一个有机整体的过程。知识经济的社会，集成已经成了很重要的一个名词。各行各业基本都会用到集成。比如汽车行业，那么复杂的一台跑车愣是通过一大堆零件组装起来。对于这些传统行业，它们在研发成功以后，可以通过流水线的方法批量生产进行集成。而在软件行业中，集成并不是一个简单的“搬箱子”的过程。因为软件工业是一个知识生产活动，其内在逻辑非常复杂，需求又很难一次性确定，完成的产品与最初的设计往往相差很远。敏捷宣言中就有一条是说响应变化重于遵循计划。而且由于软件行业的迅猛发展，软件变的越来越复杂，单靠个人是根本无法完成。大型软件还为了重用及解耦，还往往需要分成好几个模块，这样集成就成了软件开发中不可或缺的一部分。</p>

<p>持续集成这个词语最早是由大名鼎鼎的martin fowler。他在早期进行软件行业实习的时候就发现一个问题,即集成是项目中的一个大难题。当他在英国一家软件公司实习时，项目经理亲口告诉他一个项目已经开发了好几年了，现在正在做集成，集成已经进行了好几个月了，每个人都很疲惫，并不知道集成什么时候才能结束。其中一个很重要的原因就是项目集成发生的频率太低，导致大家对项目很没有信心。</p>

<p>在《持续集成》一书中，对持续集成的定义如下：持续集成是一种软件开发实践。在持续集成中,团队成员频繁集成他们的工作成果, 一般每人每天至少集成一次,也可以多次。每次集成会经过自动构建(包括自动测试)的检验,以尽快发现集成错误。自从在团队中引入这样的实践之后，martin fowler发现发现这种方法可以显著减少集成引起的问题,并可以加快团队合作软件开发的速度。</p>

<h2>Q2: 持续集成能给团队带来什么好处？</h2>

<p>A:如果想要谈持续集成的好处，那么我们应该先谈谈没有采纳持续集成，项目会出现什么问题。总体来说，没有采用持续集成的项目一般会面临下面四个问题：</p>

<ol>
<li><p>没有一致的可部署的软件。只有在完成集成测试、系统测试后，才能得到可用的软件，整个过程中只有最后时刻才能拿到可运行软件。集成活动不一定在一个标准的构建机器上生成，而是在某个开发人员的机器上构建的，那么可能存在在其他机器上无法运行的问题。</p></li>
<li><p>很晚才发现缺陷，并且难以修复。 实践证明，缺陷发现的越晚，需要修复的时间和精力也就越大。从上一个可工作的软件到发现缺陷之间可能存在很多次提交，而要从这些提交中找出问题并修复的成本会很大，因为开发人员需要回忆每个提交的上下文来评估影响点。</p></li>
<li><p>低品质的软件。 由于集成时每次包含的代码很多，所以大家的关注点主要都是如何保证编译通过、自动化测试通过，而往往很容易忽略代码是否遵守了编码规范、是否包含有重复代码、是否有重构的空间等问题。而这些问题又反过来会影响今后的开发和集成，久而久之集成变得越来越困难，软件的质量可想而知。</p></li>
<li>项目缺少可见性。</li>
</ol>


<p>而通过持续集成的活动，我们可以实现以下价值：</p>

<ol>
<li><p>减少风险。缺陷的检测和修复变得更快。软件的健康程度可以测量。</p></li>
<li><p>减少重复过程。让人们有时间做更多的需要动脑筋的、更高价值的工作。通过对重要过程自动化，克服项目中某些成员对实现改进的抵制。</p></li>
<li><p>在任何时间、任何地点生成可部署的软件。对客户来说，可以部署的软件是最实际的资产。</p></li>
<li><p>增强项目的可见性。集成就像我们项目的一面镜子，通过这面镜子能够快速的了解项目目前的状况、存在的问题。</p></li>
<li><p>对开发团队的软件产品建立起更强大的信心。它能够帮我们有效的决策，注意到项目进展的趋势。</p></li>
</ol>


<h2>Q3: 持续集成都包括哪些要素？</h2>

<p>A：一个最小化的持续集成系统需要包含以下几个要素：</p>

<ol>
<li><p>版本管理系统：项目的源代码需要托管到适合的版本管理系统中，一般我们使用git作为版本控制库，版本管理软件可以使用github、gitlab、stash等。</p></li>
<li><p>构建脚本：每个项目都需要有构建脚本来实现对整个项目的自动化构建。比如Java的项目就可以使用gradle作为构建工具。通过构建工具实现对编译、静态扫描、运行测试、样式检查、打包、发布等活动串起来，可以通过命令行自动执行。</p></li>
<li><p>CI服务器：CI服务器可以检测项目中的代码变动，并及时的通过构建机器运行构建脚本，并将集成结果通过某种方式反馈给团队成员。</p></li>
</ol>


<h2>Q4：持续集成的全景图是什么样子的？</h2>

<p>A：以下是持续集成的一个全景图。从中可以看到我们需要版本管理系统、构建脚本、CI服务器、CI构建机器、反馈机制。</p>

<h2>Q5： 持续集成一般都包含哪些任务？</h2>

<p>A: 持续集成并不是说只要代码能编译通过就是集成成功，我们已经把每次集成都看做一次完整的测试。任何迁入到代码库中的代码都应该是可以部署到产品环境的。拿一个Java项目为例，持续集成一般执行的任务有：</p>

<p>1.代码静态扫描：通过静态扫描确定代码的一些潜在bug，比如未被使用的变量等。</p>

<ol>
<li><p>代码样式检查：团队一致定义出需要遵循的编码规范，并通过一些插件对迁入的代码进行样式合规性检查，防止不守规范的代码进入版本库。比如方法名首字母小写、类的大字母大写、if关键字后面需要加空格等问题都可以纳入到样式检查中。</p></li>
<li><p>单元测试、集成测试、系统测试：通过运行自动化的单元测试、集成测试、系统测试可以有效的保证迁入代码的质量。一旦有测试失败，开发人员就需要快速反应进行修复。</p></li>
<li><p>测试覆盖率检查：一般项目会设置一个测试覆盖率指标（比如80%），如果代码达不到这样的测试覆盖率，就不会允许代码迁入。这样可以保证开发人员在新增功能时也要为新加入的功能编写自动化测试。</p></li>
<li><p>编译打包：确保没有任何语法错误，生成构建产出物。</p></li>
<li><p>发布: 将通过完整构建的产出物放置到产出物仓库，以便进行后续部署。</p></li>
</ol>


<p>这些任务都必须是能通过命令行自动完成的，不同类型的项目任务略有不同。</p>

<h2>Q6:持续集成这些任务应该遵循什么顺序？</h2>

<p>A: 其中有一个重要的原则就是fail fast，即快速失败。一般会把运行时间短的、价值大的任务放在前面，而运行时间长的任务放置到后面。因为构建成功的标准是所有的验证都能够通过，那么执行时间短的任务放在前面更更快的得到反馈。</p>

<h2>Q7：为什么我们组搭建了持续集成服务器，并且还派专人看守CI，但是感觉项目并没有明显的改善？</h2>

<p>A: 并不是说搭建了持续集成服务器就说明团队能成功运行持续集成了。持续集成是一个实践，所以大家要遵循一些原则。大家可以先思考一下问题：1.在CI服务器上多久会看到一次集成？2.CI服务器的集成结果是绿色居多（指构建成功）还是红色居多（指构建失败）？3. 当构建失败后，团队成员有没有第一时间修复构建？团队成员有没有在构建失败的情况下依然在提交代码？团队成员在提交代码之前有没有进行本地的私有构建？</p>

<p>从这些问题可以引申出持续集成中需要遵循的一些原则：</p>

<ol>
<li><p>经常提交代码</p></li>
<li><p>不要提交无法构建的代码</p></li>
<li><p>立即修复无法集成的构建</p></li>
<li><p>编写自动化的开发者测试</p></li>
<li><p>必须通过所有测试和审查</p></li>
<li><p>执行私有构建</p></li>
<li><p>避免迁出无法构建的代码</p></li>
</ol>


<p>Q8: 本地提交代码应该经过哪些步骤？
A:本地提交可以采用经典的七步提交法。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[阿里巴巴Java开发手册评述]]></title>
    <link href="http://www.huangbowen.net/blog/2017/02/23/alibaba-java-code-style/"/>
    <updated>2017-02-23T17:34:51+08:00</updated>
    <id>http://www.huangbowen.net/blog/2017/02/23/alibaba-java-code-style</id>
    <content type="html"><![CDATA[<p>2016年底的时候阿里巴巴公开了其在内部使用的Java编程规范。随后进行了几次版本修订，目前的版本为v1.0.2版。下载地址可以在其官方社区-云栖社区<a href="https://yq.aliyun.com/articles/69327">https://yq.aliyun.com/articles/69327</a>找到。</p>

<!-- more -->


<p>笔者作为一名有数年工作经验的Java程序员，仔细研读了这份手册，觉得其是一份不可多得的好材料。阿里巴巴在发布时所说，“阿里巴巴集团推出的《阿里巴巴Java开发手册（正式版）》是阿里巴巴近万名开发同学集体智慧的结晶，以开发视角为中心，详细列举如何开发更加高效、更加容错、更加有协作性，力求知其然，更知其不然，结合正反例，让Java开发者能够提升协作效率、提高代码质量。” 同时，阿里巴巴也期望这套Java统一规范标准将有助于提高行业编码规范化水平，帮助行业人员提高开发质量和效率、大大降低代码维护成本。</p>

<p>其实早在多年前，Google就已经把公司内部采用的所有语言的编码规范(其称为Style Guide)都开源在github上，地址为<a href="https://github.com/google/styleguide">https://github.com/google/styleguide</a>。在这份清单中，包括了<a href="https://google.github.io/styleguide/cppguide.html">C++</a>、<a href="https://google.github.io/styleguide/objcguide.xml">Objective-C</a>、<a href="https://google.github.io/styleguide/javaguide.html">Java</a>、<a href="Python%20Style%20Guide">Python</a>、<a href="https://google.github.io/styleguide/Rguide.xml">R</a>、<a href="https://google.github.io/styleguide/shell.xml">Shell</a>、<a href="https://google.github.io/styleguide/htmlcssguide.xml">HTML/CSS</a>、<a href="https://google.github.io/styleguide/jsguide.html">JavaScript</a>、<a href="https://google.github.io/styleguide/angularjs-google-style.html">AngularJS</a>、<a href="https://google.github.io/styleguide/lispguide.xml">Common Lisp</a>、<a href="https://google.github.io/styleguide/vimscriptguide.xml">Vimscript</a>等语言的编程规范。并且Google还发布了一个用于检查样式合规性的工具<a href="https://github.com/google/styleguide/tree/gh-pages/cpplint">cpplint</a>以及Emacs中使用Google编程样式的配置文件<a href="https://raw.githubusercontent.com/google/styleguide/gh-pages/google-c-style.el">google-c-style.el</a>。看来Google中Emacs粉比Vim粉要强势的多。</p>

<p>Google为什么要发布这样的Style Guide那？因为它认为几乎所有的开源项目都需要有一组约定来规范如何编写代码。如果项目中的代码都能保持一致的风格，那么即使代码再多也会更容易被人理解。</p>

<p>Google的这份编程规范包含了很多方面，从”对变量使用camelCase命名法”到”绝不要使用全局变量”到”绝不允许例外“等。其Java编程规范包含7大部分，分别为介绍、源文件基本要求、源文件结构、格式化、命名、编程实践和Javadoc。每一部分又细分为很多子条目。如果采取条规范的原因不是很容易理解，都会配有相应的示例或者引用文章。</p>

<p>由于Google的这份编程规范目前只有英文版本，所以中国的程序员只有少部分人知道它的存在。并且只有更少的团队在真正的应用它，其中就包括我的团队。我们团队根据Google的<a href="https://google.github.io/styleguide/javaguide.html">Java style guide</a>也演化出了自己的团队版本，放置在团队共享wiki上供大家随时查阅。我们根据自身的项目特点丰富了&#8221;编程实践&#8221;里的内容，并且新加入一个章节来描述编写Java代码的一些原则，比如简洁代码、组合优于继承、stream优于for循环等。</p>

<p>我想阿里巴巴发布的Java开发手册之所以叫做&#8221;开发手册&#8221;，而不是像Google那样叫做“Style Guide(样式风格)”，是因为它不仅仅局限于style guide这一方面，而是以Java开发者为中心视角，划分为编程规约、异常日志规约、MYSQL规约、工程规约、安全规约五大块，再根据内容特征，细分成若干二级子目录。根据约束力强弱和故障敏感性，规约依次分为强制、推荐、参考三大类。</p>

<p>该开发手册中的每一条都值得了解。限于篇幅原因，这里只列出”编程规约“中有感受的几条来评述一下。</p>

<blockquote><p>15. 【参考】各层命名规约：</p>

<p>A) Service/DAO 层方法命名规约</p>

<p>1） 获取单个对象的方法用 get 做前缀。</p>

<p>2） 获取多个对象的方法用 list 做前缀。</p>

<p>3） 获取统计值的方法用 count 做前缀。</p>

<p>4） 插入的方法用 save（推荐）或 insert 做前缀。</p>

<p>5） 删除的方法用 remove（推荐）或 delete 做前缀。</p>

<p>6） 修改的方法用 update 做前缀。</p>

<p>B) 领域模型命名规约</p>

<p>1） 数据对象：xxxDO，xxx 即为数据表名。</p>

<p>2） 数据传输对象：xxxDTO，xxx 为业务领域相关的名称。</p>

<p>3） 展示对象：xxxVO，xxx 一般为网页名称。</p>

<p>4） POJO 是 DO/DTO/BO/VO 的统称，禁止命名成 xxxPOJO。</p></blockquote>

<p>命名规约的第15条描述了在Service/DAO层对于资源的操作的命名规范。这一条的参考价值极大，因为我所有呆过的团队对于这一点都没有明显的约束，每个团队都有五花八门的实现。如果能遵守这一点，那么我们在操作资源时就会减少一些困扰。</p>

<blockquote><p>2. 【强制】long 或者 Long 初始赋值时，必须使用大写的 L，不能是小写的 l，小写容易跟数字1混淆，造成误解。</p>

<p>说明：Long a = 2l; 写的是数字的 21，还是 Long 型的 2?</p></blockquote>

<p>这是常量定义的第2条。从这一点可以看出阿里巴巴对代码可读性的细节扣的很严格。我也很赞同这一点。代码只需编写一次，而会被查看无数次，所以要力争在第一次编写的时候尽可能少的引入歧义。</p>

<blockquote><p>1. 【强制】大括号的使用约定。如果是大括号内为空，则简洁地写成{}即可，不需要换行；如果是非空代码块则：</p>

<p>1） 左大括号前不换行。</p>

<p>2） 左大括号后换行。</p>

<p>3） 右大括号前换行。</p>

<p>4） 右大括号后还有 else 等代码则不换行；表示终止右大括号后必须换行。</p></blockquote>

<p>格式规约的第1条终于终结了括号之争。这一条需要强制遵守，那么左大括号换行一派则被彻底排除在阿里巴巴之外。有人说不推荐左大括号换行可以减少行数，增加单个屏幕可以显示的代码行数。而有的人反驳说现在屏幕已经足够大，不换行则破坏了对称之美。其实对于我来说两种格式都有各自的好处，我都可以接受，只要团队能够坚持使用其中之一即可。</p>

<blockquote><p>5. 【强制】缩进采用 4 个空格，禁止使用 tab 字符。</p>

<p>说明：如果使用 tab 缩进，必须设置 1 个 tab 为 4 个空格。IDEA 设置 tab 为 4 个空格时，请勿勾选 Use tab character；而在 eclipse 中，必须勾选 insert spaces for tabs。</p>

<p>正例： （涉及 1-5 点）</p>

<pre><code>public static void main(String[] args) {
    // 缩进 4 个空格
    String say = "hello";
    // 运算符的左右必须有一个空格
    int flag = 0;
    // 关键词 if 与括号之间必须有一个空格，括号内的 f 与左括号，0 与右括号不需要空格
    if (flag == 0) {
        System.out.println(say);
    }
    // 左大括号前加空格且不换行；左大括号后换行
    if (flag == 1) {
        System.out.println("world");
        // 右大括号前换行，右大括号后有 else，不用换行
    } else {
        System.out.println("ok");
        // 在右大括号后直接结束，则必须换行
    }
}
</code></pre></blockquote>

<p>使用空格代替tab字符进行缩进已经成为了编程界的共识。其主要原因是不同的平台甚至不同的编辑器下tab字符的长短是不一样的。不过Google在其《java style guide》中规定缩进为2个空格，而阿里巴巴约定为4个空格。由于4个空格的缩进比2个空格的缩进长一倍，所以如果在代码嵌套过深的情况下可能会很快超过单行最多字符数(阿里巴巴规定为120个)的限制。不过这个问题可以从另一个方面进行思考，如果由于缩进的原因导致单行字符数超标，这很可能是代码设计上有坏味道而导致嵌套过深。所以最好应该从调整代码结构的方面下手。</p>

<blockquote><p>6. 【强制】单行字符数限制不超过 120 个，超出需要换行，换行时遵循如下原则：</p>

<p>1） 第二行相对第一行缩进 4 个空格，从第三行开始，不再继续缩进，参考示例。</p>

<p>2） 运算符与下文一起换行。</p>

<p>3） 方法调用的点符号与下文一起换行。</p>

<p>4） 在多个参数超长，逗号后进行换行。</p>

<p>5） 在括号前不要换行，见反例。</p>

<p>正例：</p>

<pre><code>    StringBuffer sb = new StringBuffer();
    //超过 120 个字符的情况下，换行缩进 4 个空格，并且方法前的点符号一起换行
    sb.append("zi").append("xin")...
        .append("huang")...
        .append("huang")...
        .append("huang");
</code></pre>

<p>反例：</p>

<pre><code>StringBuffer sb = new StringBuffer();
//超过 120 个字符的情况下，不要在括号前换行
sb.append("zi").append("xin")...append
("huang");
//参数很多的方法调用可能超过 120 个字符，不要在逗号前换行
method(args1, args2, args3, ...
, argsX); 
</code></pre></blockquote>

<p>关于换行Google并没有给出明确的要求，而阿里巴巴则给出了强制性的要求。Google特别提示通过一些重构手法可以减少单行字符长度从而避免换行，这一点我颇为认同。关于参数很多的方法调用超过120个字符需要换行时，这暴露除了过长参数列的代码坏味道，解决方式之一就是使用重构手法的Replace Parameter With Method的方式把一次方法调用化为多次方法调用，或者使用Introduce Parameter Object手法创造出参数对象并进行传递。</p>

<blockquote><p>17. 【推荐】循环体内，字符串的联接方式，使用 StringBuilder 的 append 方法进行扩展。
反例：</p>

<pre><code>    String str = "start";
    for (int i = 0; i &lt; 100; i++) {
        str = str + "hello";
    }
</code></pre>

<p>说明：反编译出的字节码文件显示每次循环都会 new 出一个 StringBuilder 对象，然后进行append 操作，最后通过 toString 方法返回 String 对象，造成内存资源浪费。</p></blockquote>

<p>这是《Effective Java》以及其他文章中经常提及的优化方式，而且面试初级Java工程师时几乎是一个必考点。其实不仅是在循环体内，而是所有需要进行多次字符串拼接的地方都应该使用StringBuilder对象。</p>

<blockquote><p>20. 【推荐】类成员与方法访问控制从严：</p>

<p>1） 如果不允许外部直接通过 new 来创建对象，那么构造方法必须是 private。</p>

<p>2） 工具类不允许有 public 或 default 构造方法。</p>

<p>3） 类非 static 成员变量并且与子类共享，必须是 protected。</p>

<p>4） 类非 static 成员变量并且仅在本类使用，必须是 private。</p>

<p>5） 类 static 成员变量如果仅在本类使用，必须是 private。</p>

<p>6） 若是 static 成员变量，必须考虑是否为 final。</p>

<p>7） 类成员方法只供类内部调用，必须是 private。</p>

<p>8） 类成员方法只对继承类公开，那么限制为 protected。</p>

<p>说明：任何类、方法、参数、变量，严控访问范围。过宽泛的访问范围，不利于模块解耦。思
考：如果是一个 private 的方法，想删除就删除，可是一个 public 的 Service 方法，或者一个 public 的成员变量，删除一下，不得手心冒点汗吗？变量像自己的小孩，尽量在自己的视线内，变量作用域太大，如果无限制的到处跑，那么你会担心的。</p></blockquote>

<p>这其实就是经典的原则‘
Principle of least privilege’ 的体现。我们必须遵循这一原则，但不知为何阿里巴巴将其级别列为“推荐”。</p>

<blockquote><p>7. 【参考】方法中需要进行参数校验的场景：</p>

<p>1） 调用频次低的方法。</p>

<p>2） 执行时间开销很大的方法，参数校验时间几乎可以忽略不计，但如果因为参数错误导致
中间执行回退，或者错误，那得不偿失。</p>

<p>3） 需要极高稳定性和可用性的方法。</p>

<p>4） 对外提供的开放接口，不管是 RPC/API/HTTP 接口。</p>

<p>5） 敏感权限入口。</p>

<p>8. 【参考】方法中不需要参数校验的场景：</p>

<p>1） 极有可能被循环调用的方法，不建议对参数进行校验。但在方法说明里必须注明外部参
数检查。</p>

<p>2） 底层的方法调用频度都比较高，一般不校验。毕竟是像纯净水过滤的最后一道，参数错
误不太可能到底层才会暴露问题。一般 DAO 层与 Service 层都在同一个应用中，部署在同一
台服务器中，所以 DAO 的参数校验，可以省略。</p>

<p>3） 被声明成 private 只会被自己代码所调用的方法，如果能够确定调用方法的代码传入参
数已经做过检查或者肯定不会有问题，此时可以不校验参数。</p></blockquote>

<p>编写代码时，对参数进行校验是不可避免的。详细说又扯到“防御式编程”和“契约式编程”的话题上。这两项之所以列为参考，并没有强迫大家遵守。</p>

<blockquote><p>6. 【推荐】与其“半吊子”英文来注释，不如用中文注释把问题说清楚。专有名词与关键字保持英文原文即可。</p>

<p>反例：“TCP 连接超时”解释成“传输控制协议连接超时”，理解反而费脑筋。</p></blockquote>

<p>看到这一条我已经笑出来了。这一条说的很好，注释是用来阐述问题的，如果看了注释还一头雾水，那么这样的注释不要也罢。使用中文没什么可丢人的，解决问题才是王道。</p>

<blockquote><p>7. 【推荐】代码修改的同时，注释也要进行相应的修改，尤其是参数、返回值、异常、核心逻辑等的修改。</p>

<p>说明：代码与注释更新不同步，就像路网与导航软件更新不同步一样，如果导航软件严重滞后，
就失去了导航的意义。</p></blockquote>

<p>阿里巴巴对该条的说明非常到位。其实我们团队在编写代码时默认是没有任何注释的，因为我们追求的是self-explanatory methods。即代码本身已经就能说明它的用途。只有在很少的情况下需要添加注释。</p>

<hr />

<p>编程规约的第九部分都是很好的tips，值得去了解和学习。</p>

<p>除了编程规约之外，日志规约、MySQL规约、工程规约和安全规约也都有极高的参考价值，这也是比Google的<a href="https://google.github.io/styleguide/javaguide.html">Java Style Guide</a>出色的地方。这里就不再评述了。</p>

<hr />

<p>阿里巴巴公布这个Java开发手册绝对是值得赞赏的事情。最后我也想给其提几点建议：</p>

<ol>
<li><p>建议使用公开wiki的方式发布该手册，而不是采用pdf的方式。因为如果像google那样是公开wiki的方式的话，可以很方便大家参与修正和改进，并且可以看到版本历史。</p></li>
<li><p>该手册并没有明确的版权许可，只是在页脚处加入了“禁止用于商业用途，违者必究”的字样。Google的style guide的版权为CC-By 3.0 License，建议阿里巴巴能够指明其版权。</p></li>
<li><p>手册中的部分示例代码并没有遵守其列出的编程规约，有点打脸之嫌。比如以下示例代码：</p>

<pre><code> Iterator&lt;String&gt; it = a.iterator();
 while(it.hasNext()){
     String temp = it.next();
     if(删除元素的条件){
         it.remove();
     }
 }
</code></pre>

<p> 其while和if关键字与小括号之间并没有空格，违反了该手册中<code>3. 【强制】if/for/while/switch/do 等保留字与左右括号之间都必须加空格。</code>这一规则。</p></li>
<li><p>集合处理中可以多推荐一些Java8的集合操作方法。</p></li>
<li><p>有些名词没有过多解释，比如很多人可能都不知道什么叫一方库、二方库。</p></li>
<li><p>希望除了这份开发手册以外，阿里巴巴也可以推出对应的checkstyle配置文件以及Intellij、Eclipse的配置文件。毕竟格式化这些事都可以交由IDE来解决，通过在构建时使用checkstyle插件也可以防止不合规的代码迁入到仓库，从源头上保证代码样式的一致性。</p></li>
</ol>


<p>最后，希望这份Java开发手册可以持续改进，吸纳百家之长，成为每个入门程序员必看的手册。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一个程序员的2016年总结]]></title>
    <link href="http://www.huangbowen.net/blog/2017/01/20/summary-for-2016/"/>
    <updated>2017-01-20T16:59:24+08:00</updated>
    <id>http://www.huangbowen.net/blog/2017/01/20/summary-for-2016</id>
    <content type="html"><![CDATA[<p>2016年过的很快，是被时间追着走。</p>

<!-- more -->


<h2>工作</h2>

<p>2016年的工作可以分为三大块。</p>

<p>1月份和2月份还在咨询团队。这两个月在某国内大型企业做技术教练。先后开展了TDD、Clean Code、Continus Integration等课程。做咨询的日子每天都有很多挑战，收获也是大大的。</p>

<p>3月份、4月份以及8月份和9月份在印度Pune做TWU的讲师。在ThoughtWorks错失了以毕业生的身份参加TWU，不过还好可以以Coach的身份参加TWU。全英文授课，一对一coach，全新的环境&hellip;TWU对我来说挑战颇多，但是它绝对是一段奇妙的经历。有幸和来自全球8个国家的coach一起服务了有史以来TWU最大的一期batch。我很幸运自己是其中的一员。我很怀念大家一起备课，一起上课，一起泡吧，一起看电影，一起玩游戏的日子。尤其是每周一次的足球活动，能够直接感受巴西桑巴足球的魅力。</p>

<p>5-7月份和10-12月份在某国外项目的offshore account上担任tech lead。经过在在咨询团队以及TWU的锤炼之后，自己在看待问题、处理事情完全换了一个视角。尤其是10-12月份，随便每天都很忙碌，但是自己也学到很多东西。</p>

<h2>健身</h2>

<p>当我在出差时，健身比较规律，一周能保证3次以上的健身房训练。当回到家以后时间就不能保证了。身体素质的巅峰期是在4月底的时候，卧推可以达到70KG。最弱的时候就是现在了。现在每周保持一次的训练节奏。</p>

<h2>跑步</h2>

<p>全年非完全统计总共跑了1336公里，耗时163个小时。</p>

<p><img src="http://www.huangbowen.net/images/IMG_5181.PNG" width="400"></p>

<p>有四场赛事值得纪念。</p>

<ul>
<li>第一个是右膝盖术后的越野跑复出之战，龙山50公里越野赛成功完赛，说明了术后恢复的确不错。</li>
<li>第二个是9月份在印度参加的12小时超级马拉松赛，在膝盖不适的情况下跑了66公里，用时10.5小时。</li>
<li>第三个是张掖百公里赛事在祁连山海拔4000多米的地方的失温事件，让我第一次感觉到死神是如此的接近。也因此让我错失了完赛百公里赛事的愿望。</li>
<li>第四个是四姑娘山越野赛，耗时7个小时爬上了四姑娘山的大峰，海拔5035米。虽然它是个初级雪山，但让我感受到了登山的魅力。可惜最后由于高反而被关门，没有拿到砸核桃的神器。</li>
</ul>


<h2>翻译</h2>

<p>拖了1年多，终于将《面向对象的思考过程》翻译出版，也算是了却了一桩心事。另外也校审和翻译了《C#多线程编程实战》的第二版，此书已经在出版过程中。还有参与了《基础设施即代码》一书的合译，目前正在校审过程中。</p>

<h2>博客</h2>

<p>今年写的博客数量少于往年。完结了《膝盖中了一箭》系列，因为实在不想再写这样的口水话文章。技术类的精品文章不是很多，不过还好在ThoughtWorks洞见上发表了好几篇。</p>

<hr />

<p>在2016年初的时候，我定下了每月一个目标的计划，结果执行了8各月就半途而废了。2017年初想法很多，先按下不表，过完新年再计议。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[面向对象的思考过程第四版译者序]]></title>
    <link href="http://www.huangbowen.net/blog/2017/01/19/the-object-oriented-thought-process/"/>
    <updated>2017-01-19T20:31:55+08:00</updated>
    <id>http://www.huangbowen.net/blog/2017/01/19/the-object-oriented-thought-process</id>
    <content type="html"><![CDATA[<p><img src="http://www.huangbowen.net/images/the-object-process.jpg" width="400"></p>

<p>很多IT从业人员进入这个行业都是从学习一门编程语言开始的。对于编程，我们往往过于关注语言的语法细节，反而忽略了其背后的设计理念。面向对象的思考过程就是一个非常优秀的设计理念。它可以独立于语言存在。如果你熟练掌握了面向对象的思考过程，那么就可以轻松地在不同的面向对象的语言之间切换。</p>

<!-- more -->


<p>本书透彻地阐述了面向对象这一概念。作者Matt在书中反复强调学习面向对象的思考过程优于学习任何编程语言或工具。事实上，他也是这么做的。Matt阐述了面向对象的三要素：继承、封装、多态，并且自己加上了第四个要素：组合。关于组合，Matt不惜篇幅做了大量的讲解，并且列举了很多通俗易懂的例子，这也是本书的一大特色。</p>

<p>Matt也纠正了人们的一些普遍误解，比如面向对象的范式与面向过程的范式并不是完全对立的关系。而且在应用面向对象的设计和开发时，Matt也讲解了不少如何与遗留系统集成的技巧。同时，Matt也简要介绍了UML这个建模利器。为了不混淆重点，他把介绍UML的章节放置在很靠后的位置。因为他明白，先了解面向对象的各项概念是最重要的。</p>

<p>我虽然拥有多年的从业经验，但是再看本书时仍然有不少收获。其实自从我接触了函数式编程，就渐渐成为函数式编程的拥趸。我会时不时地“鼓吹”函数式编程范式的好处，顺便“贬低”一下面向对象编程。但同时我也有个疑问，既然函数式编程这么好，为什么这几年的发展只能算是波澜不惊，而没有掀起大风浪呢？读了本书之后，我似乎找到了答案。首先面向对象的思考过程更加符合大家对世界的直观感受，毕竟不是每个人都是数学家。函数式编程可以简化很多问题，但它并不能简化所有问题。其次是面向对象的编程范式和函数式编程的范式并不是完全对立的，正如作者讲过，面向过程的编程范式和面向对象的编程范式也不是完全对立的。比如目前流行的一些语言（Scala、Go等）都具备函数式的特点，也兼具面向对象的特点（只不过它们的面向对象的机制与传统的方式有所不同）。所以无论你喜欢哪种编程范式，了解彼此的不同之处是至关重要的。而本书则是了解面向对象范式的优秀书籍。</p>

<p>本书已经更新到了第4版。从本书长达10多年的跨度来看，面向对象范式经久不衰。Matt也适时地在新版中加入了一些新的主题，比如可移植数据、分布式系统、Web服务等。Matt不仅阐述了这些技术，还讲述了它们的前世今生。这样可以帮助读者更加充分地了解技术的演化之路。</p>

<p>无论你是否有面向对象编程的经验，本书都适合你作为面向对象思考的旅程开端。最后，希望本书能给大家带来超凡的阅读体验。</p>

<p>购买链接：<a href="http://product.china-pub.com/5007999">《面向对象的思考过程第四版》</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[以敏捷的方式运作一所大学]]></title>
    <link href="http://www.huangbowen.net/blog/2017/01/11/operate-the-university-using-agile/"/>
    <updated>2017-01-11T20:54:32+08:00</updated>
    <id>http://www.huangbowen.net/blog/2017/01/11/operate-the-university-using-agile</id>
    <content type="html"><![CDATA[<p>2001年，敏捷宣言在美国犹他州瓦萨奇山雪鸟滑雪胜地横空出世。时至今日，敏捷软件开发流程早已经深入人心。ThoughtWorks作为敏捷实践的翘楚，一直不遗余力的向行业推广敏捷。而ThoughtWorks自身不仅在所有项目中都使用敏捷，甚至对毕业生的培养都是敏捷的。</p>

<!-- more -->


<p><img src="http://www.huangbowen.net/images/1-Agile-Manifesto.jpg" width="400"></p>

<p>在印度浦那有着一所很神秘的大学，叫做ThoughtWorks Univesity，简称“TWU”。每个加入ThoughtWorks的毕业生，都要接受在TWU为期5周的洗礼。笔者于2016年以讲师的身份，参加了两期ThoughtWorks University。整个经历真的是一趟奇妙的旅程，收获颇丰。在这个教授敏捷的大学，我领略到了如何以敏捷的方式来运作一所大学。</p>

<h2>敏捷的两个先决条件</h2>

<p>《Practices of An Agile Developer》一书讲到，一个项目适不适合敏捷有两个先决条件：第一点是项目是否以价值为导向，第二点是团队是否能够达到高度协作。</p>

<p><img src="http://www.huangbowen.net/images/2-team.jpg" width="400"></p>

<p>第一点也就是说整个团队有一个总体一致的目标。TWU拥有明确的目标，一切都是围绕着培养毕业生的四个方面：Customer Serivce Mindset &amp; Skills（客户服务意识和技能）, Business Understanding（ThoughtWorks业务理解）, Culture/Way of Life（文化及生活方式）, Global &amp; Social Experience（国际经验及社会责任）。</p>

<p>只有打造一个相对扁平的组织，给予充分的信任和自由度，才有利于敏捷的实施。这反过来又要求团队中的每个人有高度的自律性。</p>

<p>TWU的团队主要分为核心团队和讲师团队。核心团队统筹管理所有的TWU活动，确保所有的课程和活动都是围绕着TWU的目标开展。而讲师团队则是由全球各个办公室的员工抽调而来，负责具体实施这些活动。整个TWU团队都是完全扁平的架构，没有上下级的关系。</p>

<p>第二点是说必须能够保证团队中的成员能够流畅的交流。我们那期的讲师来自8个国家：中国、马来西亚、澳洲、美国、印度、巴西、英国、德国。这样的国际化战队能够在组建之后立马投入运作的最大原因就是每个人在ThoughtWorks学到的深入骨髓的合作理念。TWU的核心团队和讲师团队每周都有固定的时间碰头，讨论遇到的问题并商讨解决之道。每天早上TWU的讲师也有固定时间站会，更新各自的状态。下午也有碰头会，讨论当天的工作内容、遇到的问题，并提出行动来解决。</p>

<p>这两个先决条件在TWU完全符合。</p>

<h2>敏捷的基础是反馈</h2>

<p>《Practices of An Agile Developer》中讲到敏捷的基础就是反馈。如果别人能及时指出你走错了路，那么你就会少走点弯路。只有不断的接受反馈并付出行动，才会不断的提高。反馈也是双向的，不仅自己要接受反馈，也需要主动给同事反馈。</p>

<p><img src="http://www.huangbowen.net/images/3-feedback.jpg" width="400"></p>

<p>在TWU，首当其冲要接受来自核心团队和讲师的反馈。每周我们有个很独特的活动，叫做Speedback Session。在这个活动上所有的讲师会进行一对一的4分钟的谈话，相互给予反馈。这种开诚布公的行为把大家都团结到了一起。</p>

<p>而在每期TWU的前两周，新讲师会对课程进行试讲，这是获取其他讲师反馈的好时机。笔者本人收到了很多反馈，比如说我的语速很合适、声音洪亮等，也有鞭策我提高的反馈，比如我的引导力能力不强，有的时候课堂感染力不够等。</p>

<p>讲师要给学生讲课，及时收集学生的反馈也相当重要。TWU团队在每个教室都专门制作了一面反馈墙，每次讲师讲完课后都会提醒学生通过贴纸的方式留下对本堂课的反馈。从这些反馈中我找到了自己的一些问题，比如有的学生说我的口音有点重，对一些技术词汇解释的不是很清楚。这会促使我下次讲课时注意解决这些问题。同时我也收到了很多鼓舞，因为很多同学都留言说学到了很多有用的新东西，很感谢我的付出。</p>

<p>正是这种良好的反馈文化让我在短时间内意识到了很多不足之处，也明确了改进的方向。它能使你每天都正面面对工作和生活，每天都能保持提升自己。</p>

<h2>敏捷的精髓是拥抱变化</h2>

<p>《Practices of An Agile Developer》一书中讲到敏捷的精髓就是拥抱变化。TWU每一期的学生来自不同的国家和地区，各自拥有完全不同的经历。这就要求我们在短短几天内充分了解团队中的学生，并且对课程进行相应的调整。</p>

<p><img src="http://www.huangbowen.net/images/4-change.jpg" width="400"></p>

<p>比如有一次我们要求学生团队进行一次软件发布活动，而当时他们还没有学习功能开关（Feature Toggle），正在思考如何实现只发布想要的功能，而屏蔽掉其他正在开发中的功能。为了能让他们自行思考发布策略，我们特意把介绍发布策略的课程往后挪了一天。</p>

<p>我们不仅会调整课程的安排，对于课程的内容我们也会经常更新。比如有一节教授HTML和CSS的课程，我们对课程进行了大幅改动，删除了一些过时的内容，加上了一些通用的最佳实践。这样的改动能够保证TWU所有教授的内容都能赶得上IT领域日新月异的变化。相比起国内大学有些课程还在使用几十年前的教材，而我们的有些课程可能每半年就会全部更新一次。</p>

<p>一些重大的改动会被放到一年一度的TWU年度升级中进行处理。在年度升级中我们有两个月的时间对TWU的关键活动做升级。比如今年就将TWU使用的整个技术栈全部迁移到了AWS平台，实现能够一键式创建和删除整个学期需要的资源。</p>

<p>TWU在课程的设置方面一直紧跟市场的变化。ThoughtWorks最近不断接收一些关于UX和XD的业务，而TWU当时并没有专门针对UX和XD的培训内容。但是短短三个月的时间TWU一群卓越的同事就创建了相关的课程，并迎来了第一批UX和XD的毕业生。</p>

<h2>最后</h2>

<p>在TWU当讲师的几个月，笔者一直感觉这个大学是一个充满活力的大学。在这个大学里面，没有权威，没有各种条条框框，整个团队有一股极强的凝聚力，每个人是TWU的主人。运作一所大学不易，但如果能坚持做到持续反馈、拥抱变化的话，这所大学将始终是一所紧追时代步伐的大学。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[敏捷团队中的QA由来]]></title>
    <link href="http://www.huangbowen.net/blog/2016/12/20/qa-in-agile-team/"/>
    <updated>2016-12-20T22:32:43+08:00</updated>
    <id>http://www.huangbowen.net/blog/2016/12/20/qa-in-agile-team</id>
    <content type="html"><![CDATA[<p>QA,全称为Quality Analyst，即质量分析师(有些称为Quality Assurance,即质量保证师)。为什么它总跟质量扯在一块？感觉这个角色明明做的都是测试的事情，为什么不直接叫做tester那？敏捷项目中的QA日常都做什么事情那？可能一大推问题都会冒出来。别急，跟着我这篇文章来一步步的回答这些问题。</p>

<!-- more -->


<p>假设现在有一个保险公司，他想找一个软件公司做一个在线卖保险的系统。那么这个系统从开始到完成至少需要三个角色。</p>

<p>Business owner -> developer -> end user</p>

<ul>
<li>Business owner即保险公司的人，也是我们的需求来源，由他来提出业务需求。</li>
<li>developer即软件开发工程师，根据客户的需求做出客户期望的产品，最终交付给客户。</li>
<li>end user即产品的最终用户，在本例子中即有意愿在网上买保险的人。这个系统到底好不好用，他们最有发言权。（有的时候end user和business owner有可能是同一批人，比如开发的是一个内部公司使用的OA系统）。</li>
</ul>


<p>只有这些角色能够顺利、成功的完成一个产品吗？实际操作中肯定会遇到很多问题。这些问题会集中在两个地方。</p>

<p>第一个问题出在Business owner和developer。在沟通需求的时候他们彼此会发现太费劲了。Business owner张口就来的quote、premium、policy这些名词软件开发工程师不懂什么意思，因为他们没有保险行业的背景知识，而软件工程师喜欢说的MVC、BDD、Java之类的，Business owner也搞不懂，并且人家对这也不感兴趣。那么软件开发工程师想，如果有人能即懂得保险行业知识，又具有IT背景，那么分析需求肯定会顺利不少。这样的人在敏捷团队中就叫做BA（Business Anslyst,业务分析师）。BA会理解并挖掘客户的需求，然后将需求转变为具体的AC(验收条件,Acceptance critirial)，再交由开发工程师来实现。同时他也可以将业务知识最大化的传递给开发工程师，保证开发工程师能够准确的理解需求（为什么不让Business owner直接将业务知识传递给开发工程师那？原因很简单，人家可是一秒钟几十万上下的主，那里有这么多闲工夫。）</p>

<p>所以系统从开始到完成变成了这个样子。</p>

<p>Business owner -> BA -> developer -> end user</p>

<p>另一个问题就出现在了developer和end user之间。开发工程师完成的系统能够直接拿给最终用户用吗？如果你说能，要么你是对自己的产品信心十足，要么就是盲目乐观。我想大多数情况是后者。因为开发工程师在将业务需求转换为编码实现时，一方面由于理解的问题，实现或多或少可能会与需求有所偏差。另一方面由于自身思维的局限性，会导致系统隐含了一些缺陷。假如最终用户在使用系统时，发现在线支付有问题，或者页面在自己所用的浏览器下不能正常显示，你觉得他们还有兴趣使用你的系统吗？这就相当于把最终用户当做系统的测试者，人家不收钱还帮助我们发现bug，那里有这好事？系统的问题要尽可能的避免暴露给最终用户。那么在软件开发工程师和最终用户之间应该再加一个角色，就是tester。tester的主要职责就是按照AC，对系统进行功能性测试，确保功能的正确性，另一方面是针对一些非功能性测试（比如安全性测试，性能测试），保证系统的健壮性。</p>

<p>Business owner -> BA -> developer -> tester -> end user</p>

<p>做到这些的tester还不能称之为QA，因为它的角色更像是软件质量的看门人，最终把关者，还达不到测试分析的要求。</p>

<p>现在新的问题来了，到底tester什么时候该开始对软件的测试那？</p>

<p>一个极端情况是等developer把所有的功能完成以后，再交给tester来测。这样会造成很多问题。</p>

<ol>
<li>如果开发者需求理解有偏差，需要重新返工。</li>
<li>软件中发现了bug，该功能是很久以前开发完成的，developer定位和修复要花很长时间。</li>
<li>有太多的功能需要测试，tester要花很长时间，developer又要修复发现的bug，这段时间不可预估，虽然是属于项目上线的最后时刻，但是整个系统始终处于一个不稳定的状态。</li>
</ol>


<p>大家都知道在软件工程中，需求变更发生的越晚，bug发现的越晚，会软件开发的影响会越大。这种极端情况的做法是不可取的。</p>

<p>那么应该怎么做那？我们可以将整个系统的功能细分成很多小功能点，每一个小功能点都是独立可测的，那么一旦开发工程师完成此功能点，tester立马就可以拿去测试。每一个小功能点就是敏捷中所说的用户故事（user story）。</p>

<p>一个user story的典型的生命周期是这样子的。</p>

<ul>
<li>backlog -> BA将刚建好的story卡放置在backlog list里</li>
<li>Analyse -> BA细化story卡，完成验收条件等内容的编写</li>
<li>development -> 开发人员进行开发工作</li>
<li>testing -> 测试人员进行测试</li>
<li>UAT -> 用户验收测试，Business owner会对功能进行确认</li>
<li>Production -> Business owner准许后，将功能发布到生产环境</li>
</ul>


<p>如果只是实现这样的流程，那么这个团队还不算是真正的敏捷团队，这里的tester也不算是真正的QA。因为业务需求通过Business owner到BA再到DEV到tester，是一个衰减的过程。小时候我们玩过一个游戏，老师让一群人排成一排，他会给第一个人说一句悄悄话，然后让第一个人偷偷讲给第二个人，第二个人再原封不动的讲给第三个人..直到最后一个人把这个悄悄话讲出来和老师的原话比较，我们往往发现最后一个人的话很难和老师的原话保持一致，甚至意思会大相径庭。那么这就意味着tester在做测试的时候他不一定能够真正了解业务的实际需求，所以在测试时难免会出现纰漏。这样的卡最后让business owner确认时，很难避免给business owner “惊喜”。</p>

<p>所以为了解决需求衰减的问题，tester要尽早的介入到的story的前期工作。在BA分析故事卡的时候，tester就可以根据卡的内容准备测试策略、测试环境，甚至准备测试数据。在开发人员领取卡的时候，tester可以从测试的角度给开发人员提供一些建议。而在开发人员开发卡的时候，tester可以和开发人员一起pair编写自动化的测试用例。开发人员开发完毕后，tester可以在开发人员的本地环境中快速验证其是否满足所有验收条件，必要的自动化测试是否已经完成等。在UAT环节，tester又可以帮助business owner进行sign off。</p>

<p>这个时候需求的传递已经不是一个简单的链式的行为，测试人员作为连接器把需求良好地串联了起来。测试人员的职责范围已经超出了我们通常所理解的范围。这个时候再用tester这个称呼已经无法涵盖该角色的职责了。所以就有了QA（质量分析师）这一角色。可以看出在敏捷团队中QA并不是质量的最终把关者，而是在项目开始就参与到了质量的控制当中，一直贯穿到所有环节。</p>

<p>如果想了解敏捷团队中QA的具体职责，可以参见我司的同事的文章<a href="http://www.infoq.com/cn/articles/agility-of-qa">《敏捷中的QA》</a>.
如果你想知道自己适不适合QA，请参见我司另一位同事的文章<a href="http://insights.thoughtworkers.org/agile-qa/">《敏捷QA，从入门到放弃》</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring Batch在大型企业中的最佳实践]]></title>
    <link href="http://www.huangbowen.net/blog/2016/11/30/spring-batch-best-practices/"/>
    <updated>2016-11-30T23:36:45+08:00</updated>
    <id>http://www.huangbowen.net/blog/2016/11/30/spring-batch-best-practices</id>
    <content type="html"><![CDATA[<p>在大型企业中，由于业务复杂、数据量大、数据格式不同、数据交互格式繁杂，并非所有的操作都能通过交互界面进行处理。而有一些操作需要定期读取大批量的数据，然后进行一系列的后续处理。这样的过程就是“批处理”。</p>

<!-- more -->


<p>批处理应用通常有以下特点：</p>

<ul>
<li>数据量大，从数万到数百万甚至上亿不等；</li>
<li>整个过程全部自动化，并预留一定接口进行自定义配置；</li>
<li>这样的应用通常是周期性运行，比如按日、周、月运行；</li>
<li>对数据处理的准确性要求高，并且需要容错机制、回滚机制、完善的日志监控等。</li>
</ul>


<h2>什么是Spring batch</h2>

<p>Spring batch是一个轻量级的全面的批处理框架，它专为大型企业而设计，帮助开发健壮的批处理应用。Spring batch为处理大批量数据提供了很多必要的可重用的功能，比如日志追踪、事务管理、job执行统计、重启job和资源管理等。同时它也提供了优化和分片技术用于实现高性能的批处理任务。</p>

<p>它的核心功能包括：</p>

<ul>
<li>事务管理</li>
<li>基于块的处理过程</li>
<li>声明式的输入/输出操作</li>
<li>启动、终止、重启任务</li>
<li>重试/跳过任务</li>
<li>基于Web的管理员接口</li>
</ul>


<hr />

<p>笔者所在的部门属于国外某大型金融公司的CRM部门，在日常工作中我们经常需要开发一些批处理应用，对Spring Batch有着丰富的使用经验。近段时间笔者特意总结了这些经验。</p>

<h2>使用Spring Batch 3.0以及Spring Boot</h2>

<p>在使用Spring Batch时推荐使用最新的Spring Batch 3.0版本。相比Spring Batch2.2，它做了以下方面的提升：</p>

<ul>
<li>支持JSR-352标准</li>
<li>支持Spring4以及Java8</li>
<li>增强了Spring Batch Integration的功能</li>
<li>支持JobScope</li>
<li>支持SQLite</li>
</ul>


<p>支持Spring4和Java8是一个重大的提升。这样就可以使用Spring4引入的Spring boot组件，从而开发效率方面有了一个质的飞跃。引入Spring-batch框架只需要在build.gradle中加入一行代码即可：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>compile("org.springframework.boot:spring-boot-starter-batch")</span></code></pre></td></tr></table></div></figure>


<p>而增强Spring Batch Integration的功能后，我们就可以很方便的和Spring家族的其他组件集成，还可以以多种方式来调用job，也支持远程分区操作以及远程块处理。</p>

<p>而支持JobScope后我们可以随时为对象注入当前Job实例的上下文信息。只要我们制定Bean的scope为job scope，那么就可以随时使用jobParameters和jobExecutionContext等信息。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>@Component
</span><span class='line'>@JobScope
</span><span class='line'>public class CustomClass {
</span><span class='line'>    
</span><span class='line'>    @Value("#{jobParameters[jobDate]}")
</span><span class='line'>    private String jobDate;
</span><span class='line'>
</span><span class='line'>    @Value("#{jobExecutionContext['input.name']}.")
</span><span class='line'>    private String fileName;
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<h2>使用Java Config而不是xml的配置方式</h2>

<p>之前我们在配置job和step的时候都习惯用xml的配置方式，但是随着时间的推移发现问题颇多。</p>

<ul>
<li>xml文件数急剧膨胀，配置块长且复杂，可读性很差；</li>
<li>xml文件缺少语法检查，有些低级错误只有在运行集成测试的时候才能发现；</li>
<li>在xml文件中进行代码跳转时IDE的支持力度不够；</li>
</ul>


<p>我们渐渐发现使用纯Java类的配置方式更灵活，它是类型安全的，而且IDE的支持更好。在构建job或step时采用的流式语法相比xml更加简洁易懂。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>        @Bean
</span><span class='line'>        public Step step(){
</span><span class='line'>                return stepBuilders.get("step")
</span><span class='line'>                                .&lt;Partner,Partner&gt;chunk(1)
</span><span class='line'>                                .reader(reader())
</span><span class='line'>                                .processor(processor())
</span><span class='line'>                                .writer(writer())
</span><span class='line'>                                .listener(logProcessListener())
</span><span class='line'>                                .faultTolerant()
</span><span class='line'>                                .skipLimit(10)
</span><span class='line'>                                .skip(UnknownGenderException.class)
</span><span class='line'>                                .listener(logSkipListener())
</span><span class='line'>                                .build();
</span><span class='line'>        }</span></code></pre></td></tr></table></div></figure>


<p>在这个例子中可以很清楚的看到该step的配置，比如reader/processor/writer组件，以及配置了哪些listener等。</p>

<h2>本地集成测试中使用内存数据库</h2>

<p>Spring batch在运行时需要数据库支持，因为它需要在数据库中建立一套schema来存储job和step运行的统计信息。而在本地集成测试中我们可以借助Spring batch提供的内存Repository来存储Spring batch的任务执行信息，这样即避免了在本地配置一个数据库，又可以加快job的执行。先为Job的配置类添加扩展类：DefaultBatchConfigurer。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class CustomJobConfiguration extends DefaultBatchConfigurer {
</span><span class='line'>    
</span><span class='line'>    ...
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>我们在build.gradle中加入对hsqldb的依赖：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>runtime(‘org.hsqldb:hsqldb:2.3.2’)</span></code></pre></td></tr></table></div></figure>


<p>然后在测试类中添加对DataSource的配置。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@EnableAutoConfiguration
</span><span class='line'>@EnableBatchProcessing
</span><span class='line'>@DataJpaTest
</span><span class='line'>@Import({DataSourceAutoConfiguration.class, BatchAutoConfiguration.class})
</span><span class='line'>public class TestConfiguration {
</span><span class='line'>    
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>并且在applicaton.properties配置中添加初始化Database的配置：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>spring.batch.initializer.enable=true</span></code></pre></td></tr></table></div></figure>


<h2>合理的使用Chunk机制</h2>

<p>Spring batch在配置Step时采用的是基于Chunk的机制。即每次读取一条数据，再处理一条数据，累积到一定数量后再一次性交给writer进行写入操作。这样可以最大化的优化写入效率，整个事务也是基于Chunk来进行。</p>

<p>当我们在需要将数据写入到文件、数据库中之类的操作时可以适当设置Chunk的值以满足写入效率最大化。但有些场景下我们的写入操作其实是调用一个web service或者将消息发送到某个消息队列中，那么这些场景下我们就需要设置Chunk的值为1，这样既可以及时的处理写入，也不会由于整个Chunk中发生异常后，在重试时出现重复调用服务或者重复发送消息的情况。</p>

<h2>使用Listener来监视job执行情况并及时做相应的处理</h2>

<p>Spring batch提供了大量的Listener来对job的各个执行环节进行全面的监控。</p>

<p>在job层面Spring batch提供了JobExecutionListener接口，其支持在Job开始或结束时进行一些额外处理。在step层面Spring batch提供了StepExecutionListener，ChunkListener,ItemReadListener,ItemProcessListener,ItemWriteListener,SkipListener等接口，同时对Retry和Skip操作也提供了RetryListener及SkipListener。</p>

<p>通常我们会为每个job都实现一个JobExecutionListener，在afterJob操作中我们输出job的执行信息，包括执行时间、job参数、退出代码、执行的step以及每个step的详细信息。这样无论是开发、测试还是运维人员对整个job的执行情况了如指掌。</p>

<p>如果某个step会发生skip的操作，我们也会为其实现一个SkipListener，并在其中记录skip的数据条目，用于下一步的处理。</p>

<p>实现Listener有两种方式，一种是继承自相应的接口，比如继承JobExecutionListener接口，另一种是使用annoation（注解）的方式。经过实践我们认为使用注解的方式更好一些，因为使用接口你需要实现接口的所有方法，而使用注解则只需要对相应的方法添加annoation即可。</p>

<p>下面的这个类采用了继承接口的方式，我们看到其实我们只用到了第一个方法，第二个和第三个都没有用到。但是我们必须提供一个空的实现。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class CustomSkipListener implements SkipListener&lt;String, String&gt; {
</span><span class='line'>    @Override
</span><span class='line'>    public void onSkipInRead(Throwable t) {
</span><span class='line'>        // business logic
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    @Override
</span><span class='line'>    public void onSkipInWrite(String item, Throwable t) {
</span><span class='line'>        // no need
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    @Override
</span><span class='line'>    public void onSkipInProcess(String item, Throwable t) {
</span><span class='line'>        // no need
</span><span class='line'>    }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>而使用annoation的方式可以简写为：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class CustomSkipListener {
</span><span class='line'>    
</span><span class='line'>    @OnSkipInRead
</span><span class='line'>    public void onSkipInRead(Throwable t) {
</span><span class='line'>        // business logic
</span><span class='line'>    }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<h2>使用Retry和Skip增强批处理工作的健壮性</h2>

<p>在处理百万级的数据过程过程中难免会出现异常。如果一旦出现异常而导致整个批处理工作终止的话那么会导致后续的数据无法被处理。Spring Batch内置了Retry（重试）和Skip（跳过）机制帮助我们轻松处理各种异常。我们需要将异常分为三种类型。第一种是需要进行Retry的异常，它们的特点是该异常可能会随着时间推移而消失，比如数据库目前有锁无法写入、web服务当前不可用、web服务满载等。所以对它们适合配置Retry机制。第二种是需要Skip的异常，比如解析文件的某条数据出现异常等，因为对这些异常即使执行Retry每次的结果也都是相同，但又不想由于某条数据出错而停止对后续数据的处理。第三种异常是需要让整个Job立刻失败的异常，比如如果出现了OutOfMemory的异常，那么需要整个Job立刻运行。</p>

<p>一般来说需要Retry的异常也要配置Skip选项，从而保证后续的数据能够被继续处理。我们也可以配置SkipLimit选项保证当Skip的数据条目达到一定数量后及时终止整个Job。</p>

<p>有时候我们需要在每次Retry中间隔做一些操作，比如延长Retry时间，恢复操作现场等，Spring Batch提供了BackOffPolicy来达到目的。下面是一个配置了Retry机制、Skip机制以及BackOffPolicy的step示例。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>@Bean
</span><span class='line'>public Step step(){
</span><span class='line'>    return stepBuilders.get("step")
</span><span class='line'>            .&lt;Partner,Partner&gt;chunk(1)
</span><span class='line'>            .reader(reader())
</span><span class='line'>            .processor(processor())
</span><span class='line'>            .writer(writer())
</span><span class='line'>            .listener(logProcessListener())
</span><span class='line'>            .faultTolerant()
</span><span class='line'>            .skipLimit(10)
</span><span class='line'>            .skip(UnknownGenderException.class)
</span><span class='line'>            .skip(ServiceUnavailableException.class)
</span><span class='line'>            .retryLimit(5)
</span><span class='line'>            .retry(ServiceUnavailableException.class)
</span><span class='line'>            .backOffPolicy(backoffPolicy)
</span><span class='line'>            .listener(logSkipListener())
</span><span class='line'>            .build();
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>使用自定义的Decider来实现Job flow</h2>

<p>在Job执行过程中不一定都是顺序执行的，我们经常需要根据某个job的输出数据或执行结果来决定下一步的走向。以前我们会把一些判断放置在下游step中进行，这样可能会导致有些step实际运行了，但其实并没有做任何事情。比如一个step执行过程中会将失败的数据条目记录到一个报告中，而下一个step会判断有没有生成报告，如果生成了报告则将该报告发送给指定联系人，如果没有则不做任何事情。这种情况下可以通过Decider机制来实现Job的执行流程。在Spring batch 3.0中Decider已经从Step中独立出来，和Step处于同一级别。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class ReportDecider implements JobExecutionDecider {
</span><span class='line'>    @Override
</span><span class='line'>    public FlowExecutionStatus decide(JobExecution jobExecution, StepExecution stepExecution) {
</span><span class='line'>        if (report.isExist()) {
</span><span class='line'>            return new FlowExecutionStatus(“SEND");
</span><span class='line'>        }
</span><span class='line'>        
</span><span class='line'>        return new FlowExecutionStatus(“SKIP");
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>而在job配置中可以这样来使用Decider。这样整个Job的执行流程会更加清晰易懂。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public Job job() {
</span><span class='line'>    return new JobBuilder("petstore")
</span><span class='line'>            .start(orderProcess())
</span><span class='line'>            .next(reportDecider)
</span><span class='line'>            .on("SEND").to(sendReportStep)
</span><span class='line'>            .on("SKIP").end().build()
</span><span class='line'>            .build()
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>采用多种机制加速Job的执行</h2>

<p>批处理工作处理的数据量大，而执行窗口一般又要求比较小。所以必须要通过多种方式来加速Job的执行。一般我们有四种方式来实现：</p>

<ul>
<li>在单个step中多线程执行任务</li>
<li>并行执行不同的Step</li>
<li>并行执行同一个Step</li>
<li>远程执行Chunk任务</li>
</ul>


<p>在单个step多线程执行任务可以借助于taskExecutor来实现。这种情况适合于reader、writer是线程安全的并且是无状态的场景。我们还可以设置线程数量。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public Step step() {
</span><span class='line'>    return stepBuilders.get("step")
</span><span class='line'>            .tasklet(tasklet)
</span><span class='line'>            .throttleLimit(20)
</span><span class='line'>            .build();
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>上述示例中的tasklet需要实现TaskExecutor，Spring Batch提供了一个简单的多线程TaskExecutor供我们使用：SimpleAsyncTaskExecutor。</p>

<p>并行执行不同的Step在Spring batch中很容易实现，以下是一个示例：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public Job job() {
</span><span class='line'>    return stepBuilders.get("parallelSteps")
</span><span class='line'>            .start(step1)
</span><span class='line'>            .split(asyncTaskExecutor).add(flow1, flow2)
</span><span class='line'>            .next(step3)
</span><span class='line'>            .build();
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>在这个示例中我们先执行step1，然后并行执行flow1和flow2，最后再执行step3。</p>

<p>Spring batch提供了PartitionStep来实现对同一个step在多个进程中实现并行处理。通过PartitonStep再配合PartitionHandler可以将一个step扩展到多个Slave上实现并行运行。</p>

<p>远程执行Chunk任务则是将某个Step的processer操作分割到多个进程中，多个进程通过一些中间件进行通讯（比如采用消息的方式）。这种方式适合于Processer是瓶颈而Reader和Writer不是瓶颈的场景。</p>

<h2>结语</h2>

<hr />

<p>Spring Batch对批处理场景进行了合理的抽象，封装了大量的实用功能，使用它来开发批处理应用可以达到事半功倍的效果。在使用的过程中我们仍需要坚持总结一些最佳实践，从而能够交付高质量的可维护的批处理应用，满足企业级应用的苛刻要求。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[12小时超级马拉松赛记]]></title>
    <link href="http://www.huangbowen.net/blog/2016/10/08/12-hours-ultra-running/"/>
    <updated>2016-10-08T17:59:29+08:00</updated>
    <id>http://www.huangbowen.net/blog/2016/10/08/12-hours-ultra-running</id>
    <content type="html"><![CDATA[<p>8月初再次来到印度Pune出差，还是在TWU当讲师。这次的TWU是第51期，也是有史以来人数最多的一期。整个TWU的工作很多，非常忙，经常从早上8点忙到晚上8点。为了备战10月份的越野比赛，只有在周末才有时间拉个半马。</p>

<!-- more -->


<p>9月初从www.townscirpt.com网站上看到9月24日Pune会举行一场12小时超级马拉松，从晚上的7点钟跑到第二天早上的7点钟，心里顿时长了草。自己之前还没有参加过12小时超级马拉松，所以很想得到这样的一份体验。另外可以把这场比赛作为10月份越野赛的很好的一次赛前拉练。</p>

<p>9月24日很快就到来了。之前一周非常忙，每天基本上都是凌晨2、3点才睡觉。为了保证24日晚上有充足的精力，我并没有参加23日晚上的TWU 毕业Party，而是在家里睡大觉。24日的整个白天也是除了吃就是睡。下午4点多睡醒了，开始收拾装备准备出发去赛场。</p>

<p>比赛之前我从网上查了一下关于12小时马拉松的准备情况，了解到这样的马拉松通常都是在操场/公园之类的地方举行，地形无起伏。所以我初步制定了完成80公里的计划。并且列出了下面的装备清单。</p>

<ul>
<li>凡士林</li>
<li>黑色长裤、牛仔裤、运动内裤两条</li>
<li>短袖一件、长袖一件、外套一件</li>
<li>跑鞋一双，袜子两双</li>
<li>充满电的手机充电宝</li>
<li>手机，手机充电线</li>
<li>止痛片？</li>
<li>好吃的零食</li>
</ul>


<p>带凡士林是为了防止裆部皮肤磨破，已经因为这个好几次比赛都吃亏了，所以这次12小时的跑步一定不能掉以轻心。带止痛片是为了缓解膝盖和脚踝的疼痛，但是最后忘记买了。好吃的零食也是为了补给了，12小时不吃东西万万不行，不过身在印度，还真没有发现任何好吃的零食，所以最后也没有带。最后带的东西是1到6列的那些东西.</p>

<p>比赛前一周的时候我在jogger’s park刷线上半程马拉松刷到10公里的时候右膝盖突然感觉跑步时有异响。这可是一个非常的征兆。虽然并不是很痛，但几乎每次屈伸腿都会感觉里面似乎有东西在磨动。之后的一周就没有怎么运动，但是感觉膝盖的异响还是没有减轻。所以这也是参加比赛的一个巨大的隐患。但我不想因此而放过这次百公里比赛前的拉练机会，所以决定还是要参加。</p>

<p>五点多去了little door餐馆吃了好吃的牛肉饭，把能量补足。然后使用印度本土的ola软件打了一辆车去目的地，一个高尔夫球场。上车后司机问我目的地正确不，我说没问题。接下来才是悲剧的开始。由于我的目的地是在城外，而ola默认是不跑城外的，它把我的目的地给定到了一个奇怪的地方。司机拉到后把我放下就走了。我用google map一下看妈的离目的地还有14公里远。我赶紧用uber重新叫车。当时时间已经是7点了，而且还是Pune的下班高峰期，连续叫了两辆Uber都被司机取消了。当时我看到已经错过比赛时间了，都想直接回去得了。但回去也要叫车啊，我又尝试叫了一次，并且在一个路人的帮助下司机pick up了我。当时上车已经7点半了，到了比赛场地是一个小时后了。</p>

<p><img src="http://www.huangbowen.net/images/IMG_4661.jpg" width="400"></p>

<p>我急急忙忙领了号码簿，存了包，就开跑了。一开跑我就快哭了。这MD整个赛道都是在山上啊，12小时超级马拉松硬生生给整成了越野跑。赛道是一个全长4.2公里的公路。从这头跑到那头再跑回来算一圈。4.2公里中平路大概占1公里多，剩下的都是上坡和下坡。</p>

<p>看到这路况我知道80公里的目标肯定是完成不了了。跑步过程中碰到一个赤脚大叔说他今天的目标是跑8个来回。我想8个来回也就是64公里左右，我也跑8个来回吧。看来到哪里都是赤脚的跑神，在开挂的印度也不例外。</p>

<p><img src="http://www.huangbowen.net/images/IMG_0006_2.jpg" width="400"></p>

<p>虽然线路起伏很大，我感觉状态还好，上坡能跑，维持在9分多的配速，下坡也能冲到5分多。我知道长路漫漫，所以刚开始一定不能太猛了，免得后劲乏力。跑的过程中膝盖没有出现弹响，这让我很高兴。这边比赛的补给还挺好的，有瓶装水、饮料、饼干、香蕉、橘子、花生，还有盐。盐是那种一小包的包装，就像咖啡店里装糖的那种包装。这可是防止抽筋的利器，我直接撕一包到嘴里，然后合着矿泉水吞下。我在想以后比赛也别买盐丸了，直接装包盐，经济又划算。</p>

<p>不知不觉我就刷了两圈了。第一圈用时52分钟，在山地环境下跑出这样的成绩我很满意。第二圈用时一个小时，速度有所下降，但也在接受的范围之内。第三圈1小时10分钟，因为上坡基本跑不动了，只能快走了，平路和下坡还是能跑。第三圈完了以后喝了些咖啡，觉得这个咖啡真是太美味了。在补给站呆了6分钟后，又重新向第四圈发起冲锋。</p>

<p>其实第四圈整个人状态还好，就是膝盖又开始弹响，右膝盖又有点隐隐作痛。第四圈跑完的时候恰好花了4个半小时，当时是凌晨1点钟。还有6个小时比赛结束，而我还有4圈要跑。第5圈跑完用时1小时10分钟左右。这时候最快的一公里也只能到7分多点了，最慢的有将近12分钟。</p>

<p>第五圈跑完在补给站的时候我又碰到了赤脚大叔，我说接下来我们一起跑吧。整个第六圈我们一起边跑边聊。这个大叔说他跑过的最长距离是100公里，是在山里跑的，用了24个小时。他很热情，看到没有的跑者都要打招呼，给他们加油。第六圈跑完再次进入补给站后，我感觉膝盖很痛，两个大腿肌肉硬的很，跑步已经完全失去弹性了。有个医护小妹帮我做了腿部肌肉放松。做完之后我发现MD路都走不了了。只好在站里休息了20多分钟才出发。而赤脚大叔早都弃我而去。</p>

<p>我一拐一瘸的爬坡，恰好也碰到另一个跑友也是一拐一瘸，看起来伤的比我还严重。他问我是不是受伤了，说前面看我跑的很快，问我是不是专业跑步的。我说不是，业余玩票而已。他说他平时跑的比较少，这次是被朋友拉过来的，他的目标就是跑够12小时，接下来打算全程走完。这个小哥走的太慢，我和他走了一段路就分开了。后面有个大叔跟了上来陪着我跑。经过聊天才知道他是这次比赛的组织者之一，是专门负责赛道上参赛者的安全的。他说他跑过的最长距离是212公里，用时40小时。我的天啊！一山更比一山高。到了第7圈折返点的时候，看到一个跑友再用一个喷雾剂往腿上喷。我开始还以为是杀虫的。他问我要不要喷，可以减少疼痛感。我试了一下，还别说真有效，喷了以后膝盖的疼痛感减少了不少。我在想要不要下个月的比赛自己也带一瓶。</p>

<p>跑完第7圈，这时候已经将近6点了。时间过的好快，我还没有任何瞌睡的感觉，只是腿部肌肉实在是非常僵硬。只有一个小时的时间，跑完一圈时间应该不够了，除非能拿出刚开始跑的那种装填。但这个时候整个人已经非常疲惫，只有慢慢走了，能走多少是多少。天也慢慢亮了，我突然发现路上跑的人变多了，而且各个竟然上坡还能跑。后来才知道原来有些人跑到凌晨就找钻进补给点的帐篷休息了，现在马上要到7点了，所以都出来完成赛事。他们由于休息了几个小时，所以精力自然比我要好的多。</p>

<p><img src="http://www.huangbowen.net/images/IMG_0020_2.jpg" width="400"></p>

<p>果然我第8圈没有跑完就已经7点了，差1.5公里完成整整8圈，这也算是一点小遗憾吧。到了终点领了完赛T恤，还收获了一个完赛奖杯。跑步这么久，这可是我跑步以来收获的第一个奖杯，之前收到的都是完赛奖牌。我还和赛事主办者合了影。主办者也参加了比赛，跑了貌似不下10圈，尤其是最后上坡还能冲着跑，实力不一般。他说11月份要来中国参加100公里越野赛，当时太匆忙没有问他参加的是哪个比赛。</p>

<p><img src="http://www.huangbowen.net/images/IMG_4688.jpg" width="400"></p>

<p>第一次12小时超级马拉松就这样跑完了。整个过程其实不是很累，没有那种让人绝望的感觉，也没有想过要放弃。可能是因为没有距离限制，即使跑不动了也可以走，所以心里比较淡定。总共跑了66公里，爬升2000米，下降2000米，这个成绩自己也比较满意。这个比赛我也见识了很多很牛的印度跑友。其中有个女的刚参加完新加坡的一个比赛，完成了168公里，她是这次比赛的女子组冠军。印度跑友超级热情，不止一个跑友问我知不知道Great Wall Marathon。我说知道，其实我心里在想，挂名长城马拉松的比赛中国一年没有10个也有5个，谁知道你们说的是哪一个。他们问我参加了Great Wall Marathon没，我说没有。他们问为什么，我说离我生活的城市太远了。</p>

<p><img src="http://www.huangbowen.net/images/IMG_0023_2.jpg" width="400"></p>

<p><img src="http://www.huangbowen.net/images/IMG_0024_2.jpg" width="400"></p>

<p>第一个马拉松是在布里斯班跑的，而第一个12小时超级马拉松是在Pune跑的。看来国外才是我的福地。希望这次膝盖的伤痛能尽快康复，待我完成百公里超马后，就正式收山, 转战铁三！</p>

<p><img src="http://www.huangbowen.net/images/IMG_0017_2.jpg" width="400"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2016年8月份]]></title>
    <link href="http://www.huangbowen.net/blog/2016/09/05/summary-for-2016-august/"/>
    <updated>2016-09-05T04:11:46+08:00</updated>
    <id>http://www.huangbowen.net/blog/2016/09/05/summary-for-2016-august</id>
    <content type="html"><![CDATA[<p>8月份又一次来到了印度Pune，作为TWU第51期的讲师会在这里呆上2个月左右。</p>

<!-- more -->


<p>由于在3月份已经来过一次，所以一切都很熟悉，甚至住的房间和上次都差不多。再一次和来自全球各地的Trainer一起合作，共同服务有史以来TWU学生最多的一期，我很荣幸。每次来TWU都是带着学习的态度来的。现在呆了一个月，感觉不错。</p>

<p>这一个月跑步训练5次，总距离40公里，达到了历史新低。一部分原因是TWU前三周很忙，抽不出时间训练，另一部分原因是张掖比赛的失利使得自己有所懈怠。当然自己也要尽快从这种情绪中脱离出来，恢复状态。因为10月15日的大理100以及11月6日的四姑娘山越野赛都是硬仗。这个月一次半马拉练都没有，所以身体素质达到了历史新低。</p>

<p><img src="http://www.huangbowen.net/images/IMG_4638.PNG" width="300"></p>

<p>这次又参加了Pune当地的跑步活动，名字叫做Midnight marathone。其实是晚上8点半起跑，组别有5公里、10公里和21公里。我和两个同事报名了10公里并且顺利完赛。</p>

<p><img src="http://www.huangbowen.net/images/IMG_4580.JPG" width="400"></p>

<p>另外利用了一个周末和同事一起出游，去爬了当地最高的一座山峰。攀爬的过程中一会儿下雨、一会儿出太阳，还真是一段奇妙的经历。这也算一次越野拉练吧。</p>

<p><img src="http://www.huangbowen.net/images/IMG_4535.jpg" width="400"></p>

<p>由于还住在上次的小区，所以又可以使用这个小区的健身房了。与上次不同的是现在健身房有了一个教练。健身房人气和上次差不多，每次我去只有稀稀拉拉2、3个人锻炼。由于7月份几乎没去过健身房，所以这个月主要是唤醒身上的肌肉，锻炼时没怎么上量。8月份健身房出勤率可能也就30%左右吧。</p>

<p><img src="http://www.huangbowen.net/images/IMG_4587.jpg" width="400"></p>

<p>好事情是我又回归篮球场和足球场了。小区里面就有个篮球场，所以下班早的话就和同事一块去打球。有的时候也和小区里的其他孩子过过招。当然为了保护自己，基本不会有什么身体对抗。足球基本每周一次，也是和同事一起踢5V5的小场子。由于这次没有带球鞋，所以每次踢球都是赤脚。</p>

<p>8月份没有定什么计划，9月份计划就定为完成Infrastructure as Code一书的合译吧。</p>
]]></content>
  </entry>
  
</feed>
