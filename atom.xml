<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[黄博文的地盘]]></title>
  <link href="http://www.huangbowen.net/atom.xml" rel="self"/>
  <link href="http://www.huangbowen.net/"/>
  <updated>2013-05-17T00:30:49+08:00</updated>
  <id>http://www.huangbowen.net/</id>
  <author>
    <name><![CDATA[黄博文]]></name>
    <email><![CDATA[huangbowen521@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[npm的配置管理及设置代理]]></title>
    <link href="http://www.huangbowen.net/blog/2013/05/17/setting-npm-configuration/"/>
    <updated>2013-05-17T00:17:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/05/17/setting-npm-configuration</id>
    <content type="html"><![CDATA[<p>npm全称为Node Packaged Modules。它是一个用于管理基于node.js编写的package的命令行工具。其本身就是基于node.js写的,这有点像gem与ruby的关系。</p>

<!-- more -->


<p>在我们的项目中，需要使用一些基于node.js的javascript库文件，就需要npm对这些依赖库进行方便的管理。由于我们的开发环境由于安全因素在访问一些网站时需要使用代理，其中就包括npm的repositories网站，所以就需要修改npm的配置来加入代理。</p>

<p>下面简要介绍下npm的配置以及如何设置代理。</p>

<h2>npm获取配置有6种方式，优先级由高到底。</h2>

<ol>
<li><p>命令行参数。 <code>--proxy http://server:port</code>即将proxy的值设为<code>http://server:port</code>。</p></li>
<li><p>环境变量。 以<code>npm_config_</code>为前缀的环境变量将会被认为是npm的配置属性。如设置proxy可以加入这样的环境变量<code>npm_config_proxy=http://server:port</code>。</p></li>
<li><p>用户配置文件。可以通过<code>npm config get userconfig</code>查看文件路径。如果是mac系统的话默认路径就是<code>$HOME/.npmrc</code>。</p></li>
<li><p>全局配置文件。可以通过<code>npm config get globalconfig</code>查看文件路径。mac系统的默认路径是<code>/usr/local/etc/npmrc</code>。</p></li>
<li><p>内置配置文件。安装npm的目录下的npmrc文件。</p></li>
<li><p>默认配置。 npm本身有默认配置参数，如果以上5条都没设置，则npm会使用默认配置参数。</p></li>
</ol>


<h2>针对npm配置的命令行操作</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>   npm config <span class="nb">set</span> &lt;key&gt; &lt;value&gt; <span class="o">[</span>--global<span class="o">]</span>
</span><span class='line'>   npm config get &lt;key&gt;
</span><span class='line'>   npm config delete &lt;key&gt;
</span><span class='line'>   npm config list
</span><span class='line'>   npm config edit
</span><span class='line'>   npm get &lt;key&gt;
</span><span class='line'>   npm <span class="nb">set</span> &lt;key&gt; &lt;value&gt; <span class="o">[</span>--global<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>在设置配置属性时属性值默认是被存储于用户配置文件中，如果加上<code>--global</code>，则被存储在全局配置文件中。</p>

<p>如果要查看npm的所有配置属性（包括默认配置），可以使用<code>npm config ls -l</code>。</p>

<p>如果要查看npm的各种配置的含义，可以使用<code>npm help config</code>。</p>

<h2>为npm设置代理</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>npm config <span class="nb">set </span>proxy http://server:port
</span><span class='line'><span class="nv">$ </span>npm config <span class="nb">set </span>https-proxy http://server:port
</span></code></pre></td></tr></table></div></figure>


<p>如果代理需要认证的话可以这样来设置。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>npm config <span class="nb">set </span>proxy http://username:password@server:port
</span><span class='line'><span class="nv">$ </span>npm config <span class="nb">set </span>https-proxy http://username:pawword@server:port
</span></code></pre></td></tr></table></div></figure>


<p>如果代理不支持https的话需要修改npm存放package的网站地址。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>npm config <span class="nb">set </span>registry <span class="s2">&quot;http://registry.npmjs.org/&quot;</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[将AngularJS的单元测试和端到端测试集成到gradle构建脚本中]]></title>
    <link href="http://www.huangbowen.net/blog/2013/05/07/integrate-javascript-tests-to-gradle/"/>
    <updated>2013-05-07T15:55:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/05/07/integrate-javascript-tests-to-gradle</id>
    <content type="html"><![CDATA[<p>我目前工作的一个项目后端使用java和spring建立了一个restful service,前端使用<a href="http://angularjs.org/">AngularJS</a>来渲染页面，提供用户接口。在前端的<a href="http://angularjs.org/">AngularJS</a>项目中，我们使用<a href="http://pivotal.github.io/jasmine/">Jasmine</a>来写单元测试，使用<a href="http://angularjs.org/">AngularJS</a>自带的Angular_scenario来写端到端测试。运行这些测试则使用的是<a href="http://karma-runner.github.io/">Karma</a>。</p>

<p>虽然使用<a href="http://karma-runner.github.io/">Karma</a>在命令行下可以很方便的运行所有的测试，但是我们想将这些集成到<a href="http://www.gradle.org/">gradle</a>的构建脚本中，从而将<a href="http://angularjs.org/">AngularJS</a>的所有测试加入到CI的构建中。同时为了保证运行测试的效率，我们决定使用<a href="http://phantomjs.org/">PhantomJS</a>作为运行测试的浏览器环境。</p>

<!-- more -->


<h2>环境搭建</h2>

<ul>
<li><p><strong>安装<a href="http://nodejs.org/">nodeJS</a>。</strong> 直接去官网&lt;http://nodejs.org/ >下载最新的安装包进行安装。</p></li>
<li><p><strong>安装<a href="http://karma-runner.github.io/">Karma</a>。</strong> 可以使用nodeJS提供的npm(node package manager)来安装。</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>npm install -g karma
</span></code></pre></td></tr></table></div></figure>


<p>如果想安装最新的开发者版本，则运行：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>npm install -g karma@canary
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>安装<a href="http://phantomjs.org/">PhantomJS</a>。</strong></li>
</ul>


<p>方式一：使用npm来安装:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>npm install -g phantomjs
</span></code></pre></td></tr></table></div></figure>


<p>方式二：从官网上下载最新的安装包自行安装。地址是<a href="http://phantomjs.org/">http://phantomjs.org/</a> 。</p>

<p>不过为了方便其它人的使用，我将<a href="http://phantomjs.org/">PhantomJS</a>的文件直接放置到了项目的codebase中，并加入了svn管理。这样当setup一个新的工作电脑时就不需要安装它了，直接checkout项目代码就行。最大的原因是当<a href="http://karma-runner.github.io/">Karma</a>运行测试时会根据环境变量寻找<a href="http://phantomjs.org/">PhantomJS</a>的执行文件，将<a href="http://phantomjs.org/">PhantomJS</a>的执行文件放置在统一的地方方便管理，减少环境变量依赖。</p>

<h2>配置<a href="http://karma-runner.github.io/">Karma</a>运行测试的配置文件</h2>

<p>方式一：在项目根目录下运行<code>Karma init</code>,根据提示一步步创建配置文件。</p>

<p>方式二：如果对<a href="http://karma-runner.github.io/">Karma</a>的配置文件较为熟悉的话，可以自行创建一个。</p>

<p>以下是我为unit test创建的配置文件。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
</pre></td><td class='code'><pre><code class='JavaScript'><span class='line'><span class="c1">// Sample Karma configuration file, that contain pretty much all the available options</span>
</span><span class='line'><span class="c1">// It&#39;s used for running client tests on Travis (http://travis-ci.org/#!/karma-runner/karma)</span>
</span><span class='line'><span class="c1">// Most of the options can be overriden by cli arguments (see karma --help)</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">// For all available config options and default values, see:</span>
</span><span class='line'><span class="c1">// https://github.com/karma-runner/karma/blob/stable/lib/config.js#L54</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// base path, that will be used to resolve files and exclude</span>
</span><span class='line'><span class="nx">basePath</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">frameworks</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;jasmine&#39;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// list of files / patterns to load in the browser</span>
</span><span class='line'><span class="nx">files</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="s1">&#39;spec/*.spec.js&#39;</span>
</span><span class='line'><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// list of files to exclude</span>
</span><span class='line'><span class="nx">exclude</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// web server port</span>
</span><span class='line'><span class="c1">// CLI --port 9876</span>
</span><span class='line'><span class="nx">port</span> <span class="o">=</span> <span class="mi">9876</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// cli runner port</span>
</span><span class='line'><span class="c1">// CLI --runner-port 9100</span>
</span><span class='line'><span class="nx">runnerPort</span> <span class="o">=</span> <span class="mi">9100</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// enable / disable colors in the output (reporters and logs)</span>
</span><span class='line'><span class="c1">// CLI --colors --no-colors</span>
</span><span class='line'><span class="nx">colors</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// level of logging</span>
</span><span class='line'><span class="c1">// possible values: LOG_DISABLE || LOG_ERROR || LOG_WARN || LOG_INFO || LOG_DEBUG</span>
</span><span class='line'><span class="c1">// CLI --log-level debug</span>
</span><span class='line'><span class="nx">logLevel</span> <span class="o">=</span> <span class="nx">LOG_INFO</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// enable / disable watching file and executing tests whenever any file changes</span>
</span><span class='line'><span class="c1">// CLI --auto-watch --no-auto-watch</span>
</span><span class='line'><span class="nx">autoWatch</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Start these browsers, currently available:</span>
</span><span class='line'><span class="c1">// - Chrome</span>
</span><span class='line'><span class="c1">// - ChromeCanary</span>
</span><span class='line'><span class="c1">// - Firefox</span>
</span><span class='line'><span class="c1">// - Opera</span>
</span><span class='line'><span class="c1">// - Safari (only Mac)</span>
</span><span class='line'><span class="c1">// - PhantomJS</span>
</span><span class='line'><span class="c1">// - IE (only Windows)</span>
</span><span class='line'><span class="c1">// CLI --browsers Chrome,Firefox,Safari</span>
</span><span class='line'><span class="nx">browsers</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;PhantomJS&#39;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// If browser does not capture in given timeout [ms], kill it</span>
</span><span class='line'><span class="c1">// CLI --capture-timeout 5000</span>
</span><span class='line'><span class="nx">captureTimeout</span> <span class="o">=</span> <span class="mi">10000</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Auto run tests on start (when browsers are captured) and exit</span>
</span><span class='line'><span class="c1">// CLI --single-run --no-single-run</span>
</span><span class='line'><span class="nx">singleRun</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// report which specs are slower than 500ms</span>
</span><span class='line'><span class="c1">// CLI --report-slower-than 500</span>
</span><span class='line'><span class="nx">reportSlowerThan</span> <span class="o">=</span> <span class="mi">500</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// compile coffee scripts</span>
</span><span class='line'><span class="nx">preprocessors</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="s1">&#39;**/*.coffee&#39;</span><span class="o">:</span> <span class="s1">&#39;coffee&#39;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">plugins</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="s1">&#39;karma-jasmine&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;karma-chrome-launcher&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;karma-firefox-launcher&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;karma-phantomjs-launcher&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;karma-junit-reporter&#39;</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>由于需要在CI中运行测试，所以应当将autoWatch设置为false,将singleRun设置为true。这样<a href="http://karma-runner.github.io/">Karma</a>只会运行一遍测试。</p>

<p>由于我们将<a href="http://phantomjs.org/">PhantomJS</a>放置在工程目录下，为了让<a href="http://karma-runner.github.io/">Karma</a>能找到<a href="http://phantomjs.org/">PhantomJS</a>的执行文件，需要设置环境变量PHANTOMJS_BIN。在Karma.conf.js中加入如下代码:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javaScript'><span class='line'><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PHANTOMJS</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;path&#39;</span><span class="p">).</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="s1">&#39;tools/PhantomJS/phantomjs.exe&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果Karma运行测试时找不到浏览器的执行文件，会报一个错误。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>INFO <span class="o">[</span>karma<span class="o">]</span>: Karma v0.9.2 server started at http://localhost:9876/
</span><span class='line'>INFO <span class="o">[</span>launcher<span class="o">]</span>: Starting browser PhantomJS
</span><span class='line'>ERROR <span class="o">[</span>karma<span class="o">]</span>: <span class="o">{</span> <span class="o">[</span>Error: spawn ENOENT<span class="o">]</span> code: <span class="s1">&#39;ENOENT&#39;</span>, errno: <span class="s1">&#39;ENOENT&#39;</span>, syscall: <span class="s1">&#39;spawn&#39;</span> <span class="o">}</span>
</span><span class='line'>Error: spawn ENOENT
</span><span class='line'>    at errnoException <span class="o">(</span>child_process.js:977:11<span class="o">)</span>
</span><span class='line'>    at Process.ChildProcess._handle.onexit <span class="o">(</span>child_process.js:768:34<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>当时我花了好长时间来寻找原因，最后使用<code>karma start karma.conf.js --log-level=debug</code>来查看运行日志。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>INFO <span class="o">[</span>launcher<span class="o">]</span>: Starting browser PhantomJS
</span><span class='line'>DEBUG <span class="o">[</span>launcher<span class="o">]</span>: Creating temp dir at C:<span class="se">\U</span>sers<span class="se">\b</span>owen<span class="se">\A</span>ppData<span class="se">\L</span>ocal<span class="se">\2\k</span>arma-28747846
</span><span class='line'>DEBUG <span class="o">[</span>launcher<span class="o">]</span>: C:<span class="se">\P</span>rogram Files<span class="se">\P</span>hantomJS<span class="se">\p</span>hamtomjs.exe  C:<span class="se">\U</span>sers<span class="se">\b</span>owen<span class="se">\A</span>ppData<span class="se">\L</span>ocal<span class="se">\2\k</span>arma-28747846capture.js
</span><span class='line'>INFO <span class="o">[</span>karma<span class="o">]</span>: To run via this server, use <span class="s2">&quot;karma run --runner-port 9101&quot;</span>
</span><span class='line'>ERROR <span class="o">[</span>karma<span class="o">]</span>: <span class="o">{</span> <span class="o">[</span>Error: spawn ENOENT<span class="o">]</span> code: <span class="s1">&#39;ENOENT&#39;</span>, errno: <span class="s1">&#39;ENOENT&#39;</span>, syscall: <span class="s1">&#39;spawn&#39;</span> <span class="o">}</span>
</span><span class='line'>Error: spawn ENOENT
</span></code></pre></td></tr></table></div></figure>


<p>通过DEBUG的log我发现<code>C:\Program Files\PhantomJS\phamtomjs.exe</code>下并未有该文件，最后使用上述的方法来设置<a href="http://phantomjs.org/">PhantomJS</a>的环境变量。（奇怪的是我已经在PowerShell里设置了该环境变量，并且Karma命令行也是在PowerShell运行的，但是<a href="http://nodejs.org/">nodeJS</a>并未获取正确的环境变量值）。</p>

<h2>在build.gradle中加入运行Karma的task</h2>

<p>由于我们的开发机以及CI服务器都是Windows环境，所以需要调用CMD来执行<a href="http://karma-runner.github.io/">Karma</a>命令。</p>

<p>配置如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">task</span> <span class="nf">jsUnit</span><span class="o">(</span><span class="nl">type:</span> <span class="n">Exec</span><span class="o">,</span> <span class="nl">description:</span> <span class="err">&#39;</span><span class="n">JS</span> <span class="n">unit</span> <span class="n">tests</span><span class="err">&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>     <span class="n">workingDir</span> <span class="err">&#39;</span><span class="o">./</span><span class="n">src</span><span class="o">/</span><span class="n">test</span><span class="o">/</span><span class="n">scripts</span><span class="err">&#39;</span>
</span><span class='line'>     <span class="n">commandLine</span> <span class="err">&#39;</span><span class="n">cmd</span><span class="err">&#39;</span><span class="o">,</span> <span class="err">&#39;</span><span class="o">/</span><span class="n">c</span><span class="err">&#39;</span><span class="o">,</span> <span class="err">&#39;</span><span class="n">karma</span> <span class="n">start</span> <span class="n">karma</span><span class="o">.</span><span class="na">conf</span><span class="o">.</span><span class="na">js</span><span class="err">&#39;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">task</span> <span class="nf">e2eTest</span><span class="o">(</span><span class="nl">type:</span> <span class="n">Exec</span><span class="o">,</span> <span class="nl">description:</span> <span class="err">&#39;</span> <span class="n">e2e</span> <span class="n">tests</span><span class="err">&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>     <span class="n">workingDir</span> <span class="err">&#39;</span><span class="o">./</span><span class="n">src</span><span class="o">/</span><span class="n">test</span><span class="o">/</span><span class="n">scripts</span><span class="err">&#39;</span>
</span><span class='line'>     <span class="n">commandLine</span> <span class="err">&#39;</span><span class="n">cmd</span><span class="err">&#39;</span><span class="o">,</span> <span class="err">&#39;</span><span class="o">/</span><span class="n">c</span><span class="err">&#39;</span><span class="o">,</span> <span class="err">&#39;</span><span class="n">karma</span> <span class="n">start</span> <span class="n">karma</span><span class="o">-</span><span class="n">e2e</span><span class="o">.</span><span class="na">conf</span><span class="o">.</span><span class="na">js</span><span class="err">&#39;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意运行端到端测试前要将restful服务器setup起来。</p>

<p>当时在Windows上配置<a href="http://karma-runner.github.io/">Karma</a>花了很多功夫，使用Firefox浏览器发现会同时打开3个tab页，并且将singRun改为true不能运行成功，使用Chrome浏览器则测试运行完毕后浏览器无法关闭，使用<a href="http://phantomjs.org/">PhantomJS</a>又由于环境变量的问题花了一些时间来找原因。但是在我自己的苹果笔记本上各个浏览器都工作良好，真想说Windows是个奇葩。</p>

<p>对于普通用户来说可能Windows系统更适合他们，但是对于程序员来说MAC系统真的非常棒，反应迅速，配置简单，能让你的开发效率提升一个档次。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用MANIFEST.MF文件来track war包做持续部署]]></title>
    <link href="http://www.huangbowen.net/blog/2013/04/18/use-manifest-dot-mf-to-track-war-file/"/>
    <updated>2013-04-18T12:40:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/04/18/use-manifest-dot-mf-to-track-war-file</id>
    <content type="html"><![CDATA[<p>在我工作的项目中有这样一个需求。当通过自动部署脚本将当前一个CI构建的WAR包部署到指定服务器后，需要验证该WAR包是否被部署成功。</p>

<p>在这个项目中，持续集成服务器使用的是<a href="http://jenkins-ci.org/">Jenkins</a>，构建脚本使用的是<a href="http://maven.apache.org/">maven</a>，向服务器的部署使用的是Groovy写的部署脚本，调用了<a href="http://www.incanica.com/tour/whytableaux">Tableuax</a> API。</p>

<p>在<a href="http://jenkins-ci.org/">Jenkins</a>上有两个job，一个CI job，一个dev job。
每次提交代码都会在<a href="http://jenkins-ci.org/">Jenkins</a>上trigger CI ob，这个job会执行配置的<a href="http://maven.apache.org/">maven</a>命令<code>mvn clean install</code>，如果构建成功，会自动trigger dev job。这个job会执行部署脚本，部署脚本负责调用<a href="http://www.incanica.com/tour/whytableaux">Tableuax</a> API将前一个job构建的war包部署到服务器上。</p>

<!-- more -->


<p>由于部署是调用<a href="http://www.incanica.com/tour/whytableaux">Tableuax</a> API来实现的，我们需要在部署完成以后验证此次部署是否成功。如何进行那？可以分为如下几个步骤。</p>

<p><strong>首先, 当<a href="http://jenkins-ci.org/">Jenkins</a>的第一个job构建war包时，将这次构建的一些信息写入到MANIFEST.MF文件中。</strong></p>

<p>MANIFEST.MF文件是Java平台下的Jar包或者war包中都普遍存在的一个文件。这个文件通常被放置在META-INF文件夹下，名称通常为MANIFEST.MF。它其实相当于一个properties文件，里面都是一些键值对，特殊之处是每个jar包或者war包至多只能有一个MANIFEST.MF文件。</p>

<p>那么如何在<a href="http://jenkins-ci.org/">Jenkins</a>运行build时将本次构建的相关信息写入到MANIFEST.MF文件那？那要借助于maven.war.plugin插件。</p>

<p>当一个<a href="http://jenkins-ci.org/">Jenkins</a> job被执行时，会自动设置一些环境变量，这些环境变量可以在shell script, batch command或者Maven POM中被访问。（查看所有的环境变量请看<a href="https://wiki.jenkins-ci.org/display/JENKINS/Building+a+software+project#Buildingasoftwareproject-JenkinsSetEnvironmentVariables">这里</a>）。
所以我们可以在项目的pom.xml加入以下的plugin来设置一些build信息到MANIFEST.MF文件中。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>    <span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>        <span class="nt">&lt;groupId&gt;</span>org.apache.maven.plugins<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>        <span class="nt">&lt;artifactId&gt;</span>maven-war-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>        <span class="nt">&lt;version&gt;</span>2.2<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>        <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>            <span class="nt">&lt;archive&gt;</span>
</span><span class='line'>                <span class="nt">&lt;manifest&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;addDefaultImplementationEntries&gt;</span>true<span class="nt">&lt;/addDefaultImplementationEntries&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/manifest&gt;</span>
</span><span class='line'>                <span class="nt">&lt;manifestEntries&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;Build-Number&gt;</span>${BUILD_NUMBER}<span class="nt">&lt;/Build-Number&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;Job-Name&gt;</span>${JOB_NAME}<span class="nt">&lt;/Job-Name&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;Build-Url&gt;</span>${BUILD_URL}<span class="nt">&lt;/Build-Url&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;Svn-Revision&gt;</span>${SVN_REVISION}<span class="nt">&lt;/Svn-Revision&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;Timestamp&gt;</span>${maven.build.timestamp}<span class="nt">&lt;/Timestamp&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/manifestEntries&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/archive&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/plugin&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://jenkins-ci.org/">Jenkins</a> job执行完毕后，在打包好的WAR包中就含有一个MANIFEST.MF文件了。以下是一个示例。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>Manifest-Version: 1.0
</span><span class='line'>Implementation-Title: myWebApp
</span><span class='line'>Implementation-Version: 1.1-SNAPSHOT
</span><span class='line'>Job-Name: myWebApp-CI
</span><span class='line'>Built-By: bowen
</span><span class='line'>Created-By: Apache Maven
</span><span class='line'>Timestamp: 20130417-1654
</span><span class='line'>Build-Number: 118
</span><span class='line'>Svn-Revision: 5606
</span><span class='line'>Implementation-Vendor-Id: myWebApp
</span><span class='line'>Build-Url: http://10.70.21.74:80/job/myWebApp/118/
</span><span class='line'>Build-Jdk: 1.6.0_18
</span><span class='line'>Implementation-Build: 2013-04-17 16:54:54
</span><span class='line'>Archiver-Version: Plexus Archiver
</span></code></pre></td></tr></table></div></figure>


<p><strong>然后，创建一个页面来显示这些build信息，以便能随时查看当前部署在服务器上的war包的build number是多少，是由谁构建的，构建时间等信息。第二个job的部署脚本也可以通过这个页面得到build number，以此来判别部署的是否是想要的版本。</strong></p>

<p>这就牵扯到对MANIFEST.MF文件的读取了。有一个现成的库用于读取jar包或者war包中的MANIFEST.MF文件信息。</p>

<p>在项目的pom.xml文件中加入对这个库的依赖。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>  <span class="nt">&lt;groupId&gt;</span>com.jcabi<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;artifactId&gt;</span>jcabi-manifests<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;version&gt;</span>0.7.17<span class="nt">&lt;/version&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>对于war包而言，需要通过SevletContext来获取当前的MANIFEST.MF文件。首先需要创建一个继承自<code>ServletContextListener</code>接口的类来将ServletContext设置给Manifests对象。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">thoughtworks</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ContextListener</span> <span class="kd">implements</span> <span class="n">ServletContextListener</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">contextInitialized</span><span class="o">(</span><span class="n">ServletContextEvent</span> <span class="n">event</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Manifests</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getServletContext</span><span class="o">());</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后需要在web.xml配置文件中将这个Listener加入到Listener列表中。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;listener&gt;</span>
</span><span class='line'><span class="nt">&lt;listener-class&gt;</span>com.thoughtworks.ContextListener<span class="nt">&lt;/listener-class&gt;</span>
</span><span class='line'><span class="nt">&lt;/listener&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样就可以在Controller里直接使用Manifests对象来获取MANIFEST.MF文件记录的各种值了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">String</span> <span class="n">buildNumber</span> <span class="o">=</span> <span class="n">Manifests</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="s">&quot;Build-Number&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">String</span> <span class="n">buildJdk</span> <span class="o">=</span> <span class="n">Manifests</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="s">&quot;Build-Jdk&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">String</span> <span class="n">BuiltBy</span> <span class="o">=</span> <span class="n">Manifests</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="s">&quot;Built-By&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">String</span> <span class="n">timestamp</span> <span class="o">=</span> <span class="n">Manifests</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="s">&quot;Timestamp&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>再建立一个jsp页面用于显示这些值即可。</p>

<p><strong>最后，部署脚本获取该页面的内容，判断页面内容中的build number是否为期望部署的build number。</strong></p>

<p>这只是判断部署的war包是不是期望的war包。如果想要验证其是完全可以工作的，就需要部署脚本调用smoke test来进行功能性测试了。这个留到下次再讲。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一款Octopress插件用于同步博客到其他站点]]></title>
    <link href="http://www.huangbowen.net/blog/2013/04/14/octopress-plugin-to-sync-post/"/>
    <updated>2013-04-14T22:05:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/04/14/octopress-plugin-to-sync-post</id>
    <content type="html"><![CDATA[<p>即使用octopress写博客又需要同步到其他站点的同学们有福了。本人写了一个octopress下的插件，用于将octopress中的最新的一篇博客同步到支持MetaWeblog API的博客站点中去。（wordpress、博客园、CSDN、51CTO、新浪、网易&#8230;&#8230;）</p>

<p>这款插件源码被host在github上，地址是<a href="https://github.com/huangbowen521/octopress-syncPost">https://github.com/huangbowen521/octopress-syncPost</a>。</p>

<!-- more -->


<p>下面介绍下如何配置和使用。</p>

<h2>配置</h2>

<ul>
<li><p>迁出源码，将源码里的_custom文件夹及其里面的文件拷贝到你的octopress根目录中。</p></li>
<li><p>在Gemfile中加入这两个依赖.</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;metaweblog&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 0.1.0&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;nokogiri&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 1.5.9&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>(The first gem is used to send post with MetaWeblog API.
The second gem is used to parse html.)</p>

<p>然后在终端下运行<code>bundle install</code> 安装这两个Gem.</p>

<ul>
<li>在_config.yml文件中加入MetaWeblog的配置。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="c1"># MetaWeblog</span>
</span><span class='line'><span class="l-Scalar-Plain">MetaWeblog_username</span><span class="p-Indicator">:</span> <span class="nv">*YOURUSERNAME</span><span class="err">*</span>
</span><span class='line'><span class="l-Scalar-Plain">MetaWeblog_password</span><span class="p-Indicator">:</span> <span class="nv">*YOURPASSWORD</span><span class="err">*</span>
</span><span class='line'><span class="l-Scalar-Plain">MetaWeblog_url</span><span class="p-Indicator">:</span> <span class="nv">*YOURBLOGMETAWEBLOGURL</span><span class="err">*</span>
</span><span class='line'><span class="l-Scalar-Plain">MetaWeblog_blogid</span><span class="p-Indicator">:</span> <span class="nv">*BlogID</span><span class="err">*</span>  <span class="l-Scalar-Plain">//can be any number</span>
</span></code></pre></td></tr></table></div></figure>


<p>下面是配置<a href="http://www.cnblogs.com/">cnblogs</a>的一个示例。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="c1"># MetaWeblog</span>
</span><span class='line'><span class="l-Scalar-Plain">MetaWeblog_username</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">huang0925</span>
</span><span class='line'><span class="l-Scalar-Plain">MetaWeblog_password</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">XXXXXXXXXX</span>
</span><span class='line'><span class="l-Scalar-Plain">MetaWeblog_url</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">http://www.cnblogs.com/huang0925/services/metaweblog.aspx</span>
</span><span class='line'><span class="l-Scalar-Plain">MetaWeblog_blogid</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">145005</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>在Rakefile加入这个task。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">desc</span> <span class="s2">&quot;sync post to MetaWeblog site&quot;</span>
</span><span class='line'><span class="n">task</span> <span class="ss">:sync_post</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Sync the latest post to MetaWeblog site&quot;</span>
</span><span class='line'>  <span class="nb">system</span> <span class="s2">&quot;ruby _custom/sync_post.rb&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>如何使用</h2>

<ol>
<li><p>运行 <code>rake generate</code> 生成最新的站点文件。</p></li>
<li><p>运行 <code>rake sync_post</code> 将最新的一篇博客同步到你的站点。</p></li>
</ol>


<p><strong>请注意:</strong></p>

<ol>
<li><p>发布完后请检查image的链接是否正确（如果原博客使用的image链接是相对路径则需要进行修正）。</p></li>
<li><p>一些站点需要你启用MetaWeblog功能。（如<a href="http://www.cnblogs.com/">cnblogs</a>的管理页面有这个设置选项。）</p></li>
</ol>


<h2>如何保持相应的样式。</h2>

<p>使用<a href="http://www.cnblogs.com/">cnblogs</a>作为一个例子.</p>

<ol>
<li><p>将你的octopress中的screen.css通过博客园提供的文件管理上传到博客园中.</p></li>
<li><p>在博客设置中的&#8217;页首html代码&#8217;中加入对screen.css文件的使用.</p></li>
</ol>


<h2>一些支持MetaWeblog API的站点.</h2>

<ul>
<li><p>Wordpress</p>

<p>  If your WordPress root is http://example.com/wordpress/, then you have:
  Server: http://example.com/ (some tools need just the &#8216;example.com&#8217; hostname part)
  Path: /wordpress/xmlrpc.php
  complete URL (just in case): http://example.com/wordpress/xmlrpc.php</p></li>
<li><p>51CTO.com</p>

<p>  URL：http://<yourBlogUrl>/xmlrpc.php（example: http://magong.blog.51cto.com/xmlrpc.php）</p></li>
<li><p>博客大巴</p>

<p>  URL：http://www.blogbus.com/<accountName>/app.php（example: http://www.blogbus.com/holly0801/app.php</p></li>
<li><p>CSDN</p>

<p>  URL：http://hi.csdn.net/<accountName>/services/metablogapi.aspx（example: http://hi.csdn.net/bvbook/services/metablogapi.aspx）</p></li>
<li><p>博客园</p>

<p>  URL：http://www.cnblogs.com/<accountName>/services/metaweblog.aspx（example: http://www.cnblogs.com/bvbook/services/metaweblog.aspx）</p></li>
<li><p>网易</p>

<p>  URL: http://<accountName>.blog.163.com/ (example: http://huang0925.blog.163.com/).</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Karma(原名Testacular)与WebStorm进行集成]]></title>
    <link href="http://www.huangbowen.net/blog/2013/04/09/integrate-karma-to-webstorm/"/>
    <updated>2013-04-09T01:59:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/04/09/integrate-karma-to-webstorm</id>
    <content type="html"><![CDATA[<p><a href="http://karma-runner.github.io/0.8/index.html">Karma</a>是一款运行JavaScript测试的工具。它支持大部分的JavaScript测试框架，并支持多浏览器跑测试、自动监听文件运行测试等功能，实在是JavaScript开发的必备测试利器。有了它，基本不用再一遍遍手动刷新页面来trigger测试了。它的原名是testacular，也不知道作者咋想的，突然之间把项目名称改了。</p>

<p>而<a href="http://www.jetbrains.com/webstorm/">WebStorm</a>则号称是世界上最聪明的JavaScript的IDE。（事实证明，确实如此）。JavaScript code自动提示、浏览器实时同步更新、支持HTML5, <a href="http://nodejs.org/">node.js</a>, TypeScript, CoffeeScript, ECMAScript Harmony, LESS…秉承了JetBrains这个牛逼公司的一贯传统。</p>

<!-- more -->


<p>那么，如何将<a href="http://karma-runner.github.io/0.8/index.html">Karma</a>集成到<a href="http://www.jetbrains.com/webstorm/">WebStorm</a>中来那？ 很简单。</p>

<h2>配置Karma Runner.</h2>

<ol>
<li><p>菜单栏Run里面选<code>Edit Configurations…</code>项，在弹出的对话框中点击左上角的<code>+</code>按钮,选择<code>Node.js</code>。</p></li>
<li><p>然后进行如下配置。</p>

<p> <img src="http://www.huangbowen.net/images/run.png"></p>

<p> 主要配置参数：</p>

<ul>
<li>Name : 名称标示，自己随便起一个就成。</li>
<li>Path to Node: node.js的运行路径。在Terminal下运行<code>which node</code>可以看到。</li>
<li>Working Directory: 项目的目录。</li>
<li>Path to Node App JS File: Karma的安装目录，同样在Terminal下运行<code>which karma</code>可以得到。</li>
<li>Application Parameters： start karma.conf.js。第一个参数start是运行karma server。第二个参数是karma的配置文件。</li>
</ul>
</li>
<li><p>点击ok按钮。大功告成。</p></li>
</ol>


<p>在<a href="http://www.jetbrains.com/webstorm/">WebStorm</a>中运行我们定义的Karma Runner，就能实时的看到测试结果。它能自动监听文件修改。一有风吹草动就会重新运行测试，而且速度奇快。</p>

<p><img src="http://www.huangbowen.net/images/running.png"></p>

<h2>配置Karma Debugger.</h2>

<p>如果想使用<a href="http://karma-runner.github.io/0.8/index.html">Karma</a>在IDE里面进行Debug，该怎么办？也简单，配置一个Remote Debugger就行。</p>

<ol>
<li><p>菜单栏Run里面选<code>Edit Configurations…</code>项，在弹出的对话框中点击左上角的<code>+</code>按钮,选择<code>JavaScript Debug</code>-><code>Remote</code>。</p></li>
<li><p>在配置框中输入以下参数。</p>

<p> <img src="http://www.huangbowen.net/images/debug.png"></p>

<p> 主要参数设置：</p>

<ul>
<li><p>Name: 名称标示符。</p></li>
<li><p>URL to open:  http://localhost:9876/debug.html。默认是这个，要根据你Karma server配置的真实地址而定。</p></li>
<li><p>Browser: 要运行的浏览器。</p></li>
<li><p>Remote URL； http://localhost:9876/base。</p></li>
</ul>
</li>
<li><p>点击确定，又搞定了。</p></li>
</ol>


<h2>如何进行Debug？</h2>

<ol>
<li><p>在源代码中设置断点。</p></li>
<li><p>在WebStorm中启动Karma server，就是运行我们定义的Karma Runner。</p></li>
<li><p>在WebStorm中运行我们定义的Karma Debug。</p></li>
</ol>


<p>注意第一次运行时WebStorm会提醒你在浏览器上安装相应的插件。</p>

<p><img src="http://www.huangbowen.net/images/debugging.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用快捷键，快到极致]]></title>
    <link href="http://www.huangbowen.net/blog/2013/04/06/use-shortcuts-extremely/"/>
    <updated>2013-04-06T15:21:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/04/06/use-shortcuts-extremely</id>
    <content type="html"><![CDATA[<p>前段时间曾经写过一篇文章，<a href="http://www.cnblogs.com/huang0925/archive/2013/03/24/2978181.html">《优秀程序员无他-善假于物也》</a>。其中谈到一点是优秀的程序员必须要能灵活的掌握常用软件的快捷键。对于程序员来说，每天使用时间最长的软件恐怕就是IDE（Integrated Development Environment）了。如果你是C#的程序员，那么就基本非Visual Studio莫属了。而如果你是Java的程序员，那么eclipse，myeclipse或者Intellij都有人用之。如果你是Ruby等动态语言的程序员，那么Vim、Emacs、RubyMIne…有太多的选择可以成为你的IDE。</p>

<!-- more -->


<p>下面我就用Intellij来给大家演示下使用快捷键是多么的强大，能提高多大的效率。（以下所使用的快捷键在eclipse中基本都有对应的快捷键。）</p>

<p>大家先看一个简单的类。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BeanConfig</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">className</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">BeanConfig</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="n">String</span> <span class="n">className</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">className</span> <span class="o">=</span> <span class="n">className</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getClassName</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">className</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setClassName</span><span class="o">(</span><span class="n">String</span> <span class="n">className</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">className</span> <span class="o">=</span> <span class="n">className</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这是一个很普通的Value Object。创建这个类并写完这些代码需要多长时间那？不同人会给出不同的答案。使用快捷键与不使用快捷键有天壤之别。</p>

<p>不使用快捷键，你需要手写全部的代码。而使用快捷键，最多你只需要敲半行代码。这半行代码就是构造函数里的那两个参数<code>String name, String className</code>。</p>

<p>下面我就一步步的演示如何使用Intellij的快捷键来创建这个Value Object。</p>

<ul>
<li><p>使用<code>Ctrl+1</code>切换到project列表项，使用使用上下箭头键选择放置这个Value Object的package。</p></li>
<li><p>使用<code>Alt+Insert</code>键调出创建对话框，选择new class并回车。</p>

<p>  <img src="http://www.huangbowen.net/images/INew.png"></p>

<p>  在弹出的<code>Create New Class</code>对话框中键入类名，并回车。</p>

<p>  <img src="http://www.huangbowen.net/images/ICNC.png"></p>

<p>  最后生成如下的代码。</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BeanConfig</span> <span class="o">{</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>按esc键将光标移动到editor中，按下<code>alt+Insert</code>键调出<code>Generate</code>对话框，选择<code>Constructor</code>项并回车。这样会生成一个无参数的构造函数。</li>
</ul>


<p><img src="http://www.huangbowen.net/images/IGenerate.png"></p>

<p>这是生成的代码。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BeanConfig</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">BeanConfig</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>光标移动到构造函数名后的小括号内，敲入这样的代码<code>String name, String className</code>。</li>
</ul>


<p>此时代码如下。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BeanConfig</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">BeanConfig</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="n">String</span> <span class="n">className</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>光标保持在构造函数的参数列表中，使用<code>alt+Enter</code>快捷键，选择<code>Create Fields For Constructor Parameters</code>条目，然后回车。</li>
</ul>


<p><img src="http://www.huangbowen.net/images/ICF.png"></p>

<p>在弹出的对快框中使用<code>shift+下箭头</code>选中这两个field并回车。</p>

<p><img src="http://www.huangbowen.net/images/ICCP.png"></p>

<p>生成的代码如下。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BeanConfig</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">className</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">BeanConfig</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="n">String</span> <span class="n">className</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">className</span> <span class="o">=</span> <span class="n">className</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>删除<code>name</code>和<code>className</code>的<code>final</code>修饰符。最快捷的方法是光标移动到<code>final</code>处，按<code>Ctrl+W</code>键选中整个字符，然后按<code>Delete</code>键。</li>
</ul>


<p>此时代码如下。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BeanConfig</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">className</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">BeanConfig</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="n">String</span> <span class="n">className</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">className</span> <span class="o">=</span> <span class="n">className</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>光标移动到任意一个field处，使用<code>alt+Insert</code>弹出Generate对话框，选择<code>Getter and Setter</code>条目按回车。</li>
</ul>


<p><img src="http://www.huangbowen.net/images/IGGAS.png"></p>

<p>在弹出的<code>Select Fields to Generate Getters and Setters</code>对话框中，使用<code>shift+下箭头</code>选中两个field，按回车。</p>

<p><img src="http://www.huangbowen.net/images/ISFGG.png"></p>

<p>最终代码生成。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BeanConfig</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getClassName</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">className</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setClassName</span><span class="o">(</span><span class="n">String</span> <span class="n">className</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">className</span> <span class="o">=</span> <span class="n">className</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">className</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">BeanConfig</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="n">String</span> <span class="n">className</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">className</span> <span class="o">=</span> <span class="n">className</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>整个过程中不需要动一下鼠标，这意味着你的双手根本不需要离开键盘。使用快捷键比不使用快捷键效率至少提高5倍，而且还不会出错。最重要的一点是它能让我们的大脑从这些繁琐的体力劳动中解脱出来，从而集中到更需要发挥脑力劳动的地方。</p>

<p>其实灵活使用IDE的快捷键是一门大学问，我在和同事pair的过程中经常能从他们身上学到一些使用IDE的快捷键的妙处。以后有时间会专门整理出来share给大家。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Haskell函数式编程之List操作]]></title>
    <link href="http://www.huangbowen.net/blog/2013/04/05/haskell-list-processing/"/>
    <updated>2013-04-05T01:20:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/04/05/haskell-list-processing</id>
    <content type="html"><![CDATA[<p>List在函数式语言中是一个重要的抽象，很多事情离了它就很难做到。函数式语言的鼻祖Lisp名称就来自List processing。</p>

<p>Haskell本身也给List操作提供了一系列的操作符以及库函数。</p>

<!-- more -->


<h2>对列表操作的运算符</h2>

<p><strong><code>:</code>将一个元素放置到列表的前端。</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Prelude&gt; 1 : <span class="o">[]</span>
</span><span class='line'><span class="o">[</span>1<span class="o">]</span>
</span><span class='line'>Prelude&gt; 2 : <span class="o">[</span>3,4,5<span class="o">]</span>
</span><span class='line'><span class="o">[</span>2,3,4,5<span class="o">]</span>
</span><span class='line'>Prelude&gt; <span class="s1">&#39;a&#39;</span> : <span class="o">[</span><span class="s1">&#39;g&#39;</span>,<span class="s1">&#39;h&#39;</span>,<span class="s1">&#39;d&#39;</span><span class="o">]</span>
</span><span class='line'><span class="s2">&quot;aghd&quot;</span>
</span><span class='line'>Prelude&gt; <span class="s1">&#39;a&#39;</span> : <span class="s2">&quot;ghd&quot;</span>
</span><span class='line'><span class="s2">&quot;aghd&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>从上面例子可以看出一个字符串其实就是Char型的列表。
我们可以这样验证。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Prelude&gt; <span class="s2">&quot;abc&quot;</span> <span class="o">==</span> <span class="o">[</span><span class="s1">&#39;a&#39;</span>,<span class="s1">&#39;b&#39;</span>,<span class="s1">&#39;c&#39;</span><span class="o">]</span>
</span><span class='line'>True
</span></code></pre></td></tr></table></div></figure>


<p><strong><code>++</code> 连接两个列表。</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Prelude&gt; <span class="o">[</span>1,2,3<span class="o">]</span> ++ <span class="o">[</span>4,5,6<span class="o">]</span>
</span><span class='line'><span class="o">[</span>1,2,3,4,5,6<span class="o">]</span>
</span><span class='line'>Prelude&gt; <span class="s2">&quot;abc&quot;</span> ++ <span class="s2">&quot;efg&quot;</span>
</span><span class='line'><span class="s2">&quot;abcefg&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>使用Range</h2>

<p>如果要声明一个1到20的数组，除了将这些数字一一列举出来，我们还可以使用Range来实现，操作符是<code>..</code>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Prelude&gt; <span class="o">[</span>1..10<span class="o">]</span>
</span><span class='line'><span class="o">[</span>1,2,3,4,5,6,7,8,9,10<span class="o">]</span>
</span><span class='line'>Prelude&gt; <span class="o">[</span><span class="s1">&#39;a&#39;</span>..<span class="s1">&#39;h&#39;</span><span class="o">]</span>
</span><span class='line'><span class="s2">&quot;abcdefgh&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Range的默认步长是1，我们可以指定其步长。方法就是给出前两个元素再加上结尾元素，Haskell会根据前两个元素推断出步长，并应用。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Prelude&gt; <span class="o">[</span>1,3..21<span class="o">]</span>
</span><span class='line'><span class="o">[</span>1,3,5,7,9,11,13,15,17,19,21<span class="o">]</span>
</span><span class='line'>Prelude&gt; <span class="o">[</span>1,3..20<span class="o">]</span>
</span><span class='line'><span class="o">[</span>1,3,5,7,9,11,13,15,17,19<span class="o">]</span>
</span><span class='line'>Prelude&gt; <span class="o">[</span><span class="s1">&#39;a&#39;</span>,<span class="s1">&#39;c&#39;</span>..<span class="s1">&#39;k&#39;</span><span class="o">]</span>
</span><span class='line'><span class="s2">&quot;acegik&quot;</span>
</span><span class='line'>Prelude&gt; <span class="o">[</span>20,18..0<span class="o">]</span>
</span><span class='line'><span class="o">[</span>20,18,16,14,12,10,8,6,4,2,0<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>使用集合生成新的列表</h2>

<p>Haskell对List的操作还有一种神奇的方式。下面是一个数学公式，我们在初中肯定学过。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">S = { x | x ∈ N, x &lt; 10}</span>
</span></code></pre></td></tr></table></div></figure>


<p>S是一个目标集合，N是源集合，S中的元素是属于集合N,并且小于10的元素。</p>

<p>而在Haskell中可以直接使用这种语法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Prelude&gt; <span class="nb">let </span><span class="nv">list</span> <span class="o">=</span> <span class="o">[</span>1,2,3,4,5,6<span class="o">]</span>
</span><span class='line'>Prelude&gt; <span class="o">[</span>x | x &lt;- list, x &lt; 3<span class="o">]</span>
</span><span class='line'><span class="o">[</span>1,2<span class="o">]</span>
</span><span class='line'>Prelude&gt; <span class="o">[</span>x | x &lt;- list, x &lt; 3, x &gt; 1<span class="o">]</span>
</span><span class='line'><span class="o">[</span>2<span class="o">]</span>
</span><span class='line'>Prelude&gt; <span class="o">[</span>x * 2 | x &lt;- list, x &lt; 3<span class="o">]</span>
</span><span class='line'><span class="o">[</span>2,4<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>常用的列表操作函数</h2>

<p>在<a href="http://huangbowen.net/blog/2013/03/17/haskell-functional-programming-feature/">《Haskell函数式编程之特性篇》</a>中我们定义了一个map函数。它就是对列表的每个元素进行一个函数元素生成另一个列表。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">map&#39;</span> <span class="ow">::</span> <span class="p">(</span><span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">b</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">b</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="nf">map&#39;</span> <span class="n">f</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="kt">[]</span>
</span><span class='line'><span class="nf">map&#39;</span> <span class="n">f</span> <span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="n">xs</span><span class="p">)</span> <span class="ow">=</span><span class="n">f</span> <span class="n">x</span> <span class="kt">:</span> <span class="n">map&#39;</span> <span class="n">f</span> <span class="n">xs</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们可以再定义一个filter函数，用于对列表进行过滤。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">filter&#39;</span> <span class="ow">::</span> <span class="p">(</span><span class="n">a</span> <span class="ow">-&gt;</span> <span class="kt">Bool</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="nf">filter&#39;</span> <span class="n">f</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="kt">[]</span>
</span><span class='line'><span class="nf">filter&#39;</span> <span class="n">f</span> <span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="n">xs</span><span class="p">)</span>
</span><span class='line'>     <span class="o">|</span> <span class="n">f</span> <span class="n">x</span>       <span class="ow">=</span> <span class="n">x</span> <span class="kt">:</span> <span class="n">filter&#39;</span> <span class="n">f</span> <span class="n">xs</span>
</span><span class='line'>     <span class="o">|</span> <span class="n">otherwise</span> <span class="ow">=</span> <span class="n">filter&#39;</span> <span class="n">f</span> <span class="n">xs</span>
</span></code></pre></td></tr></table></div></figure>


<p>除此之外，Haskell还有大量的库函数用于对list进行操作。我们可以自己一一实现它。</p>

<p>head函数用于获取列表的第一个元素。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">head&#39;</span> <span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="n">xs</span><span class="p">)</span> <span class="ow">=</span> <span class="n">x</span>
</span></code></pre></td></tr></table></div></figure>


<p>tail函数获取列表的除第一个元素外的所有元素。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">tail&#39;</span> <span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="n">xs</span><span class="p">)</span> <span class="ow">=</span> <span class="n">xs</span>
</span></code></pre></td></tr></table></div></figure>


<p>last函数是获取列表的最后一个元素。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">last&#39;</span> <span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="n">xs</span><span class="p">)</span>
</span><span class='line'>     <span class="o">|</span> <span class="n">null</span> <span class="n">xs</span> <span class="ow">=</span> <span class="n">x</span>
</span><span class='line'>     <span class="o">|</span> <span class="n">otherwise</span> <span class="ow">=</span> <span class="n">last&#39;</span> <span class="n">xs</span>
</span></code></pre></td></tr></table></div></figure>


<p>init函数返回列表中除最后一个的其他元素。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">init&#39;</span> <span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="n">xs</span><span class="p">)</span>
</span><span class='line'>     <span class="o">|</span> <span class="n">null</span> <span class="n">xs</span> <span class="ow">=</span> <span class="kt">[]</span>
</span><span class='line'>     <span class="o">|</span> <span class="n">otherwise</span> <span class="ow">=</span> <span class="n">x</span> <span class="kt">:</span> <span class="n">init&#39;</span> <span class="n">xs</span>
</span></code></pre></td></tr></table></div></figure>


<p>你看使用Haskell实现这样的函数是如此的简单。注意这些函数都没有做对空列表的处理。如果给这些函数传递一个空列表会抛出异常。使用Haskll提供的库函数也一样。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kt">Prelude</span><span class="o">&gt;</span> <span class="n">head</span> <span class="kt">[]</span>
</span><span class='line'><span class="o">***</span> <span class="kt">Exception:</span> <span class="kt">Prelude</span><span class="o">.</span><span class="n">head</span><span class="kt">:</span> <span class="n">empty</span> <span class="n">list</span>
</span></code></pre></td></tr></table></div></figure>


<h2>fold</h2>

<p>对list的操作中我们经常会有这样一个情况，就是给定一个初始值，对list的每个元素进行一个操作，最后得出一个结果,这就像将列表折叠起来一样。比如求数组的最大值、最小值、求和都是这样的模式。Haskell中有相应的函数来实现这种pattern。我们可以自己实现一下。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">foldl&#39;</span> <span class="ow">::</span> <span class="p">(</span><span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">b</span> <span class="ow">-&gt;</span> <span class="n">a</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">b</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="n">a</span>
</span><span class='line'>
</span><span class='line'><span class="nf">foldl&#39;</span> <span class="n">f</span> <span class="n">s</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="n">s</span>
</span><span class='line'><span class="nf">foldl&#39;</span> <span class="n">f</span> <span class="n">s</span> <span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="n">xs</span><span class="p">)</span> <span class="ow">=</span> <span class="n">foldl&#39;</span> <span class="n">f</span> <span class="p">(</span><span class="n">f</span> <span class="n">s</span> <span class="n">x</span><span class="p">)</span> <span class="n">xs</span>
</span></code></pre></td></tr></table></div></figure>


<p>foldl&#8217;函数接收一个函数（这个函数接收一个a类型的值，b类型的值，并返回一个a类型值），一个a类型的值，一个b类型的列表，返回值为a类型的值。 （注意其中的a，b类型并不是确定的类型，它只是代表某类型，这有点像其他编程语言中的泛型。a,b的具体类型是由调用fold&#8217;时传入的具体参数推断出来的。）</p>

<p>我们可以用它来计算一个数组的和。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>*Main&gt; foldl<span class="err">&#39;</span> <span class="o">(</span><span class="se">\ </span>s x -&gt; s + x<span class="o">)</span>  0 <span class="o">[</span>1,2,3<span class="o">]</span>
</span><span class='line'>6
</span></code></pre></td></tr></table></div></figure>


<p>它与我们在Haskell函数式编程之2中提到的sum&#8217; 函数是等价的。
注意这是一个左flod。即它是对列表的每个元素按照从左到右的顺序进行函数运算。</p>

<p>我们也可以实现一个右fold。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">foldr&#39;</span> <span class="ow">::</span> <span class="p">(</span><span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">b</span> <span class="ow">-&gt;</span> <span class="n">a</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">b</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="n">a</span>
</span><span class='line'><span class="nf">foldr&#39;</span> <span class="n">f</span> <span class="n">s</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="n">s</span>
</span><span class='line'><span class="nf">foldr&#39;</span> <span class="n">f</span> <span class="n">s</span> <span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="n">xs</span><span class="p">)</span> <span class="ow">=</span> <span class="n">f</span> <span class="p">(</span><span class="n">foldr&#39;</span> <span class="n">f</span> <span class="n">s</span> <span class="n">xs</span><span class="p">)</span> <span class="n">x</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>*Main&gt; foldr<span class="err">&#39;</span> <span class="o">(</span><span class="se">\ </span>s x -&gt; s + x<span class="o">)</span>  0 <span class="o">[</span>1,2,3<span class="o">]</span>
</span><span class='line'>6
</span></code></pre></td></tr></table></div></figure>


<p>在右fold中，对列表进行函数运算的顺序是从右到左。其实我们可以使用左fold来构造一个右fold。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">foldr2</span> <span class="n">f</span> <span class="n">s</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="n">s</span>
</span><span class='line'><span class="nf">foldr2</span> <span class="n">f</span> <span class="n">s</span> <span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="n">xs</span><span class="p">)</span> <span class="ow">=</span> <span class="n">f</span> <span class="n">s</span> <span class="p">(</span><span class="n">foldl&#39;</span> <span class="n">f</span> <span class="n">x</span> <span class="n">xs</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>*Main&gt; foldr2 <span class="o">(</span><span class="se">\ </span>s x -&gt; s + x<span class="o">)</span>  0 <span class="o">[</span>1,2,3<span class="o">]</span>
</span><span class='line'>6
</span></code></pre></td></tr></table></div></figure>


<p>只不过这个右fold有个局限性，那就是a，b两个必须是同一个类型。</p>

<p>我们甚至可以用fold来实现map及filter等函数。</p>

<p>使用左fold实现map和filter。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">map2</span> <span class="ow">::</span> <span class="p">(</span><span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">b</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">b</span><span class="p">]</span>
</span><span class='line'><span class="nf">map2</span> <span class="n">f</span> <span class="n">xs</span> <span class="ow">=</span><span class="n">foldl&#39;</span> <span class="p">(</span><span class="nf">\</span><span class="n">s</span> <span class="n">x</span> <span class="ow">-&gt;</span> <span class="n">s</span> <span class="o">++</span> <span class="p">[</span><span class="n">f</span> <span class="n">x</span><span class="p">])</span> <span class="kt">[]</span> <span class="n">xs</span>
</span><span class='line'>
</span><span class='line'><span class="nf">filter2</span> <span class="ow">::</span> <span class="p">(</span><span class="n">a</span> <span class="ow">-&gt;</span> <span class="kt">Bool</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span>
</span><span class='line'><span class="nf">filter2</span> <span class="n">f</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="kt">[]</span>
</span><span class='line'><span class="nf">filter2</span> <span class="n">f</span> <span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="n">xs</span><span class="p">)</span> <span class="ow">=</span> <span class="n">foldl&#39;</span> <span class="p">(</span><span class="nf">\</span><span class="n">s</span> <span class="n">x</span> <span class="ow">-&gt;</span> <span class="kr">if</span> <span class="n">f</span> <span class="n">x</span> <span class="kr">then</span> <span class="n">s</span> <span class="o">++</span> <span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="kr">else</span> <span class="n">s</span> <span class="p">)</span> <span class="kt">[]</span> <span class="n">xs</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用右fold来实现map和filter。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">map3</span> <span class="ow">::</span> <span class="p">(</span><span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">b</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">b</span>
</span><span class='line'><span class="nf">map3</span> <span class="n">f</span> <span class="n">xs</span> <span class="ow">=</span><span class="n">foldr&#39;</span> <span class="p">(</span><span class="nf">\</span><span class="n">s</span> <span class="n">x</span> <span class="ow">-&gt;</span> <span class="n">f</span> <span class="n">x</span> <span class="kt">:</span> <span class="n">s</span><span class="p">)</span> <span class="kt">[]</span> <span class="n">xs</span>
</span><span class='line'>
</span><span class='line'><span class="nf">filter3</span> <span class="ow">::</span> <span class="p">(</span><span class="n">a</span> <span class="ow">-&gt;</span> <span class="kt">Bool</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span>
</span><span class='line'><span class="nf">filter3</span> <span class="n">f</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="kt">[]</span>
</span><span class='line'><span class="nf">filter3</span> <span class="n">f</span> <span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="n">xs</span><span class="p">)</span> <span class="ow">=</span> <span class="n">foldr&#39;</span> <span class="p">(</span><span class="nf">\</span><span class="n">s</span> <span class="n">x</span> <span class="ow">-&gt;</span> <span class="kr">if</span> <span class="n">f</span> <span class="n">x</span> <span class="kr">then</span> <span class="n">x</span> <span class="kt">:</span> <span class="n">s</span> <span class="kr">else</span> <span class="n">s</span><span class="p">)</span> <span class="kt">[]</span> <span class="n">xs</span>
</span></code></pre></td></tr></table></div></figure>


<p>由于<code>++</code>效率没有<code>:</code>高，所以生成结果为list的时候最好使用右fold。</p>

<p>以上就是关于List操作的各种知识了。其实Haskell中的列表就是一个函数，一个包装了一系列元素的函数。我们甚至可以自己实现自己的List函数。等有空的时候一起实现下。</p>

<p>另外，本篇文章所有源码被我放置在github中，地址是<a href="https://github.com/huangbowen521/HaskellLearning">https://github.com/huangbowen521/HaskellLearning</a>,想要源码的可以自行下载。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[修改方法签名的重构手法]]></title>
    <link href="http://www.huangbowen.net/blog/2013/04/03/change-method-signature/"/>
    <updated>2013-04-03T00:19:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/04/03/change-method-signature</id>
    <content type="html"><![CDATA[<p>今天看到同事写的一篇博客<a href="http://xiaodao.github.com/2011/03/15/correct-refactoring/">《依赖快捷键做重构是不行的》</a>。里面讲了一个这样的案例：本来有一方法，假设叫methodA。</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">methodA</span><span class="o">(){</span>
</span><span class='line'>  <span class="c1">// blablabla... </span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>后来由于需求变动，需要增加一个参数,姑且看做这个样子。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">methodA</span><span class="o">(</span><span class="n">String</span> <span class="n">param</span><span class="o">){</span>
</span><span class='line'><span class="c1">//  blablabla... </span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>他本来想直接修改方法签名（<a href="http://www.jetbrains.com/idea/">Intellij</a>中快捷键是Ctrl+F6）。但这样会导致所有调用此方法的地方由于缺乏对新加参数的处理，会导致单元测试甚至编译失败。他得出结论说依赖快捷键做重构是不行的。</p>

<p>我想说的是并不是依赖快捷键做重构不行，而恰恰是没有快捷键做重构会异常痛苦。如果没有方便的快捷键的话，依靠手工做重构会大大增加重构的时间成本及出错成本。正是由于重构快捷键的越来越便利，才导致重构不再是奢侈品，而成了家常便饭。</p>

<p>其实针对这种情况是使用快捷键的思路不对。我们的目标是对methodA添加一个参数，看似直接采用修改方法签名的快捷键就可以直接搞定。但其实这种想法是大大错误的。
结合他在文中给出的另一个实现方式，修改方法签名的一个正确的顺序应该是这样的。</p>

<ol>
<li><p>新写一个methodA2,这个方法相当于重构后的methodA。如果实现需要调用methodA，可以直接调用。</p></li>
<li><p>使用查找所有用例的快捷键(Ctrl+Alt+F7)查找methodA的所有用例，并逐一修改为调用methodA2的实现。期间每改一处要运行一下测试，防止修改破坏了原有功能。</p></li>
<li><p>如果methodA2调用了methodA方法，使用inline method快捷键(Ctrl+Alt+N)将methodA inline到methodA2中。</p></li>
<li><p>使用safe delete快捷键(Alt+Delete)删除methodA方法。如果仍然有指向methodA的方法调用，IDE会进行提示。</p></li>
<li><p>使用rename的快捷键(Shift+F6)将methodA2方法重名为methodA。</p></li>
</ol>


<p>我们可以看到，这五步中有四步都需要IDE的快捷键支持。如果脱离了IDE的快捷键，你会发现连一个小小的rename都会花上大量的时间。</p>

<p>而这种方式与一上去就直接修改方法签名的方式好在那里？</p>

<ul>
<li><p>基本不会出现编译错误。直接修改方法签名会陷入修复编译错误的泥潭。</p></li>
<li><p>小步前进，随时可以停下而不担心程序构建失败。方式一会将程序带入一个漫长的不稳定的状态。</p></li>
</ul>


<p>学会重构手法固然重要，但是掌握IDE提供的重构快捷键也不能轻视。如果你是Java程序员，推荐使用<a href="http://www.jetbrains.com/idea/">Intellij</a>，里面的重构快捷键比<a href="http://www.eclipse.org/">eclipse</a>多出不少，而且效果更好。如果你是c#程序员，推荐给你的Visual Studio装上<a href="http://www.jetbrains.com/resharper/">ReShaper</a>。注意<a href="http://www.jetbrains.com/idea/">Intellij</a>和<a href="http://www.jetbrains.com/resharper/">ReShaper</a>都是<a href="http://www.jetbrains.com/">JetBrains</a>出品的。要知道程序员挑选IDE就跟女生使用化妆品一样挑剔，但是<a href="http://www.jetbrains.com/">JetBrains</a>赢得了广大程序员的心。</p>

<p>PS:我知道这两款产品都不是免费的，但是对于程序员来说，节省了时间就是节省了金钱，对于工具，当然要用最好的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[敏捷的写博客]]></title>
    <link href="http://www.huangbowen.net/blog/2013/04/01/min-jie-de-xie-bo-ke/"/>
    <updated>2013-04-01T12:49:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/04/01/min-jie-de-xie-bo-ke</id>
    <content type="html"><![CDATA[<h2>为什么写博客</h2>

<p>写技术博客对于程序员的提升是不可估量的。只要你坚持一段时间，你就会发现它给你带来的各种积极的变化。思考问题更加深入了，更容易关注细节了，表达能力也增强了&#8230;&#8230;</p>

<!-- more -->


<ol>
<li><p><strong>不断的总结自己。</strong>程序员面对的世界是非常复杂的，未知领域也很多，在解决问题时第一次的方式并不一定是最完美的，只有通过不断的总结，不断的反思，才更容易抓住事物的本质。随着程序员的水平提高，需要思考的问题就开始变的更深度，更抽象、更复杂。这个时候就会遇到瓶颈，而通过写博客的方式能将自己的经验整理成型，形成一个完善的体系。</p></li>
<li><p><strong>能够认识到自己的进步。</strong>编程是枯燥乏味的，持续学习更难坚持。而写博客能激励自己，让自己看到自己的进步，并逐步建立信心。</p></li>
<li><p><strong>加强记忆，方便回顾。</strong>对自己在平时的实践中的收获以博客的方式发表出来，本来就是一种记忆的强化。失败本身不能让人进步，而对失败的反思才能让人进步。使用博客记录下这些反思，才能保证不会在同一个地方跌倒两次。</p></li>
<li><p><strong>强化发散思维，跳出局部看问题。</strong>其实各种技术都有相似或想通的理论作支撑。这些如果只看别人博客，只从google上搜素一些得到一些只言片语是很难领悟出来的。而自己写作的过程中随着对自己思路的梳理，更容易提升看问题的高度，以观全貌。</p></li>
<li><p><strong>扩大个人影响力，获取更多机会。</strong>程序员从业有些年头以后，如果是喜欢技术的人，总会想与别人做些更深入、更高层次的交流，但毕竟水平越高，能进行这种交流的人就会越少、越分散。写作、演讲、著书立说，这都是让自己进入一个更高水平的交流圈的方式。进入了这个对话环境，你才发现：原来还有那么多可学、可发展的方向。很多人到了三十岁上下就开始惰怠、看不到发展方向，在我看来一个重要的原因就是眼界不开，没有进入一个更高水平的交流生态。（这一点感谢<a href="http://www.weibo.com/gigix">@JeffXiong</a>的总结）</p></li>
</ol>


<h2>写博客要端正心态</h2>

<p>很多人之所有不写博客，有各种各样的原因。有的说时间不够，有的说自己的积累不够，有的说没有文采…..</p>

<p>其实写博客就像一项业余爱好一样，看似不是工作中的分内事，但却更有助于自己的工作。</p>

<p>一个极端是怕写的幼稚，不敢下笔，不敢面对别人的评价。博客其实首先是写给自己看的，如果自己能有所收获，那就是值得的。</p>

<p>另一个极端是总想着不写则已，一写惊人。老想着自己的每篇博客都能博来大家的大量关注。其实再牛逼的作家总有几篇作品不尽如人意。但是没经历这些作品的历练，是无法揣摩出更深的意境。更何况我们是普通人，只要写出自己所感所想，虚心接收别人的意见、建议，就是巨大的进步。</p>

<h2>敏捷的写博客</h2>

<p>每个程序员都喜欢编码，但不是每个程序员都喜欢写博客。如果我们将写博客的过程与敏捷流程一一对应起来，使用编程的技法来写博客，那么能提起你的兴趣吗?</p>

<p>本人在写博客的过程中与敏捷手法结合起来，受益良多。</p>

<p>在一个敏捷团队中，一个典型的用户故事的声明周期是这样的。</p>

<p><img src="http://images.cnblogs.com/cnblogs_com/huang0925/462982/o_storyLifeCycle.png" alt="story lifecycle" /></p>

<p>其实我们可以将一篇博客看做一个用户故事。你既是IM(迭代经理),又是BA(业务分析师)，DEV（开发者）,QA(质量保证)，而阅读你博客的人就是你的产品的最终用户。你的目标是让你的产品大卖（有越来越多的人关注你的博客）。</p>

<ol>
<li><p><strong>扩充你的Backlog。</strong> 创建backlog的要点就是随时随地的记录你的idea。这有个一个很有趣的理论，大脑有两个工作模式，<a href="https://right-track-wrong-train.readthedocs.org/en/latest/thinking_and_learning/pragmatic_thinking_and_learning/chp3.html">线型模式(L型)和富模式（R型）</a>。L型在工作的时候经常被用到，其按部就班，抑制了发散思维。而工作之余大脑得到充分休息，更容易进入R型工作状态，更容易得到好的idea,这时候要赶快的记录下来。所以这就是我喜欢<a href="https://evernote.com/">evernote</a>原因之一:随时随地记录idea。比如我的backlog里面现在有很多打算完成的博客，其中有《重构手法解析》一篇。《重构手法解析》这篇是我在上班骑自行车的路上想到的idea，并在到办公室的第一件事就是把这个想法记下来，放到backlog中去。</p></li>
<li><p><strong>Analysis。</strong> 要点：先写大纲,再进行补充完善。对于某个idea，大概确定要写什么，想表达什么样的意思。无论是技术文章还是平时的一些反思总结文章，都要有一定的骨架。我们可以先将这些骨架确定，然后再填充内容，这就像软件的设计一样。比如《敏捷的写博客》这篇，我确定一个骨架就是：1，写博客的好处。 2，敏捷流程。 3，如何让写博客变得敏捷。有了这个大纲作为支撑，写的时候就不会漫无目的。</p></li>
<li><p><strong>Development。</strong> 要点：采用自由写技术。何为自由写？即针对当前的博客主题及大纲想到什么就写什么，而不用太纠结于用词造句。这就像你要修建一面墙壁，事先不需要计划收集特别的材料，只需要到处走走看看，捡一些好看的时候备用。直到准备造墙时，就从石头堆里面挑出匹配的石头安放。写一篇2000字的文章容易还是将4000字的草稿整理成为2000字的文章容易？相信大多数人会选择后者。</p></li>
<li><p><strong>Testing。</strong> 要点:斟酌语句，最后的检查，将草稿转化为定稿。</p></li>
<li><p><strong>Done。</strong>发表。</p></li>
</ol>


<p>是不是发表了以后就完了? NO。我们缺少了敏捷实践中最重要的一环，那就是retro（回顾会议）。我们需要吸收读者的评论，修正自己的观点，再对博客进行加工。</p>

<p>我的同事<a href="http://www.weibo.com/illusionking">@IM_ZhangYve</a>使用<a href="https://evernote.com/">evernote</a>来管理自己的文章。他将category建成了这个样子。</p>

<p><img src="http://images.cnblogs.com/cnblogs_com/huang0925/462982/o_evernote.jpg" alt="evernote category" /></p>

<p>这样<a href="https://evernote.com/">evernote</a>就成了一个故事墙，每个用户故事就是一篇博客，当前那些处于backlog，那些处于WIP,一目了然。你所需要做的就是尽量把用户故事往done里面挪。</p>

<h2>使用敏捷的博客工具</h2>

<p>以上只是用敏捷的方法来管理博客，那有没有相应的工具来支持像敲代码一样的写博客？
有，那就是<a href="http://octopress.org/">octopress</a>。使用<a href="http://octopress.org/">octopress</a>博客框架写博客与写代码没什么两样。
具体如何使用<a href="http://octopress.org/">octopress</a>，请自行google或者直接去其官网。
下面简单讲下如何使用<a href="http://octopress.org/">octopress</a>发表一篇博客。</p>

<ul>
<li>创建一篇博客。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>:~/sourcecode/octopress<span class="nv">$ </span>rake new_post<span class="o">[</span><span class="s1">&#39;敏捷的写博客&#39;</span><span class="o">]</span>
</span><span class='line'>mkdir -p <span class="nb">source</span>/_posts
</span><span class='line'>Creating new post: <span class="nb">source</span>/_posts/2013-04-01-min-jie-de-xie-bo-ke.markdown
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>编辑博客。</p>

<p>  使用任何你喜欢的编辑器打开<code>2013-04-01-min-jie-de-xie-bo-ke.markdown</code>文件，比如vim、emacs、sublime等。甚至编代码的ide都行。然后使用<a href="http://daringfireball.net/projects/markdown/">markdown</a>的语法来编辑你的博客。设置标题、设置列表、加粗、加下划线、代码高亮…一切根本无需借助html编辑器就可以轻松实现。</p></li>
<li><p>发布博客。</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>:~/sourcecode/octopress<span class="nv">$ </span>rake generate
</span><span class='line'>:~/sourcecode/octopress<span class="nv">$ </span>rake deploy
</span></code></pre></td></tr></table></div></figure>


<p>不过毕竟将博客host在<a href="https://github.com">github</a>或<a href="http://www.heroku.com/">heroku</a>人气没有<a href="www.cnblogs.com">博客园</a>这么旺。我们可以通过同步的方式将博客同步到<a href="www.cnblogs.com">博客园</a>中。只要将screen.css文件引入到博客园中，就可以共用生成的html元素。我最喜欢的是<a href="https://github.com">github</a>显示代码的效果。</p>

<p>最后再推荐我们公司部分大牛的博客。</p>

<ul>
<li><p><a href="http://xiaopeng.me">明确思考</a></p></li>
<li><p><a href="http://dreamhead.blogbus.com">梦想风暴</a></p></li>
<li><p><a href="http://gigix.thoughtworkers.org">透明思考</a></p></li>
<li><p><a href="http://agiledon.github.com/">捷道</a></p></li>
<li><p><a href="http://www.iamhukai.com">I am Hu Kai</a></p></li>
<li><p><a href="http://michael.nona.name/">Michel Chen&#8217;s Blog</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java基础知识之Annotation]]></title>
    <link href="http://www.huangbowen.net/blog/2013/03/28/java-annotation/"/>
    <updated>2013-03-28T01:01:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/03/28/java-annotation</id>
    <content type="html"><![CDATA[<h2>什么是Annotation?</h2>

<p><strong>Annotation翻译为中文即为注解，意思就是提供除了程序本身逻辑外的额外的数据信息。</strong>Annotation对于标注的代码没有直接的影响，它不可以直接与标注的代码产生交互，但其他组件可以使用这些信息。</p>

<p>Annotation信息可以被编译进class文件，也可以保留在Java 虚拟机中，从而在运行时可以获取。甚至对于Annotation本身也可以加Annotation。</p>

<!-- more -->


<h2>那些对象可以加Annotation</h2>

<p>类，方法，变量，参数，包都可以加Annotation。</p>

<h2>内置的Annotation</h2>

<p>@Override 重载父类中方法
@Deprecated 被标注的方法或类型已不再推荐使用</p>

<p>@SuppressWarnings  阻止编译时的警告信息。其需要接收一个String的数组作为参数。
可供使用的参数有：</p>

<ul>
<li>unchecked</li>
<li>path</li>
<li>serial</li>
<li>finally</li>
<li>fallthrough</li>
</ul>


<h2>可以用与其他annotation上的annotation</h2>

<ul>
<li>@Retention</li>
</ul>


<p>确定Annotation被保存的生命周期,
需要接收一个Enum对象RetentionPolicy作为参数。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">enum</span> <span class="n">RetentionPolicy</span> <span class="o">{</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Annotations are to be discarded by the compiler.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">SOURCE</span><span class="o">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Annotations are to be recorded in the class file by the compiler</span>
</span><span class='line'><span class="cm">     * but need not be retained by the VM at run time.  This is the default</span>
</span><span class='line'><span class="cm">     * behavior.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">CLASS</span><span class="o">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Annotations are to be recorded in the class file by the compiler and</span>
</span><span class='line'><span class="cm">     * retained by the VM at run time, so they may be read reflectively.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * @see java.lang.reflect.AnnotatedElement</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">RUNTIME</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>@Documented 文档化</p></li>
<li><p>@Target</p></li>
</ul>


<p>表示该Annotation可以修饰的范围,接收一个Enum对象EnumType的数组作为参数。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">enum</span> <span class="n">ElementType</span> <span class="o">{</span>
</span><span class='line'>    <span class="cm">/** Class, interface (including annotation type), or enum declaration */</span>
</span><span class='line'>    <span class="n">TYPE</span><span class="o">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/** Field declaration (includes enum constants) */</span>
</span><span class='line'>    <span class="n">FIELD</span><span class="o">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/** Method declaration */</span>
</span><span class='line'>    <span class="n">METHOD</span><span class="o">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/** Parameter declaration */</span>
</span><span class='line'>    <span class="n">PARAMETER</span><span class="o">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/** Constructor declaration */</span>
</span><span class='line'>    <span class="n">CONSTRUCTOR</span><span class="o">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/** Local variable declaration */</span>
</span><span class='line'>    <span class="n">LOCAL_VARIABLE</span><span class="o">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/** Annotation type declaration */</span>
</span><span class='line'>    <span class="n">ANNOTATION_TYPE</span><span class="o">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/** Package declaration */</span>
</span><span class='line'>    <span class="n">PACKAGE</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>@Inherited</li>
</ul>


<p>该Annotation可以影响到被标注的类的子类。</p>

<h2>自定义Annotation</h2>

<p>JSE5.0以后我们可以自定义Annotation。下面就是一个简单的例子。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Retention</span><span class="o">(</span><span class="n">RetentionPolicy</span><span class="o">.</span><span class="na">RUNTIME</span><span class="o">)</span>
</span><span class='line'><span class="nd">@Target</span><span class="o">(</span><span class="n">ElementType</span><span class="o">.</span><span class="na">METHOD</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="nd">@interface</span> <span class="n">MethodAnnotation</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>下面的Person对象使用了自定义的MethodAnnotation。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">eat</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;eating&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@MethodAnnotation</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">walk</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">&quot;walking&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们可以通过反射获取Annotation的信息。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>        <span class="n">Class</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="n">personClass</span> <span class="o">=</span> <span class="n">Person</span><span class="o">.</span><span class="na">class</span><span class="o">;</span>
</span><span class='line'>        <span class="n">Method</span><span class="o">[]</span> <span class="n">methods</span> <span class="o">=</span> <span class="n">personClass</span><span class="o">.</span><span class="na">getMethods</span><span class="o">();</span>
</span><span class='line'>        <span class="k">for</span><span class="o">(</span><span class="n">Method</span> <span class="n">method</span> <span class="o">:</span> <span class="n">methods</span><span class="o">){</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">method</span><span class="o">.</span><span class="na">isAnnotationPresent</span><span class="o">(</span><span class="n">MethodAnnotation</span><span class="o">.</span><span class="na">class</span><span class="o">)){</span>
</span><span class='line'>                <span class="n">method</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">personClass</span><span class="o">.</span><span class="na">newInstance</span><span class="o">());</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>输出：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">walking</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们也可以给自定义的Annotation加方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Target</span><span class="o">(</span><span class="n">ElementType</span><span class="o">.</span><span class="na">TYPE</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="nd">@interface</span> <span class="n">personAnnotation</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="nf">id</span><span class="o">()</span> <span class="k">default</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>    <span class="n">String</span> <span class="nf">name</span><span class="o">()</span> <span class="k">default</span> <span class="s">&quot;bowen&quot;</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>下面是对personAnnotation的使用。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@personAnnotation</span><span class="o">(</span><span class="n">id</span> <span class="o">=</span> <span class="mi">8</span><span class="o">,</span> <span class="n">name</span> <span class="o">=</span> <span class="s">&quot;john&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">eat</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;eating&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@MethodAnnotation</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">walk</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">&quot;walking&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Annotation是如何被处理的</h2>

<p>当Java源代码被编译时，编译器的一个插件annotation处理器则会处理这些annotation。处理器可以产生报告信息，或者创建附加的Java源文件或资源。如果annotation本身被加上了RententionPolicy的运行时类，则Java编译器则会将annotation的元数据存储到class文件中。然后，Java虚拟机或其他的程序可以查找这些元数据并做相应的处理。</p>

<p>当然除了annotation处理器可以处理annotation外，我们也可以使用反射自己来处理annotation。Java SE 5有一个名为AnnotatedElement的接口，Java的反射对象类Class,Constructor,Field,Method以及Package都实现了这个接口。这个接口用来表示当前运行在Java虚拟机中的被加上了annotation的程序元素。通过这个接口可以使用反射读取annotation。AnnotatedElement接口可以访问被加上RUNTIME标记的annotation，相应的方法有getAnnotation,getAnnotations,isAnnotationPresent。由于Annotation类型被编译和存储在二进制文件中就像class一样，所以可以像查询普通的Java对象一样查询这些方法返回的Annotation。</p>

<h2>Annotation的广泛使用</h2>

<p>Annotation被广泛用于各种框架和库中，下面就列举一些典型的应用.</p>

<h3>Junit</h3>

<p>Junit是非常著名的一款单元测试框架，使用Junit的时候需要接触大量的annotation。</p>

<ul>
<li><p>@Runwith 自定义测试类的Runner</p></li>
<li><p>@ContextConfiguration 设置Spring的ApplicationContext</p></li>
<li><p>@DirtiesContext 当执行下一个测试前重新加载ApplicationContext.</p></li>
<li><p>@Before 调用测试方法前初始化</p></li>
<li><p>@After 调用测试方法后处理</p></li>
<li><p>@Test 表明该方法是测试方法</p></li>
<li><p>@Ignore 可以加在测试类或测试方法上，忽略运行。</p></li>
<li><p>@BeforeClass：在该测试类中的所有测试方法执行前调用，只被调用一次（被标注的方法必须是static）</p></li>
<li><p>@AfterClass：在该测试类中的所有的测试方法执行完后调用，只被执行一次(被标注的方法必须是static)</p></li>
</ul>


<h3>Spring</h3>

<p>Spring 号称配置地狱，Annotation也不少。</p>

<ul>
<li><p>@Service 给service类加注解</p></li>
<li><p>@Repository 给DAO类加注解</p></li>
<li><p>@Component 给组件类加注解</p></li>
<li><p>@Autowired 让Spring自动装配bean</p></li>
<li><p>@Transactional 配置事物</p></li>
<li><p>@Scope 配置对象存活范围</p></li>
<li><p>@Controller 给控制器类加注解</p></li>
<li><p>@RequestMapping url路径映射</p></li>
<li><p>@PathVariable 将方法参数映射到路径</p></li>
<li><p>@RequestParam 将请求参数绑定到方法变量</p></li>
<li><p>@ModelAttribute 与model绑定</p></li>
<li><p>@SessionAttributes 设置到session属性</p></li>
</ul>


<h3>Hibernate</h3>

<ul>
<li><p>@Entity 修饰entity bean</p></li>
<li><p>@Table 将entity类与数据库中的table映射起来</p></li>
<li><p>@Column 映射列</p></li>
<li><p>@Id 映射id</p></li>
<li><p>@GeneratedValue 该字段是自增长的</p></li>
<li><p>@Version 版本控制或并发性控制</p></li>
<li><p>@OrderBy 排序规则</p></li>
<li><p>@Lob 大对象标注</p></li>
</ul>


<p>Hibernate还有大量的关于联合的annotation和继承的annotation，这里就不意义列举了。</p>

<h3>JSR 303 - Bean Validation</h3>

<p>JSR 303 - Bean Validation是一个数据验证的规范，其对Java bean的验证主要通过Java annotation来实现。</p>

<ul>
<li><p>@Null被注释的元素必须为 null</p></li>
<li><p>@NotNull被注释的元素必须不为 null</p></li>
<li><p>@AssertTrue被注释的元素必须为 true@AssertFalse被注释的元素必须为 false@Min(value)被注释的元素必须是一个数字，其值必须大于等于指定的最小值</p></li>
<li><p>@Max(value)被注释的元素必须是一个数字，其值必须小于等于指定的最大值</p></li>
<li><p>@DecimalMin(value)被注释的元素必须是一个数字，其值必须大于等于指定的最小值</p></li>
<li><p>@DecimalMax(value)被注释的元素必须是一个数字，其值必须小于等于指定的最大值</p></li>
<li><p>@Size(max, min)被注释的元素的大小必须在指定的范围内</p></li>
<li><p>@Digits (integer, fraction)被注释的元素必须是一个数字，其值必须在可接受的范围内</p></li>
<li><p>@Past被注释的元素必须是一个过去的日期</p></li>
<li><p>@Future被注释的元素必须是一个将来的日期</p></li>
<li><p>@Pattern(value)被注释的元素必须符合指定的正则表达式</p></li>
</ul>


<p>其实还有很多使用了annotaion的framework或library,这里就不一一列举了，希望大家能举一反三，深入了解Java中的annotation。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[优秀程序员无他-善假于物也]]></title>
    <link href="http://www.huangbowen.net/blog/2013/03/24/senior-programer-good-habits/"/>
    <updated>2013-03-24T02:31:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/03/24/senior-programer-good-habits</id>
    <content type="html"><![CDATA[<p>运用一门程序设计语言对大多数程序员来说是小菜一碟,但是更上一层楼成为一名专家级的软件开发者，恐怕目前还是大多数人的梦想。《程序员的思维修炼》一书中将程序员分为5个层级：新手，高级新手，胜任者，精通者，专家。根据作者的调查研究结果，在这5个层级中，大多数的程序员属于高级新手。而且居于这个层级的程序员从入行1、2年的到工作10来年都大有人在。</p>

<p>身为一个程序员，如何才能尽快的突破自身的瓶颈，得到快速的提升那？这可真不是三言两语可以说清楚。本人09年毕业投身软件行业，2012年初离开工作了三年的公司A，加入了现在的公司B。算到现在呆在B公司也即将满一年了。但是我敢说在B公司1年学到的东西，比在A公司3年加起来的总和还要多。
这么大的进步是源于我养成了较好的学习习惯，每天都保持汲取知识。这些习惯大都是同我身边的同事身上偷来的。现在，我就把这些东西分享给大家，一起共勉。</p>

<!-- more -->


<p>我们无需摸着石头过河，因为前人已经给我们总结了很多宝贵的经验。</p>

<ol>
<li><p><strong>请将google作为你的搜索引擎。</strong> 这点放在第一条表明了它绝对是重中之重。当你尝试使用google做一段时间的技术搜索后，你会发现百度是多么的低效和不靠谱。同样一个技术关键字，google结果的匹配程度会远高于百度。如果你说你英文能力差的话,那么请赶快补习英语。在我身边我还没发现一个很牛逼的程序员他的英文很差劲。外国人的技术文章大都很细腻，很有条理，并且注重由浅入深，覆盖面广。比如我前段时间想写一篇关于Java泛型的文章，就搜到了oracle有一篇对java 泛型的完整讲述,地址在<a href="https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;ved=0CDYQFjAA&amp;url=http%3A%2F%2Fdocs.oracle.com%2Fjavase%2Ftutorial%2Fjava%2Fgenerics%2F&amp;ei=1eVNUamWA6n5iwL2k4GwDA&amp;usg=AFQjCNE_MIRvBiqQZ_SkkhWZE1zbmugQ-g&amp;sig2=-xoQZ568IgYPIftOXFy_MA">这里</a>。可以说看完这篇文章后，你再也不担心你会遗漏泛型中的知识点了。</p></li>
<li><p><strong>学会对自己制定目标并执行。</strong> 有人说，我有目标，那就是1年精通xx语言。我说，这样的目标等于没有目标。制定目标必须要遵循SMART原则，那就是：</p>

<ul>
<li>目标必须是具体的（Specific）</li>
<li>目标必须是可以衡量的（Measurable）</li>
<li>目标必须是可以达到的（Attainable）</li>
<li>目标必须和其他目标具有相关性（Relevant）</li>
<li>目标必须具有明确的截止期限（Time-based）</li>
</ul>


<p> 不可被验证的目标只能说是口号，而喊口号又恰恰是中国人最擅长的。要建立起可验证的目标，还需要对目标进行追踪。在对目标进行追踪验证的过程中可以使用一些工具辅助，比如我使用的就是<a href="https://www.wunderlist.com/">wunderList</a>。</p></li>
<li><p><strong>使用代码托管网站管理你的代码。</strong> 作为程序员，学习新东西时少不了写一些代码，demo。而后随后就丢掉。这是一种不好的习惯。你应该学会管理你的代码，让它们成为你的宝贵财富。目前有很多免费的代码托管网站，首推<a href="https://github.com/">github</a>。<a href="https://github.com/">github</a>是全球最大的源代码托管网站，很多著名的开源框架都将其源代码托管在上面,如Jquery，Junit,Ruby,Clojure等。在这里，你可以上传你的源代码分享给他人。也可以方便的查看他人的优秀源码。如果你愿意，也可以成为一名志愿者，一起与他人开发一个开源项目。一切只需要一个git客户端和一个github账号就可以搞定。</p></li>
<li><p><strong>使用日志对知识进行总结。</strong>一个不善于总结的程序员绝不是一个优秀程序员。<a href="http://wiki.mbalib.com/wiki/SMART%E5%8E%9F%E5%88%99">SMART</a>管理中有很重要的一条，那就是目标必须是可衡量的。而我们在学习技术的过程中，除了产出的code本身，日志也是一个重要的可衡量的产出物。你可以记下所犯的错误，以避免重犯，也可以记下自己的所得，梳理思路。推荐一款日志工具<a href="http://evernote.com/">evernote</a>。它支持几乎所有的操作系统和mobile平台，并可以方便的将日志同步到云端。对于一些日志你可以再加工一下发表到博客上，接受大家的检阅，并扩大自己的影响力。另外，<a href="http://en.wikipedia.org/wiki/Mind_map">mind map</a>也是不错的梳理思路、回顾总结的好方式。比如我学习了正则表达式，就画了一张mind map来记录正则表达式的全部语法，以后如有遗忘只需看一下<a href="http://huangbowen.net/images/RegularExpression.png">该图表</a>即可。</p></li>
<li><p><strong>阅读成为你的日常习惯。</strong>软件工程是一种知识生产活动，前人的经验的载体就是文字。作为IT人士，知识更迭是很频繁的，不了解外面的世界很容易被遗弃。我们不仅要热爱阅读，还要读好书，读好文章。养成良好的阅读习惯是每个程序员应当具备的素质之一。这里推荐一个网站，<a href="http://www.douban.com/">豆瓣读书</a>。上面有很多技术书籍的信息，书评等，可以成为你阅读的一个参考。另外，鄙人也强烈推荐了一些好书，想看的可以访问<a href="http://huangbowen.net/blog/2013/02/18/thoughtworks-reading-book/">这里</a>。</p></li>
<li><p><strong>熟练使用各种快捷键。</strong>对于程序员来说，提高速度就意味着了生产率。提高了生产率，你就有了更多的时间去展开新的学习。熟练使用快捷键的好处不只是节省时间，而是将你的大脑从重复机械的劳动中解放出来，能够关注到更重要的部分。大到操作系统，小到浏览器，都有自己各种各样的快捷键。尤其对于程序员天天使用的IDE来说，掌握快捷键尤其重要。从现在开始，打印一份IDE的快捷键大全放在桌面上，每天都要熟悉其中的几个，用不了一星期你就会发现你的编程效率至少会提升30%以上。别质疑，因为我就是这样做的。</p></li>
</ol>


<p>不积跬步，无以至千里。要想成为优秀程序员，光有一腔热血是不够的，一定要持之以恒，坚持不懈的持续学习。以此来与大家共勉。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java基础知识之泛型]]></title>
    <link href="http://www.huangbowen.net/blog/2013/03/23/java-generic-type/"/>
    <updated>2013-03-23T00:26:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/03/23/java-generic-type</id>
    <content type="html"><![CDATA[<p><strong>当我们在定义类，接口和方法时，可以接收一个类型作为参数，这就叫做泛型</strong>。</p>

<p>函数可以传入普通的参数，也可以传入一个类型参数。不同之处是普通的参数就是值而已，但是类型参数却是个类型。</p>

<p>使用泛型的好处:</p>

<ul>
<li>强类型检查。在编译时就可以得到类型错误信息。</li>
<li>避免显式强制转换。</li>
<li>方便实现通用算法。</li>
</ul>


<!-- more -->


<h2>对类使用泛型</h2>

<p>我们可以创建一个简单的Class Box。它提供存取一个类型为Object的对象。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Box</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Object</span> <span class="nf">getObject</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">object</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setObject</span><span class="o">(</span><span class="n">Object</span> <span class="n">object</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">object</span> <span class="o">=</span> <span class="n">object</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Object</span> <span class="n">object</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>你可以传给它任何你想要的对象，比如对象String,Integer等，也可以传入自定义的一些对象。但是调用getObject方法返回的对象需要显式的强转为传入的类型，才能使用原来类型的一些方法。</p>

<p>我们可以使用泛型来构造这个对象。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Box</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">T</span> <span class="nf">getObject</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">object</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">T</span> <span class="n">object</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setObject</span><span class="o">(</span><span class="n">T</span> <span class="n">object</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">object</span> <span class="o">=</span> <span class="n">object</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们可以看到，所有的Object被替换成了T。T代表了某种类型，你在实例化Box对象时，必须要给其指定一种类型，String,Integer或者自定义的类，并且调用getObject方法并不需要进行强转就可以使用该类型的方法。</p>

<p>一般来说，类型参数名称越简单越好，并且需要是大写的。为了方便，我们约定了一些命名使用。</p>

<ul>
<li>E Element</li>
<li>K key</li>
<li>N Number</li>
<li>T type</li>
<li>V value</li>
<li>S,U,V 第2，3，4个类型</li>
</ul>


<p>我们可以这样实例化一个Box类。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Box</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">integerBox</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Box</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;();</span>
</span></code></pre></td></tr></table></div></figure>


<p>同样，我们也支持在一个类中传入多个类型参数。例如下面的Pair对象</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Pair</span><span class="o">&lt;</span><span class="n">T</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">T</span> <span class="n">key</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">V</span> <span class="n">value</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">Pair</span><span class="o">(</span><span class="n">T</span> <span class="n">key</span><span class="o">,</span> <span class="n">V</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">key</span> <span class="o">=</span> <span class="n">key</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">T</span> <span class="nf">getKey</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">key</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">V</span> <span class="nf">getValue</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">value</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用方法如下。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Pair</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">one</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Pair</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;(</span><span class="mi">1</span><span class="o">,</span> <span class="s">&quot;one&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">Pair</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">hello</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Pair</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;(</span><span class="s">&quot;hello&quot;</span><span class="o">,</span> <span class="s">&quot;world&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>对方法使用泛型</h2>

<p>泛型可以作用与方法上，此时泛型参数只能在方法体中使用。而泛型作用于类时，则在整个类中可以使用。</p>

<p>在静态方法、非静态方法及构造函数都可以使用泛型。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Util</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">,</span> <span class="n">U</span><span class="o">&gt;</span> <span class="kt">boolean</span> <span class="n">compare</span><span class="o">(</span><span class="n">Pair</span><span class="o">&lt;</span><span class="n">T</span><span class="o">,</span><span class="n">U</span><span class="o">&gt;</span> <span class="n">pair1</span><span class="o">,</span> <span class="n">Pair</span><span class="o">&lt;</span><span class="n">T</span><span class="o">,</span><span class="n">U</span><span class="o">&gt;</span> <span class="n">pair2</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">pair1</span><span class="o">.</span><span class="na">getKey</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="n">pair2</span><span class="o">.</span><span class="na">getKey</span><span class="o">())</span> <span class="o">&amp;&amp;</span> <span class="n">pair1</span><span class="o">.</span><span class="na">getValue</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="n">pair2</span><span class="o">.</span><span class="na">getValue</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>下面是对该静态方法的使用。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>       <span class="n">Pair</span> <span class="n">one</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Pair</span><span class="o">(</span><span class="s">&quot;one&quot;</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Pair</span> <span class="n">two</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Pair</span><span class="o">(</span><span class="s">&quot;two&quot;</span><span class="o">,</span> <span class="mi">2</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">assertThat</span><span class="o">(</span><span class="n">Util</span><span class="o">.</span><span class="na">compare</span><span class="o">(</span><span class="n">one</span><span class="o">,</span> <span class="n">two</span><span class="o">),</span> <span class="n">is</span><span class="o">(</span><span class="kc">false</span><span class="o">));</span>
</span><span class='line'><span class="c1">// pass</span>
</span></code></pre></td></tr></table></div></figure>


<h2>对泛型进行限定</h2>

<p>默认情况下如果直接使用<T>的话，我们可以给其传任何值。有时候我们想值允许传入某个类及它的子类。这时候在声明泛型时可以使用<strong>extends</strong>关键字。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Box</span><span class="o">&lt;</span><span class="n">T</span> <span class="kd">extends</span> <span class="n">Number</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">T</span> <span class="nf">getObject</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">object</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">T</span> <span class="n">object</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setObject</span><span class="o">(</span><span class="n">T</span> <span class="n">object</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">object</span> <span class="o">=</span> <span class="n">object</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>      <span class="n">Box</span> <span class="n">box</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Box</span><span class="o">();</span>
</span><span class='line'>        <span class="n">box</span><span class="o">.</span><span class="na">setObject</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>    <span class="c1">//ok</span>
</span><span class='line'>        <span class="n">box</span><span class="o">.</span><span class="na">setObject</span><span class="o">(</span><span class="s">&quot;hello&quot;</span><span class="o">);</span>  <span class="c1">//compile-time error</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们也可以给类型参数加多个限定。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;</span><span class="n">T</span> <span class="kd">extends</span> <span class="n">B1</span> <span class="o">&amp;</span> <span class="n">B2</span> <span class="o">&amp;</span> <span class="n">B3</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>加上限定类或接口以后，我们可以使用泛型参数变量调用该类或接口的方法。</p>

<h2>通配符的使用</h2>

<p>Java中的List<T>就是一个实现了泛型的类，假如我们写了一个方法，获取List<T>中元素的个数。只不过这个方法限定T类型为Number。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">getCount</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Number</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">)</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>      <span class="k">for</span><span class="o">(</span><span class="n">Number</span> <span class="n">n</span> <span class="o">:</span> <span class="n">list</span><span class="o">)</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="n">i</span><span class="o">++;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">i</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后我们这样试图调用它。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;(){</span>
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="n">add</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>            <span class="n">add</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
</span><span class='line'>            <span class="n">add</span><span class="o">(</span><span class="mi">3</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Util</span><span class="o">.</span><span class="na">getCount</span><span class="o">(</span><span class="n">list</span><span class="o">);</span> <span class="c1">//compile-time error</span>
</span></code></pre></td></tr></table></div></figure>


<p>为什么会产生错误那？因为我们要求方法的参数是List<Number>,而我们实际传入的是List<Integer>。虽然Integer是Number的子类，但是List<Integer>却不是List<Number>的子类，他们其实是平等的关系。这点一定要注意。我们在方法定义时已经明确表示T的类型是Number了，所以只能接收List<Number>，而不能接收其它类型的参数。
这时候<code>?</code>通配符就起作用了。我们可以使用<code>？</code>通配符重新定义这个方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Util</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">getCount</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">Number</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">)</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>      <span class="k">for</span><span class="o">(</span><span class="n">Number</span> <span class="n">n</span> <span class="o">:</span> <span class="n">list</span><span class="o">)</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="n">i</span><span class="o">++;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">i</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;(){</span>
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="n">add</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>            <span class="n">add</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
</span><span class='line'>            <span class="n">add</span><span class="o">(</span><span class="mi">3</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">assertThat</span><span class="o">(</span><span class="n">Util</span><span class="o">.</span><span class="na">getCount</span><span class="o">(</span><span class="n">list</span><span class="o">),</span> <span class="n">is</span><span class="o">(</span><span class="mi">3</span><span class="o">));</span>  <span class="c1">// pass</span>
</span></code></pre></td></tr></table></div></figure>


<p>既然能限定到一个类及其子类上，当然也能限定到一个类及其父类上。语法如下:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;?</span> <span class="n">supper</span> <span class="n">A</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>对泛型使用的总结</h2>

<ul>
<li><p><strong>类型参数不能是原始类型</strong>（int, char，double）,只能传入这些类型的封转类(Integer,Char,Double)。</p></li>
<li><p><strong>不能直接创建类型参数的实例。</strong></p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="kt">void</span> <span class="n">append</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">)</span> <span class="o">{</span>    <span class="n">E</span> <span class="n">elem</span> <span class="o">=</span> <span class="k">new</span> <span class="n">E</span><span class="o">();</span>  <span class="c1">// compile-time error    list.add(elem); </span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>但有通过反射可以实现。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="kt">void</span> <span class="n">append</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">,</span> <span class="n">Class</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="n">cls</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>    <span class="n">E</span> <span class="n">elem</span> <span class="o">=</span> <span class="n">cls</span><span class="o">.</span><span class="na">newInstance</span><span class="o">();</span>   <span class="c1">// OK    list.add(elem);}</span>
</span></code></pre></td></tr></table></div></figure>


<p>你可以这样调用它:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">ls</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span><span class='line'><span class="n">append</span><span class="o">(</span><span class="n">ls</span><span class="o">,</span> <span class="n">String</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>静态字段的类型不能为类型参数。</strong></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Box</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">T</span> <span class="n">object</span><span class="o">;</span> <span class="c1">// compile-time error</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>不能创建类型参数变量的数组。</strong></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;[]</span> <span class="n">arrayOfLists</span> <span class="o">=</span> <span class="k">new</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;[</span><span class="mi">2</span><span class="o">];</span>  <span class="c1">// compile-time error</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>不能重载一个方法，该方法的形参都来自于同一个类型参数对象。</strong></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Example</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">integers</span><span class="o">)</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Double</span><span class="o">&gt;</span> <span class="n">doubles</span><span class="o">)</span> <span class="o">{}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>参考文档：<a href="http://docs.oracle.com/javase/tutorial/java/generics/index.html">http://docs.oracle.com/javase/tutorial/java/generics/index.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Haskell函数式编程之特性篇]]></title>
    <link href="http://www.huangbowen.net/blog/2013/03/17/haskell-functional-programming-feature/"/>
    <updated>2013-03-17T12:46:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/03/17/haskell-functional-programming-feature</id>
    <content type="html"><![CDATA[<p>函数式编程的定义是：</p>

<p>In computer science, functional programming is a programming paradigm that treats computation as the evaluation of mathematical functions and avoids stateand mutable data.
即：函数式编程是一种编程模型，他将计算机运算看做是数学中函数的计算，并且避免了引入状态及可变数据。</p>

<p>它更强调函数的应用，而不像命令式编程更强调状态的改变。</p>

<h2>无副作用（side effect）</h2>

<p>命令式函数可能会改变程序的状态，这就会对其产生<strong>副作用</strong>。在命令式编程中，在执行程序不同的状态下同一个函数的返回结果会发生改变。例如，下面是一个使用JavaScript写的函数。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">state</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">getVal</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">[</span>
</span><span class='line'>     <span class="k">return</span> <span class="nx">state</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">getVal</span><span class="p">());</span> <span class="c1">//true</span>
</span><span class='line'><span class="nx">state</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">getVal</span><span class="p">());</span> <span class="c1">// false</span>
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<p>注意我们调用了两次getVal(),但是其输出了不同的结果。而在Haskell中，对变量只有声明，没有赋值。即如果声明了一个值为true的state变量，就无法再将其修改为false。这叫做<strong>变量的不变性</strong>。</p>

<p>而函数式编程中如果描述状态的变化那，就是将状态变化作为函数的参数进行传递。</p>

<h2>延迟计算（lazy evaluation）</h2>

<p>正因为函数式编程无副作用，所以<strong>延迟计算</strong>（又称为惰性求值）就成为可能。
<strong>延迟计算</strong>指将一个表达式的值推迟到直到被需要时才进行计算。（delays the evaluation of an expression until its value is needed ）</p>

<p>它的优点是：</p>

<ul>
<li>避免了不需要的运算，从而提高的性能。</li>
<li>使创建无限的数据结构成为可能。</li>
</ul>


<p>例如，我们写一个将指定参数放置到一个无限长的数组中的函数。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">repeat&#39;</span> <span class="ow">::</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span>
</span><span class='line'><span class="nf">repeat&#39;</span> <span class="n">x</span> <span class="ow">=</span> <span class="n">x</span> <span class="kt">:</span> <span class="n">repeat&#39;</span> <span class="n">x</span>
</span></code></pre></td></tr></table></div></figure>


<p>第一行是对repeat&#8217;参数及返回值的定义，它接收一个类型a,返回a的数组。
第二行是repeat&#8217;函数的实现，它将x放置到一个无穷大的数组中。</p>

<p>在没有延迟计算特性的编程语言中，这种函数是根本无法使用的。因为一旦调用就会陷入死循环。
即使在支持延迟计算的编程语言中，我们直接输出这个数组:<code>print $ repeat' 10</code>,也会进入死循环。那么如何使用它那？我们可以写一个take函数，其可以返回数组中前几位元素。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">take&#39;</span> <span class="ow">::</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span>
</span><span class='line'><span class="nf">take&#39;</span> <span class="mi">1</span> <span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="n">xs</span><span class="p">)</span> <span class="ow">=</span> <span class="p">[</span><span class="n">x</span><span class="p">]</span>
</span><span class='line'><span class="nf">take&#39;</span> <span class="n">index</span> <span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="n">xs</span><span class="p">)</span> <span class="ow">=</span> <span class="n">x</span> <span class="kt">:</span> <span class="p">(</span><span class="n">take&#39;</span> <span class="p">(</span><span class="n">index</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="n">xs</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们这样调用它，</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Prelude&gt; take<span class="s1">&#39; 3 (repeat&#39;</span> 5<span class="o">)</span>
</span><span class='line'><span class="o">[</span>5,5,5<span class="o">]</span>
</span><span class='line'>Prelude&gt; take<span class="s1">&#39; 3 (repeat&#39;</span> <span class="s1">&#39;a&#39;</span><span class="o">)</span>
</span><span class='line'><span class="s2">&quot;aaa&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Haskell对函数参数默认采取延迟计算的求值策略。所以这样在调用repeat&#8217;函数时并不是先将repeat&#8217;函数的结果数组计算出来，再进行take操作，而是take操作需要前几位元素，repeat&#8217;函数才会生成前几位元素。</p>

<h2>高阶函数(Higher-order function)</h2>

<p>一个函数成为<strong>高阶函数</strong>需要满足下面两条中的至少一条:</p>

<ol>
<li>将一个或多个函数作为输入。</li>
<li>输出是一个函数。</li>
</ol>


<p>换句话说，<strong>高阶函数就是将函数作为参数或者作为返回值的函数</strong>。其他函数都成<strong>为一阶函数</strong>(first order function)。其实这个概念最早来源于数学领域。</p>

<p>函数是Haskell世界中的一等公民，所以肯定支持高阶函数。举个例子，Haskell中有个map函数，它的定义是这样的:
map:: (a -> b) -> [a] -> [b]
它的作用是传入一个函数及一个数组，对该数组中的每一个元素应用此函数，从而转换为另一个数组。
我们可以自己实现一个map函数。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">map&#39;</span> <span class="ow">::</span> <span class="p">(</span><span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">b</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">b</span><span class="p">]</span>
</span><span class='line'><span class="nf">map&#39;</span> <span class="n">f</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="kt">[]</span>
</span><span class='line'><span class="nf">map&#39;</span> <span class="n">f</span> <span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="n">xs</span><span class="p">)</span> <span class="ow">=</span><span class="n">f</span> <span class="n">x</span> <span class="kt">:</span> <span class="n">map&#39;</span> <span class="n">f</span> <span class="n">xs</span>
</span></code></pre></td></tr></table></div></figure>


<p>map&#8217;函数接收两个参数，第一个参数是一个函数，该函数输入值为a类型的值，输出值为b类型的值，第二个参数为源数组。
我们调用ma p&#8217;函数时，可以直接写一个lambda表达式，对源数组进行各种操作。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Prelude&gt; map<span class="s1">&#39; (\x -&gt; x + 5)  [1,2,3]</span>
</span><span class='line'><span class="s1">[6,7,8]</span>
</span><span class='line'><span class="s1">Prelude&gt; map&#39;</span> <span class="o">(</span><span class="se">\x</span> -&gt; x * x<span class="o">)</span>  <span class="o">[</span>1,2,3<span class="o">]</span>
</span><span class='line'><span class="o">[</span>1,4,9<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>如果我们有这样一个需求，我们想通过map&#8217;函数对数组的每个对象都加上一个值n，这个n我不想直接定义在此lambda表达式中，能实现吗？答案是可以。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">outer</span> <span class="ow">=</span> <span class="kr">let</span> <span class="n">n</span> <span class="ow">=</span> <span class="mi">5</span> <span class="kr">in</span> <span class="n">map&#39;</span> <span class="p">(</span><span class="nf">\</span><span class="n">x</span> <span class="ow">-&gt;</span> <span class="n">x</span> <span class="o">+</span> <span class="n">n</span><span class="p">)</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>对于匿名函数(\x -> x + n)来说，n就是<strong>non-local variable</strong>。什么是<strong>non-local variable</strong>那？如果一个函数使用了一个变量，这个变量既不属于全局变量，也不属于在此函数中定义的变量，那这个变量对于此函数来说就是<strong>non-local variable</strong>。
所谓的闭包就是使用了non-local variable的函数。</p>

<h2>curry function</h2>

<p>curry function还真比较难翻译，先看看<a href="http://en.wikipedia.org/wiki/Currying">wiki</a>百科的翻译：</p>

<p>In mathematics and computer science, currying is the technique of transforming a function that takes multiple arguments (or a tuple of arguments) in such a way that it can be called as a chain of functions, each with a single argument (partial application).</p>

<p><strong>在数学领域和计算机科学领域，currying是一项将接收多个参数（或参数元组）函数转换为函数的链式调用的技术，链条中的每个函数接收单个参数。</strong></p>

<p>这句话看起来真费解。那么我用一个例子说明一个。</p>

<p>假设现在有一个函数为<code>f(x,y) = x/y</code>。那么<code>f(2,3)</code>的执行过程是什么样的那？ 首先，我们将x替换为2.那么得到了<code>f(2,y) = 2/y</code>。我们定义一个新的函数<code>g(y)= f(2,y) = 2/y</code>。再将y替换成3，那么得到了<code>g(3) = f(2,3) = 2/3</code>。这个<code>g(y)</code>函数就是<code>f(x,y)</code>的一个curried function.</p>

<p>举个例子。上文中我们构造了一个map&#8217;函数，它接收一个函数及一个数组。如果我们想实现一个名为doubleMe的函数，它接收一个数组，将数组中每个元素都翻一倍。这个可以这样写:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">doubleMe</span> <span class="ow">=</span> <span class="n">map&#39;</span> <span class="p">(</span><span class="nf">\</span><span class="n">x</span> <span class="ow">-&gt;</span> <span class="n">x</span> <span class="o">*</span> <span class="n">x</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意看，定义doubleMe时我们使用了map&#8217;函数，但是给map&#8217;函数只传递了一个参数，并没有提供第二个参数。所以在调用doubleMe时，要给其传递一个数组。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Prelude&gt; doubleMe <span class="o">[</span>1,2,3<span class="o">]</span>
</span><span class='line'><span class="o">[</span>1,4,9<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>doubleMe的函数完全等价于:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">doubleMe</span> <span class="n">ary</span> <span class="ow">=</span> <span class="n">map&#39;</span> <span class="p">(</span><span class="nf">\</span><span class="n">x</span><span class="ow">-&gt;</span> <span class="n">x</span> <span class="o">*</span> <span class="n">x</span><span class="p">)</span> <span class="n">ary</span>
</span></code></pre></td></tr></table></div></figure>


<p>换句话说，如果一个函数接收多个参数，那么接收部分参数的该函数也是一个函数。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Haskell函数式编程之递归]]></title>
    <link href="http://www.huangbowen.net/blog/2013/03/14/haskell-recursion/"/>
    <updated>2013-03-14T21:46:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/03/14/haskell-recursion</id>
    <content type="html"><![CDATA[<p>在Haskell的世界中，没有变量赋值，流程跳转，如果要实现一些简单的功能，比如求一个数组中的最大值，都需要借助递归实现。</p>

<p><strong>递归函数的定义:</strong></p>

<p><strong>A function may be partly defined in terms of itself.</strong>
<strong>即如果一个函数的定义中使用了其自身，这个函数就叫做递归函数。</strong></p>

<h2>普通递归(traditional recursion)</h2>

<p>我们就写一个简单的对数组求和的函数。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">sum&#39;</span> <span class="ow">::</span> <span class="p">(</span><span class="kt">Num</span> <span class="n">a</span><span class="p">)</span> <span class="ow">=&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="n">a</span>
</span><span class='line'><span class="nf">sum&#39;</span> <span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="n">xs</span><span class="p">)</span> <span class="ow">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">sum&#39;</span> <span class="n">xs</span>
</span><span class='line'><span class="nf">sum&#39;</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>第一行定义了了一个名为<code>sum'</code>的函数的参数及返回值。这个函数接收一个类型为Num的数组并返回一个Num型的数值。（这里的<code>'</code>是函数名的一部分，因为Haskell允许<code>'</code>作为函数名的一部分。由于系统已经有了sum函数，所以我们加个<code>'</code>与标准sum函数区分开。）</p>

<p>第二行的(x:xs)就是我们传入的数组参数。我们这里使用了Haskell的pattern matching。x表示的是数组中的第一个元素，xs表示数组中的其它元素。我们可以描述求数组中值的和的行为为：数组中的第一个元素与数组中剩余元素的和。所以这就是我们的实现。</p>

<p>第三行则说明了如果给一个空的数组则直接返回0。这也叫做递归的退出条件，否则递归会没完没了。</p>

<p>第二行和第三行共同完成了这个<code>sum'</code>函数的定义。当你传递给它一个参数时，它会根据参数的情况自动选择调用那个实现。</p>

<p>假设我们这样调用它：<code>sum'  [1,2,3]</code>,程序的执行过程是这样子的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">sum&#39; [1,2,3] -&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="go">1 + sum&#39; [2,3] -&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="go">1 + (2 + sum&#39; [3]) -&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="go">1 + (2 + (3 + sum&#39; [])) -&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="go">1 + (2 + (3 + 0)) -&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="go">1 + (2 + 3) -&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="go">1 + 5 -&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="go">6</span>
</span></code></pre></td></tr></table></div></figure>


<p>这种递归有个问题就是我们一直到等到递归结束才进行算术运算，这样在执行过程既要保存函数调用的堆栈，还要保存中间计算结果的堆栈，如果递归过深，很容易引起stackOverFlow.</p>

<h2><strong>尾递归</strong>(tail recursion)</h2>

<p>针对上述问题，我们可以换种写法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">sum&#39;</span> <span class="ow">::</span> <span class="p">(</span><span class="kt">Num</span> <span class="n">a</span><span class="p">)</span> <span class="ow">=&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">a</span>
</span><span class='line'>
</span><span class='line'><span class="nf">sum&#39;</span> <span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="n">xs</span><span class="p">)</span> <span class="n">temp</span> <span class="ow">=</span> <span class="n">sum&#39;</span> <span class="n">xs</span> <span class="n">x</span><span class="o">+</span> <span class="n">temp</span>
</span><span class='line'>
</span><span class='line'><span class="nf">sum&#39;</span> <span class="kt">[]</span> <span class="n">temp</span> <span class="ow">=</span> <span class="n">temp</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们这样调用它: <code>sum' [1,2,3] 0</code>。</p>

<p>它的执行顺序是这样的:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">sum&#39; [1,2,3] 0 -&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="go">sum&#39; [2,3] 1 -&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="go">sum&#39; [3] 3 -&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="go">sum&#39; []  6 -&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="go">6</span>
</span></code></pre></td></tr></table></div></figure>


<p>第二种写法其实就是尾递归。</p>

<p><strong>尾递归的定义：</strong></p>

<p><strong>A recursive function is tail recursive if the final result of the recursive call is the final result of the function itself.</strong></p>

<p><strong>即:如果一个递归函数，它的最终的递归调用结果就是这个函数的最终结果，那它就是尾递归的。</strong></p>

<p>所以我们可以明显看出，第一个不是尾递归，第二个是。</p>

<h3>尾递归优化(tail recursion optimization)</h3>

<p>在大多数编程语言中，调用函数需要消费堆栈空间，一个实现了尾递归的递归函数在进行递归调用时，其实只关心递归调用的结果，所以当我们调用下层函数时，可以舍去上层函数的堆栈调用情况，下层递归调用可以重用这个堆栈空间，这种就叫做<strong>尾递归优化</strong>。一个可能的实现方式是：只需要把汇编代码call改成jmp, 并放弃所有 局部变量压栈处理，就可以了。</p>

<p>尽管尾递归比递归更节省堆栈空间，但并非所有的递归算法都可以转成尾递归的，因为尾递归本质上执行的是迭代的计算过程。这与并非所有的递归算法都可以转成迭代算法的原因是一样的。</p>

<h2>互递归(mutual recursion)</h2>

<p>互递归就是多个递归函数之间相互调用。互递归的一个简单的例子就是判断一个自然数是偶数还是还是奇数。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">isOdd</span> <span class="ow">::</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="kt">Bool</span>
</span><span class='line'><span class="nf">isOdd</span> <span class="n">x</span>
</span><span class='line'> <span class="o">|</span> <span class="n">x</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">=</span> <span class="kt">False</span>
</span><span class='line'> <span class="o">|</span> <span class="n">otherwise</span> <span class="ow">=</span> <span class="n">isEven</span> <span class="p">(</span><span class="n">x</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nf">isEven</span> <span class="ow">::</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="kt">Bool</span>
</span><span class='line'><span class="nf">isEven</span> <span class="n">x</span>
</span><span class='line'> <span class="o">|</span> <span class="n">x</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">=</span> <span class="kt">True</span>
</span><span class='line'> <span class="o">|</span> <span class="n">otherwise</span> <span class="ow">=</span> <span class="n">isOdd</span> <span class="p">(</span><span class="n">x</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个实现很有意思。</p>

<p>任何一个互递归都可以被转变为<strong>直接递归</strong>(direct recursion)，即将另一个调用inline到当前递归函数中。</p>

<p>下面是isOdd和isEven的<strong>直接递归</strong>版本。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">isOdd</span> <span class="ow">::</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="kt">Bool</span>
</span><span class='line'><span class="nf">isOdd</span> <span class="n">x</span>
</span><span class='line'> <span class="o">|</span> <span class="n">x</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">=</span> <span class="kt">False</span>
</span><span class='line'> <span class="o">|</span> <span class="n">x</span> <span class="o">==</span> <span class="mi">1</span> <span class="ow">=</span> <span class="kt">True</span>
</span><span class='line'> <span class="o">|</span> <span class="n">otherwise</span> <span class="ow">=</span> <span class="n">isOdd</span> <span class="p">(</span><span class="n">x</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nf">isEven</span> <span class="ow">::</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="kt">Bool</span>
</span><span class='line'><span class="nf">isEven</span> <span class="n">x</span>
</span><span class='line'> <span class="o">|</span> <span class="n">x</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">=</span> <span class="kt">True</span>
</span><span class='line'> <span class="o">|</span> <span class="n">x</span> <span class="o">==</span> <span class="mi">1</span> <span class="ow">=</span> <span class="kt">False</span>
</span><span class='line'> <span class="o">|</span> <span class="n">otherwise</span> <span class="ow">=</span> <span class="n">isEven</span> <span class="p">(</span><span class="n">x</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java基础学习之Enum]]></title>
    <link href="http://www.huangbowen.net/blog/2013/03/12/enum-in-java/"/>
    <updated>2013-03-12T22:17:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/03/12/enum-in-java</id>
    <content type="html"><![CDATA[<p>Enum是在Java中用来定义枚举类型的关键字。Enum一般用来表示一组相同类型的常量,如性别、日期 、颜色等.</p>

<p>下面是一个最简单的枚举。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">enum</span> <span class="n">Color</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>
</span><span class='line'><span class="n">RED</span><span class="o">,</span>
</span><span class='line'>
</span><span class='line'><span class="n">GREEN</span><span class="o">,</span>
</span><span class='line'>
</span><span class='line'><span class="n">BLUE</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>实际上在Java中枚举类型本质上就是一个类，其继承自java.lang.Enum类。</p>

<p>通过默认提供的<code>GetValues()</code>方法可以获取所有枚举对象，其以一个数组的形式返回。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">for</span><span class="o">(</span><span class="n">Color</span> <span class="n">color</span> <span class="o">:</span> <span class="n">Color</span><span class="o">.</span><span class="na">values</span><span class="o">())</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&quot;%s: %s%n&quot;</span><span class="o">,</span><span class="n">color</span><span class="o">,</span><span class="n">color</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>输出结果为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">RED: RED</span>
</span><span class='line'>
</span><span class='line'><span class="go">GREEN: GREEN</span>
</span><span class='line'>
</span><span class='line'><span class="go">BLUE: BLUE</span>
</span></code></pre></td></tr></table></div></figure>


<p>既然是enum本质上是类，那么我们当然可以给其加一些方法。注意最后一个枚举对象要使用“；”结尾，说明枚举值结束使用。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">enum</span> <span class="n">Color</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>
</span><span class='line'><span class="n">RED</span><span class="o">(</span><span class="s">&quot;Red Color&quot;</span><span class="o">),</span>
</span><span class='line'>
</span><span class='line'><span class="n">GREEN</span><span class="o">(</span><span class="s">&quot;Green Color&quot;</span><span class="o">),</span>
</span><span class='line'>
</span><span class='line'><span class="n">BLUE</span><span class="o">(</span><span class="s">&quot;Blue Color&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">color</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="nf">Color</span><span class="o">(</span><span class="n">String</span> <span class="n">color</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">color</span> <span class="o">=</span> <span class="n">color</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="n">String</span> <span class="nf">getColor</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">color</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意在enum中是不能声明public的构造函数的，这样是为了避免直接实例化enum对象。</p>

<p>我们可以通过<code>getValues()</code>方法调用<code>getColor()</code>方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">for</span><span class="o">(</span><span class="n">Color</span> <span class="n">color</span> <span class="o">:</span> <span class="n">Color</span><span class="o">.</span><span class="na">values</span><span class="o">())</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&quot;%s: %s%n&quot;</span><span class="o">,</span><span class="n">color</span><span class="o">,</span><span class="n">color</span><span class="o">.</span><span class="na">getColor</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>以下是输出结果：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">RED: Red Color</span>
</span><span class='line'>
</span><span class='line'><span class="go">GREEN: Green Color</span>
</span><span class='line'>
</span><span class='line'><span class="go">BLUE: Blue Color</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果大家还是看不太明白的话，我可以展示一个类来对个对比。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">Color</span> <span class="kd">extends</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Enum</span><span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Color</span> <span class="n">RED</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Color</span> <span class="n">GREEN</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Color</span>  <span class="n">BLUE</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">static</span> <span class="o">{};</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">String</span> <span class="nf">getColor</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Color</span><span class="o">[]</span> <span class="nf">values</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Color</span> <span class="nf">valueOf</span><span class="o">(</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">String</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个类的作用等同于我们的Color枚举对象。而每个被枚举的成员其实就是定义的枚举类型的一个实例，它们都被默认为final。无法改变常数名称所设定的值，它们也是public和static的成员，这与接口中的常量限制相同。可以通过类名称直接使用它们。</p>

<p>所以我们大胆的在里面增加一些其它的方法来实现我们的新特性。</p>

<p>在这里我增加了一个新的方法isRed()来判断当前枚举实例是否是红色的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">enum</span> <span class="n">Color</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>
</span><span class='line'><span class="n">RED</span><span class="o">(</span><span class="s">&quot;Red Color&quot;</span><span class="o">),</span>
</span><span class='line'>
</span><span class='line'><span class="n">GREEN</span><span class="o">(</span><span class="s">&quot;Green Color&quot;</span><span class="o">),</span>
</span><span class='line'>
</span><span class='line'><span class="n">BLUE</span><span class="o">(</span><span class="s">&quot;Blue Color&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">color</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="nf">Color</span><span class="o">(</span><span class="n">String</span> <span class="n">color</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">color</span> <span class="o">=</span> <span class="n">color</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="n">String</span> <span class="nf">getColor</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">color</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isRed</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">RED</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以对其进行一个测试。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Color</span> <span class="n">green</span> <span class="o">=</span> <span class="n">Color</span><span class="o">.</span><span class="na">GREEN</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">green</span><span class="o">.</span><span class="na">isRed</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">Color</span> <span class="n">red</span> <span class="o">=</span> <span class="n">Color</span><span class="o">.</span><span class="na">RED</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">red</span><span class="o">.</span><span class="na">isRed</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>第一个输出结果为false，第二个输出结果为true。</p>

<p>通过对Java中enum的运用，往往会产生奇效。比如有这样一个例子，有一个Rover对象，它有一个类型为Enum的direction属性，我们要给Rover实现左转的指令。你可能会写出这样的代码：</p>

<figure class='code'><figcaption><span>Direction.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">enum</span> <span class="n">Direction</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">North</span><span class="o">,</span>
</span><span class='line'>    <span class="n">East</span><span class="o">,</span>
</span><span class='line'>    <span class="n">South</span><span class="o">,</span>
</span><span class='line'>    <span class="n">West</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>Rover.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Rover</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Direction</span> <span class="n">direction</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">Rover</span><span class="o">(</span><span class="n">Direction</span> <span class="n">direction</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">direction</span> <span class="o">=</span> <span class="n">direction</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">turnLeft</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">direction</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">Direction</span><span class="o">.</span><span class="na">East</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">direction</span> <span class="o">=</span> <span class="n">Direction</span><span class="o">.</span><span class="na">North</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">direction</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">Direction</span><span class="o">.</span><span class="na">North</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">direction</span> <span class="o">=</span> <span class="n">Direction</span><span class="o">.</span><span class="na">West</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">direction</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">Direction</span><span class="o">.</span><span class="na">West</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">direction</span> <span class="o">=</span> <span class="n">Direction</span><span class="o">.</span><span class="na">South</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">direction</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">Direction</span><span class="o">.</span><span class="na">South</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">direction</span> <span class="o">=</span> <span class="n">Direction</span><span class="o">.</span><span class="na">East</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>一大堆<code>if...else</code>的代码看起来真的很丑陋。这还好，如果让你给Rover再加几个方法，比如向右转，旋转到反方向等，那代码就没法看了。
我们可以这样分析一下，其实给定一个方向之后，向左转的方向也就确定了，所以我们可以将这些逻辑放置到Direction对象中去。下面是改进后的版本。</p>

<figure class='code'><figcaption><span>Direction.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">enum</span> <span class="n">Direction</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">North</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">Direction</span> <span class="nf">turnLeft</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">West</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">},</span>
</span><span class='line'>    <span class="n">East</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">Direction</span> <span class="nf">turnLeft</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">North</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">},</span>
</span><span class='line'>    <span class="n">South</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">Direction</span> <span class="nf">turnLeft</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">East</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">},</span>
</span><span class='line'>    <span class="n">West</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">Direction</span> <span class="nf">turnLeft</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">South</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">abstract</span> <span class="n">Direction</span> <span class="nf">turnLeft</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Rover.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Rover</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Direction</span> <span class="n">direction</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">Rover</span><span class="o">(</span><span class="n">Direction</span> <span class="n">direction</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">direction</span> <span class="o">=</span> <span class="n">direction</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">turnLeft</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">direction</span> <span class="o">=</span> <span class="n">direction</span><span class="o">.</span><span class="na">turnLeft</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样的代码看起来要舒服的多.</p>

<h2>C#中的Enum</h2>

<p>我也可以简单的讲解下c#中的枚举对象。在c#中声明枚举对象的关键字是enum。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'> <span class="err">访问修辞符</span> <span class="k">enum</span> <span class="err">枚举名</span><span class="p">:</span><span class="err">基础类型</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="err">枚举成员</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>基础类型必须能够表示该枚举中定义的所有枚举数值。枚举声明可以显式地声明 byte、sbyte、short、ushort、int、uint、long 或 ulong 类型作为对应的基础类型。没有显式地声明基础类型的枚举声明意味着所对应的基础类型是 int.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">enum</span> <span class="n">Color</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="n">RED</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'><span class="n">GREEN</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'><span class="n">BLUE</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>所以我们可以直接将一个枚举类型强制转换成其对应的基础类型。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="n">Int</span>  <span class="n">num</span> <span class="p">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">Color</span><span class="p">.</span><span class="n">Red</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Num的值为0.</p>

<p>我们也可以反向转换。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="n">Color</span> <span class="n">color</span> <span class="p">=</span> <span class="p">(</span><span class="n">Color</span><span class="p">)</span><span class="n">num</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>甚至我们还可以对枚举类型进行与或运算。这些就不细说了，有兴趣的可以查阅相关资料。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[webDriver入门及提高]]></title>
    <link href="http://www.huangbowen.net/blog/2013/03/11/webdriver/"/>
    <updated>2013-03-11T09:39:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/03/11/webdriver</id>
    <content type="html"><![CDATA[<p>第一次接触Selenium 的WebDriver，是在一个Web项目中。该项目使用它来进行功能性测试。当我看到Firefox中的页面内容被一个个自动填充并且自动跳转的时候，感觉真的很神奇。通过这段时间的学习觉得可以将我学的关于WebDriver的知识进行一个总结。</p>

<!-- more -->


<h2>什么是Selenium 和WebDriver？</h2>

<p>Selenium是一个浏览器自动化操作框架。Selenium主要由三种工具组成。第一个工具SeleniumIDE，是Firefox的扩展插件，支持用户录制和回访测试。录制/回访模式存在局限性，对许多用户来说并不适合，因此第二个工具——Selenium WebDriver提供了各种语言环境的API来支持更多控制权和编写符合标准软件开发实践的应用程序。最后一个工具——SeleniumGrid帮助工程师使用Selenium API控制分布在一系列机器上的浏览器实例，支持并发运行更多测试。在项目内部，它们分别被称为“IDE”、“WebDriver”和“Grid”。</p>

<p>这里主要介绍它的第二个工具：WebDriver。</p>

<p>官网上是这么介绍它的：WebDriver is a clean, fast framework for automated testing of webapps. 但是我觉得它并不局限与进行自动化测试，完全可以用作其它用途。</p>

<p>WebDriver针对各个浏览器而开发，取代了嵌入到被测Web应用中的JavaScript。与浏览器的紧密集成支持创建更高级的测试，避免了JavaScript安全模型导致的限制。除了来自浏览器厂商的支持，WebDriver还利用操作系统级的调用模拟用户输入。WebDriver支持Firefox(FirefoxDriver)、IE (InternetExplorerDriver)、Opera (OperaDriver)和Chrome (ChromeDriver)。 它还支持Android (AndroidDriver)和iPhone (IPhoneDriver)的移动应用测试。它还包括一个基于HtmlUnit的无界面实现，称为HtmlUnitDriver。WebDriver API可以通过Python、Ruby、Java和C#访问，支持开发人员使用他们偏爱的编程语言来创建测试。</p>

<h2>如何使用？</h2>

<p>首先，你需要将WebDriver的JAR包加入到你项目中CLASSPATH中。你可以Download它通过<a href="http://code.google.com/p/selenium/downloads/list">http://code.google.com/p/selenium/downloads/list</a>。</p>

<p>如果你使用的是maven构建你的项目，只需要在pom.xml文件中加入下面的依赖项即可。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>        <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>
</span><span class='line'>           <span class="nt">&lt;groupId&gt;</span>org.seleniumhq.selenium<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>
</span><span class='line'>           <span class="nt">&lt;artifactId&gt;</span>selenium-java<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>
</span><span class='line'>            <span class="nt">&lt;version&gt;</span>2.25.0<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>
</span><span class='line'>           <span class="nt">&lt;groupId&gt;</span>org.seleniumhq.selenium<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>
</span><span class='line'>           <span class="nt">&lt;artifactId&gt;</span>selenium-server<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>
</span><span class='line'>           <span class="nt">&lt;version&gt;</span>2.25.0<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>然后，你就可以使用它了。WebDriver的API遵从”Best Fit”原则，在保持良好的用户体验性和灵活性之间找到一个最佳的平衡点。</p>

<p>下面的例子是使用HtmlUnitDriver。HtmlUnitDriver只会在内存中执行这段代码，不会弹出一个真实的页面。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">packageorg</span><span class="o">.</span><span class="na">openqa</span><span class="o">.</span><span class="na">selenium</span><span class="o">.</span><span class="na">example</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.openqa.selenium.By</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.openqa.selenium.WebDriver</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.openqa.selenium.WebElement</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.openqa.selenium.htmlunit.HtmlUnitDriver</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Example</span>  <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// Create a new instance of the html unit driver</span>
</span><span class='line'>        <span class="c1">// Notice that the remainder of the code relies onthe interface, </span>
</span><span class='line'>        <span class="c1">// not the implementation.</span>
</span><span class='line'>        <span class="n">WebDriver</span> <span class="n">driver</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HtmlUnitDriver</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// And now use this to visit Google</span>
</span><span class='line'>        <span class="n">driver</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;http://www.google.com&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Find the text input element by its name</span>
</span><span class='line'>        <span class="n">WebElement</span> <span class="n">element</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="na">findElement</span><span class="o">(</span><span class="n">By</span><span class="o">.</span><span class="na">name</span><span class="o">(</span><span class="s">&quot;q&quot;</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Enter something to search for</span>
</span><span class='line'>        <span class="n">element</span><span class="o">.</span><span class="na">sendKeys</span><span class="o">(</span><span class="s">&quot;Cheese!&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Now submit the form. WebDriver will find theform for us from the element</span>
</span><span class='line'>        <span class="n">element</span><span class="o">.</span><span class="na">submit</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Check the title of the page</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Page title is: &quot;</span> <span class="o">+</span><span class="n">driver</span><span class="o">.</span><span class="na">getTitle</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果你想使用Firefox浏览器。你只需要将WebDriver driver = new FirefoxDriver()。前提是你的Firefox被安装在默认的位置。</p>

<table>
<tr>
  <th>操作系统</th>
  <th>Firefox默认安装位置</th>
</tr>                           
<tr>
  <td>Linux</td>
  <td>firefox (found using &#8220;which&#8221;)</td>
</tr>
<tr>
  <td>Mac</td>
  <td>/Applications/Firefox.app/Contents/MacOS/firefox</td>
</tr>
<tr>
  <td>Windows</td>
  <td>%PROGRAMFILES%\Mozilla Firefox\firefox.exe</td>
</tr>
</table>


<p>如果你的FireFox没有被安装在指定的位置，你可以设置“webdriver.firefox.bin”</p>

<p>环境变量的值来指定它的位置。在Java中可以使用如下代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">&quot;webdriver.firefox.bin&quot;</span><span class="o">,</span><span class="s">&quot;thelocation of Firefox&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果要使用Chrome浏览器的话相对麻烦些。你需要首先下载一个ChromeDriver（下载地址：http://code.google.com/p/chromedriver/downloads/list）。这个程序是由Chrome团队提供的，你可以看做它是链接WebDriver和Chrome浏览器的桥梁。然后启动ChromeDriver，你会得到一个Url及监听端口。然后使用webDriver = newRemoteWebDriver(url, DesiredCapabilities.chrome())创建一个ChromeWebDriver进行操作。当然你可以在一个子线程中启动ChromeDriver，并设置给WebDriver。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="n">File</span> <span class="n">file</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="n">your</span> <span class="n">chromedriverfile</span> <span class="n">path</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">ChromeDriverService</span> <span class="n">service</span> <span class="o">=</span> <span class="n">newChromeDriverService</span><span class="o">.</span><span class="na">Builder</span><span class="o">().</span><span class="na">usingChromeDriverExecutable</span><span class="o">(</span><span class="n">file</span><span class="o">).</span><span class="na">usingAnyFreePort</span><span class="o">().</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">service</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="n">WebDriver</span>  <span class="n">webDriver</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ChromeDriver</span><span class="o">(</span><span class="n">service</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="err">……</span>
</span><span class='line'>
</span><span class='line'><span class="err">……</span>
</span><span class='line'>
</span><span class='line'><span class="err">……</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">service</span><span class="o">.</span><span class="na">stop</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<h2>WebDriver如何工作</h2>

<p>WebDriver是W3C的一个标准，由Selenium主持。</p>

<p>具体的协议标准可以从<a href="http://code.google.com/p/selenium/wiki/JsonWireProtocol#Command_Reference">http://code.google.com/p/selenium/wiki/JsonWireProtocol#Command_Reference</a>查看。</p>

<p>从这个协议中我们可以看到，WebDriver之所以能够实现与浏览器进行交互，是因为浏览器实现了这些协议。这个协议是使用JOSN通过HTTP进行传输。</p>

<p>它的实现使用了经典的Client-Server模式。客户端发送一个requset，服务器端返回一个response。</p>

<p>我们明确几个概念。</p>

<p><strong>Client</strong></p>

<p>调用 WebDriverAPI的机器。</p>

<p><strong>Server</strong></p>

<p>运行浏览器的机器。Firefox浏览器直接实现了WebDriver的通讯协议，而Chrome和IE则是通过ChromeDriver和InternetExplorerDriver实现的。</p>

<p><strong>Session</strong></p>

<p>服务器端需要维护浏览器的Session，从客户端发过来的请求头中包含了Session信息，服务器端将会执行对应的浏览器页面。</p>

<p><strong>WebElement</strong></p>

<p>这是WebDriverAPI中的对象，代表页面上的一个DOM元素。</p>

<p>举个实际的例子，下面代码的作用是”命令”firefox转跳到google主页：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>   <span class="n">WebDriver</span> <span class="n">driver</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FirefoxDriver</span><span class="o">();</span>
</span><span class='line'>    <span class="c1">//实例化一个Driver</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">driver</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;http://www.google.com&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>在执行<code>driver.get("http://www.google.com")</code>这句代码时，client，也就是我们的测试代码向<code>remote server</code>发送了如下的请求：</p>

<p><code>POSTsession/285b12e4-2b8a-4fe6-90e1-c35cba245956/url  post_data{"url":"http://google.com"}</code></p>

<p>通过post的方式请求localhost:port/hub/session/session_id/url地址，请求浏览器完成跳转url的操作。</p>

<p>如果上述请求是可接受的，或者说remote server是实现了这个接口，那么remote server会跳转到该post data包含的url,并返回如下的response</p>

<p><code>{"name":"get","sessionId":"285b12e4-2b8a-4fe6-90e1-c35cba245956","status":0,"value":""}</code></p>

<p>该response中包含如下信息:</p>

<ul>
<li><p>name：remote server端的实现的方法的名称，这里是get，表示跳转到指定url；</p></li>
<li><p>sessionId：当前session的id；</p></li>
<li><p>status：请求执行的状态码，非0表示未正确执行，这里是0，表示一切ok不许担心；</p></li>
<li><p>value：请求的返回值，这里返回值为空，如果client调用title接口，则该值应该是当前页面的title；</p></li>
<li><p>如果client发送的请求是定位某个特定的页面元素，则response的返回值可能是这样的：</p></li>
</ul>


<p><code>{"name":"findElement","sessionId":"285b12e4-2b8a-4fe6-90e1-c35cba245956","status":0,"value":{"ELEMENT":"{2192893e-f260-44c4-bdf6-7aad3c919739}"}}</code></p>

<p><code>name,sessionId，status</code>跟上面的例子是差不多的，区别是该请求的返回值是ELEMENT:{2192893e-f260-44c4-bdf6-7aad3c919739}，表示定位到元素的id，通过该id，client可以发送如click之类的请求与 server端进行交互。</p>

<p>这个今天就讲到这里。以后有新东西再补充。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[《图灵的秘密》读后感]]></title>
    <link href="http://www.huangbowen.net/blog/2013/03/03/the-annotated-turing/"/>
    <updated>2013-03-03T00:05:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/03/03/the-annotated-turing</id>
    <content type="html"><![CDATA[<p>坦白的说这本书不太适合我。当我看到大段大段的数学符号时，就两眼发蒙。刚开始还感觉跟得上，到后来完全lost了。</p>

<p>但是这并不妨碍我从另一个角度来重新了解了图灵、数学、计算机….去年的时候曾听过Jeff讲过的一个session:《世界及宇宙的终极答案》。我敢确定至少一半的内容都是来自这本书。
图灵在论文中描述了一个想象出来的机器，用来论证数理逻辑中的一个问题，论文题目叫:&lt;论可计算数及其在判定性问题中的应用>（On Computable Numbers, with an Application to the Entscheidungsproblem）。这个想象出来的机器被后人成为图灵机。</p>

<!-- more -->


<p>图灵在论文中让图灵机使用二进制，仅是觉得方便论证。后来研制的计算机有的使用十进制，有的使用二进制，直到冯诺依曼发表了一片论文论述了计算机使用二进制的可行性与优势后，二进制逐渐成为标准。</p>

<p>如果一个集合可以与自然数意义对应起来，那么我们可以说这个集合是可数的。</p>

<p>正整数和偶数个数那个多些？答案是一样多。因为他们都是可数的。</p>

<p>那么有理数和无理数那个多？答案是无理数。因为无理数是不可数的。</p>

<p>无理数属于实数的一部分。所以实数也是不可数的。这可以用对角线法来证明。</p>

<p>这是一个反证法。</p>

<p>我们假设实数是可数的。那么将0和1之间所有的实数都按照从小到大的顺序列出来。然后我们取第一个数的第一位、第二个数的第二位、第三个数的第三位…..即取对角线的数组成一个新的数。然后对这个数的每一位都加1,如果该位的值是9再加1后变成0。我们看看这个数是不是在已经枚举出来的列表中。列表中的第一个不是它，因为它比第一个数的第一位大1，第二个数也不是它，因为它比第二个数的第二位大…….这样遍历了整个列表发现这个新的数并不在列表中，也就是说我们根本无法将0和1之间的所有实数列举出来，因为我们总可以通过这个方法来找到一个新的实数。</p>

<p>实数是无穷的。我们可以这样理解，世界上有数不清的数字，我们恰好找到了一些，并给它们起了一些名字，如整数，实数，有理数，但还有更多的数我们并不知道它们的存在，就算发现一个也算是意外。</p>

<p>一个图灵机无法通过程序判断另一个图灵机在限定的时间内停机。停机问题说明了图灵机的局限性，这也被很多人作为程序无法没有bug的借口。你无法写一个程序，来判断一段程序中是否没有任何bug。</p>

<p>我们可以预知未来吗？根据图灵机理论，如果我们可以用确定的不含糊的步骤来描述出宇宙的发展，那么我们就可以将其作为输入到图灵机，得到未来。问题是我们如果要构造这个输入，差不多等于构造了一个新宇宙。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Haskell-函数式编程语言之初体验]]></title>
    <link href="http://www.huangbowen.net/blog/2013/03/02/haskell-programming-language-first-touch/"/>
    <updated>2013-03-02T14:55:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/03/02/haskell-programming-language-first-touch</id>
    <content type="html"><![CDATA[<p>如果你是使用面向对像语言进行编程的程序员，那么你应该去了解掌握一门动态语言。而动态语言的魔力之一就是函数式编程。而要学习了解函数式编程，那么haskell是一个不错的选择。</p>

<p>Haskell是是一门纯函数式编程语言(purely functional programming language)。在其世界中函数是第一等对象。并且在haskell中没有赋值，例如你指派a的值为5，然后你无法再给a分配其它的值。所以你不能像命令式语言那样命令电脑“要做什么”，而是通过函数来描述出问题“是什么”。</p>

<p>作为一个纯的函数式编程语言，它支持惰性求值、模式匹配、列表解析、类型类、类型多态……</p>

<p>别着急，让我们慢慢来解开函数式编程的面纱。</p>

<!-- more -->


<h2>安装Haskell</h2>

<ol>
<li><p>可以去<a href="http://www.Haskell.org/Haskellwiki/Haskell">官网</a>下载安装包进行安装。</p></li>
<li><p>mac平台的用户可以通过<a href="http://mxcl.github.com/homebrew/">homebrew</a>进行安装。</p></li>
</ol>


<p>在terminal下输入<code>brew install haskell-platform</code>即可。</p>

<h2>使用Haskell</h2>

<p>安装完毕后haskell platform的解释器GHC就已经在你的电脑上了。GHC可以解释执行Haskell脚本，即后缀名为.hs的文件。你可可以通过在terminal输入<code>ghci</code>进入交互模式。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>twer@bowen-huang:~<span class="nv">$ </span>ghci
</span><span class='line'>GHCi, version 7.4.2: http://www.haskell.org/ghc/ :? <span class="k">for </span><span class="nb">help</span>
</span><span class='line'>Loading package ghc-prim ... linking … <span class="k">done</span>.
</span><span class='line'>Loading package integer-gmp ... linking … <span class="k">done</span>.
</span><span class='line'>Loading package base ... linking … <span class="k">done</span>.
</span><span class='line'>Prelude&gt; 1+2
</span><span class='line'>3
</span><span class='line'>Prelude&gt; 3*4
</span><span class='line'>12
</span><span class='line'>Prelude&gt; 5/1
</span><span class='line'>5.0
</span></code></pre></td></tr></table></div></figure>


<p>关于Haskell的编辑器你可以使用任何喜欢的编辑器:Vim、Emacs、Sublime、TextMate…..我比较喜欢Sublime。因为在Sublime自带Haskell的快捷编译执行。只需要按Ctrl+B来直接运行Scripts脚本。</p>

<p>在ghci交互模式下可以使用<code>:l</code>命令来load一个Haskell脚本，然后就可以调用此脚本中的函数。我们先写一个&#8217;Hello world!’程序，然后通过ghci来load和调用.</p>

<figure class='code'><figcaption><span>HelloWorld.hs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">main</span> <span class="ow">=</span> <span class="n">print</span> <span class="o">$</span> <span class="s">&quot;Hello world!&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Prelude&gt; :l HelloWorld.hs
</span><span class='line'><span class="o">[</span>1 of 1<span class="o">]</span> Compiling Main <span class="o">(</span> HelloWorld.hs, interpreted <span class="o">)</span>
</span><span class='line'>Ok, modules loaded: Main.
</span><span class='line'>*Main&gt; main
</span><span class='line'><span class="s2">&quot;Hello world!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果对文件进行了修改，也可以直接通过<code>:r</code>来重新加载文件。</p>

<h2>Haskell的基本语法</h2>

<h3>加减乘除操作</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Prelude&gt; 1 + 2
</span><span class='line'>3
</span><span class='line'>Prelude&gt; 3 - 1
</span><span class='line'>2
</span><span class='line'>Prelude&gt; 3 * 4
</span><span class='line'>12
</span><span class='line'>Prelude&gt; 5 / 1
</span><span class='line'>5.0
</span><span class='line'>Prelude&gt; 10 / <span class="o">(</span>-5<span class="o">)</span>
</span><span class='line'>-2.0
</span></code></pre></td></tr></table></div></figure>


<p>注意对负数进行操作时要将其用()括起来，否则系统会报错。</p>

<h3>判等与比较操作</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Prelude&gt; <span class="nv">5</span> <span class="o">==</span> 5
</span><span class='line'>True
</span><span class='line'>Prelude&gt; <span class="nv">10</span> <span class="o">==</span> 8
</span><span class='line'>False
</span><span class='line'>Prelude&gt; 5 /<span class="o">=</span> 5
</span><span class='line'>False
</span><span class='line'>Prelude&gt; 10 /<span class="o">=</span> 8
</span><span class='line'>True
</span><span class='line'>Prelude&gt; 5 &gt;<span class="o">=</span> 3
</span><span class='line'>True
</span><span class='line'>Prelude&gt; 5 &lt;<span class="o">=</span> 3
</span><span class='line'>False
</span><span class='line'>Prelude&gt; True <span class="o">&amp;&amp;</span> True
</span><span class='line'>True
</span><span class='line'>Prelude&gt; True <span class="o">&amp;&amp;</span> False
</span><span class='line'>False
</span><span class='line'>Prelude&gt; False <span class="o">||</span> False
</span><span class='line'>False
</span><span class='line'>Prelude&gt; True <span class="o">||</span> False
</span><span class='line'>True
</span><span class='line'>Prelude&gt; not True
</span><span class='line'>False
</span><span class='line'>Prelude&gt; not False
</span><span class='line'>True
</span></code></pre></td></tr></table></div></figure>


<h3>控制流转</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Prelude&gt; <span class="nb">let </span>isHello <span class="nv">x</span> <span class="o">=</span> <span class="k">if </span><span class="nv">x</span> <span class="o">==</span> <span class="s2">&quot;Hello&quot;</span> <span class="k">then </span>True <span class="k">else </span>False
</span><span class='line'>Prelude&gt; isHello <span class="s2">&quot;Hello&quot;</span>
</span><span class='line'>True
</span><span class='line'>Prelude&gt; isHello <span class="s2">&quot;World&quot;</span>
</span><span class='line'>False
</span></code></pre></td></tr></table></div></figure>


<p>注意这里的条件判断中的else是不可以省略的，这样保证条件语句总会返回一个值。所以我们可以将整个<code>if..then..else</code> pattern看做一个表达式。</p>

<p>如果在脚本文件中写的话不需要使用<code>let</code>关键字。并且也可以采用另一个写法。</p>

<figure class='code'><figcaption><span>isHello.hs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">isHello</span> <span class="n">x</span>
</span><span class='line'> <span class="o">|</span> <span class="n">x</span> <span class="o">==</span> <span class="s">&quot;Hello&quot;</span> <span class="ow">=</span> <span class="kt">True</span>
</span><span class='line'> <span class="o">|</span> <span class="n">otherwise</span>     <span class="ow">=</span> <span class="kt">False</span>
</span></code></pre></td></tr></table></div></figure>


<p>|表示或，otherwise关键字表示其它的情况。当然你也可以将这三行代码写成一行，这样也是能够正常运行的。分成三行只是为了更加可读。</p>

<p>还有第三种写法，实际上与面对对象语言中的<code>switch…case</code>语句有些类似。</p>

<figure class='code'><figcaption><span>isHello.hs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">isHello</span> <span class="n">x</span> <span class="ow">=</span> <span class="kr">case</span> <span class="n">x</span> <span class="kr">of</span>
</span><span class='line'> <span class="s">&quot;Hello&quot;</span> <span class="ow">-&gt;</span> <span class="kt">True</span>
</span><span class='line'> <span class="n">otherwise</span> <span class="ow">-&gt;</span> <span class="kt">False</span>
</span></code></pre></td></tr></table></div></figure>


<p>这和第二种写法很类似。其实第二种写法本质上就是<code>case</code>语句，它只是<code>case</code>语句的一个语法糖而已。</p>

<p>另外，在Haskell中是没有各种循环语句的，如果要实现相似的特性当然要使用递归了。</p>

<p>第二节中，我们会讨论这个问题。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ThoughtWorks developer 读书路线图]]></title>
    <link href="http://www.huangbowen.net/blog/2013/02/18/thoughtworks-reading-book/"/>
    <updated>2013-02-18T13:31:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/02/18/thoughtworks-reading-book</id>
    <content type="html"><![CDATA[<p>作为一名合格的ThoughtWorker,每年不读个几十本书都不好意思跟别人打招呼。从读书的角度来说，我还真不算是一名合格的ThoughtWorker。不过没关系，发现了问题就要解决问题。2013年来已经读了2，3本书了，按照这个频率下去今年30本书的目标应该问题不大。但是面对庞大的书籍，那些书是值得一读的那？尤其是技术类书籍，更是种类繁多，参差不齐。作为一个合格的程序员，常常纠结如此。</p>

<p>不用怕，ThoughtWorks考虑到这些问题，特推出了《ThoughtWorks Dev 读书路线图》。感谢Longjun和Zhangyi的贡献。</p>

<p>请注意，这里只是列出了一些推荐书籍，难免有些遗漏。你可以把这些书籍当成一个指引，带领你进入知识的海洋。站在别人的肩上才能看的更远。</p>

<p><img src="http://www.huangbowen.net/images/reading.jpg" width="700" height="700" title="ThoughtWorks Dev 读书路线图" alt="ThoughtWorks Dev 读书路线图"></p>

<p>点击<a href="http://www.huangbowen.net/images/reading.jpg">这里</a>查看大图。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2007年的一篇总结文章]]></title>
    <link href="http://www.huangbowen.net/blog/2013/02/17/2007nian-de-pian-zong-jie-wen-zhang/"/>
    <updated>2013-02-17T00:48:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/02/17/2007nian-de-pian-zong-jie-wen-zhang</id>
    <content type="html"><![CDATA[<p>今天整理电脑，偶然翻出一篇写于2007年的演讲稿。那是在一次班级团组织生活上向大家介绍自己学习计算机经验的一些感悟。</p>

<p>如今六年过去了，看到六年前自己的感悟，百般滋味涌上心头。六年的时间，从一个意气奋发的少年成长为孩子眼中的叔叔，不变的是对技术的从一而终的热爱。</p>

<p>看着当初稚嫩的自己进行的总结，某些条款至今让我受用，某些甚至自己至今还没做好。看来进步的pattern就是一个实践+总结+实践&#8230; 没有总结光有实践是万万不行的，这就像驴拉一辈子磨也不知道想办法用机器代替一样。</p>

<p>现在将演讲稿的内容贴出来，以后可以继续回味与总结。</p>

<!-- more -->


<p>我们学习计算机已经两年了。两年里大家到底学到多少东西，恐怕每个人的感受都不一样。无论你外表再花哨，肚子里有多少知识自己最清楚。我回顾以下自己的大学经历，并浅谈一下自己目前对学计算机的一点感受。</p>

<p>刚入大一，我对计算机了解很少，只会打游戏，和简单的OFFICE操作。但是我一向对计算机高手有种崇拜的感觉，老是幻想什么时候自己能成为其中一员。</p>

<p>大一的上半学期的时候，想自学 FLASH。自己就从图书馆借了好几本关于FLASH的书，找时间蹭机房钻研。恰逢那时侯要搞团组织生活，要我做个FLASH，我就带者压力开始钻研了。我发现自己钻研的好处是，我先是想实现某种效果，我才看书上是如何实现的，然后再操作实现，这样理解很深刻，能明白它的具体原理。</p>

<p>从第一次打开FLASH这个软件到作出第一个FLASH，不到两个月的时间。虽然它很丑，但是我很喜欢。可惜那时侯不知道把FLASH导成自带播放器的格式，结果在开团组织生活的时候由于机子上没装播放器而无法播放。</p>

<p>大一下半学期我们开了FLASH课，我渐渐明白不是所有的知识只有老师教了我们后，我们才能学会。上FLASH课的时候我基本没听过讲，因为感觉老师讲的好简单。后来就是那个第三届技能大赛开始了，我想自己既然学了FLASH，不如做个作品交上去吧。有好多人说就我那水平怎么可能获奖？我自己想贵在参与，得不得奖无所谓，就花了快一个月的时间做了个动画，在比赛截止的最后一天交过去了。最后竟然得了奖。看起来说的很轻松，做的过程中很辛苦。作动画要一层层的累加，一个场景一个场景的赶，有多少次都想放弃了，但是最终是坚持了下来。我从这个事情得出的结论是，如果你想好一件事情的话，你要付出更多的努力，要不厌其烦，想不劳而获只能让时间白白流逝。</p>

<p>后来放暑假了，计协要选一批人搞技术培训，我就参加了。那时侯培训分美工和编程两部分。我之所以没有选美工是发现我1没有艺术天分。就比如做FLASH动画，我懂的如何使用这个软件，但是却创作不出原始素材。2，鉴于我们这个专业我想往深层次钻。</p>

<p>师兄培训教我们的是ASP。在没培训之前我根本不知道ASP是什么东西，连dreamweaver也是第一次用。总共培训了5天，每天3个小时，其中一个半小时师兄讲，剩下的一个半小时自己上机操作，不会的问师兄。我给大家说下当时培训情况。第一天讲的是怎么配置IIS和建立站点。第二天讲dreamweaver的一些基本操作。第三天讲如何使用数据库，配数据源，并实现了登陆注册。第四天教我们做了个很简单的留言版。第五天没讲什么具体的东西，大概介绍了一个网站的开发过程。就这么短短的五天过后，师兄就让我们交个作品上来。</p>

<p>我做的是小型的魔兽论坛,被选中了成了协会的编程干部。</p>

<p>可是我来协会还没站稳，师兄给我们下达了一项任务，让我们几个搞编程的和搞美工的在开学前做个协会的新网站出来。我一听眼黑了。这个难度也太大了。但是心想有什么不会的可以问师兄，就硬者头皮做了。由于是第一次做网站，根本不懂什么规划，上去就编数据库写代码，结果给后来造成了不少的麻烦。</p>

<p>刚开始的时候，我们编程的还有不少人做，可是做着做着我发现好多都跑光了，只有我们班的几个还坚持在，我想可能是耐不住枯燥吧。暑假那段时间我相当于要同时学三门语言，HTML语言，ASP语言，外带个SQL查询语句。我经常碰到令人头痛的问题，刚开始，师兄还给我解答，后来干脆不耐烦说自己查书去，可能嫌我问的问题太幼稚了。我只好天天在BAIDU来BAIDU去的。</p>

<p>我们不是好多同学也选了网站建设课吗？不知道大家学的怎么样？这种东西就是入门有点痛苦，但是之后的路就好走多了，当你学的有感觉的时候，你就能感到你头脑中有一棵知识树，随着你知识的积累，那棵树越长越大，你越学越自信。我给大家建议个学习网站建设的方法，那网站建设课本后面不是有几个综合性的例子吗？你把那些代码都敲进去，调试运行成功，你就会发现你对ASP已经有了很深的了解了。这就是要先学会看别人的代码，要多思考。大家记得SESSION这个属性吧。老师给我们讲了如何用，但是好多人没整明白。我做协会网站的时候根本不知道有个SESSION这个属性。我在做会员专区的时候，遇到了一个问题，就是会员注册登陆后，进了会员专区要进行各种操作，可是我怎么能区别是那个会员在进行操作那，我想如果有一个变量传值能老跟着这个会员的操作多好。哪个时候我知道两种传值方式，表单传值和问号传值，但是这两种都只能传往一个页面，要在不同页面间传送很不方便。我从网上查资料，发现了SESSION这个属性，它很好的解决了我的问题。这样你就不会再犯糊涂它是干什么用的。</p>

<p>本来我们计划是开学前把网站做好挂出去的，可是我能力太差劲了，边学边做很慢，而且其他人都不知道跑那里去了。后来总算是都开学了一个多月才正式把网站做好，挂出来。通过做这个网站我学到了很多的东西。这对我以后的学习起到了很大的作用。</p>

<p>但在大二上半学期我走了弯路，那段时间我不知怎么想的，先弄了下XML，后来看了下ｊａｖａ的书，又编了好长时间的JSP代码，正是由于我学的太杂了，最后什么东西都没有学到，全是学一段时间觉的没什么收获就换了。我忘了当时刚开始学习ASP要吃好多的苦。而且我总想老师讲的课没用，不如自己学，忽略了对理论的学习，象数据结构，汇编我就学的不是很好。后来学期快结束时我才发现了问题的严重性，饿补了下，但是毕竟还有好多夹生的。</p>

<p>寒假里我看了点VC的书，LINUX方面的光盘，但是玩心太大，没掌握多少东西，感觉这个寒假是荒废了。</p>

<p>这个学期到现在，我加重了对理论的学习。这个学期的专业课我很少矿过，课上也大多认真听了。</p>

<p>我已经感觉到了学习理论的好处，使你能更地层的了解一个程序的运行。</p>

<p>我选了WINDOWS程序设计的课，恰巧我寒假里看了本VC的书，感觉能把书里的项目做出来。于是就花了些工夫，边看书，边听课，边做。不会了就从网上查资料，本来想问老师，可是问了一次老师后就不想问了。因为我的问题都太简单了，老师不好好给我说，不如看BAIDU来的快。</p>

<p>要知道当时我对VC++的MFC编程一无所知，甚至连建个工程都不会。没办法只好咬牙坚持了下来。由于这个学期时间很紧，为了赶进度，我就经常通宵。那个课本好烂，有好多错误的地方，我改的好痛苦.我这个人比较怪，白天很难静下心来写代码，只有晚上才能保持头脑清醒。终于在前几天是完成了程序大部分功能。</p>

<p>这个系统用了网络编程，数据库编程，对VC的涵盖还是很广的。我通过做这个学到了好多好多的东西。</p>

<p>比如说注册表编程。不知道有多少人能说出来WINDOWS的注册表是干什么用的，更别提对它的使用了。我这个系统就是需要把软件的一些基本配置保存在注册表中，看似很高深，其实用两个函数轻松搞定。有些东西根本没有你想象中的那么难，只要你做了一次就会发现。</p>

<p>说的这么乱，大家一定都晕了。</p>

<p>我本来想把我的感受总结成一，二，三等几个大点的。可是写作能力太差，搞不定。</p>

<p>简单说下吧。学计算机理论一定要抓好。千万不要忽略理论。理论不扎实的后果就是永远只能浮在很浅的层次上，想要深入就很难了。</p>

<ul>
<li><p><strong>学计算机要有钻劲，有恒心。</strong></p></li>
<li><p><strong>学计算机不能跟着老师走。</strong>如果你做东西时发现那里不会的时候，不要想老师没讲我就不会，就不去钻。这是很错误的。</p></li>
<li><p><strong>学计算机要明确自己的方向，不能东学一块，西学一块。</strong>要让自己的知识成为一个完整的系统。我上个学期就吃了这个亏，浪费了半个多学期。</p></li>
<li><p><strong>学计算机要学会取舍。</strong>人都是有惰性的。我的惰性就很大。现在我平常要上课，平时协会还有不少的日常事务要处理，有些空闲时间还想打会游戏，休闲下，这样很难有大的成就。我现在就在努力改观。</p></li>
<li><p><strong>学计算机要多做项目。</strong>只有做项目是最快的途径，最好的途径。我们不是开了课程设计吗？相信只要认真做了课程设计的同学每人的收获一定不少。我们以前是站在软件使用者角度上的，如果我们站在开发者角度上，就会学到很多东西。我们的VB。NET课，老师整天讲那些空间怎么用，我觉的稍微难点的有点价值听外，其他的完全可以自己去摸索，用不了多久你就会用了。如果你在学VB。NET的时候是报着做一个什么图书管理系统啊的什么的话，你如果能坚持下来的话，你就会发现你进步很快。</p></li>
<li><p><strong>学计算机要做学会思考。</strong>思考是小到对一个算法如何实现。大到对整个计算机编程的认识。这个我无法具体说，只能意会，不能言传。举个简单的例子，VC++与C++的区别，可能很多人还没搞不明白。</p></li>
<li><p><strong>学计算机不能浮躁，不能自嗷，不能不懂装懂。</strong>浮躁是大敌，我这方面做的还不够，但是我最起码知道要克服他。还有千万不要骄傲，目中无人，无论你是不是搞计算机的，千万不要盲目自大，这是做人的基本原则。不能不懂装懂，如果有人问了你一个问题你不会，你要勇敢的说出来你不会，并马上查资料去找答案。</p></li>
</ul>


<p> 我只是一个普通的计算机科学与技术专业的学生。以前我梦想成为一名计算机高手，但是现在我甚至无法描绘一个真正的计算机高手是什么样的。</p>

<p> 每当我做出一个东西，哪怕只有一个人去使用它，那也是有用的。我也会高兴的。</p>
]]></content>
  </entry>
  
</feed>
