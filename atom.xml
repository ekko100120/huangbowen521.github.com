<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[黄博文的地盘]]></title>
  <link href="http://www.huangbowen.net/atom.xml" rel="self"/>
  <link href="http://www.huangbowen.net/"/>
  <updated>2013-08-13T01:22:48+10:00</updated>
  <id>http://www.huangbowen.net/</id>
  <author>
    <name><![CDATA[黄博文]]></name>
    <email><![CDATA[huangbowen521@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SVN中Branch的创建于合并]]></title>
    <link href="http://www.huangbowen.net/blog/2013/08/13/branchs-in-svn/"/>
    <updated>2013-08-13T00:59:00+10:00</updated>
    <id>http://www.huangbowen.net/blog/2013/08/13/branchs-in-svn</id>
    <content type="html"><![CDATA[<p><img src="http://www.huangbowen.net/images/branch_trunk.jpg"></p>

<p>在使用源代码版本控制工具时，最佳实践是一直保持一个主干版本。但是为了应付实际开发中的各种情况，适时的开辟一些分支也是很有必要的。比如在持续开发新功能的同时，需要发布一个新版本，那么就需要从开发主干中建立一个用于发布的分支，在分支上进行bug fix，维护版本的稳定，并适时的将一些改动合并回主干。目前大红大紫的源代码版本控制工具git很受大家推崇，原因之一就是其在这方面的功能相当强大。其实老牌的SVN也是有这样的功能的，接下来就给大家讲解下。</p>

<!-- more -->


<h1>Branch的创建</h1>

<p>在SVN中主干代码一般是放置在Trunk目录下的，如果要新建Branch的话则放置在Branchs目录下。(注意这是一种约定，SVN并不强制你这样做)注意Branhs和Trunk目录要平级，不能有嵌套，要不会引起混乱。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>  myproject/
</span><span class='line'>      trunk/
</span><span class='line'>      branches/
</span><span class='line'>      tags/
</span></code></pre></td></tr></table></div></figure>


<p>创建一个Branch也相当简单，只需要一条命令即可。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>svn copy http://example.com/repos/myproject/trunk http://example.com/repos/myproject/branches/releaseForAug -m <span class="s1">&#39;create branch for release on August&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这条命令是指给myproject这个repo创建一个名为releaseForAug的branch，使用-m来加入描述。</p>

<p>之后你就可以通过 <code>svn checkout http://example.com/repos/myproject/branches/releaseForAug</code>来迁出你的Branch源文件，在上面进行修改和提交了。</p>

<p>其实SVN并没有Branch的内部概念。我们只是创建了一个repo的副本，并自己赋予这个副本作为Branch的意义，所以这与git中的Branch有很大不同。</p>

<p>需要注意的是Branch和Trunk使用同一套版本号，也就是说无论在Branch还是Trunk的提交都会引起主版本号的增加。这是因为<code>svn copy</code>只支持同一个repository内的文件copy，并不支持跨repository的copy，所以新创建的Branch和Trunk都属于同一个repository。</p>

<h1>合并</h1>

<p>既然要创建分支也需要合并分支。基本的合并也是蛮简单的。</p>

<p>假设现在Branch上fix了一系列的bug，现在我们想把针对Branch的改变同步到Trunk上，那么应该怎么做那？</p>

<ol>
<li><p>保证当前Branch分支是clean的，也就是说使用svn status看不到任何的本地修改。</p></li>
<li><p>命令行下切换到Trunk目录中，使用 <code>svn merge  http://example.com/repos/myproject/branches/releaseForAug</code> 来将Branch分支上的改动merge回Trunk下。</p></li>
<li><p>如果出现merge冲突则进行解决，然后执行<code>svn ci -m 'description'</code>来提交变动。</p></li>
</ol>


<p>当然在merge你也可以指定Branch上那些版本变更可以合并到Trunk中。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>svn merge  http://example.com/repos/myproject/branches/releaseForAug -r150:HEAD
</span></code></pre></td></tr></table></div></figure>


<p>示例中是将Branch的从版本150到当前版本的所有改动都合并到Trunk中。</p>

<p>你也可以将Trunk中的某些更新合并到Branch中，还是同样的方法。</p>

<h1>查看当前Branch和Trunk的合并情况</h1>

<p>可以使用<code>svn mergeinfo</code>来查看merge情况。</p>

<p>查看当前Branch中已经有那些改动已经被合并到Trunk中:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># cd to trunk directory</span>
</span><span class='line'>svn mergeinfo http://example.com/repos/myproject/branches/releaseForAug
</span></code></pre></td></tr></table></div></figure>


<p>查看Branch中那些改动还未合并。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#cd to trunk directory</span>
</span><span class='line'>
</span><span class='line'>svn merginfo http://example.com/repos/myproject/branches/releaseForAug --show-revs eligible
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[只有好的棋手才会走运-《打造Facebook》读后感]]></title>
    <link href="http://www.huangbowen.net/blog/2013/08/11/only-good-player-has-good-luck/"/>
    <updated>2013-08-11T12:01:00+10:00</updated>
    <id>http://www.huangbowen.net/blog/2013/08/11/only-good-player-has-good-luck</id>
    <content type="html"><![CDATA[<p><img src="http://www.huangbowen.net/images/facebook.jpg" width="600"></p>

<p>王淮的《打造Facebook》一书不厚，花半天时间轻松读完。书中没有大段的说教，只有近乎流水的陈述。正如作者所说，打造Facebook这本书由巴克伯格来写再合适不过。可惜他至少在近几年内没有这个打算。而王淮作为加入Facebook最早的员工之一，以工程师角度描述的视角恐怕更适合我们。</p>

<!-- more -->


<ul>
<li><p><strong>战略眼光很重要。</strong>在Facebook聚合了大量的用户以后，马克伯格在最早的时间决定将Facebook打造成为一个对外开放的开发平台，可以由第三方开发者基于Facebook的API来开发应用。这样极大的激发了开发者的热情，平台上的优秀应用层出不穷，又反过来吸引了更多的用户。环顾今日，淘宝、腾讯等国内大公司基本都是这样的套路。硅谷不愧是科技公司的标杆。</p></li>
<li><p><strong>学习能力体现在你的坚持上，而不是你的聪明上。</strong>马克伯格每年都会给自己制定挑战目标。这些挑战目标有的是加强自己某一方面技能，有的则是纯粹的磨练自己。比如09年坚持每天打领带，10年坚持学中文，11年坚持支持自己宰杀的动物，12年坚持每天写代码&#8230;&#8230;马克伯格的学习能力强，不是由于他聪明，而是由于他能够坚持。</p></li>
<li><p><strong>招人只招优秀的，宁缺毋滥。</strong>这句话每个公司的HR都懂，但是能得到彻底贯彻的公司少之又少。优秀的人才本来就少，每个公司都抢着要，总有一些公司是抢不到的。Facebook作为创业公司一开始就坚持这样的策略，无疑是它能够持续壮大的重要原因之一。因为巴克伯格深切的知道优秀的工程师意味着什么。优秀的工程师更容易被委以重任;完成任务后可以相互标榜；一流人才喜欢互相挑战，并且互相学习。古往今来，几乎每个杰出的人才身边都有优秀的人相伴，爱迪生身边有特斯拉，图灵有秋奇作为对手&#8230;&#8230;</p></li>
<li><p><strong>留人靠的不是忠诚度忽悠，而是公司能够给予员工切实的利益。</strong>硅谷公司通常不会单方面的强调员工对公司的忠诚度，而是更多的考虑公司有什么东西值得员工留下来。国内很多公司特别喜欢强调爱国主义式的忠诚，公司给了你这碗饭，你就要时时刻刻想着报答公司。这种忠诚如果不是发自内心对公司文化的认同，那么根本起不了什么作用。公司如果能够在产品、理念、思想、薪酬、福利等方面着想，无疑才是标本兼治的好方法。</p></li>
<li><p><strong>跳出你的舒适区。</strong>Get out of your comfort zone已经成了IT界的一句行话。IT界不仅发展迅猛，而且涉及技术众多。靠一门语言打天下的时代已经一去不复返。勇敢的跳出自己的舒适区，主动学习新知识，才能增强核心竞争力。以前做c++，现在想搞web开发，那就要学习。以前做开发，现在想搞管理，那也要学。学习->工作出色->得到成就感->获取更多机会->激发学习,很容易形成一个良性循环。</p></li>
<li><p><strong>良好的沟通能力是优秀程序员的必备素质。</strong>在一个团队中工作，如果不注重沟通，会导致很多问题。不和BA沟通，无法保证功能契合客户要求;不和其他程序员沟通，技术无法得到共享;不主动和别人沟通，只能被动接受结果。</p></li>
</ul>


<p>虽然是金子总会发光的，但现在绝大多数人的首要目标是如何让自己成为金子。从《打造Facebook》这本书中了解了这家公司的工程师文化，学习到了那些“金子”为什么能成为“金子”，并借鉴到自己身上。</p>

<p>最后，给大家一些建议，如果在简历中能有这些东西，那么肯定会从HR眼中脱颖而出。注意这些事情需要平时的积累，不是临时抱佛脚可以搞定的。</p>

<ol>
<li><p>维护自己的一个原创技术博客。</p></li>
<li><p>豆瓣读书上的读书记录及读书笔记。</p></li>
<li><p>成为github重度患者。在github上分享自己的代码，甚至参与开源项目的开发。</p></li>
<li><p>良好的英语技能。尽量阅读英文资料，访问英文网站，如stackoverflow等。自己可以尝试翻译一些技术文章或书籍。</p></li>
</ol>


<p>Only the good players are luckly. 这是国际象棋界的一句名言，即只有好的棋手才会走运。在羡慕别人有好运的同时，把自己变为一个good player吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何让站会变得高效]]></title>
    <link href="http://www.huangbowen.net/blog/2013/08/06/effective-standup-meetings/"/>
    <updated>2013-08-06T06:38:00+10:00</updated>
    <id>http://www.huangbowen.net/blog/2013/08/06/effective-standup-meetings</id>
    <content type="html"><![CDATA[<p><img src="http://www.huangbowen.net/images/standup.jpeg"></p>

<p>Stand up meeting作为敏捷项目开发中的一个重要实践不可或缺。站立会议每天都要发生，在会议上大家可以了解到每个人的工作进展、项目遇到的concern和issue，从而做出适应的资源调整和措施，保证项目交付的顺利进行。如何让站会变得高效，本人总结了一些tips，希望对大家有用。</p>

<!-- more -->


<h2>站会的形式</h2>

<p>一般站会分为两个形式。一种是在站会上每人轮流进行各自的状态更新，另一种是以story wall上的user story为主进行更新。
第一种好处是每人都有更新机会，但是更新的内容稍显混乱，第二种好处是通过卡片追踪能更清晰的了解到当前的状态，不好的地方是如果有人的工作任务没体现在卡片上，可能就没机会得到更新。</p>

<p>我个人比较倾向于第二种更新方式。一个典型的story wall有这些列: BACKLOG->BA->DEV->TEST->UAT->DONE。站会开始的时候，由一个facilitator按照从DONE->UAT->TEST->DEV->BA的顺序依次念出这些故事卡，被点到的故事卡则由工作在这张卡上的人进行相应的更新。之所以采用倒序是出于精益的思想。我 们敏捷的迭代式开发就是要将story card尽量的往done column里挪，采用倒序过卡的方式就是要突出这一点。当将墙上所有的卡都过完后，facilitator可以再问下有没有其他人有update，这样可以防止有些人由于工作不能体现在卡片上而漏掉更新。比如迭代经理可以此时做出自己的更新。最后facilitator再问还有什么问题或风险没，此时可以把自己的一些想法表露给团队,好借团队之力拿出应对方案。</p>

<h2>个人的更新</h2>

<p>个人的更新注重言简意赅，突出重点。一般更新需要包括下面三点。</p>

<ol>
<li><p>昨天做了什么。这个只需2句话带过，切忌陷入细节。</p></li>
<li><p>有没有遇到问题，需不需要资源或帮助。如果遇到什么困难，可以大概描述下，并指出需要什么样的帮助。</p></li>
<li><p>今天打算做什么。</p></li>
</ol>


<h2>一些tips</h2>

<ol>
<li><p>站会一定要站着开。凡是坐着的会议都短不了。</p></li>
<li><p>one conversation. 站会上的时候一定要保证同一时刻只有一个人说话，切忌变成了群体讨论。做法可以是将一个小玩具作为token，只有拿着这个token的人才可以说话。</p></li>
<li><p>限制每个人更新的时间。有些人在更新自己工作状态的时候喜欢讲的很细节，无形中浪费了很多时间。这时候facilitator就需要适时的打断他，可以告诉他只要给出大概的内容进行，细节部分可以会后再讨论。</p></li>
<li><p>团队中成员轮流当facilitator。一般团队中喜欢固定一个人当facilitator，一当就当到了项目结束。其实更好的做法是每天站会时都要更换facilitator，这样保证每个人都能充分参与到团队中。</p></li>
<li><p>站会不能迟到，也不要定在刚上班时。刚踩着点进办公室就迎来站会略显紧张，很多人还没调整好状态。
一般可以将站会定为早上上班15分钟后。</p></li>
<li><p>凡是可能花时间的讨论都不要发生在站会上。站会只是专注状态更新，暴露问题，而不是解决问题。针对会上暴露的问题可以再组织相关的人商讨解决方案。</p></li>
<li><p>切忌将站会流于形式，失去原有的意义。站会注重的是team间横向的沟通，并且每天都会发生，如果不能坚持就说明了团队间配合出现了问题，失去了快速反馈的意义。</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[布里斯班两周感受]]></title>
    <link href="http://www.huangbowen.net/blog/2013/08/03/impression-of-brisbane-in-two-weeks/"/>
    <updated>2013-08-03T23:56:00+10:00</updated>
    <id>http://www.huangbowen.net/blog/2013/08/03/impression-of-brisbane-in-two-weeks</id>
    <content type="html"><![CDATA[<p><img src="http://www.huangbowen.net/images/brisbane2.jpg"></p>

<p>不知不觉，到达布里斯班已经两周了，感觉还不错。再谈谈自己的感受。</p>

<!-- more -->


<p>虽然现在布里斯班是冬季，但是一点都不冷，白天大多数时候就穿个长袖Tshirt就行，晚上顶多套个外套。如果白天出太阳的话长袖Tshirt甚至还好些热。每天都是蓝天白云，有时候来片乌云下点雨，持续时间不长。站在高楼上可以望到很远，看不到一点污染的迹象，不像成都经常是看对面的大厦都是雾蒙蒙的。布里斯班河穿城而过，河水谈不上很清澈。河里有公共交通船来回穿梭，也有一些旅游船。我坐了一个叫RiverTour的船，1个半小时25刀，沿着布里斯班河走到快进海的地方又折返回来。途中可以看到不少旧建筑，也有很多私人游艇。很多别墅沿河而建，家家有自己的私人码头。布里斯班的古建筑与现代建筑相得益彰，经常在某个高大威猛的现代建筑旁就能发现一些经典的欧式建筑。今天在回公寓的途中就发现了一个大教堂，很宏伟壮观，进去参观了下，真是有气势。听介绍女王曾经来过这个教堂，教堂里还展出了一套当时女王来时牧师穿的衣服。</p>

<p>布里斯班河旁的巨大摩天轮15刀一个人，我在底下想了想没坐。主要是我的公寓就在摩天轮河对面，40楼，看布里斯班景色早看够了。南岸公园里有个露天的人工沙滩和游泳池，有很多人在里面游泳晒太阳，这可是布里斯班冬天啊，可见布里斯班的天气多好。河边还有一处几百米的峭壁，很多人在那里攀岩，真是刺激。草坪随处可见，也有不少的专门供BBQ的台子，一大伙人围着烧烤，香味到处都是。有个叫riverLife的地方可以租小艇和自行车、攀岩设备等。泛舟在布里斯班河也别有一番风味。只不过自己是个旱鸭子，另外听说还要license，所以没有尝试。</p>

<p>这里的物价来说还是有些贵，当然如果你拿得是澳洲的工资的话就觉得比中国相对来说便宜。我中午一般是去foud court吃快餐。一些盖浇饭、炒饭之类的，总体是6到9刀间，可以吃饱。晚上则自己做。煮点意大利面浇点面酱，或者去超市买腌好的牛排，拿回来煎了就可以吃了。一盒8刀左右，有350克，量还是较多的。牛奶品牌非常多，2升的大概4刀左右，绝对不含三聚氰胺。鸡蛋稍贵，一打12个4刀多点。周末的时候会和同事一起下馆子。找个河边的餐馆，边吃饭边欣赏风景边聊天，很是惬意。一餐下来每人平均25刀左右，还算不贵。在外面吃饭一定注意不能浪费。有一次盘子剩了2块肉，服务员说如果不吃完就会double the price。ThoughtWorks在澳洲有Friday Lunch的传统，就是所有的ThoughtWorkers都会在周五中午回到办公室一起吃午餐，顺便聊聊天，交流下感情。ThoughtWorks布里斯班办公室平时都是没人的，大家都跑客户现场上班去了。我们的客户现场离办公室很近，所以中午我们都习惯买了午餐后去办公室吃。还是在自家的办公室好，各种饮料、零食、水果随便吃。</p>

<p>刚来的时候我住在Oaks酒店，后来搬到了River Place的一套公寓。不得不感叹帝国主义的腐朽。公寓虽然面积不大，但是所有设施一应俱全。厨房什么电器都齐备了，烤箱、洗碗机都有。这才是真正的拎包入住。听后这边的公寓大概500刀一周，还是蛮贵的，这价格应该能够付郊区的一栋独栋别墅的月供，所以如果打算定居的话就不是很划算。不过毕竟是城中心，上班、购物什么的都方便。由于住得地方距上班的地方只有不到10分钟路程，所以基本没坐过公交车。布里斯班的公共交通还是蛮贵的，虽然可以办go card，但是打折也不是很多。布里斯班的路不是很宽，行人和车辆都比较遵守交通规则。如果闯红灯被警察抓的话会罚款，44刀。听同事说墨尔本创红灯被抓要被罚200刀。如果车辆从车库里出来时，会主动的避让行人。我有好几次看到车辆要驶入街道，就想等他们先过，但是车主都会停下来招手示意我先过去，这点感觉很好。</p>

<p>暂且就这么多把。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQL语法的重要知识点总结]]></title>
    <link href="http://www.huangbowen.net/blog/2013/07/30/concepts-of-sql-statement/"/>
    <updated>2013-07-30T22:31:00+10:00</updated>
    <id>http://www.huangbowen.net/blog/2013/07/30/concepts-of-sql-statement</id>
    <content type="html"><![CDATA[<p><img src="http://www.huangbowen.net/images/sql_rebel.jpg"></p>

<p>好几年没写SQL语句了。现在到了新的team，需要用到数据库。作为QA的话时常需要使用客户端工具连接到数据库中找寻或修改数据。这么长时间没使用，一些SQL的使用技巧都忘得差不多了。晚上看了一些资料，花了1个多小时又捡起了曾经的知识。现在总结一下以方便以后查阅。</p>

<!-- more -->


<ol>
<li><p>SQL不是大小写敏感的。</p></li>
<li><p>分号是分割多条SQL语句的标准的分隔符，所以在单条SQL语句后面总加上分隔符是不会出错的。</p></li>
<li><p><code>DISTINCT</code>关键字用于剔除重复的结果数据。<code>SELECT DISTINCT City FROM Customers;</code>意味着从Customers表中返回不重复的City值。</p></li>
<li><p><code>ORDER BY</code>用于对查询结果排序。 <code>ORDER BY column_name ASC</code>表示递增排序，也是默认顺序，可以省略<code>ASC</code>。 <code>ORDER BY column_name DESC</code>表示递减排序; <code>ORDER BY</code>后面可跟多个列名进行排序。</p></li>
<li><p>返回指定数目的记录。在<code>SQL Server/MS Access</code>中可以使用 <code>SELECT TOP number|percent column_name(s)
FROM table_name;</code> MySQl中语法是 <code>SELECT column_name(s)
FROM table_name
LIMIT number;</code>Oracle中语法是<code>SELECT column_name(s)
FROM table_name
WHERE ROWNUM &lt;= number;</code>.  <code>SELECT TOP number PERCENT * FROM table</code>可以返回指定指定百分数的数据。</p></li>
<li><p>使用<code>LIKE</code>可以匹配字符串值，同时可以使用通配符。<code>%</code>匹配0或多个字符，<code>_</code>匹配一个字符，<code>[charlist]</code>匹配一组字符，<code>[^charlist]</code>或<code>[!charlist]</code>表示匹配不在此列表中的字符。</p></li>
<li><p>使用<code>AS</code>关键字可以给列或表起别名。也可以给组合后的列起别名，如 <code>SELECT CustomerName, Address+', '+City+', '+PostalCode+', '+Country AS Address
FROM Customers;</code></p></li>
<li><p>使用<code>JOIN</code>关键字可以合并两个或连个以上的表的数据行，要基于所有表中的某一列建立一个连接条件。Join有四种：</p>

<ul>
<li>INNER JOIN返回两个表中满足条件的行数据。</li>
<li>LEFT JOIN返回左表所有行数据及满足条件的右表行数据。</li>
<li>RIGHT JOIN返回右表的所有行数据及满足条件的左表行数据。</li>
<li>FULL JOIN返回左表和右表所有行数据行。</li>
</ul>
</li>
<li><p><code>UNION</code>用于合并两个或多个查询结果。要求查询结果的列数及数据类型要一样。</p></li>
<li><p><code>SELECT INTO</code>可以将一个表中数据插入到另一个新表中。如 <code>SELECT *
INTO CustomersBackup2013
FROM Customers;</code>它还有个巧妙的用法是创建一个空的新表格，其schema与后者一致,方法是<code>SELECT *
INTO newtable
FROM table1
WHERE 1=0;</code></p></li>
<li><p><code>INSERT INTO SELECT</code>与<code>SELECT INTO</code>使用较相似，不同的是<code>SELECT INTO</code>会创建新表,而<code>INSERT INTO SELECT</code>是插入到已存在的表中。</p></li>
<li><p>一些常用的SQL函数。（注意这些函数并一定都是通用的，但所有数据库基本上都有类似的功能）</p>

<p><strong>聚合函数</strong></p>

<ul>
<li>AVG() - 求平均值</li>
<li>COUNT() - 返回行数</li>
<li>FIRST() - 返回第一个值</li>
<li>LAST() - 返回最后一个值</li>
<li>MAX() - 返回最大值</li>
<li>MIN() - 返回最小值</li>
<li>SUM() - 求和</li>
</ul>


<p><strong>其他常用函数</strong></p>

<ul>
<li>UCASE() - 转换为大写</li>
<li>LCASE() - 转换为小写</li>
<li>MID() - 提取字符串</li>
<li>LEN() - 获取字符串长度</li>
<li>ROUND() - 对数据进行舍入</li>
<li>NOW() - 返回当前系统时间</li>
<li>FORMAT() - 格式化field的显示</li>
</ul>
</li>
<li><p><code>GROUP BY</code>用于对使用了聚合函数的查询结果进行分组。这是一个很强大的语法。</p></li>
<li><p><code>HAVING</code>用于对使用了聚合函数的字段进行条件筛选。</p></li>
</ol>


<p>如果要详细了解SQL的这些使用的话，我推荐<a href="http://www.w3schools.com/sql/default.asp">http://www.w3schools.com/sql/default.asp</a>。你不仅可以看到说明和示例，也可以随时实时练习。实在是不可不得的好网站。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[项目交付为什么失败？-记我在某个项目中的迷思]]></title>
    <link href="http://www.huangbowen.net/blog/2013/07/28/how-to-deliver-product-successfully/"/>
    <updated>2013-07-28T23:45:00+10:00</updated>
    <id>http://www.huangbowen.net/blog/2013/07/28/how-to-deliver-product-successfully</id>
    <content type="html"><![CDATA[<p><img src="http://www.huangbowen.net/images/success_failure.jpeg" title="" ></p>

<p>上个项目接近尾声，我以developer的身份加入了现在的项目，姑且叫做项目A吧。说实话A项目蛮神奇的，干了一年多了只有一次release，8月初要进行第二次release了，但是测试环境还未搭建好。</p>

<p>该项目是个分布式团队，分布在成都和澳洲两个地方。由于成都这边团队都是清一色的developer，没有qa，严重阻碍了交付的进度。所以我跑到澳洲出差1个月来了解一下整个项目的context，并争取能找出一种解决方案来实现让成都团队中有人能够担任QA职责。目前已经在项目中呆了3周了，2周在成都，1周在澳洲。通过这三周的观察，我总结出了项目中目前存在的一些问题。</p>

<!-- more -->


<ol>
<li><p>此项目是一个一个遗留系统，里面使用到的各种技术很多，有些技术很冷、很偏，维护起来较难。</p></li>
<li><p>此项目相关的依赖也比较严重，大大小小有将近10个依赖项目。</p></li>
<li><p>集成及系统测试环境搭建太晚，严重缺乏及时的端到端测试，导致大量卡被堆积在ready for test中，却没有足够的测试人员来测试。</p></li>
<li><p>由于data security的原因，成都团队无法触及集成测试环境及系统测试环境。（公司是一个保险公司，不允许客户数据被在澳洲以外的人看到）</p></li>
<li><p>成都团队对业务了解不深入（至少在客户这边看来），每张故事卡做完都需要澳洲团队review代码。</p></li>
<li><p>每个人看似都在认真工作，但交付完全跑偏，压力堆积在team leader, Iteration manager等人身上。</p></li>
</ol>


<p>虽然我们称为敏捷团队，但这个团队怎么看也不像是敏捷团队。为什么会导致这么多的问题那？我分析了一下，觉得大致有两方面的原因。</p>

<ol>
<li><p>由于特殊的data security问题，导致了项目不能满足敏捷团队中起码的开放原则。在一个敏捷项目中，首要的就是开放。无论是程序中的每一行代码，还是数据库中的每条数据，都不能是某人或某些人的私有财产，团队中的每个人都能有所触及，这样才不会引起项目中的盲点，导致一个对团队大多数人来说的黑区。而成都团队无法触及项目中的真实客户数据，直接导致了成都团队无法做真正的端到端测试，即使开发者也难对自己开发出的功能进行验证，只能mock掉大部分的集成点。</p></li>
<li><p>团队中的成员没有完全做到以交付为目标。敏捷项目中的最终目标就是以交付产品为目的。如果BA只管给墙上添加story，developer只顾埋头开发story，虽然每个人都在尽力做自己的本职工作，但story并没有很好的进入done column。这是因为由于多种原因，测试环境并没有尽早的搭建起来，大量story堆积到了测试环节，使得一个敏捷项目愣是变成了瀑布型。在这种情况的早期阶段大家就应该要有所觉察，developer应该停止开发story，而是协助QA尽早建立起测试环境，协助QA一起来做测试。大家应该一起关心当前项目的delivery的状况，找出其中的block并商讨出一定的解决方案。</p></li>
</ol>


<p>既然存在这么多的问题，接下来应该怎么做那？我想应该从以下几个方面着手。</p>

<ol>
<li>尽快建立起集成测试及系统测试环境，准备好测试数据，保证测试的正常进行。</li>
<li>和团队人员讨论出一种测试策略，比如采用给集成环境灌输fake data的方式使成都团队能避免或部分避免data security的干扰，能够开展测试。</li>
<li>基于上面几点，建立起端到端的自动化测试，使得QA脱离手工测试的苦海，完善我们的质量保护网。</li>
</ol>


<p>希望自己能在剩余的3周onshore中能够有所进展。其实我比较鼓励大家在做自己手头工作的同时能够多多思考，不能将自己局限在某一个角色之中，这样子才不会日复一日重复昨天的工作，而是在工作中能够有所提高，提升自己的专业能力和职业素养。这些都是日后前进的宝贵财富。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[布里斯班初体验]]></title>
    <link href="http://www.huangbowen.net/blog/2013/07/22/life-in-brisbane/"/>
    <updated>2013-07-22T21:58:00+10:00</updated>
    <id>http://www.huangbowen.net/blog/2013/07/22/life-in-brisbane</id>
    <content type="html"><![CDATA[<p><img src="http://www.huangbowen.net/images/brisbane.jpg"></p>

<p>周一接到通知需要到布里斯班出差一个月，周五就踏上飞机。第一次出国，终于有机会近距离接触“万恶的资本主义”了。虽然在ThoughtWorks出差、出国是家常便饭，但是这是自己第一次出国，还跑这么远，难免有些兴奋。</p>

<!-- more -->


<p>成都没有直飞布里斯班的航班，我是先飞到泰国曼谷，再转机到布里斯班。成都到曼谷只有2个半小时，感觉还是蛮近的。到了曼谷是晚上6点，而转机则是12点起飞，中间有6个小时的时间。自己没有泰国的签证出不了机场，就在机场里面瞎晃悠。曼谷的机场蛮大的，逛了几个小时都没逛完，感觉还有很大一部分没逛。曼谷机场免费wifi，只不过需要去一些airport counter领账号和密码，每个账号密码只有1小时的免费使用时间，好在可以重复领取。12点坐上转机航班后，需要8个半小时到布里斯班。我在飞机上吃了一顿晚餐，一顿早餐。说实话，饭一点也不好吃。</p>

<p>由于时差的关系，到了布里斯班已经是11点多了。找到了接我的司机，一起坐车去酒店。半路上下起了小雨。布里斯班的空气真的很好，秒杀成都啊。市里大部分都是两车道的路，行人、车辆都很遵守交通规则。
到了入住的Oaks hotel,自行check in。我的房间是在40楼，布里斯班的美景尽收眼底，从窗口可以看到布里斯班河，目测离酒店只有10分钟路程。</p>

<p>不得不说酒店房间的设施相当齐备。面积虽然不大，但是一切应有尽有。最让我感叹的是厨房，一小块地方有冰箱、微波炉、烤炉、抽油烟机、燃气灶、刀叉碗碟玻璃杯…….看来自己可以煎牛排和做意大利面了。但是房间所有的插头都是八字三角的那种，问前台要了个万能转换器才让自己的电脑供上电。</p>

<p>一切收拾妥当，下楼逛逛。没走多远就到了CBD步行街。人来人往还是蛮热闹的。说实话这里中国人也不少，时不时就听到身边有人用中文讲话。我还碰到了**功在拉横幅讲话，不过理的人并不多。本来打算去河对岸的摩天轮那边看看，奈何又下起雨来，只得退回来了。</p>

<p>晚上去了同事xn家蹭饭，然后和他老婆三人去ThoughtWorks布里斯班办公室玩。布里斯班办公室很小，但是很温馨，我挺喜欢的。冰箱里有各种软饮，比中国office的要多不少，水果也是蛮多的。还是在ThoughtWorks的办公室有自己地盘的感觉。</p>

<p>第二天和公司两位美女kk和yy一起去吃午饭。坐在布里斯班河边，品着美味佳肴，享受着sunshine，这种感觉太好了。尤其发现我竟然和kk都是来自一个县上的，真是有缘。下午去逛了下超市，买了一些牛奶和零食。这里的超市可以自助结账。自己刷条目，自己付款，非常方便。由于自己只带了一双鞋，还不太合脚，就去bigW买了一双运动鞋，才花了20刀，比在中国还划算。这里的牛奶也比较便宜，2升2刀多的样子，不过味道有点怪，难道是喝习惯了中国的毒奶、合成奶，还不适应外国的纯牛奶了？这里的鸡蛋不太便宜，12个要将近5刀，鸡蛋上都说明了是来自那个farm的，看来品牌意识都蛮强的。周一下班后又去超市买了一大块生牛排，有350克，花了8刀多。这块牛排已经被腌制好了，回到家煎了20分钟就可以吃了。真是便宜又实惠，而且肉的质量又有保证。</p>

<p>布里斯班天黑得比较早，下午5点过点就黑了，所以下班了也没出去逛。等到周末再好好的逛逛。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[走出你的舒适区]]></title>
    <link href="http://www.huangbowen.net/blog/2013/07/21/get-out-of-your-comfort-zone/"/>
    <updated>2013-07-21T00:02:00+10:00</updated>
    <id>http://www.huangbowen.net/blog/2013/07/21/get-out-of-your-comfort-zone</id>
    <content type="html"><![CDATA[<p><img src="http://www.huangbowen.net/images/comfortZone.jpeg"></p>

<p>今天全球CEO来成都office做每月一次的“老郭说事”。在会议的末尾一个应届毕业生问了他一个问题“你是否有每天都需要进步的压力那？”。该毕业生提出这个问题我想很可能是由于她现在处于试用期，感受到了比较大的压力。为了能让毕业生尽快的适应工作节奏，能够独立胜任工作，试用期的员工压力都是很大的。他们要在一定时间内表现出自己，让团队中其他人能够明确看到自己在某段时间内的进步。我们不担心你目前的技术水平，我们关心的是在有限的时间内你能否进步。</p>

<!-- more -->


<p>当时我在试用期的时候，压力也是很大的。虽然我有将近4年的工作经验，但是初来公司，英语不会说两句，Java程序可是从来没摸过，什么TDD、Agile、CI更是了解甚少。在ThoughtWorks的前6个月我承受了巨大的压力，有一段时间每天只睡5，6个小时;每天晚上12点还在读英语;一段英文文章被我读了不下千遍。</p>

<p>而郭晓现在作为全球CEO，那么他有没有这种压力那？郭晓的回答是这样的。他说可以把一个人的知识分为三个区域，舒适区，学习区，恐慌区。舒适区的外围是学习区，学习区的外围是恐慌区。大部分的人都喜欢呆在舒适区里，上班的时候都使用的是自己熟悉的技术，交流的都是些熟悉的人，日子就这样一天天的过。但当你有不满足现状的想法时，你可能就需要走出你的舒适区，踏入学习区。比如你烦透了与java这些繁琐的语言打交道，那么你就要进入你的学习区，去学习ruby、JavaScript等动态语言；比如你在工作中一直做的是Dev，想尝试一下QA，那么你也要去学习自动化测试、安全性测试等。”舒适区和学习区是有交集的，你在学习区扩张的时候，舒适区内掌握的技能能提供相当一部分帮助。而恐慌区则包裹着学习区。当你听到恐慌区中的一些名词时，并不会感到那么舒服，甚至有一丝不安。那表明这样那样的原因，你并未开始涉足这个领域。从舒适区直接跳跃到恐慌区比进入到学习区要困难的多。</p>

<p>郭晓举了这样一个例子。当十几年前他还是developer的时候，有一次公司派他到英国的一个项目上去，让他做一个.net项目的tech leader。而在此之前他只是听说过.net这个词语而已。在登机之前他买了一本关于.net的书，利用有限的时间抓紧翻阅。可以想象当时郭晓承受的压力有多大，但是最后他肯定挺了下来，要不然也不会成为现在的全球CEO。</p>

<p>虽然从舒适区直接跨入恐慌区大部分时候有被逼无奈之嫌。但从舒适区到学习区则更多的靠自身的主动。郭晓说他特别喜欢尝试新东西，虽然大部分的东西都是uesless。在尝试新东西的同时能给他带来一种成就感，同时也逐步扩大的自己的舒适区，将学习区吞并。</p>

<p>回想在ThoughtWorks的一年多中，从别人加压到自我施压，是一个不小的转变。从小到大我们习惯了被父母push，被老师push，到了大学就撒了欢，而加入社会却傻眼了。在公司里有人push那是好事，说明还有人关心你。而没人push则分两种情况。一种是你已经可以self managment,另一种则是对你彻底失望。</p>

<p>每天都要有进步的压力！如果自己能够保持一颗好奇心，勇于向未知领域前进，这种压力其实并不存在。在学习的过程中，随着你的知识领域的扩大，机会对你来说只能越来越多。这是一个很好的良性循环。</p>

<p>记得去年做的一次素质拓展运动，当我从10米断桥上的距离只有1米多宽，如果从平地上跨越这个距离是小菜一碟，但为什么放到10米高空还有保险绳的保护，许多人却犹犹豫豫，畏畏缩缩那？这就是走出了自己的舒适区，心态起了变化而已。当你跨过去以后，才觉得不过如此。
而且当我跳过去以后，往回跳时，教练将宽度又增加了很多。我给教练说太宽了，跳不过去。教练鼓励我说你一定行得。我一咬牙跳了过来。教练给我说：“有些时候不是自己不行，而是自己给自己的要求太低了。”</p>

<p>勇于走出自己的舒适区，直面压力。让人生大道越走越宽。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Homebrew- MAC上的包管理利器]]></title>
    <link href="http://www.huangbowen.net/blog/2013/07/01/homebrew-in-mac/"/>
    <updated>2013-07-01T14:33:00+10:00</updated>
    <id>http://www.huangbowen.net/blog/2013/07/01/homebrew-in-mac</id>
    <content type="html"><![CDATA[<p><img src="http://www.huangbowen.net/images/lotsOfDogs.jpg"></p>

<p>包管理器是神马东西?让我们看看<a href="http://en.wikipedia.org/wiki/Package_management_system">wikipedia</a>上的介绍。</p>

<blockquote><p>In software, a package management system, also called package manager, is a collection of software tools to automate the process of installing, upgrading, configuring, and removing software packages for a computer&#8217;s operating system in a consistent manner.</p></blockquote>

<p>简单的来说，包管理器就是一个提供对一系列软件包的安装、卸载、升级的自动化工具。
包管理器大体分为两种，一种是管理预编译好的软件（Binary installation/Precomplied packages)，如MAC上的App Store，Windows下的Windows installer。另一种是基于源码的安装包，通过编译脚本来安装软件（Sourcecode-based installation/installing using compile scripts），如MAC上的<a href="http://mxcl.github.io/homebrew/">Homebrew</a>，Linux上的apt-build。</p>

<!-- more -->


<p>今天就给大家讲解下<a href="http://mxcl.github.io/homebrew/">Homebrew</a>。</p>

<p><a href="http://mxcl.github.io/homebrew/">Homebrew</a>官网上称自己为:</p>

<blockquote><p>The missing package manager for OS X</p></blockquote>

<p>即自己弥补了在OS X上无包管理器的缺陷。</p>

<h2>需求环境</h2>

<ol>
<li><p>OS X 10.5及其以上版本。</p></li>
<li><p>安装XCode里的<a href="https://developer.apple.com/downloads">开发者工具</a>。主要是因为开发者工具中有mac下的gcc编译器，很多软件需要它。</p></li>
<li><p>ruby。<a href="http://mxcl.github.io/homebrew/">Homebrew</a>使用ruby写的，所以ruby不可或缺。</p></li>
</ol>


<h2>安装<a href="http://mxcl.github.io/homebrew/">Homebrew</a></h2>

<p>只需要在terminal下敲这样一行代码就行。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ruby -e <span class="s2">&quot;$(curl -fsSL https://raw.github.com/mxcl/homebrew/go)&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>brew会被默认安装到/usr/local文件夹中。从上述命令可以看出homebrew是基于ruby的一款包管理器，并且host在github上。</p>

<h2>使用</h2>

<p>在<a href="http://mxcl.github.io/homebrew/">Homebrew</a>中支持安装的软件被称为Formula。</p>

<ul>
<li><p>查看所有支持的Formual。可以在<a href="https://github.com/mxcl/homebrew/tree/master/Library/Formula/">这里</a>查看。如果不能上网的话可以通过<code>brew server</code>来在本地开启一个server来查看。</p></li>
<li><p><code>brew search [Formula]</code>, 搜索某个Formula是否被支持。</p></li>
<li><p><code>brew install [Formula]</code>, 安装某个Formula。</p></li>
<li><p><code>brew upgrade [Formula]</code>, 升级某个Formula。</p></li>
<li><p><code>brew uninstall [Formula]</code>, 删除某个Formula。</p></li>
<li><p><code>brew update</code>, 更新brew支持的Formula列表。</p></li>
</ul>


<p>所有的软件都会默认被安装到<code>/usr/local/Cellar</code>目录下，然后将部分可执行脚本文件通过软链接链接到<code>/usr/local\bin</code>目录下，这样我们就可以在Terminal下使用这些软件。</p>

<p><a href="http://mxcl.github.io/homebrew/">Homebrew</a>对于Formula的管理是基于git的。你可以在<code>/usr/local/</code>下发现有一个<code>.git</code>的文件夹。通过查看<code>.git</code>目录下的<code>config</code>文件，可以知道其实目录是被链接到github上的一个repository。</p>

<figure class='code'><figcaption><span>config</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>[core]
</span><span class='line'>        repositoryformatversion = 0
</span><span class='line'>        filemode = true
</span><span class='line'>        bare = false
</span><span class='line'>        logallrefupdates = true
</span><span class='line'>        ignorecase = true
</span><span class='line'>        autocrlf = false
</span><span class='line'>[remote &quot;origin&quot;]
</span><span class='line'>        url = https://github.com/mxcl/homebrew.git
</span><span class='line'>        fetch = +refs/heads/*:refs/remotes/origin/*
</span></code></pre></td></tr></table></div></figure>


<p>你也可以为自己的软件加入到<a href="http://mxcl.github.io/homebrew/">Homebrew</a>的支持列表中。只需要写一个ruby脚本check in到其<a href="https://github.com/mxcl/homebrew">github</a>中。
下面是一个脚本示例。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;formula&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Wget</span> <span class="o">&lt;</span> <span class="no">Formula</span>
</span><span class='line'>  <span class="n">homepage</span> <span class="s1">&#39;http://www.gnu.org/wget/&#39;</span>
</span><span class='line'>  <span class="n">url</span> <span class="s1">&#39;http://ftp.gnu.org/wget-1.12.tar.gz&#39;</span>
</span><span class='line'>  <span class="n">md5</span> <span class="s1">&#39;308a5476fc096a8a525d07279a6f6aa3&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">install</span>
</span><span class='line'>    <span class="nb">system</span> <span class="s2">&quot;./configure --prefix=</span><span class="si">#{</span><span class="n">prefix</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="nb">system</span> <span class="s1">&#39;make install&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>当然<a href="http://mxcl.github.io/homebrew/">Homebrew</a>接收这些软件也是有一定条件的，可以看<a href="https://github.com/mxcl/homebrew/wiki/Acceptable-Formulae">这个文档</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java经典类库-Guava中的函数式编程讲解]]></title>
    <link href="http://www.huangbowen.net/blog/2013/06/28/functional-programming-in-guava/"/>
    <updated>2013-06-28T01:31:00+10:00</updated>
    <id>http://www.huangbowen.net/blog/2013/06/28/functional-programming-in-guava</id>
    <content type="html"><![CDATA[<p><img src="http://www.huangbowen.net/images/FP.jpg"></p>

<p>如果我要新建一个java的项目，那么有两个类库是必备的，一个是junit，另一个是<a href="https://code.google.com/p/guava-libraries/">Guava</a>。选择junit，因为我喜欢TDD，喜欢自动化测试。而是用<a href="https://code.google.com/p/guava-libraries/">Guava</a>，是因为我喜欢简洁的API。<a href="https://code.google.com/p/guava-libraries/">Guava</a>提供了很多的实用工具函数来弥补java标准库的不足，另外<a href="https://code.google.com/p/guava-libraries/">Guava</a>还引入了函数式编程的概念，在一定程度上缓解了java在JDK1.8之前没有lambda的缺陷，使使用java书写简洁易读的函数式风格的代码成为可能。</p>

<!-- more -->


<p>下面就简单的介绍下<a href="https://code.google.com/p/guava-libraries/">Guava</a>中的一些体现了函数式编程的API。</p>

<h2>Filter</h2>

<p>我们先创建一个简单的Person类。</p>

<figure class='code'><figcaption><span>Person.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getAge</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">age</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setAge</span><span class="o">(</span><span class="kt">int</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">age</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">Person</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">age</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果要产生一个Person类的List，通常的写法可能是这样子。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="n">people</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;();</span>
</span><span class='line'>        <span class="n">people</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Person</span><span class="o">(</span><span class="s">&quot;bowen&quot;</span><span class="o">,</span><span class="mi">27</span><span class="o">));</span>
</span><span class='line'>        <span class="n">people</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Person</span><span class="o">(</span><span class="s">&quot;bob&quot;</span><span class="o">,</span> <span class="mi">20</span><span class="o">));</span>
</span><span class='line'>        <span class="n">people</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Person</span><span class="o">(</span><span class="s">&quot;Katy&quot;</span><span class="o">,</span> <span class="mi">18</span><span class="o">));</span>
</span><span class='line'>        <span class="n">people</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Person</span><span class="o">(</span><span class="s">&quot;Logon&quot;</span><span class="o">,</span> <span class="mi">24</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>而<a href="https://code.google.com/p/guava-libraries/">Guava</a>提供了一个newArrayList的方法，其自带类型推演，并可以方便的生成一个List,并且通过参数传递初始化值。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="n">people</span> <span class="o">=</span> <span class="n">newArrayList</span><span class="o">(</span><span class="k">new</span> <span class="n">Person</span><span class="o">(</span><span class="s">&quot;bowen&quot;</span><span class="o">,</span> <span class="mi">27</span><span class="o">),</span>
</span><span class='line'>                <span class="k">new</span> <span class="nf">Person</span><span class="o">(</span><span class="s">&quot;bob&quot;</span><span class="o">,</span> <span class="mi">20</span><span class="o">),</span>
</span><span class='line'>                <span class="k">new</span> <span class="nf">Person</span><span class="o">(</span><span class="s">&quot;Katy&quot;</span><span class="o">,</span> <span class="mi">18</span><span class="o">),</span>
</span><span class='line'>                <span class="k">new</span> <span class="nf">Person</span><span class="o">(</span><span class="s">&quot;Logon&quot;</span><span class="o">,</span> <span class="mi">24</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>当然，这不算函数式编程的范畴，这是<a href="https://code.google.com/p/guava-libraries/">Guava</a>给我们提供的一个实用的函数。</p>

<p>如果我们选取其中年龄大于20的人，通常的写法可能是这样子。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="n">oldPeople</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;();</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">Person</span> <span class="n">person</span> <span class="o">:</span> <span class="n">people</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">person</span><span class="o">.</span><span class="na">getAge</span><span class="o">()</span> <span class="o">&gt;=</span> <span class="mi">20</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">oldPeople</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">person</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这就是典型的filter模式。filter即从一个集合中根据一个条件筛选元素。其中person.getAge() >=20就是这个条件。<a href="https://code.google.com/p/guava-libraries/">Guava</a>为这种模式提供了一个filter的方法。所以我们可以这样写。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="n">oldPeople</span> <span class="o">=</span> <span class="n">newArrayList</span><span class="o">(</span><span class="n">filter</span><span class="o">(</span><span class="n">people</span><span class="o">,</span> <span class="k">new</span> <span class="n">Predicate</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">apply</span><span class="o">(</span><span class="n">Person</span> <span class="n">person</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">person</span><span class="o">.</span><span class="na">getAge</span><span class="o">()</span> <span class="o">&gt;=</span> <span class="mi">20</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}));</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里的Predicate是<a href="https://code.google.com/p/guava-libraries/">Guava</a>中的一个接口，我们来看看它的定义。</p>

<figure class='code'><figcaption><span>Predicate.java </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@GwtCompatible</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Predicate</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Returns the result of applying this predicate to {@code input}. This method is &lt;i&gt;generally</span>
</span><span class='line'><span class="cm">   * expected&lt;/i&gt;, but not absolutely required, to have the following properties:</span>
</span><span class='line'><span class="cm">   *</span>
</span><span class='line'><span class="cm">   * &lt;ul&gt;</span>
</span><span class='line'><span class="cm">   * &lt;li&gt;Its execution does not cause any observable side effects.</span>
</span><span class='line'><span class="cm">   * &lt;li&gt;The computation is &lt;i&gt;consistent with equals&lt;/i&gt;; that is, {@link Objects#equal</span>
</span><span class='line'><span class="cm">   *     Objects.equal}{@code (a, b)} implies that {@code predicate.apply(a) ==</span>
</span><span class='line'><span class="cm">   *     predicate.apply(b))}.</span>
</span><span class='line'><span class="cm">   * &lt;/ul&gt;</span>
</span><span class='line'><span class="cm">   *</span>
</span><span class='line'><span class="cm">   * @throws NullPointerException if {@code input} is null and this predicate does not accept null</span>
</span><span class='line'><span class="cm">   *     arguments</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="kt">boolean</span> <span class="nf">apply</span><span class="o">(</span><span class="nd">@Nullable</span> <span class="n">T</span> <span class="n">input</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Indicates whether another object is equal to this predicate.</span>
</span><span class='line'><span class="cm">   *</span>
</span><span class='line'><span class="cm">   * &lt;p&gt;Most implementations will have no reason to override the behavior of {@link Object#equals}.</span>
</span><span class='line'><span class="cm">   * However, an implementation may also choose to return {@code true} whenever {@code object} is a</span>
</span><span class='line'><span class="cm">   * {@link Predicate} that it considers &lt;i&gt;interchangeable&lt;/i&gt; with this one. &quot;Interchangeable&quot;</span>
</span><span class='line'><span class="cm">   * &lt;i&gt;typically&lt;/i&gt; means that {@code this.apply(t) == that.apply(t)} for all {@code t} of type</span>
</span><span class='line'><span class="cm">   * {@code T}). Note that a {@code false} result from this method does not imply that the</span>
</span><span class='line'><span class="cm">   * predicates are known &lt;i&gt;not&lt;/i&gt; to be interchangeable.</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="nd">@Nullable</span> <span class="n">Object</span> <span class="n">object</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>里面只有一个apply方法，接收一个泛型的实参，返回一个boolean值。由于java世界中函数并不是一等公民，所以我们无法直接传递一个条件函数，只能通过Predicate这个类包装一下。</p>

<h2>And Predicate</h2>

<p>如果要再实现一个方法来查找People列表中所有名字中包含b字母的列表，我们可以用<a href="https://code.google.com/p/guava-libraries/">Guava</a>简单的实现。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="n">namedPeople</span> <span class="o">=</span> <span class="n">newArrayList</span><span class="o">(</span><span class="n">filter</span><span class="o">(</span><span class="n">people</span><span class="o">,</span> <span class="k">new</span> <span class="n">Predicate</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">apply</span><span class="o">(</span><span class="n">Person</span> <span class="n">person</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">person</span><span class="o">.</span><span class="na">getName</span><span class="o">().</span><span class="na">contains</span><span class="o">(</span><span class="s">&quot;b&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}));</span>
</span></code></pre></td></tr></table></div></figure>


<p>一切是这么的简单。
那么新需求来了，如果现在需要找年龄>=20并且名称包含b的人，该如何实现那？
可能你会这样写。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="n">filteredPeople</span> <span class="o">=</span> <span class="n">newArrayList</span><span class="o">(</span><span class="n">filter</span><span class="o">(</span><span class="n">people</span><span class="o">,</span> <span class="k">new</span> <span class="n">Predicate</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">apply</span><span class="o">(</span><span class="n">Person</span> <span class="n">person</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">person</span><span class="o">.</span><span class="na">getName</span><span class="o">().</span><span class="na">contains</span><span class="o">(</span><span class="s">&quot;b&quot;</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">person</span><span class="o">.</span><span class="na">getAge</span><span class="o">()</span> <span class="o">&gt;=</span> <span class="mi">20</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}));</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样写的话就有一定的代码重复，因为之前我们已经写了两个Predicate来分别实现这两个条件判断，能不能重用之前的Predicate那？答案是能。
我们首先将之前生成年龄判断和名称判断的两个Predicate抽成方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">private</span> <span class="n">Predicate</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="nf">ageBiggerThan</span><span class="o">(</span><span class="kd">final</span> <span class="kt">int</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="n">Predicate</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">apply</span><span class="o">(</span><span class="n">Person</span> <span class="n">person</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">person</span><span class="o">.</span><span class="na">getAge</span><span class="o">()</span> <span class="o">&gt;=</span> <span class="n">age</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">};</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="n">Predicate</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="nf">nameContains</span><span class="o">(</span><span class="kd">final</span> <span class="n">String</span> <span class="n">str</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="n">Predicate</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">apply</span><span class="o">(</span><span class="n">Person</span> <span class="n">person</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">person</span><span class="o">.</span><span class="na">getName</span><span class="o">().</span><span class="na">contains</span><span class="o">(</span><span class="n">str</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">};</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>而我们的结果其实就是这两个Predicate相与。<a href="https://code.google.com/p/guava-libraries/">Guava</a>给我们提供了and方法，用于对一组Predicate求与。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>      <span class="n">List</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="n">filteredPeople</span> <span class="o">=</span> <span class="n">newArrayList</span><span class="o">(</span><span class="n">filter</span><span class="o">(</span><span class="n">people</span><span class="o">,</span> <span class="n">and</span><span class="o">(</span><span class="n">ageBiggerThan</span><span class="o">(</span><span class="mi">20</span><span class="o">),</span> <span class="n">nameContains</span><span class="o">(</span><span class="s">&quot;b&quot;</span><span class="o">))));</span>
</span></code></pre></td></tr></table></div></figure>


<p>由于and接收一组Predicate，返回也是一个Predicate，所以可以直接作为filter的第二个参数。如果不熟悉函数式编程的人可能感觉有点怪异，但是习惯了就会觉得它的强大与简洁。
当然除了and，<a href="https://code.google.com/p/guava-libraries/">Guava</a>还为我们提供了or，用于对一组Predicate求或。这里就不多讲了，大家可以自己练习下。</p>

<h2>Map(transform)</h2>

<p>列表操作还有另一个常见的模式，就是将数组中的所有元素映射为另一种元素的列表，这就是map pattern。举个例子，求People列表中的所有人名。程序员十有八九都会这样写。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">names</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;();</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">Person</span> <span class="n">person</span> <span class="o">:</span> <span class="n">people</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">names</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">person</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>        <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://code.google.com/p/guava-libraries/">Guava</a>已经给我们提供了这种Pattern的结果办法，那就是使用transform方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">names</span> <span class="o">=</span> <span class="n">newArrayList</span><span class="o">(</span><span class="n">transform</span><span class="o">(</span><span class="n">people</span><span class="o">,</span> <span class="k">new</span> <span class="n">Function</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">public</span> <span class="n">String</span> <span class="nf">apply</span><span class="o">(</span> <span class="n">Person</span> <span class="n">person</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">person</span><span class="o">.</span><span class="na">getName</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}));</span>
</span></code></pre></td></tr></table></div></figure>


<p>Function是另外一种用于封装函数的接口对象。它的定义如下:</p>

<figure class='code'><figcaption><span>Function.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@GwtCompatible</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Function</span><span class="o">&lt;</span><span class="n">F</span><span class="o">,</span> <span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Returns the result of applying this function to {@code input}. This method is &lt;i&gt;generally</span>
</span><span class='line'><span class="cm">   * expected&lt;/i&gt;, but not absolutely required, to have the following properties:</span>
</span><span class='line'><span class="cm">   *</span>
</span><span class='line'><span class="cm">   * &lt;ul&gt;</span>
</span><span class='line'><span class="cm">   * &lt;li&gt;Its execution does not cause any observable side effects.</span>
</span><span class='line'><span class="cm">   * &lt;li&gt;The computation is &lt;i&gt;consistent with equals&lt;/i&gt;; that is, {@link Objects#equal</span>
</span><span class='line'><span class="cm">   *     Objects.equal}{@code (a, b)} implies that {@code Objects.equal(function.apply(a),</span>
</span><span class='line'><span class="cm">   *     function.apply(b))}.</span>
</span><span class='line'><span class="cm">   * &lt;/ul&gt;</span>
</span><span class='line'><span class="cm">   *</span>
</span><span class='line'><span class="cm">   * @throws NullPointerException if {@code input} is null and this function does not accept null</span>
</span><span class='line'><span class="cm">   *     arguments</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="nd">@Nullable</span> <span class="n">T</span> <span class="n">apply</span><span class="o">(</span><span class="nd">@Nullable</span> <span class="n">F</span> <span class="n">input</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Indicates whether another object is equal to this function.</span>
</span><span class='line'><span class="cm">   *</span>
</span><span class='line'><span class="cm">   * &lt;p&gt;Most implementations will have no reason to override the behavior of {@link Object#equals}.</span>
</span><span class='line'><span class="cm">   * However, an implementation may also choose to return {@code true} whenever {@code object} is a</span>
</span><span class='line'><span class="cm">   * {@link Function} that it considers &lt;i&gt;interchangeable&lt;/i&gt; with this one. &quot;Interchangeable&quot;</span>
</span><span class='line'><span class="cm">   * &lt;i&gt;typically&lt;/i&gt; means that {@code Objects.equal(this.apply(f), that.apply(f))} is true for all</span>
</span><span class='line'><span class="cm">   * {@code f} of type {@code F}. Note that a {@code false} result from this method does not imply</span>
</span><span class='line'><span class="cm">   * that the functions are known &lt;i&gt;not&lt;/i&gt; to be interchangeable.</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="nd">@Nullable</span> <span class="n">Object</span> <span class="n">object</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>它与Predicate非常相似，但不同的是它接收两个泛型，apply方法接收一种泛型实参，返回值是另一种泛型值。正是这个apply方法定义了数组间元素一对一的map规则。</p>

<h2>reduce</h2>

<p>除了filter与map模式外，列表操作还有一种reduce操作。比如求people列表中所有人年龄的和。<a href="https://code.google.com/p/guava-libraries/">Guava</a>并未提供reduce方法。具体原因我们并不清楚。但是我们可以自己简单的实现一个reduce pattern。
先定义一个Func的接口。</p>

<figure class='code'><figcaption><span>Func.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>     <span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Func</span><span class="o">&lt;</span><span class="n">F</span><span class="o">,</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>         <span class="n">T</span> <span class="nf">apply</span><span class="o">(</span><span class="n">F</span> <span class="n">currentElement</span><span class="o">,</span> <span class="n">T</span> <span class="n">origin</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>     <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>apply方法的第一个参数为列表中的当前元素，第二个参数为默认值，返回值类型为默认值类型。
然后我们定义个reduce的静态方法。</p>

<figure class='code'><figcaption><span>Reduce.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Reduce</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="nf">Reduce</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="n">F</span><span class="o">,</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">T</span> <span class="n">reduce</span><span class="o">(</span><span class="kd">final</span> <span class="n">Iterable</span><span class="o">&lt;</span><span class="n">F</span><span class="o">&gt;</span> <span class="n">iterable</span><span class="o">,</span> <span class="kd">final</span> <span class="n">Func</span><span class="o">&lt;</span><span class="n">F</span><span class="o">,</span> <span class="n">T</span><span class="o">&gt;</span> <span class="n">func</span><span class="o">,</span> <span class="n">T</span> <span class="n">origin</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">Iterator</span> <span class="n">iterator</span> <span class="o">=</span> <span class="n">iterable</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span> <span class="n">iterator</span><span class="o">.</span><span class="na">hasNext</span><span class="o">();</span> <span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">origin</span> <span class="o">=</span> <span class="n">func</span><span class="o">.</span><span class="na">apply</span><span class="o">((</span><span class="n">F</span><span class="o">)(</span><span class="n">iterator</span><span class="o">.</span><span class="na">next</span><span class="o">()),</span> <span class="n">origin</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">origin</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>reduce方法接收三个参数，第一个是需要进行reduce操作的列表，第二个是封装reduce操作的Func，第三个参数是初始值。</p>

<p>我们可以使用这个reduce来实现求people列表中所有人的年龄之和。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>        <span class="n">Integer</span> <span class="n">ages</span> <span class="o">=</span> <span class="n">Reduce</span><span class="o">.</span><span class="na">reduce</span><span class="o">(</span><span class="n">people</span><span class="o">,</span> <span class="k">new</span> <span class="n">Func</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="kd">public</span> <span class="n">Integer</span> <span class="nf">apply</span><span class="o">(</span><span class="n">Person</span> <span class="n">person</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">origin</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">person</span><span class="o">.</span><span class="na">getAge</span><span class="o">()</span> <span class="o">+</span> <span class="n">origin</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">},</span> <span class="mi">0</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们也可以轻松的写一个方法来得到年龄的最大值。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>        <span class="n">Integer</span> <span class="n">maxAge</span> <span class="o">=</span> <span class="n">Reduce</span><span class="o">.</span><span class="na">reduce</span><span class="o">(</span><span class="n">people</span><span class="o">,</span> <span class="k">new</span> <span class="n">Func</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="kd">public</span> <span class="n">Integer</span> <span class="nf">apply</span><span class="o">(</span><span class="n">Person</span> <span class="n">person</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">origin</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">person</span><span class="o">.</span><span class="na">getAge</span><span class="o">()</span> <span class="o">&gt;</span> <span class="n">origin</span> <span class="o">?</span> <span class="n">person</span><span class="o">.</span><span class="na">getAge</span><span class="o">()</span> <span class="o">:</span> <span class="n">origin</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">},</span> <span class="mi">0</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Fluent pattern</h2>

<p>现在新需求来了，需要找出年龄>=20岁的人的所有名称。该如何操作那？我们可以使用filter过滤出年龄>=20的人，然后使用transform得到剩下的所有人的人名。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">private</span> <span class="n">Function</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">getName</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="n">Function</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">public</span> <span class="n">String</span> <span class="nf">apply</span><span class="o">(</span> <span class="n">Person</span> <span class="n">person</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">person</span><span class="o">.</span><span class="na">getName</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">};</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">getPeopleNamesByAge</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">names</span> <span class="o">=</span> <span class="n">newArrayList</span><span class="o">(</span><span class="n">transform</span><span class="o">(</span><span class="n">filter</span><span class="o">(</span><span class="n">people</span><span class="o">,</span> <span class="n">ageBiggerThan</span><span class="o">(</span><span class="mi">20</span><span class="o">)),</span> <span class="n">getName</span><span class="o">()));</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样括号套括号的着实不好看。能不能改进一下那？<a href="https://code.google.com/p/guava-libraries/">Guava</a>为我们提供了fluent模式的API,我们可以这样来写。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>      <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">names</span> <span class="o">=</span> <span class="n">from</span><span class="o">(</span><span class="n">people</span><span class="o">).</span><span class="na">filter</span><span class="o">(</span><span class="n">ageBiggerThan</span><span class="o">(</span><span class="mi">20</span><span class="o">)).</span><span class="na">transform</span><span class="o">(</span><span class="n">getName</span><span class="o">()).</span><span class="na">toList</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://code.google.com/p/guava-libraries/">Guava</a>中还有很多好玩的东西，大家时间可以多发掘发掘。这篇文章的源码已经被我放置到<a href="https://github.com/huangbowen521/SpringMessageSpike">github</a>中，感兴趣的可以自行查看。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用WebDriver遇到的那些坑]]></title>
    <link href="http://www.huangbowen.net/blog/2013/06/25/practice-of-webdriver/"/>
    <updated>2013-06-25T22:00:00+10:00</updated>
    <id>http://www.huangbowen.net/blog/2013/06/25/practice-of-webdriver</id>
    <content type="html"><![CDATA[<p><img src="http://www.huangbowen.net/images/automatedRobot.png"></p>

<p>在做web项目的自动化端到端测试时主要使用的是<a href="http://docs.seleniumhq.org/projects/webdriver/">Selenium WebDriver</a>来驱动浏览器。<a href="http://docs.seleniumhq.org/projects/webdriver/">Selenium WebDriver</a>的优点是支持的语言多，支持的浏览器多。主流的浏览器Chrome、Firefox、IE等都支持，手机上的浏览器Android、IPhone等也支持，甚至还支持<a href="http://phantomjs.org/">PhantomJS</a>（由于PhantomJS跑测试时并不需要渲染元素，所以执行速度快）。</p>

<!-- more -->


<p>但是我在使用<a href="http://docs.seleniumhq.org/projects/webdriver/">Selenium WebDriver</a>时，遇到了很多坑。这些问题，有的是因为<a href="http://docs.seleniumhq.org/projects/webdriver/">Selenium WebDriver</a>与浏览器不同版本之间兼容性的问题，有的是<a href="http://docs.seleniumhq.org/projects/webdriver/">Selenium WebDriver</a>本身的bug，当然也不乏自己对<a href="http://docs.seleniumhq.org/projects/webdriver/">Selenium WebDriver</a>某些功能理解不透彻。我花时间总结了一下，分享给大家，希望大家以后遇到问题可以避过这些坑，少走弯路。另外也总结了一些使用WebDriver的比较好的实践，也一并分享给大家。</p>

<ul>
<li><strong>WebDriver每次启动一个Firefox的实例时，会生成一个匿名的profile，并不会使用当前Firefox的profile。这点一定要注意。比如如果访问被测试的web服务需要通过代理，你想直接设置Firefox的代理是行不通的，因为WebDriver启动的Firefox实例并不会使用你这个profile，正确的做法是通过FirefoxProfile来设置。</strong></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">WebDriver</span> <span class="nf">create</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">FirefoxProfile</span> <span class="n">firefoxProfile</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FirefoxProfile</span><span class="o">();</span>
</span><span class='line'>  <span class="n">firefoxProfile</span><span class="o">.</span><span class="na">setPreference</span><span class="o">(</span><span class="s">&quot;network.proxy.type&quot;</span><span class="o">,</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>  <span class="n">firefoxProfile</span><span class="o">.</span><span class="na">setPreference</span><span class="o">(</span><span class="s">&quot;network.proxy.http&quot;</span><span class="o">,</span><span class="n">yourProxy</span><span class="o">);</span>
</span><span class='line'>  <span class="n">firefoxProfile</span><span class="o">.</span><span class="na">setPreference</span><span class="o">(</span><span class="s">&quot;network.proxy.http_port&quot;</span><span class="o">,</span><span class="n">yourPort</span><span class="o">);</span>
</span><span class='line'>  <span class="n">firefoxProfile</span><span class="o">.</span><span class="na">setPreference</span><span class="o">(</span><span class="s">&quot;network.proxy.no_proxies_on&quot;</span><span class="o">,</span><span class="s">&quot;&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="k">new</span> <span class="nf">FirefoxDriver</span><span class="o">(</span><span class="n">firefoxProfile</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过FirefoProfile也可以设置Firefox其它各种配置。如果要默认给Firefox安装插件的话，可以将插件放置到Firefox安装目录下的默认的plugin文件夹中，这样即使是使用一个全新的profile也可以应用此plugin。</p>

<ul>
<li><strong>使用WebDriver点击界面上Button元素时，如果当前Button元素被界面上其他元素遮住了，或没出现在界面中（比如Button在页面底部，但是屏幕只能显示页面上半部分），使用默认的WebElement.Click()可能会触发不了Click事件。</strong></li>
</ul>


<p>修正方案是找到该页面元素后直接发送一条Click的JavaScript指令。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">((</span><span class="n">JavascriptExecutor</span><span class="o">)</span><span class="n">webDriver</span><span class="o">).</span><span class="na">executeScript</span><span class="o">(</span><span class="s">&quot;arguments[0].click();&quot;</span><span class="o">,</span> <span class="n">webElement</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>当进行了一些操作发生页面跳转时，最好加一个Wait方法等待page load完成再进行后续操作。方法是在某个时间段内判断document.readyState是不是complete。</strong></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">protected</span> <span class="n">Function</span><span class="o">&lt;</span><span class="n">WebDriver</span><span class="o">,</span> <span class="n">Boolean</span><span class="o">&gt;</span> <span class="n">isPageLoaded</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="n">Function</span><span class="o">&lt;</span><span class="n">WebDriver</span><span class="o">,</span> <span class="n">Boolean</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="n">Boolean</span> <span class="nf">apply</span><span class="o">(</span><span class="n">WebDriver</span> <span class="n">driver</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="o">((</span><span class="n">JavascriptExecutor</span><span class="o">)</span> <span class="n">driver</span><span class="o">).</span><span class="na">executeScript</span><span class="o">(</span><span class="s">&quot;return document.readyState&quot;</span><span class="o">).</span><span class="na">equals</span><span class="o">(</span><span class="s">&quot;complete&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">};</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">waitForPageLoad</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">WebDriverWait</span> <span class="n">wait</span> <span class="o">=</span> <span class="k">new</span> <span class="n">WebDriverWait</span><span class="o">(</span><span class="n">webDriver</span><span class="o">,</span> <span class="mi">30</span><span class="o">);</span>
</span><span class='line'>        <span class="n">wait</span><span class="o">.</span><span class="na">until</span><span class="o">(</span><span class="n">isPageLoaded</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>如果页面有Ajax操作，需要写一个Wait方法等待Ajax操作完成。方式与上一条中的基本相同。比如一个Ajax操作是用于向DropDownList中填充数据，则写一个方法判断该DropDownList中元素是否多余0个。</strong></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">private</span> <span class="n">Function</span><span class="o">&lt;</span><span class="n">WebDriver</span><span class="o">,</span> <span class="n">Boolean</span><span class="o">&gt;</span> <span class="n">haveMoreThanOneOption</span><span class="o">(</span><span class="kd">final</span> <span class="n">By</span> <span class="n">element</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="n">Function</span><span class="o">&lt;</span><span class="n">WebDriver</span><span class="o">,</span> <span class="n">Boolean</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="n">Boolean</span> <span class="nf">apply</span><span class="o">(</span><span class="n">WebDriver</span> <span class="n">driver</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">WebElement</span> <span class="n">webElement</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="na">findElement</span><span class="o">(</span><span class="n">element</span><span class="o">);</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">webElement</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                    <span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="n">webElement</span><span class="o">.</span><span class="na">findElements</span><span class="o">(</span><span class="n">By</span><span class="o">.</span><span class="na">tagName</span><span class="o">(</span><span class="s">&quot;option&quot;</span><span class="o">)).</span><span class="na">size</span><span class="o">();</span>
</span><span class='line'>                    <span class="k">return</span> <span class="n">size</span> <span class="o">&gt;=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">};</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">waitForDropDownListLoaded</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">WebDriverWait</span> <span class="n">wait</span> <span class="o">=</span> <span class="k">new</span> <span class="n">WebDriverWait</span><span class="o">(</span><span class="n">webDriver</span><span class="o">,</span> <span class="mi">30</span><span class="o">);</span>
</span><span class='line'>        <span class="n">wait</span><span class="o">.</span><span class="na">until</span><span class="o">(</span><span class="n">isPageLoaded</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>以此类推，我们可以判断某个元素是否呈现、某个class是否append成功等一系列方法来判断ajax是否执行完成。</p>

<ul>
<li><strong>如果网站使用了JQuery的动画效果，我们在运行测试的时候其实可以disable JQuery的animation，一方面可以加快测试的速度，另一方面可以加强测试的稳定性（如果启用了Animation，使用WebDriver驱动浏览器时可能会出现一些无法预料的异常）。</strong></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">((</span><span class="n">JavascriptExecutor</span><span class="o">)</span><span class="n">driver</span><span class="o">).</span><span class="na">executeScript</span><span class="o">(</span><span class="s">&quot;jQuery.fx.off=true&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>由于WebDriver要驱动浏览器，所以测试运行的时间比较长，我们可以并行跑测试以节省时间。如果你使用的是maven构建工具，可以配置surefire plugin时，在configruation节点加入以下配置。</strong></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;parallel&gt;</span>classes<span class="nt">&lt;/parallel&gt;</span>
</span><span class='line'><span class="nt">&lt;threadCount&gt;</span>3<span class="nt">&lt;/threadCount&gt;</span>
</span><span class='line'><span class="nt">&lt;perCoreThreadCount&gt;</span>false<span class="nt">&lt;/perCoreThreadCount&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>当测试fail的时候，如果当前使用的WebDriver实现了TakesScreenshot接口，我们就可以调用相应的方法截下当前浏览器呈现的web页面，这样有利于快速定位出错的原因。</strong></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">getScreenShot</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">webDriver</span> <span class="k">instanceof</span> <span class="n">TakesScreenshot</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">TakesScreenshot</span> <span class="n">screenshotTaker</span> <span class="o">=</span> <span class="o">(</span><span class="n">TakesScreenshot</span><span class="o">)</span> <span class="n">webDriver</span><span class="o">;</span>
</span><span class='line'>            <span class="n">File</span> <span class="n">file</span> <span class="o">=</span> <span class="n">screenshotTaker</span><span class="o">.</span><span class="na">getScreenshotAs</span><span class="o">(</span><span class="n">savePath</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p><strong>如果页面弹出了浏览器自带的警告框（使用JavaScript的Alert方法），<a href="http://docs.seleniumhq.org/projects/webdriver/">Selenium WebDriver</a>在点选次警告框时会偶发性失败。具体原因还未查明。解决方案是尽量不使用Alert方法的警告框，而是自己实现模式窗口（比如Jquery UI的模式窗口）来实现警告框效果。这样即保证了测试的稳定性，另外我们自己可以控制警告框的样式，给用户带来更好的体验。</strong></p></li>
<li><p><strong>经常更新Selenium的版本。注意经常上Selenium的<a href="http://docs.seleniumhq.org/">官网</a>看是否发布了新的版本，新的版本都修复了那些bug，如果包含你遇到的bug，就可以升级到目前的版本。</strong></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CheckStyle, 强制你遵循编码规范]]></title>
    <link href="http://www.huangbowen.net/blog/2013/06/21/introduce-checkstyle/"/>
    <updated>2013-06-21T13:53:00+10:00</updated>
    <id>http://www.huangbowen.net/blog/2013/06/21/introduce-checkstyle</id>
    <content type="html"><![CDATA[<p><img src="http://www.huangbowen.net/images/CheckStyle.png"></p>

<p>如今代码静态检查越来越重要，已经成为构建高质量软件的不可或缺的一个验证步骤。如果你使用的是java语言，那么<a href="http://checkstyle.sourceforge.net/">CheckStyle</a>则是一个利器。
<a href="http://checkstyle.sourceforge.net/">CheckStyle</a>能够帮助程序员检查代码是否符合制定的规范。通过将<a href="http://checkstyle.sourceforge.net/">CheckStyle</a>的检查引入到项目构建中，可以强制让项目中的所有的开发者遵循制定规范，而不是仅仅停留在纸面上。如果发现代码违反了标准，比如类名未以大写开头、单个方法超过了指定行数、甚至单个方法抛出了3个以上的异常等。这些检查由于是基于源码的，所以不需要编译，执行速度快。</p>

<!-- more -->


<p><a href="http://checkstyle.sourceforge.net/">CheckStyle</a>有针对不同IDE和构建工具的各种插件，方便开发者随时随地对代码进行静态检查。下面就讲解下如何将<a href="http://checkstyle.sourceforge.net/">CheckStyle</a>引入到maven构建中。</p>

<h2>配置CheckStyle插件</h2>

<p>在maven中一个名为<code>maven-checkstyle-plugin</code>的插件，用于执行<a href="http://checkstyle.sourceforge.net/">CheckStyle</a> task。下面是一个简单的配置。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>org.apache.maven.plugins<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>maven-checkstyle-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version&gt;</span>2.10<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>    <span class="nt">&lt;executions&gt;</span>
</span><span class='line'>        <span class="nt">&lt;execution&gt;</span>
</span><span class='line'>            <span class="nt">&lt;id&gt;</span>checkstyle<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>            <span class="nt">&lt;phase&gt;</span>validate<span class="nt">&lt;/phase&gt;</span>
</span><span class='line'>            <span class="nt">&lt;goals&gt;</span>
</span><span class='line'>                <span class="nt">&lt;goal&gt;</span>check<span class="nt">&lt;/goal&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/goals&gt;</span>
</span><span class='line'>            <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>                <span class="nt">&lt;failOnViolation&gt;</span>true<span class="nt">&lt;/failOnViolation&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/execution&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/executions&gt;</span>
</span><span class='line'><span class="nt">&lt;/plugin&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们定义了在maven lifecycle的validate阶段执行check task，并且如果发现有违反标准的情况就会fail当前的build。</p>

<p>maven-checkstyle-plugin内置了4种规范.</p>

<ul>
<li>config/sun_checks.xml</li>
<li>config/maven_checks.xml</li>
<li>config/turbine_checks.xml</li>
<li>config/avalon_checks.xml</li>
</ul>


<p>其中sun_checks.xml为默认值。如果想要使用其他三种规范，则只需配置configuration。下面是使用maven_checks.xml的示例。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>org.apache.maven.plugins<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>maven-checkstyle-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version&gt;</span>2.10<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>    <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>        <span class="nt">&lt;configLocation&gt;</span>config/maven_checks.xml<span class="nt">&lt;/configLocation&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>    <span class="nt">&lt;executions&gt;</span>
</span><span class='line'>        <span class="nt">&lt;execution&gt;</span>
</span><span class='line'>            <span class="nt">&lt;id&gt;</span>checkstyle<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>            <span class="nt">&lt;phase&gt;</span>validate<span class="nt">&lt;/phase&gt;</span>
</span><span class='line'>            <span class="nt">&lt;goals&gt;</span>
</span><span class='line'>                <span class="nt">&lt;goal&gt;</span>check<span class="nt">&lt;/goal&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/goals&gt;</span>
</span><span class='line'>            <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>                <span class="nt">&lt;failOnViolation&gt;</span>true<span class="nt">&lt;/failOnViolation&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/execution&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/executions&gt;</span>
</span><span class='line'><span class="nt">&lt;/plugin&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>自定义规范文件</h2>

<p>我们可以使用默认的规范未见，当然也支持自定义。下面是google的一个checkstyle规范文件。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
<span class='line-number'>327</span>
<span class='line-number'>328</span>
<span class='line-number'>329</span>
<span class='line-number'>330</span>
<span class='line-number'>331</span>
<span class='line-number'>332</span>
<span class='line-number'>333</span>
<span class='line-number'>334</span>
<span class='line-number'>335</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="cp">&lt;!DOCTYPE module PUBLIC</span>
</span><span class='line'><span class="cp">        &quot;-//Puppy Crawl//DTD Check Configuration 1.3//EN&quot;</span>
</span><span class='line'><span class="cp">        &quot;http://www.puppycrawl.com/dtds/configuration_1_3.dtd&quot;&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c">&lt;!-- This is a checkstyle configuration file. For descriptions of</span>
</span><span class='line'><span class="c">what the following rules do, please see the checkstyle configuration</span>
</span><span class='line'><span class="c">page at http://checkstyle.sourceforge.net/config.html --&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;module</span> <span class="na">name=</span><span class="s">&quot;Checker&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;module</span> <span class="na">name=</span><span class="s">&quot;RegexpSingleline&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="c">&lt;!-- Requires a Google copyright notice in each file.</span>
</span><span class='line'><span class="c">          Code intended to be open-sourced may have a multi-line copyright</span>
</span><span class='line'><span class="c">          notice, so that this required text appears on the second line:</span>
</span><span class='line'><span class="c">          &lt;pre&gt;</span>
</span><span class='line'><span class="c">            /*</span>
</span><span class='line'><span class="c">             * Copyright 2008 Google Inc.</span>
</span><span class='line'><span class="c">             *</span>
</span><span class='line'><span class="c">             * (details of open-source license...)</span>
</span><span class='line'><span class="c">          &lt;/pre&gt;</span>
</span><span class='line'><span class="c">        --&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;format&quot;</span>
</span><span class='line'>                  <span class="na">value=</span><span class="s">&quot;^(//| \*) Copyright (\([cC]\) )?[\d]{4}(\-[\d]{4})? (Google Inc\.).*$&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;minimum&quot;</span> <span class="na">value=</span><span class="s">&quot;1&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;maximum&quot;</span> <span class="na">value=</span><span class="s">&quot;10&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;message&quot;</span> <span class="na">value=</span><span class="s">&quot;Google copyright is missing or malformed.&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;severity&quot;</span> <span class="na">value=</span><span class="s">&quot;error&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/module&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;module</span> <span class="na">name=</span><span class="s">&quot;FileTabCharacter&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="c">&lt;!-- Checks that there are no tab characters in the file.</span>
</span><span class='line'><span class="c">        --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/module&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;module</span> <span class="na">name=</span><span class="s">&quot;NewlineAtEndOfFile&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;module</span> <span class="na">name=</span><span class="s">&quot;RegexpSingleline&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="c">&lt;!-- Checks that FIXME is not used in comments.  TODO is preferred.</span>
</span><span class='line'><span class="c">        --&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;format&quot;</span> <span class="na">value=</span><span class="s">&quot;((//.*)|(\*.*))FIXME&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;message&quot;</span> <span class="na">value=</span><span class="s">&#39;TODO is preferred to FIXME.  e.g. &quot;TODO(johndoe): Refactor when v2 is released.&quot;&#39;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/module&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;module</span> <span class="na">name=</span><span class="s">&quot;RegexpSingleline&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="c">&lt;!-- Checks that TODOs are named.  (Actually, just that they are followed</span>
</span><span class='line'><span class="c">             by an open paren.)</span>
</span><span class='line'><span class="c">        --&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;format&quot;</span> <span class="na">value=</span><span class="s">&quot;((//.*)|(\*.*))TODO[^(]&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;message&quot;</span> <span class="na">value=</span><span class="s">&#39;All TODOs should be named.  e.g. &quot;TODO(johndoe): Refactor when v2 is released.&quot;&#39;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/module&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- All Java AST specific tests live under TreeWalker module. --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;module</span> <span class="na">name=</span><span class="s">&quot;TreeWalker&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c">&lt;!--</span>
</span><span class='line'>
</span><span class='line'><span class="c">        IMPORT CHECKS</span>
</span><span class='line'>
</span><span class='line'><span class="c">        --&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;module</span> <span class="na">name=</span><span class="s">&quot;RedundantImport&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="c">&lt;!-- Checks for redundant import statements. --&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;severity&quot;</span> <span class="na">value=</span><span class="s">&quot;error&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/module&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;module</span> <span class="na">name=</span><span class="s">&quot;ImportOrder&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="c">&lt;!-- Checks for out of order import statements. --&gt;</span>
</span><span class='line'>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;severity&quot;</span> <span class="na">value=</span><span class="s">&quot;warning&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;groups&quot;</span> <span class="na">value=</span><span class="s">&quot;com.google,android,junit,net,org,java,javax&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="c">&lt;!-- This ensures that static imports go first. --&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;option&quot;</span> <span class="na">value=</span><span class="s">&quot;top&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;tokens&quot;</span> <span class="na">value=</span><span class="s">&quot;STATIC_IMPORT, IMPORT&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/module&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c">&lt;!--</span>
</span><span class='line'>
</span><span class='line'><span class="c">        JAVADOC CHECKS</span>
</span><span class='line'>
</span><span class='line'><span class="c">        --&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c">&lt;!-- Checks for Javadoc comments.                     --&gt;</span>
</span><span class='line'>        <span class="c">&lt;!-- See http://checkstyle.sf.net/config_javadoc.html --&gt;</span>
</span><span class='line'>        <span class="nt">&lt;module</span> <span class="na">name=</span><span class="s">&quot;JavadocMethod&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;scope&quot;</span> <span class="na">value=</span><span class="s">&quot;protected&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;severity&quot;</span> <span class="na">value=</span><span class="s">&quot;warning&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;allowMissingJavadoc&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;allowMissingParamTags&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;allowMissingReturnTag&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;allowMissingThrowsTags&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;allowThrowsTagsForSubclasses&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;allowUndeclaredRTE&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/module&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;module</span> <span class="na">name=</span><span class="s">&quot;JavadocType&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;scope&quot;</span> <span class="na">value=</span><span class="s">&quot;protected&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;severity&quot;</span> <span class="na">value=</span><span class="s">&quot;error&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/module&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;module</span> <span class="na">name=</span><span class="s">&quot;JavadocStyle&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;severity&quot;</span> <span class="na">value=</span><span class="s">&quot;warning&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/module&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c">&lt;!--</span>
</span><span class='line'>
</span><span class='line'><span class="c">        NAMING CHECKS</span>
</span><span class='line'>
</span><span class='line'><span class="c">        --&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c">&lt;!-- Item 38 - Adhere to generally accepted naming conventions --&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;module</span> <span class="na">name=</span><span class="s">&quot;PackageName&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="c">&lt;!-- Validates identifiers for package names against the</span>
</span><span class='line'><span class="c">              supplied expression. --&gt;</span>
</span><span class='line'>            <span class="c">&lt;!-- Here the default checkstyle rule restricts package name parts to</span>
</span><span class='line'><span class="c">              seven characters, this is not in line with common practice at Google.</span>
</span><span class='line'><span class="c">            --&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;format&quot;</span> <span class="na">value=</span><span class="s">&quot;^[a-z]+(\.[a-z][a-z0-9]{1,})*$&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;severity&quot;</span> <span class="na">value=</span><span class="s">&quot;warning&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/module&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;module</span> <span class="na">name=</span><span class="s">&quot;TypeNameCheck&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="c">&lt;!-- Validates static, final fields against the</span>
</span><span class='line'><span class="c">            expression &quot;^[A-Z][a-zA-Z0-9]*$&quot;. --&gt;</span>
</span><span class='line'>            <span class="nt">&lt;metadata</span> <span class="na">name=</span><span class="s">&quot;altname&quot;</span> <span class="na">value=</span><span class="s">&quot;TypeName&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;severity&quot;</span> <span class="na">value=</span><span class="s">&quot;warning&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/module&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;module</span> <span class="na">name=</span><span class="s">&quot;ConstantNameCheck&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="c">&lt;!-- Validates non-private, static, final fields against the supplied</span>
</span><span class='line'><span class="c">            public/package final fields &quot;^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$&quot;. --&gt;</span>
</span><span class='line'>            <span class="nt">&lt;metadata</span> <span class="na">name=</span><span class="s">&quot;altname&quot;</span> <span class="na">value=</span><span class="s">&quot;ConstantName&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;applyToPublic&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;applyToProtected&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;applyToPackage&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;applyToPrivate&quot;</span> <span class="na">value=</span><span class="s">&quot;false&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;format&quot;</span> <span class="na">value=</span><span class="s">&quot;^([A-Z][A-Z0-9]*(_[A-Z0-9]+)*|FLAG_.*)$&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;message</span> <span class="na">key=</span><span class="s">&quot;name.invalidPattern&quot;</span>
</span><span class='line'>                     <span class="na">value=</span><span class="s">&quot;Variable &#39;&#39;{0}&#39;&#39; should be in ALL_CAPS (if it is a constant) or be private (otherwise).&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;severity&quot;</span> <span class="na">value=</span><span class="s">&quot;warning&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/module&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;module</span> <span class="na">name=</span><span class="s">&quot;StaticVariableNameCheck&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="c">&lt;!-- Validates static, non-final fields against the supplied</span>
</span><span class='line'><span class="c">            expression &quot;^[a-z][a-zA-Z0-9]*_?$&quot;. --&gt;</span>
</span><span class='line'>            <span class="nt">&lt;metadata</span> <span class="na">name=</span><span class="s">&quot;altname&quot;</span> <span class="na">value=</span><span class="s">&quot;StaticVariableName&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;applyToPublic&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;applyToProtected&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;applyToPackage&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;applyToPrivate&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;format&quot;</span> <span class="na">value=</span><span class="s">&quot;^[a-z][a-zA-Z0-9]*_?$&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;severity&quot;</span> <span class="na">value=</span><span class="s">&quot;warning&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/module&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;module</span> <span class="na">name=</span><span class="s">&quot;MemberNameCheck&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="c">&lt;!-- Validates non-static members against the supplied expression. --&gt;</span>
</span><span class='line'>            <span class="nt">&lt;metadata</span> <span class="na">name=</span><span class="s">&quot;altname&quot;</span> <span class="na">value=</span><span class="s">&quot;MemberName&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;applyToPublic&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;applyToProtected&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;applyToPackage&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;applyToPrivate&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;format&quot;</span> <span class="na">value=</span><span class="s">&quot;^[a-z][a-zA-Z0-9]*$&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;severity&quot;</span> <span class="na">value=</span><span class="s">&quot;warning&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/module&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;module</span> <span class="na">name=</span><span class="s">&quot;MethodNameCheck&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="c">&lt;!-- Validates identifiers for method names. --&gt;</span>
</span><span class='line'>            <span class="nt">&lt;metadata</span> <span class="na">name=</span><span class="s">&quot;altname&quot;</span> <span class="na">value=</span><span class="s">&quot;MethodName&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;format&quot;</span> <span class="na">value=</span><span class="s">&quot;^[a-z][a-zA-Z0-9]*(_[a-zA-Z0-9]+)*$&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;severity&quot;</span> <span class="na">value=</span><span class="s">&quot;warning&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/module&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;module</span> <span class="na">name=</span><span class="s">&quot;ParameterName&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="c">&lt;!-- Validates identifiers for method parameters against the</span>
</span><span class='line'><span class="c">              expression &quot;^[a-z][a-zA-Z0-9]*$&quot;. --&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;severity&quot;</span> <span class="na">value=</span><span class="s">&quot;warning&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/module&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;module</span> <span class="na">name=</span><span class="s">&quot;LocalFinalVariableName&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="c">&lt;!-- Validates identifiers for local final variables against the</span>
</span><span class='line'><span class="c">              expression &quot;^[a-z][a-zA-Z0-9]*$&quot;. --&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;severity&quot;</span> <span class="na">value=</span><span class="s">&quot;warning&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/module&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;module</span> <span class="na">name=</span><span class="s">&quot;LocalVariableName&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="c">&lt;!-- Validates identifiers for local variables against the</span>
</span><span class='line'><span class="c">              expression &quot;^[a-z][a-zA-Z0-9]*$&quot;. --&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;severity&quot;</span> <span class="na">value=</span><span class="s">&quot;warning&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/module&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        <span class="c">&lt;!--</span>
</span><span class='line'>
</span><span class='line'><span class="c">        LENGTH and CODING CHECKS</span>
</span><span class='line'>
</span><span class='line'><span class="c">        --&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;module</span> <span class="na">name=</span><span class="s">&quot;LineLength&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="c">&lt;!-- Checks if a line is too long. --&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;max&quot;</span> <span class="na">value=</span><span class="s">&quot;${com.puppycrawl.tools.checkstyle.checks.sizes.LineLength.max}&quot;</span> <span class="na">default=</span><span class="s">&quot;100&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;severity&quot;</span> <span class="na">value=</span><span class="s">&quot;error&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>            <span class="c">&lt;!--</span>
</span><span class='line'><span class="c">              The default ignore pattern exempts the following elements:</span>
</span><span class='line'><span class="c">                - import statements</span>
</span><span class='line'><span class="c">                - long URLs inside comments</span>
</span><span class='line'><span class="c">            --&gt;</span>
</span><span class='line'>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;ignorePattern&quot;</span>
</span><span class='line'>                      <span class="na">value=</span><span class="s">&quot;${com.puppycrawl.tools.checkstyle.checks.sizes.LineLength.ignorePattern}&quot;</span>
</span><span class='line'>                      <span class="na">default=</span><span class="s">&quot;^(package .*;\s*)|(import .*;\s*)|( *\* *https?://.*)$&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/module&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;module</span> <span class="na">name=</span><span class="s">&quot;LeftCurly&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="c">&lt;!-- Checks for placement of the left curly brace (&#39;{&#39;). --&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;severity&quot;</span> <span class="na">value=</span><span class="s">&quot;warning&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/module&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;module</span> <span class="na">name=</span><span class="s">&quot;RightCurly&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="c">&lt;!-- Checks right curlies on CATCH, ELSE, and TRY blocks are on</span>
</span><span class='line'><span class="c">            the same line. e.g., the following example is fine:</span>
</span><span class='line'><span class="c">            &lt;pre&gt;</span>
</span><span class='line'><span class="c">              if {</span>
</span><span class='line'><span class="c">                ...</span>
</span><span class='line'><span class="c">              } else</span>
</span><span class='line'><span class="c">            &lt;/pre&gt;</span>
</span><span class='line'><span class="c">            --&gt;</span>
</span><span class='line'>            <span class="c">&lt;!-- This next example is not fine:</span>
</span><span class='line'><span class="c">            &lt;pre&gt;</span>
</span><span class='line'><span class="c">              if {</span>
</span><span class='line'><span class="c">                ...</span>
</span><span class='line'><span class="c">              }</span>
</span><span class='line'><span class="c">              else</span>
</span><span class='line'><span class="c">            &lt;/pre&gt;</span>
</span><span class='line'><span class="c">            --&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;option&quot;</span> <span class="na">value=</span><span class="s">&quot;same&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;severity&quot;</span> <span class="na">value=</span><span class="s">&quot;warning&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/module&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c">&lt;!-- Checks for braces around if and else blocks --&gt;</span>
</span><span class='line'>        <span class="nt">&lt;module</span> <span class="na">name=</span><span class="s">&quot;NeedBraces&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;severity&quot;</span> <span class="na">value=</span><span class="s">&quot;warning&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;tokens&quot;</span> <span class="na">value=</span><span class="s">&quot;LITERAL_IF, LITERAL_ELSE, LITERAL_FOR, LITERAL_WHILE, LITERAL_DO&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/module&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;module</span> <span class="na">name=</span><span class="s">&quot;UpperEll&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="c">&lt;!-- Checks that long constants are defined with an upper ell.--&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;severity&quot;</span> <span class="na">value=</span><span class="s">&quot;error&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/module&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;module</span> <span class="na">name=</span><span class="s">&quot;FallThrough&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="c">&lt;!-- Warn about falling through to the next case statement.  Similar to</span>
</span><span class='line'><span class="c">            javac -Xlint:fallthrough, but the check is suppressed if a single-line comment</span>
</span><span class='line'><span class="c">            on the last non-blank line preceding the fallen-into case contains &#39;fall through&#39; (or</span>
</span><span class='line'><span class="c">            some other variants which we don&#39;t publicized to promote consistency).</span>
</span><span class='line'><span class="c">            --&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;reliefPattern&quot;</span>
</span><span class='line'>                      <span class="na">value=</span><span class="s">&quot;fall through|Fall through|fallthru|Fallthru|falls through|Falls through|fallthrough|Fallthrough|No break|NO break|no break|continue on&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;severity&quot;</span> <span class="na">value=</span><span class="s">&quot;error&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/module&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        <span class="c">&lt;!--</span>
</span><span class='line'>
</span><span class='line'><span class="c">        MODIFIERS CHECKS</span>
</span><span class='line'>
</span><span class='line'><span class="c">        --&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;module</span> <span class="na">name=</span><span class="s">&quot;ModifierOrder&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="c">&lt;!-- Warn if modifier order is inconsistent with JLS3 8.1.1, 8.3.1, and</span>
</span><span class='line'><span class="c">                 8.4.3.  The prescribed order is:</span>
</span><span class='line'><span class="c">                 public, protected, private, abstract, static, final, transient, volatile,</span>
</span><span class='line'><span class="c">                 synchronized, native, strictfp</span>
</span><span class='line'><span class="c">              --&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/module&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        <span class="c">&lt;!--</span>
</span><span class='line'>
</span><span class='line'><span class="c">        WHITESPACE CHECKS</span>
</span><span class='line'>
</span><span class='line'><span class="c">        --&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;module</span> <span class="na">name=</span><span class="s">&quot;WhitespaceAround&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="c">&lt;!-- Checks that various tokens are surrounded by whitespace.</span>
</span><span class='line'><span class="c">                 This includes most binary operators and keywords followed</span>
</span><span class='line'><span class="c">                 by regular or curly braces.</span>
</span><span class='line'><span class="c">            --&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;tokens&quot;</span> <span class="na">value=</span><span class="s">&quot;ASSIGN, BAND, BAND_ASSIGN, BOR,</span>
</span><span class='line'><span class="s">        BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN,</span>
</span><span class='line'><span class="s">        EQUAL, GE, GT, LAND, LE, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE,</span>
</span><span class='line'><span class="s">        LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN,</span>
</span><span class='line'><span class="s">        LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS,</span>
</span><span class='line'><span class="s">        MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION,</span>
</span><span class='line'><span class="s">        SL, SL_ASSIGN, SR_ASSIGN, STAR, STAR_ASSIGN&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;severity&quot;</span> <span class="na">value=</span><span class="s">&quot;error&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/module&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;module</span> <span class="na">name=</span><span class="s">&quot;WhitespaceAfter&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="c">&lt;!-- Checks that commas, semicolons and typecasts are followed by</span>
</span><span class='line'><span class="c">                 whitespace.</span>
</span><span class='line'><span class="c">            --&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;tokens&quot;</span> <span class="na">value=</span><span class="s">&quot;COMMA, SEMI, TYPECAST&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/module&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;module</span> <span class="na">name=</span><span class="s">&quot;NoWhitespaceAfter&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="c">&lt;!-- Checks that there is no whitespace after various unary operators.</span>
</span><span class='line'><span class="c">                 Linebreaks are allowed.</span>
</span><span class='line'><span class="c">            --&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;tokens&quot;</span> <span class="na">value=</span><span class="s">&quot;BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS,</span>
</span><span class='line'><span class="s">        UNARY_PLUS&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;allowLineBreaks&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;severity&quot;</span> <span class="na">value=</span><span class="s">&quot;error&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/module&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;module</span> <span class="na">name=</span><span class="s">&quot;NoWhitespaceBefore&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="c">&lt;!-- Checks that there is no whitespace before various unary operators.</span>
</span><span class='line'><span class="c">                 Linebreaks are allowed.</span>
</span><span class='line'><span class="c">            --&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;tokens&quot;</span> <span class="na">value=</span><span class="s">&quot;SEMI, DOT, POST_DEC, POST_INC&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;allowLineBreaks&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;severity&quot;</span> <span class="na">value=</span><span class="s">&quot;error&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/module&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;module</span> <span class="na">name=</span><span class="s">&quot;ParenPad&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="c">&lt;!-- Checks that there is no whitespace before close parens or after</span>
</span><span class='line'><span class="c">                 open parens.</span>
</span><span class='line'><span class="c">            --&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;severity&quot;</span> <span class="na">value=</span><span class="s">&quot;warning&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/module&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;/module&gt;</span>
</span><span class='line'><span class="nt">&lt;/module&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果想启用自定义的规范文件，则依旧是修改configuration，指向你的文件地址。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>        <span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>            <span class="nt">&lt;groupId&gt;</span>org.apache.maven.plugins<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;artifactId&gt;</span>maven-checkstyle-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;version&gt;</span>2.10<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>            <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>                <span class="nt">&lt;configLocation&gt;</span>${basedir}/src/config/custom_checkstyle.xml<span class="nt">&lt;/configLocation&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>            <span class="nt">&lt;executions&gt;</span>
</span><span class='line'>                <span class="nt">&lt;execution&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;id&gt;</span>checkstyle<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;phase&gt;</span>validate<span class="nt">&lt;/phase&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;goals&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;goal&gt;</span>check<span class="nt">&lt;/goal&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;/goals&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;failOnViolation&gt;</span>true<span class="nt">&lt;/failOnViolation&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/execution&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/executions&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/plugin&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>运行checkstyle检查</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mvn checkstyle:checkstyle
</span></code></pre></td></tr></table></div></figure>


<h2>查看checkstyle结果</h2>

<p>运行maven命令后可以在console里查看checkstyle运行结果。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>INFO<span class="o">]</span>
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> There are 11 checkstyle errors.
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> ------------------------------------------------------------------------
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> BUILD FAILURE
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> ------------------------------------------------------------------------
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> Total <span class="nb">time</span>: 2.135s
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> Finished at: Fri Jun 21 13:39:24 CST 2013
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> Final Memory: 6M/81M
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> ------------------------------------------------------------------------
</span><span class='line'><span class="o">[</span>ERROR<span class="o">]</span> Failed to execute goal org.apache.maven.plugins:maven-checkstyle-plugin:2.10:check <span class="o">(</span>checkstyle<span class="o">)</span> on project SpringMessageSpike: You have 11 Checkstyle violations. -&gt; <span class="o">[</span>Help 1<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>checkstye的详细结果信息被存放在target/checkstyle-result.xml中。下面是一个示例。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;checkstyle</span> <span class="na">version=</span><span class="s">&quot;5.6&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;file</span> <span class="na">name=</span><span class="s">&quot;/Users/twer/sourcecode/SpringMessageSpike/src/main/java/com/thoughtworks/config/SessionMessageSource.java&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;error</span> <span class="na">line=</span><span class="s">&quot;0&quot;</span> <span class="na">severity=</span><span class="s">&quot;error&quot;</span> <span class="na">message=</span><span class="s">&quot;Google copyright is missing or malformed.&quot;</span> <span class="na">source=</span><span class="s">&quot;com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;error</span> <span class="na">line=</span><span class="s">&quot;21&quot;</span> <span class="na">severity=</span><span class="s">&quot;warning&quot;</span> <span class="na">message=</span><span class="s">&quot;Wrong order for &amp;apos;org.slf4j.LoggerFactory.getLogger&amp;apos; import.&quot;</span> <span class="na">source=</span><span class="s">&quot;com.puppycrawl.tools.checkstyle.checks.imports.ImportOrderCheck&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;error</span> <span class="na">line=</span><span class="s">&quot;27&quot;</span> <span class="na">severity=</span><span class="s">&quot;error&quot;</span> <span class="na">message=</span><span class="s">&quot;Missing a Javadoc comment.&quot;</span> <span class="na">source=</span><span class="s">&quot;com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocTypeCheck&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;error</span> <span class="na">line=</span><span class="s">&quot;35&quot;</span> <span class="na">severity=</span><span class="s">&quot;error&quot;</span> <span class="na">message=</span><span class="s">&quot;Line is longer than 100 characters (found 115).&quot;</span> <span class="na">source=</span><span class="s">&quot;com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/file&gt;</span>
</span><span class='line'><span class="nt">&lt;/checkstyle&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>跳过对指定文件的某些检查</h2>

<p>如果对于指定文件检查出了一些问题，但是你想忽略它，则可以使用suppression。</p>

<p>例如在上述例子中有一个checkstyle error是说某行超过了100字符。如果我们不想修复这个错误怎么办那？可以将其suppress掉。</p>

<p>方法是建立一个checkstyle-suppressions.xml文件。其中加入下述内容</p>

<figure class='code'><figcaption><span>checkstyle-suppressions.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot;?&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">&lt;!DOCTYPE suppressions PUBLIC</span>
</span><span class='line'><span class="cp">        &quot;-//Puppy Crawl//DTD Suppressions 1.0//EN&quot;</span>
</span><span class='line'><span class="cp">        &quot;http://www.puppycrawl.com/dtds/suppressions_1_0.dtd&quot;&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;suppressions&gt;</span>
</span><span class='line'>    <span class="nt">&lt;suppress</span> <span class="na">checks=</span><span class="s">&quot;LineLengthCheck&quot;</span>
</span><span class='line'>              <span class="na">files=</span><span class="s">&quot;SessionMessageSource.java&quot;</span>
</span><span class='line'>              <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/suppressions&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后配置<code>maven-checkstyel-plugin</code>设置<code>suppressionsLocation</code>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>org.apache.maven.plugins<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>maven-checkstyle-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version&gt;</span>2.10<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>    <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>        <span class="nt">&lt;configLocation&gt;</span>${basedir}/src/config/custom_checkstyle.xml<span class="nt">&lt;/configLocation&gt;</span>
</span><span class='line'>        <span class="nt">&lt;suppressionsLocation&gt;</span>${basedir}/src/config/checkstyle-suppressions.xml<span class="nt">&lt;/suppressionsLocation&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>    <span class="nt">&lt;executions&gt;</span>
</span><span class='line'>        <span class="nt">&lt;execution&gt;</span>
</span><span class='line'>            <span class="nt">&lt;id&gt;</span>checkstyle<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>            <span class="nt">&lt;phase&gt;</span>validate<span class="nt">&lt;/phase&gt;</span>
</span><span class='line'>            <span class="nt">&lt;goals&gt;</span>
</span><span class='line'>                <span class="nt">&lt;goal&gt;</span>check<span class="nt">&lt;/goal&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/goals&gt;</span>
</span><span class='line'>            <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>                <span class="nt">&lt;failOnViolation&gt;</span>true<span class="nt">&lt;/failOnViolation&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/execution&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/executions&gt;</span>
</span><span class='line'><span class="nt">&lt;/plugin&gt;</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ThoughtWorks知识分享体系]]></title>
    <link href="http://www.huangbowen.net/blog/2013/06/13/thoughtworks-knowledge-sharing-system/"/>
    <updated>2013-06-13T13:44:00+10:00</updated>
    <id>http://www.huangbowen.net/blog/2013/06/13/thoughtworks-knowledge-sharing-system</id>
    <content type="html"><![CDATA[<p><img src="http://www.huangbowen.net/images/KS.jpg"></p>

<p>本来这篇文章的名称为&#8221;ThoughtWorks的培训体系&#8221;。但是培训这个词总给人一种正襟危坐的感觉，而在ThoughtWorks中的培训则是非常轻松自在的。而且培训有种老手教新手的味道，而在ThoughtWorks不管资历高低，只要你敢秀，都随时欢迎。所以我将培训改为了知识分享。&#8221;Knowledge sharing&#8221;可以说是ThoughtWorks的标志性文化之一。在ThoughtWorks大家庭，大家都很乐于把自己的所学、所想通过各种方式分享出来。正因为ThoughtWorks建立了立体化、全方位的知识分享体系，每一个新加入ThoughtWorks大家提的人都能得到快速的成长，而经验丰富的老员工也能不断的突破自身。这个体系有力的保证了公司员工的技术水平。下面我简略的讲解下这个体系。希望大家都能有所借鉴。</p>

<!-- more -->


<h2>公司层面</h2>

<p><strong>TWU</strong></p>

<p>TWU是由ThoughtWorks为全球应届毕业生量身打造的培训营，全称为ThoughtWorks University。每个刚加入的毕业生都会被送到印度的办公室接受为期六周的培训。在这六周的培训中大家可以感受到公司的文化，了解整个agile开发流程。每个讲师都是由ThoughtWorks global抽取的技术高手。在这六周里，不仅有课上，还有游戏玩，又可以欣赏异国风光，真正做到了寓教于乐。</p>

<p><strong>TWI</strong></p>

<p>TWI是ThoughtWorks为中国区的社招员工打造的培训营，全称为ThoughtWorks Immersion。每个新入职的社招员工将在中国的三个office（北京、西安、成都轮流举行）之一参加为期3天的培训。在这三天的培训中，有中国区CTO徐昊亲自给你讲敏捷，有各种好玩的游戏带你深入了解敏捷，还有各种软技能的培训。即使是senior的人也能有从中有所收获。</p>

<p><strong>Conference</strong></p>

<p>中国区不但自己举行一些会议，如Agile China,QConf等，尽力推行敏捷在中国的实施，还积极的参加国内外的各种大会。这些大会上你能听到各个公司的顶尖技术人才带来的各种演讲，开拓视野。</p>

<h2>Office层面</h2>

<p><strong>Open Party</strong></p>

<p>Open Party是一个非会议形式的聚会，每个月一次，地点不定。OpenParty是由多个技术社区（ThoughtWorks只是其中之一）共同举办的社交活动。本着自由、开放、分享、互动的宗旨，采用“非会议（Unconference）”的形式， 为参与人员创建一个表达和交流的平台。活动话题不仅仅局限于技术，还包括生活、旅游、艺术、创业、商务、投资、营销等各方面的话题。在这上面你很容易交到志同道合的朋友。</p>

<p><strong>Session</strong></p>

<p>形形色色的Session可是ThoughtWorks中很重要的一个活动。无论是中国区甚至是global的技术专家，还是刚参加工作不久的毕业生，都可以随意book一个会议室，给大家带来一场精彩的演讲。Session的时间一般是每天中午的12点半到1点半，以及下午的5点到6点，所以经常看到大家捧着盒饭来参加session。Session的内容也五花八门，有老成都讲成都历史的，也有军迷讲中国航母发展史的，也有Geek达人教你如何写博客。当然更多的还是技术session。从JavaScript到敏捷实践、从正则表达式到大数据应用&#8230;&#8230;总有一款适合你的。</p>

<p><strong>Code Kata</strong></p>

<p>Session注重于听，而Code Kata则注重培养大家的动手能力。时间一般是晚上6点以后，主持人扮演business owner，抛出一个问题由参与者结对编程实现。既有创建一个出租车计价器的常规问题，也有给大杀器超市建立结账系统的刁钻问题。参与者先针对问题建立task列表，然后每对pair简单讲述建立这样的task列表的原因。大家选择其中较好的一个task列表，每5分钟为限，采用tdd的方式依次实现每个task。五分钟后每组pair都需要show一下自己的代码，并讲解设计思路。这种在极短的时间内练习编程的方式很能锻炼人。如果你快捷键不行、你的task思路不清晰，OO设计不到位，就很容易很不上节奏。而每个task间的show case（展示）又能让你观察到与对手的差距，领悟揣摩别人解决问题的思路。</p>

<p><strong>郑大夜校</strong></p>

<p>郑大夜校是ThoughtWorks知识分享体系中的一个重要标志。在ThoughtWorks中有悠久的历史和广泛的知名度。</p>

<p>郑大夜校有两个版本。一个是专门针对还未入职的毕业生的。每两周举行一次。</p>

<p>另一个版本是针对所有在职员工的，为每周四晚的6点到7点。郑大夜校上的课程更有针对性和连续性，通过一些列的课程能够强化你对某一方面知识的深入了解。比如LiYan同学以haskell语言为依托，给大家讲了函数式编程，9堂课涵盖了函数式编程大部分要点。还有XiaoPeng同学的重构手法课程，实战演练如何结合IDE快捷键对代码展开重构…&#8230;这样的系列课程数不胜数，已经成为培训新人技术能力的不可或缺的手段之一。</p>

<p><strong>Reading Club</strong></p>

<p>读书会是成都office一个独特的活动。每两周举办一次。每次会推荐大家读一本书，两周以后大家针对这本书进行热烈的讨论。会议形式也多张多样，有每人5分钟的即兴演讲，有角色扮演，也有辩论会。刚开始主要是些技术书籍，基本围绕着ThoughtWorks的DEV读书路线图。后来也扩展到了其他方面，比如文艺、科幻及一些你懂的类型。</p>

<h2>团队层面</h2>

<p><strong>内部session</strong></p>

<p>内部session和office的session有两个区别：</p>

<ol>
<li><p>内部session比较随意，做不做ppt无所谓，直接找块白板边讲边画也行，或者直接show代码。</p></li>
<li><p>演讲者一般是新手，讲给团队中其他新手或老手。目的是考察新手是否真的掌握了知识点，老手顺便给些意见建议。</p></li>
</ol>


<p>Session主题可以结合项目的技术栈，给新人一个施展的空间。由于内部session比较轻松，比较容易培养新人的自信心，使其能够勇敢的表达自己，在团队中发出自己的声音。</p>

<p><strong>内部Code Jam</strong></p>

<p>Code Jam针对项目中的一些新技术或大家都懂得不多的领域，大家在一定时间内进行专门的强化，一般每周举行一次。其实与上面讲的Code Kata类似。比如在我们项目刚启动时大家对于JavaScript都不太熟悉，针对这一弱项就可以采用Code Kata的方式来强化。所有的developer找一个不忙的下午，由主持人抛出一个与JavaScript有关的挑战，大家一起实现。比如对Jquery不熟，就练习做一个使用JQuery的动态页面；对JavaScript的TDD不熟，就着重练习下Jasmine（JavaScript的单元测试库）的使用。</p>

<p><strong>Tech hudle</strong></p>

<p>时间：每天固定的某个工作时间。
参加人员：全体开发者。
这相当于一个小型的站会。在会上大家分别讲述自己目前在做什么、遇到了什么问题、需要哪方面的帮助，或者识别了项目的什么风险，是否需要规避等。通过tech hundle将所有开发者每天的工作情况串联起来，实现知识的最大共享，避免出现某人闷在一个task很长时间的情况。同时也能拉近与客户方的合作，建立良好的合作关系。</p>

<p><strong>Code review</strong></p>

<p>每天的某个固定时间所有的developer一起利用工具查看当天的所有提交的代码。自己的代码能够得到他人的直接点评，这样的机会恐怕不多。而在ThoughtWorks这样的事情天天在上演。通过Code review能够直观的感受到代码的坏味道，从而避免以后重蹈覆辙。</p>

<p><strong>pair programming</strong></p>

<p>结对编程的确是一个非常棒的知识分享的方式。即便是新手和老手pair，大家都能学到东西。无论是解决问题的思路、方式，甚至是对快捷键、IDE的使用，双方都能有所借鉴。我个人非常喜欢这种工作方式，这种知识传递可以贯穿整个工作时间，很是高效。</p>

<h2>个人层面</h2>

<p><strong>buddy &amp; sponsor</strong></p>

<p>每一个新入职的员工都会被分配一个buddy，一直帮助他通过六个月的试用期。试用期满后也可以选择一个senior的人作为sponsor，继续对自己进行指导。Buddy和Sponsor是你工作和学习中的好伙伴。他像导师，其实更愿意和你做朋友。由于buddy和Sponsor的人生阅历相对比较丰富，在工作上及学习上的问题和困惑都能与其探讨。</p>

<p><strong>写博客、翻译书、写书</strong></p>

<p>这也是总结知识、传递知识、自我提高的有效手段。我们在享受前人的经验成果之余，也应该肩负起将知识往后传递的责任。而文字则是知识传递的有力途径。</p>

<p>在ThoughtWorks不进步就意味着退步。保持持续的学习是不断前进的动力。而这一切的前提又是你要有足够的热情。ThoughtWorks欢迎对技术有追求的程序员加入我们的舞台。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[调用API设置安卓手机的Access Point]]></title>
    <link href="http://www.huangbowen.net/blog/2013/06/05/programmatically-set-android-phone-ap/"/>
    <updated>2013-06-05T12:04:00+10:00</updated>
    <id>http://www.huangbowen.net/blog/2013/06/05/programmatically-set-android-phone-ap</id>
    <content type="html"><![CDATA[<p><img src="http://www.huangbowen.net/images/android.jpeg"></p>

<p>最近在做一个小的应用，需要通过程序设置安卓手机的AP（Access point, 即将手机变为一个移动热点，其他机器能够通过wifi连接到此手机）。原以为很简单的一个东西，还是花费了一番周折，最终还是搞定了。</p>

<!-- more -->


<p>配置AP的选项是属于配置wifi的一部分，所以他们都在WifiManager这个类中。
获取当前系统的WifiManager实例的方法是:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">WifiManager</span> <span class="n">wifi</span> <span class="o">=</span> <span class="o">(</span><span class="n">WifiManager</span><span class="o">)</span> <span class="n">getSystemService</span><span class="o">(</span><span class="n">Context</span><span class="o">.</span><span class="na">WIFI_SERVICE</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>此类中有几个关键方法用来设置AP，但是它们都是被隐藏的，我们无法直接调用，所以只有通过反射的方式来调用。</p>

<p>获取AP当前状态的方法是:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="n">Boolean</span> <span class="nf">getApState</span><span class="o">(</span><span class="n">WifiManager</span> <span class="n">wifi</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">NoSuchMethodException</span><span class="o">,</span> <span class="n">IllegalAccessException</span><span class="o">,</span> <span class="n">InvocationTargetException</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Method</span> <span class="n">method</span> <span class="o">=</span> <span class="n">wifi</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getMethod</span><span class="o">(</span><span class="s">&quot;isWifiApEnabled&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">(</span><span class="n">Boolean</span><span class="o">)</span> <span class="n">method</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">wifi</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>配置AP要使用到WifiConfiguration这个类，以下是设置的一个AP。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="n">WifiConfiguration</span> <span class="nf">getApConfiguration</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">WifiConfiguration</span> <span class="n">apConfig</span> <span class="o">=</span> <span class="k">new</span> <span class="n">WifiConfiguration</span><span class="o">();</span>
</span><span class='line'>        <span class="c1">//配置热点的名称</span>
</span><span class='line'>        <span class="n">apConfig</span><span class="o">.</span><span class="na">SSID</span> <span class="o">=</span> <span class="s">&quot;yourId&quot;</span><span class="o">;</span>
</span><span class='line'>        <span class="n">apConfig</span><span class="o">.</span><span class="na">allowedAuthAlgorithms</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">WifiConfiguration</span><span class="o">.</span><span class="na">AuthAlgorithm</span><span class="o">.</span><span class="na">OPEN</span><span class="o">);</span>
</span><span class='line'>        <span class="n">apConfig</span><span class="o">.</span><span class="na">allowedKeyManagement</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">WifiConfiguration</span><span class="o">.</span><span class="na">KeyMgmt</span><span class="o">.</span><span class="na">WPA_PSK</span><span class="o">);</span>
</span><span class='line'>        <span class="n">apConfig</span><span class="o">.</span><span class="na">allowedProtocols</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">WifiConfiguration</span><span class="o">.</span><span class="na">Protocol</span><span class="o">.</span><span class="na">RSN</span><span class="o">);</span>
</span><span class='line'>        <span class="n">apConfig</span><span class="o">.</span><span class="na">allowedProtocols</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">WifiConfiguration</span><span class="o">.</span><span class="na">Protocol</span><span class="o">.</span><span class="na">WPA</span><span class="o">);</span>
</span><span class='line'>        <span class="c1">//配置热点的密码</span>
</span><span class='line'>        <span class="n">apConfig</span><span class="o">.</span><span class="na">preSharedKey</span> <span class="o">=</span> <span class="s">&quot;yourPassword&quot;</span><span class="o">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">apConfig</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>应用AP配置并启用AP要使用另一个被隐藏的方法<code>setWifiApEnabled</code>。<strong>需要注意的是启用AP前要将当前手机的wifi关闭，否则会启动失败。</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">setWifiAp</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        <span class="n">Method</span> <span class="n">method</span> <span class="o">=</span> <span class="n">wifi</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getMethod</span><span class="o">(</span>
</span><span class='line'>                <span class="s">&quot;setWifiApEnabled&quot;</span><span class="o">,</span> <span class="n">WifiConfiguration</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">Boolean</span><span class="o">.</span><span class="na">TYPE</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">wifi</span><span class="o">.</span><span class="na">setWifiEnabled</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class='line'>        <span class="n">method</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">wifi</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后，一定要注意要在AndroidManifest.xml文件中设置几个权限。否则在调用API时会产生<code>java.lang.SecurityException: Permission Denied</code>的异常。
需要加入的权限如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;uses-permission</span> <span class="na">android:name=</span><span class="s">&quot;android.permission.ACCESS_NETWORK_STATE&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;uses-permission</span> <span class="na">android:name=</span><span class="s">&quot;android.permission.ACCESS_WIFI_STATE&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;uses-permission</span> <span class="na">android:name=</span><span class="s">&quot;android.permission.CHANGE_WIFI_STATE&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;uses-permission</span> <span class="na">android:name=</span><span class="s">&quot;android.permission.CHANGE_NETWORK_STATE&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>源码我已经放置到github上了，需要的请自行checkout。地址是：<a href="https://github.com/huangbowen521/APSwitch">https://github.com/huangbowen521/APSwitch</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[持续集成之道：在你的开源项目中使用Travis CI]]></title>
    <link href="http://www.huangbowen.net/blog/2013/05/30/use-travis-ci-to-your-open-source-project/"/>
    <updated>2013-05-30T14:58:00+10:00</updated>
    <id>http://www.huangbowen.net/blog/2013/05/30/use-travis-ci-to-your-open-source-project</id>
    <content type="html"><![CDATA[<p>自从接触并践行了敏捷的一些实践之后，便深深的喜欢上了敏捷。尤其是测试自动化和持续集成这两个实践，可以显著的提高软件的质量和集成效率，实时检测项目健康度，使团队成员对项目保持充足的信心。</p>

<p>但是对于个人项目而言，虽然测试自动化好实现，但是要实现持续集成还是稍有难度。因为持续集成需要搭建一个集成服务器，并建立某种反馈机制。而大多数人来说并没有自己的独立服务器，并且配置也极为繁琐。</p>

<!-- more -->


<p>不过不用怕，现在已经进入了云时代。 <a href="(https://travis-ci.org/)">Travis CI</a>为我们提供了免费的集成服务器，让我们省却了自己搭建集成服务器的烦恼。</p>

<p><a href="(https://travis-ci.org/)">Travis CI</a>的官网介绍是: <strong>A hosted continuous integration service for the open source community.</strong> 表明它主要是给开源社区提供持续集成服务。其与github这个全球最火爆的代码托管网站高度集成，可以很方便的为github中的项目建立持续集成服务。</p>

<p>它不仅支持多种语言，而且支持同时在多个运行环境中运行build，能全方位的测试你的程序。</p>

<p>下面就介绍下如何将<a href="(https://travis-ci.org/)">Travis CI</a>与自己在github上的某个repository集成。（这里以我自己的repository <a href="https://github.com/huangbowen521/SpringMessageSpike">https://github.com/huangbowen521/SpringMessageSpike</a> 为例。 ）</p>

<ol>
<li><p>使Travis CI通过github OAuth认证。</p>

<p> 点击<a href="https://travis-ci.org/">https://travis-ci.org/</a>右上角的<code>Sign in with GitHub</code>按钮，输入自己的github账号和密码，并允许Travis CI的认证。</p></li>
<li><p>激活GitHub Service Hook。</p>

<p> GitHub给用户提供了一个Service Hook接口,只要用户对host在github上的repository作用了一些action(比如push，pull)，就会触发相应的Service Hook。而<a href="(https://travis-ci.org/)">Travis CI</a>正是基于这个原理来trigger你的build。当你发起一个push操作时，就会trigger <a href="(https://travis-ci.org/)">Travis CI</a>的服务。</p>

<p> 设置方法是访问<a href="(https://travis-ci.org/)">Travis CI</a>的<a href="https://travis-ci.org/profile">profile</a>，选择相应的repository打开Service Hook开关。</p>

<p> <img src="http://www.huangbowen.net/images/TravisProfile.png"></p>

<p> 然后登陆你的github，访问具体的repository的Service Hook页面，确保设置了Travis CI Hook的github name和travis token。</p>

<p> <img src="http://www.huangbowen.net/images/ServiceHook.png"></p></li>
<li><p>给repository配置.travis.yml文件。该文件需要放置在repository的根目录下。</p>

<p> .travis.yml文件是一个相当重要的文件，里面需要配置你所使用的语言、运行环境、构建工具、构建脚本、通知方式等。最重要的是设置语言，其它的都有相应的默认值。</p>

<p> 这是为我的<a href="(https://github.com/huangbowen521/SpringMessageSpike)">SpringMessageSpike</a>设置的.travis.yml文件。由于我的项目中使用了maven作为构建工具，而<a href="(https://travis-ci.org/)">Travis CI</a>对java语言设置的默认构建工具就是maven，所以无需在文件中显式指定。</p></li>
</ol>


<figure class='code'><figcaption><span>.travis.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">language</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">java</span>
</span><span class='line'><span class="l-Scalar-Plain">jdk</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">oraclejdk7</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">openjdk7</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">openjdk6</span>
</span></code></pre></td></tr></table></div></figure>


<p>你可以使用一个travis-lint来检查你的yml文件是否是有效的。他是ruby写的一个gem，需要ruby的运行环境。安装方式是在terminal下<code>gem install travis-lint</code>。你只需要在你的repository根目录下运行<code>travis-lint</code>即可进行检查。</p>

<p>想要更进一步的关于.travis.yml的配置请参见：<a href="http://about.travis-ci.org/docs/user/build-configuration/">http://about.travis-ci.org/docs/user/build-configuration/</a></p>

<p>只要这三步就完成了配置。现在发起一个push就可以trigger你在<a href="(https://travis-ci.org/)">Travis CI</a>的build。
这时候登陆<a href="(https://travis-ci.org/)">Travis CI</a>可以看到你的Build的状态和日志。</p>

<p><img src="http://www.huangbowen.net/images/BuildInfo.png"></p>

<p>你可以在respository的README.md文件中加入build状态图标。方法是在在该文件中加入
<code>[![Build Status](https://travis-ci.org/[YOUR_GITHUB_USERNAME]/[YOUR_PROJECT_NAME].png)](https://travis-ci.org/[YOUR_GITHUB_USERNAME]/[YOUR_PROJECT_NAME])</code>即可。</p>

<p><img src="http://www.huangbowen.net/images/BuildImage.png"></p>

<p>总体来说<a href="(https://travis-ci.org/)">Travis CI</a>是一个轻量级、可高度定制化的免费的持续集成服务。但我觉得还是有几个缺点:</p>

<ol>
<li><p>运行build需要大量的准备，耗时较长。</p></li>
<li><p>作为免费的服务，不支持build时间超过20分钟的项目。</p></li>
<li><p>主站访问速度略慢。</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用自定义的MessageSource实现对properties的复用]]></title>
    <link href="http://www.huangbowen.net/blog/2013/05/29/using-spring-message-source/"/>
    <updated>2013-05-29T14:48:00+10:00</updated>
    <id>http://www.huangbowen.net/blog/2013/05/29/using-spring-message-source</id>
    <content type="html"><![CDATA[<p>Spring框架的Web项目中可以使用properties文件来存储需要显示在jsp页面的一些值，比如label值或者error messages。然后通过Spring提供的ResourceBundleMessageSource将这些properties文件注入进来使用。一个简单的配置如下。</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;messageSource&quot;</span>
</span><span class='line'>          <span class="na">class=</span><span class="s">&quot;org.springframework.context.support.ResourceBundleMessageSource&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;basenames&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;list&gt;</span>
</span><span class='line'>                <span class="nt">&lt;value&gt;</span>labels<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>                <span class="nt">&lt;value&gt;</span>errors<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/list&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>而在我们的项目中有这样一个需求。假设现在项目中有三个properties文件。</p>

<p><img src="http://www.huangbowen.net/images/properties.png"></p>

<p>其中aami和apia是我们项目需要支持的两个品牌。当一个用户登陆我们的web项目时，会自动将其当前所使用的品牌信息存到session中。而如果是aami用户的话，前端jsp页面显示的message读取的顺序是这样的：如果在aami.properties文件中没找到的话，就在default.properties文件中找。对于apia用户，则先在apia.properties中找，然后查找default.properties。</p>

<p>举个例子，如果default.properties中有一个键值对<code>helloWorld.label = Welcome</code>。那么在jsp上使用时会显示Welcome。但是对于ammi来说需要用同样的键<code>hello.world.label</code>但是显示<code>Welcome to AAMI</code>。</p>

<p>这样可以最大程度的复用default.properties中的数据，同时又可以根据自身品牌定义一些自身的数据在自身品牌的properties文件中。</p>

<p>ResourceBundleMessageSource中有一个<code>parentMessageSource</code>属性，如果在当前MessageSource中找不到code的值，会在<code>parentMessageSource</code>中查找。一个简单的配置如下。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;messageSource&quot;</span>
</span><span class='line'>          <span class="na">class=</span><span class="s">&quot;org.springframework.context.support.ResourceBundleMessageSource&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;parentMessageSource&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">&quot;org.springframework.context.support.ResourceBundleMessageSource&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;basename&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;value&gt;</span>default<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;basenames&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;list&gt;</span>
</span><span class='line'>                <span class="nt">&lt;value&gt;</span>aami<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/list&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果给给定一个code，程序会先在aami.properties文件中查找，如果未找到，则会在default中查找。
这似乎能满足我们的要求。其实不行。假如我们现在将apia品牌也加入，如果想让程序根据当前用户的品牌来选择适合的properties做成首选,当前这个功能是不满足的。我们需要自定义一个继承自<code>ResourceBundleMessageSource</code>的类来实现。</p>

<figure class='code'><figcaption><span>SessionMessageSource.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SessionMessageSource</span> <span class="kd">extends</span> <span class="n">ResourceBundleMessageSource</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">static</span> <span class="kd">final</span> <span class="n">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">SessionMessageSource</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span><span class="o">[]</span> <span class="n">basenames</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="n">String</span> <span class="nf">resolveCodeWithoutArguments</span><span class="o">(</span><span class="n">String</span> <span class="n">code</span><span class="o">,</span> <span class="n">Locale</span> <span class="n">locale</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">ServletRequestAttributes</span> <span class="n">attr</span> <span class="o">=</span> <span class="o">(</span><span class="n">ServletRequestAttributes</span><span class="o">)</span> <span class="n">RequestContextHolder</span><span class="o">.</span><span class="na">currentRequestAttributes</span><span class="o">();</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">String</span> <span class="n">brand</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">attr</span><span class="o">.</span><span class="na">getAttribute</span><span class="o">(</span><span class="s">&quot;brand&quot;</span><span class="o">,</span> <span class="n">RequestAttributes</span><span class="o">.</span><span class="na">SCOPE_SESSION</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">logger</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="n">brand</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">basenameList</span> <span class="o">=</span> <span class="n">Lists</span><span class="o">.</span><span class="na">newArrayList</span><span class="o">(</span><span class="n">basenames</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span><span class="o">(</span><span class="n">String</span> <span class="n">basename</span> <span class="o">:</span> <span class="n">basenameList</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">StringUtils</span><span class="o">.</span><span class="na">endsWithIgnoreCase</span><span class="o">(</span><span class="n">basename</span><span class="o">,</span><span class="n">brand</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">ResourceBundle</span> <span class="n">bundle</span> <span class="o">=</span> <span class="n">getResourceBundle</span><span class="o">(</span><span class="n">basename</span><span class="o">,</span> <span class="n">locale</span><span class="o">);</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">bundle</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">return</span> <span class="nf">getStringOrNull</span><span class="o">(</span><span class="n">bundle</span><span class="o">,</span> <span class="n">code</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setBasenames</span><span class="o">(</span><span class="n">String</span><span class="o">...</span> <span class="n">basenames</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">basenames</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">this</span><span class="o">.</span><span class="na">basenames</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">[</span><span class="n">basenames</span><span class="o">.</span><span class="na">length</span><span class="o">];</span>
</span><span class='line'>            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">basenames</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">String</span> <span class="n">basename</span> <span class="o">=</span> <span class="n">basenames</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
</span><span class='line'>                <span class="n">Assert</span><span class="o">.</span><span class="na">hasText</span><span class="o">(</span><span class="n">basename</span><span class="o">,</span> <span class="s">&quot;Basename must not be empty&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="k">this</span><span class="o">.</span><span class="na">basenames</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">basename</span><span class="o">.</span><span class="na">trim</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">this</span><span class="o">.</span><span class="na">basenames</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">setBasenames</span><span class="o">(</span><span class="n">basenames</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="nf">getStringOrNull</span><span class="o">(</span><span class="n">ResourceBundle</span> <span class="n">bundle</span><span class="o">,</span> <span class="n">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">bundle</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">catch</span> <span class="o">(</span><span class="n">MissingResourceException</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Assume key not found</span>
</span><span class='line'>            <span class="c1">// -&gt; do NOT throw the exception to allow for checking parent message source.</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们首先重写了<code>setBeanNames</code>方法。该方法用于在配置文件中注入properties文件。之所以在这里拿到basenames是为了在<code>resolveCodeWithoutArguments</code>方法中使用。如果父类暴露了<code>basenames</code>属性我们就无需在自己的类中再记录这个属性。</p>

<p>此类重写了父类中的<code>resolveCodeWithoutArguments</code>方法。父类中该方法的职责是在查找自身的ResourceBundle中是否能找到对应code的值，如果找不到就返回null。由于<code>resolveCodeWithoutArguments</code>方法是被<code>getMessageInternal</code>方法调用的。而<code>getMessageInternal</code>方法的大概职责是查看自身的ResourceBundle能否找到code值，否则查找parentMessageSource。所以我们只需对<code>resolveCodeWithoutArguments</code>动手术即可。</p>

<p>在这个方法中，我们首先获取存储在session中的brand值，根据brand值找到对应的propeties文件，使用ResourceBundle来读取code值，如果未找到则返回null，以委托给getMessageInternal来找寻父MessageSource。这样可以有效地将不同的brand隔离开来。</p>

<p>那么在xml中的配置如下。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;messageSource&quot;</span>
</span><span class='line'>          <span class="na">class=</span><span class="s">&quot;com.thoughtworks.config.SessionMessageSource&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;parentMessageSource&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">&quot;org.springframework.context.support.ResourceBundleMessageSource&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;basename&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;value&gt;</span>default<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;basenames&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;list&gt;</span>
</span><span class='line'>                <span class="nt">&lt;value&gt;</span>aami<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>                <span class="nt">&lt;value&gt;</span>apia<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/list&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>此外还需要在适当的时候设置session。</p>

<figure class='code'><figcaption><span>StartFlowController.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Controller</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">StartFlowController</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span><span class="o">=</span> <span class="s">&quot;/aami&quot;</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="n">RequestMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">onAAMIPage</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">request</span><span class="o">.</span><span class="na">getSession</span><span class="o">().</span><span class="na">setAttribute</span><span class="o">(</span><span class="s">&quot;brand&quot;</span><span class="o">,</span> <span class="s">&quot;aami&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;redirect:aami/index&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span><span class="o">=</span> <span class="s">&quot;/apia&quot;</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="n">RequestMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">onAPIAPage</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">request</span><span class="o">.</span><span class="na">getSession</span><span class="o">().</span><span class="na">setAttribute</span><span class="o">(</span><span class="s">&quot;brand&quot;</span><span class="o">,</span> <span class="s">&quot;apia&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;redirect:apia/index&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这些代码可以在我的github中找到。地址是<a href="https://github.com/huangbowen521/SpringMessageSpike">https://github.com/huangbowen521/SpringMessageSpike</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[持续改进-《高效程序员的45个习惯》读后感]]></title>
    <link href="http://www.huangbowen.net/blog/2013/05/24/the-practices-of-an-agile-developer/"/>
    <updated>2013-05-24T11:23:00+10:00</updated>
    <id>http://www.huangbowen.net/blog/2013/05/24/the-practices-of-an-agile-developer</id>
    <content type="html"><![CDATA[<p>原书标题为<a href="http://www.amazon.cn/mn/detailApp/ref=asc_df_B0033WSFAO622894/?asin=B0033WSFAO&amp;tag=douban-23&amp;creative=2384&amp;creativeASIN=B0033WSFAO&amp;linkCode=asn">《Practices of An Agile Developer》</a>。中文名为<a href="http://book.douban.com/subject/4164024/">《高效程序员的45个习惯-敏捷开发修炼之道》</a>。敏捷这个词已经烂大街了，关于敏捷的书籍俯拾皆是。很多人是敏捷的狂热粉丝，而另一些人却讨厌敏捷，认为只是个噱头。我觉得很可能的原因之一是敏捷这个名字没起好。它的原名为“轻量型软件开发过程”（&#8221;lightweight process&#8221;），但后来阴差阳错成了agile(敏捷)。</p>

<!-- more -->


<p>既然书名是敏捷开发者的实践，那么就必须认识敏捷。只有深入的理解了这些实践的来源和目的，才能更好的践行甚至改进实践。</p>

<p><strong>敏捷可以用一句话来概括：敏捷开发就是在一个高度协作的环境中，不断的使用反馈进行自我调整和完善，最终交付用户想要的软件。</strong></p>

<p>从这句话中可以得出很多东西。</p>

<h2>首先，项目适不适合敏捷有两个先决条件：</h2>

<ol>
<li><p><strong>项目是以价值为导向的。</strong>也就是整个团队有一个总体一致的目标，那就是产出高质量、高价值、符合用户需求的软件。以价值为导向，看似简单，实则很难，甚至某些时候要要求公司的组织架构做出一定的调整。试想在一个等级森严、官僚化严重、各种无谓的考评泛滥的公司，有多少人能静下心来好好的搞开发，搞产品？只有打造一个相对扁平的组织，给予充分的信任和自由度，才有利于敏捷的实施。这反过来又要求团队中的每个人有高度的自律性。</p></li>
<li><p><strong>团队能够达到高度协作。</strong>必须能够保证团队中的成员能够流畅的交流。如果在团队中大搞一言堂，信息不透明，很容易打击团队人员工作的积极性，致使团队分崩离析。另外，客户也属于团队中的一员。我们做出的产品最终是给客户看的，如果客户不能保证与团队紧密的合作，那么很容易使产品偏离客户的期望，最终交付失败。</p></li>
</ol>


<h2>再次，可以看到敏捷的基础：反馈。</h2>

<p>一旦你意识到走错了路方向，就要立即做出决策。举个例子，办公室另个团队给我们分享了这样一个故事。在项目刚开始时他们设计了叫做CoreService的类来封装所有的服务。随着项目的进行，CoreService类由于需要处理的服务越来越多，导致类越来越庞大。每个人在修改这个类时，写单元测试要建立对N个服务的mock，苦不堪言。问题在于，没人及时的提出这个bad smell，导致了人们花费了大量的时间来维护它。</p>

<p>这说明了及时反馈的重要性。<strong>反馈包含提出反馈和接受反馈。</strong></p>

<p><strong>提出反馈需要勇气和时机。</strong>要勇敢的提出自己的想法，这既需要自身具有对项目负责的精神，还要团队提供安全的环境。要及时的指出项目中不好的地方，千里之堤，毁于蚁穴。大灾难是逐步演化而来的，项目中切忌温水煮青蛙。</p>

<p><strong>接受反馈需要气度和行动。</strong>这就要求团队成员做事要有专业的态度，对事不对人，重结果轻过程。同时要拿出具体的行动，否则很容易打击积极性。</p>

<h2>其次，可以看到敏捷的精髓：拥抱变化。</h2>

<p>软件开发行业是一个不停发展和永远变化的领域。现在没有将来也不会有一个人能够了解你的项目的方方面面。</p>

<p>变化无处不在，这就要求我们不断的学习。而迭代和增量式的学习则不失为一个好办法。一个学习型的团队才是较好的团队。当然，在学习的同时，你也要懂得丢弃。打破旧习惯很难，更难的是自己还没意识到这个问题。丢弃的第一步，首先是意识到你还在使用过时的方法，这也是最难的部分。</p>

<p>同时，变化意味着我们要主动应对。德国陆军元帅Helmuth von Moltke说过一句话“没有任何计划在遇敌后还能继续执行。”在软件开发中，我们可以这样理解，任何设计在开发中只是一个起点，它如何你的代码一样，会不停地进一步发展和提炼。</p>

<h2>最后，敏捷的目的：交付用户想要的软件。</h2>

<p>试想客户将需求交付给你，要你几年后交付系统。然后，你基于这些需求构建了系统并按时交付。客户看了软件以后连声称赞。从此你多了一个忠实客户，接着开心的投入到下个项目中。请问这样的事情在你的项目中发生过吗？</p>

<p>通常情况是客户看到后暴跳如雷，这根本不是我想要的。这是因为用户的需要、技术和我们对需求的理解，都会随着时间的推移而变化。</p>

<p>那么，如何解决这个问题那？方法之一就是采用敏捷的迭代式开发。每个迭代至少有两个活动不可或缺。一个是展示会议（show case），向客户展示目前的项目进展，已完成的功能，从而收集客户的反馈，即时对产品的方向做出调整。另一个是回顾会议（retro)。回顾会议则是提出反馈的一个好时机。通过回顾会议分析出这个迭代中的做的好的地方和不好的地方，并提出具体的改进行动。</p>

<p>要将团队带入新的领域，必须首先要以身作则。我们需要的是领导者，而不是管理者。无论你目前的项目是否是敏捷项目，这本书中你都可以找到能够借鉴和提高的地方。敏捷中的持续改进不仅局限于项目开发，其实更适合于个人。通过持续改进自己的习惯、处事方法，保持一颗好奇心，勇敢的尝试未知领域，只要自己能力提高了，何惧其他？</p>

<p>改变从自身做起，不能自暴自弃，而要奋起直追。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[npm的配置管理及设置代理]]></title>
    <link href="http://www.huangbowen.net/blog/2013/05/17/setting-npm-configuration/"/>
    <updated>2013-05-17T00:17:00+10:00</updated>
    <id>http://www.huangbowen.net/blog/2013/05/17/setting-npm-configuration</id>
    <content type="html"><![CDATA[<p>npm全称为Node Packaged Modules。它是一个用于管理基于node.js编写的package的命令行工具。其本身就是基于node.js写的,这有点像gem与ruby的关系。</p>

<!-- more -->


<p>在我们的项目中，需要使用一些基于node.js的javascript库文件，就需要npm对这些依赖库进行方便的管理。由于我们的开发环境由于安全因素在访问一些网站时需要使用代理，其中就包括npm的repositories网站，所以就需要修改npm的配置来加入代理。</p>

<p>下面简要介绍下npm的配置以及如何设置代理。</p>

<h2>npm获取配置有6种方式，优先级由高到底。</h2>

<ol>
<li><p>命令行参数。 <code>--proxy http://server:port</code>即将proxy的值设为<code>http://server:port</code>。</p></li>
<li><p>环境变量。 以<code>npm_config_</code>为前缀的环境变量将会被认为是npm的配置属性。如设置proxy可以加入这样的环境变量<code>npm_config_proxy=http://server:port</code>。</p></li>
<li><p>用户配置文件。可以通过<code>npm config get userconfig</code>查看文件路径。如果是mac系统的话默认路径就是<code>$HOME/.npmrc</code>。</p></li>
<li><p>全局配置文件。可以通过<code>npm config get globalconfig</code>查看文件路径。mac系统的默认路径是<code>/usr/local/etc/npmrc</code>。</p></li>
<li><p>内置配置文件。安装npm的目录下的npmrc文件。</p></li>
<li><p>默认配置。 npm本身有默认配置参数，如果以上5条都没设置，则npm会使用默认配置参数。</p></li>
</ol>


<h2>针对npm配置的命令行操作</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>   npm config <span class="nb">set</span> &lt;key&gt; &lt;value&gt; <span class="o">[</span>--global<span class="o">]</span>
</span><span class='line'>   npm config get &lt;key&gt;
</span><span class='line'>   npm config delete &lt;key&gt;
</span><span class='line'>   npm config list
</span><span class='line'>   npm config edit
</span><span class='line'>   npm get &lt;key&gt;
</span><span class='line'>   npm <span class="nb">set</span> &lt;key&gt; &lt;value&gt; <span class="o">[</span>--global<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>在设置配置属性时属性值默认是被存储于用户配置文件中，如果加上<code>--global</code>，则被存储在全局配置文件中。</p>

<p>如果要查看npm的所有配置属性（包括默认配置），可以使用<code>npm config ls -l</code>。</p>

<p>如果要查看npm的各种配置的含义，可以使用<code>npm help config</code>。</p>

<h2>为npm设置代理</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>npm config <span class="nb">set </span>proxy http://server:port
</span><span class='line'><span class="nv">$ </span>npm config <span class="nb">set </span>https-proxy http://server:port
</span></code></pre></td></tr></table></div></figure>


<p>如果代理需要认证的话可以这样来设置。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>npm config <span class="nb">set </span>proxy http://username:password@server:port
</span><span class='line'><span class="nv">$ </span>npm config <span class="nb">set </span>https-proxy http://username:pawword@server:port
</span></code></pre></td></tr></table></div></figure>


<p>如果代理不支持https的话需要修改npm存放package的网站地址。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>npm config <span class="nb">set </span>registry <span class="s2">&quot;http://registry.npmjs.org/&quot;</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[将AngularJS的单元测试和端到端测试集成到gradle构建脚本中]]></title>
    <link href="http://www.huangbowen.net/blog/2013/05/07/integrate-javascript-tests-to-gradle/"/>
    <updated>2013-05-07T15:55:00+10:00</updated>
    <id>http://www.huangbowen.net/blog/2013/05/07/integrate-javascript-tests-to-gradle</id>
    <content type="html"><![CDATA[<p>我目前工作的一个项目后端使用java和spring建立了一个restful service,前端使用<a href="http://angularjs.org/">AngularJS</a>来渲染页面，提供用户接口。在前端的<a href="http://angularjs.org/">AngularJS</a>项目中，我们使用<a href="http://pivotal.github.io/jasmine/">Jasmine</a>来写单元测试，使用<a href="http://angularjs.org/">AngularJS</a>自带的Angular_scenario来写端到端测试。运行这些测试则使用的是<a href="http://karma-runner.github.io/">Karma</a>。</p>

<p>虽然使用<a href="http://karma-runner.github.io/">Karma</a>在命令行下可以很方便的运行所有的测试，但是我们想将这些集成到<a href="http://www.gradle.org/">gradle</a>的构建脚本中，从而将<a href="http://angularjs.org/">AngularJS</a>的所有测试加入到CI的构建中。同时为了保证运行测试的效率，我们决定使用<a href="http://phantomjs.org/">PhantomJS</a>作为运行测试的浏览器环境。</p>

<!-- more -->


<h2>环境搭建</h2>

<ul>
<li><p><strong>安装<a href="http://nodejs.org/">nodeJS</a>。</strong> 直接去官网&lt;http://nodejs.org/ >下载最新的安装包进行安装。</p></li>
<li><p><strong>安装<a href="http://karma-runner.github.io/">Karma</a>。</strong> 可以使用nodeJS提供的npm(node package manager)来安装。</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>npm install -g karma
</span></code></pre></td></tr></table></div></figure>


<p>如果想安装最新的开发者版本，则运行：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>npm install -g karma@canary
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>安装<a href="http://phantomjs.org/">PhantomJS</a>。</strong></li>
</ul>


<p>方式一：使用npm来安装:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>npm install -g phantomjs
</span></code></pre></td></tr></table></div></figure>


<p>方式二：从官网上下载最新的安装包自行安装。地址是<a href="http://phantomjs.org/">http://phantomjs.org/</a> 。</p>

<p>不过为了方便其它人的使用，我将<a href="http://phantomjs.org/">PhantomJS</a>的文件直接放置到了项目的codebase中，并加入了svn管理。这样当setup一个新的工作电脑时就不需要安装它了，直接checkout项目代码就行。最大的原因是当<a href="http://karma-runner.github.io/">Karma</a>运行测试时会根据环境变量寻找<a href="http://phantomjs.org/">PhantomJS</a>的执行文件，将<a href="http://phantomjs.org/">PhantomJS</a>的执行文件放置在统一的地方方便管理，减少环境变量依赖。</p>

<h2>配置<a href="http://karma-runner.github.io/">Karma</a>运行测试的配置文件</h2>

<p>方式一：在项目根目录下运行<code>Karma init</code>,根据提示一步步创建配置文件。</p>

<p>方式二：如果对<a href="http://karma-runner.github.io/">Karma</a>的配置文件较为熟悉的话，可以自行创建一个。</p>

<p>以下是我为unit test创建的配置文件。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
</pre></td><td class='code'><pre><code class='JavaScript'><span class='line'><span class="c1">// Sample Karma configuration file, that contain pretty much all the available options</span>
</span><span class='line'><span class="c1">// It&#39;s used for running client tests on Travis (http://travis-ci.org/#!/karma-runner/karma)</span>
</span><span class='line'><span class="c1">// Most of the options can be overriden by cli arguments (see karma --help)</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">// For all available config options and default values, see:</span>
</span><span class='line'><span class="c1">// https://github.com/karma-runner/karma/blob/stable/lib/config.js#L54</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// base path, that will be used to resolve files and exclude</span>
</span><span class='line'><span class="nx">basePath</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">frameworks</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;jasmine&#39;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// list of files / patterns to load in the browser</span>
</span><span class='line'><span class="nx">files</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="s1">&#39;spec/*.spec.js&#39;</span>
</span><span class='line'><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// list of files to exclude</span>
</span><span class='line'><span class="nx">exclude</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// web server port</span>
</span><span class='line'><span class="c1">// CLI --port 9876</span>
</span><span class='line'><span class="nx">port</span> <span class="o">=</span> <span class="mi">9876</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// cli runner port</span>
</span><span class='line'><span class="c1">// CLI --runner-port 9100</span>
</span><span class='line'><span class="nx">runnerPort</span> <span class="o">=</span> <span class="mi">9100</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// enable / disable colors in the output (reporters and logs)</span>
</span><span class='line'><span class="c1">// CLI --colors --no-colors</span>
</span><span class='line'><span class="nx">colors</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// level of logging</span>
</span><span class='line'><span class="c1">// possible values: LOG_DISABLE || LOG_ERROR || LOG_WARN || LOG_INFO || LOG_DEBUG</span>
</span><span class='line'><span class="c1">// CLI --log-level debug</span>
</span><span class='line'><span class="nx">logLevel</span> <span class="o">=</span> <span class="nx">LOG_INFO</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// enable / disable watching file and executing tests whenever any file changes</span>
</span><span class='line'><span class="c1">// CLI --auto-watch --no-auto-watch</span>
</span><span class='line'><span class="nx">autoWatch</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Start these browsers, currently available:</span>
</span><span class='line'><span class="c1">// - Chrome</span>
</span><span class='line'><span class="c1">// - ChromeCanary</span>
</span><span class='line'><span class="c1">// - Firefox</span>
</span><span class='line'><span class="c1">// - Opera</span>
</span><span class='line'><span class="c1">// - Safari (only Mac)</span>
</span><span class='line'><span class="c1">// - PhantomJS</span>
</span><span class='line'><span class="c1">// - IE (only Windows)</span>
</span><span class='line'><span class="c1">// CLI --browsers Chrome,Firefox,Safari</span>
</span><span class='line'><span class="nx">browsers</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;PhantomJS&#39;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// If browser does not capture in given timeout [ms], kill it</span>
</span><span class='line'><span class="c1">// CLI --capture-timeout 5000</span>
</span><span class='line'><span class="nx">captureTimeout</span> <span class="o">=</span> <span class="mi">10000</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Auto run tests on start (when browsers are captured) and exit</span>
</span><span class='line'><span class="c1">// CLI --single-run --no-single-run</span>
</span><span class='line'><span class="nx">singleRun</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// report which specs are slower than 500ms</span>
</span><span class='line'><span class="c1">// CLI --report-slower-than 500</span>
</span><span class='line'><span class="nx">reportSlowerThan</span> <span class="o">=</span> <span class="mi">500</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// compile coffee scripts</span>
</span><span class='line'><span class="nx">preprocessors</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="s1">&#39;**/*.coffee&#39;</span><span class="o">:</span> <span class="s1">&#39;coffee&#39;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">plugins</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="s1">&#39;karma-jasmine&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;karma-chrome-launcher&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;karma-firefox-launcher&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;karma-phantomjs-launcher&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;karma-junit-reporter&#39;</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>由于需要在CI中运行测试，所以应当将autoWatch设置为false,将singleRun设置为true。这样<a href="http://karma-runner.github.io/">Karma</a>只会运行一遍测试。</p>

<p>由于我们将<a href="http://phantomjs.org/">PhantomJS</a>放置在工程目录下，为了让<a href="http://karma-runner.github.io/">Karma</a>能找到<a href="http://phantomjs.org/">PhantomJS</a>的执行文件，需要设置环境变量PHANTOMJS_BIN。在Karma.conf.js中加入如下代码:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javaScript'><span class='line'><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PHANTOMJS</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;path&#39;</span><span class="p">).</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="s1">&#39;tools/PhantomJS/phantomjs.exe&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果Karma运行测试时找不到浏览器的执行文件，会报一个错误。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>INFO <span class="o">[</span>karma<span class="o">]</span>: Karma v0.9.2 server started at http://localhost:9876/
</span><span class='line'>INFO <span class="o">[</span>launcher<span class="o">]</span>: Starting browser PhantomJS
</span><span class='line'>ERROR <span class="o">[</span>karma<span class="o">]</span>: <span class="o">{</span> <span class="o">[</span>Error: spawn ENOENT<span class="o">]</span> code: <span class="s1">&#39;ENOENT&#39;</span>, errno: <span class="s1">&#39;ENOENT&#39;</span>, syscall: <span class="s1">&#39;spawn&#39;</span> <span class="o">}</span>
</span><span class='line'>Error: spawn ENOENT
</span><span class='line'>    at errnoException <span class="o">(</span>child_process.js:977:11<span class="o">)</span>
</span><span class='line'>    at Process.ChildProcess._handle.onexit <span class="o">(</span>child_process.js:768:34<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>当时我花了好长时间来寻找原因，最后使用<code>karma start karma.conf.js --log-level=debug</code>来查看运行日志。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>INFO <span class="o">[</span>launcher<span class="o">]</span>: Starting browser PhantomJS
</span><span class='line'>DEBUG <span class="o">[</span>launcher<span class="o">]</span>: Creating temp dir at C:<span class="se">\U</span>sers<span class="se">\b</span>owen<span class="se">\A</span>ppData<span class="se">\L</span>ocal<span class="se">\2\k</span>arma-28747846
</span><span class='line'>DEBUG <span class="o">[</span>launcher<span class="o">]</span>: C:<span class="se">\P</span>rogram Files<span class="se">\P</span>hantomJS<span class="se">\p</span>hamtomjs.exe  C:<span class="se">\U</span>sers<span class="se">\b</span>owen<span class="se">\A</span>ppData<span class="se">\L</span>ocal<span class="se">\2\k</span>arma-28747846capture.js
</span><span class='line'>INFO <span class="o">[</span>karma<span class="o">]</span>: To run via this server, use <span class="s2">&quot;karma run --runner-port 9101&quot;</span>
</span><span class='line'>ERROR <span class="o">[</span>karma<span class="o">]</span>: <span class="o">{</span> <span class="o">[</span>Error: spawn ENOENT<span class="o">]</span> code: <span class="s1">&#39;ENOENT&#39;</span>, errno: <span class="s1">&#39;ENOENT&#39;</span>, syscall: <span class="s1">&#39;spawn&#39;</span> <span class="o">}</span>
</span><span class='line'>Error: spawn ENOENT
</span></code></pre></td></tr></table></div></figure>


<p>通过DEBUG的log我发现<code>C:\Program Files\PhantomJS\phamtomjs.exe</code>下并未有该文件，最后使用上述的方法来设置<a href="http://phantomjs.org/">PhantomJS</a>的环境变量。（奇怪的是我已经在PowerShell里设置了该环境变量，并且Karma命令行也是在PowerShell运行的，但是<a href="http://nodejs.org/">nodeJS</a>并未获取正确的环境变量值）。</p>

<h2>在build.gradle中加入运行Karma的task</h2>

<p>由于我们的开发机以及CI服务器都是Windows环境，所以需要调用CMD来执行<a href="http://karma-runner.github.io/">Karma</a>命令。</p>

<p>配置如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">task</span> <span class="nf">jsUnit</span><span class="o">(</span><span class="nl">type:</span> <span class="n">Exec</span><span class="o">,</span> <span class="nl">description:</span> <span class="err">&#39;</span><span class="n">JS</span> <span class="n">unit</span> <span class="n">tests</span><span class="err">&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>     <span class="n">workingDir</span> <span class="err">&#39;</span><span class="o">./</span><span class="n">src</span><span class="o">/</span><span class="n">test</span><span class="o">/</span><span class="n">scripts</span><span class="err">&#39;</span>
</span><span class='line'>     <span class="n">commandLine</span> <span class="err">&#39;</span><span class="n">cmd</span><span class="err">&#39;</span><span class="o">,</span> <span class="err">&#39;</span><span class="o">/</span><span class="n">c</span><span class="err">&#39;</span><span class="o">,</span> <span class="err">&#39;</span><span class="n">karma</span> <span class="n">start</span> <span class="n">karma</span><span class="o">.</span><span class="na">conf</span><span class="o">.</span><span class="na">js</span><span class="err">&#39;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">task</span> <span class="nf">e2eTest</span><span class="o">(</span><span class="nl">type:</span> <span class="n">Exec</span><span class="o">,</span> <span class="nl">description:</span> <span class="err">&#39;</span> <span class="n">e2e</span> <span class="n">tests</span><span class="err">&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>     <span class="n">workingDir</span> <span class="err">&#39;</span><span class="o">./</span><span class="n">src</span><span class="o">/</span><span class="n">test</span><span class="o">/</span><span class="n">scripts</span><span class="err">&#39;</span>
</span><span class='line'>     <span class="n">commandLine</span> <span class="err">&#39;</span><span class="n">cmd</span><span class="err">&#39;</span><span class="o">,</span> <span class="err">&#39;</span><span class="o">/</span><span class="n">c</span><span class="err">&#39;</span><span class="o">,</span> <span class="err">&#39;</span><span class="n">karma</span> <span class="n">start</span> <span class="n">karma</span><span class="o">-</span><span class="n">e2e</span><span class="o">.</span><span class="na">conf</span><span class="o">.</span><span class="na">js</span><span class="err">&#39;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意运行端到端测试前要将restful服务器setup起来。</p>

<p>当时在Windows上配置<a href="http://karma-runner.github.io/">Karma</a>花了很多功夫，使用Firefox浏览器发现会同时打开3个tab页，并且将singRun改为true不能运行成功，使用Chrome浏览器则测试运行完毕后浏览器无法关闭，使用<a href="http://phantomjs.org/">PhantomJS</a>又由于环境变量的问题花了一些时间来找原因。但是在我自己的苹果笔记本上各个浏览器都工作良好，真想说Windows是个奇葩。</p>

<p>对于普通用户来说可能Windows系统更适合他们，但是对于程序员来说MAC系统真的非常棒，反应迅速，配置简单，能让你的开发效率提升一个档次。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用MANIFEST.MF文件来track war包做持续部署]]></title>
    <link href="http://www.huangbowen.net/blog/2013/04/18/use-manifest-dot-mf-to-track-war-file/"/>
    <updated>2013-04-18T12:40:00+10:00</updated>
    <id>http://www.huangbowen.net/blog/2013/04/18/use-manifest-dot-mf-to-track-war-file</id>
    <content type="html"><![CDATA[<p>在我工作的项目中有这样一个需求。当通过自动部署脚本将当前一个CI构建的WAR包部署到指定服务器后，需要验证该WAR包是否被部署成功。</p>

<p>在这个项目中，持续集成服务器使用的是<a href="http://jenkins-ci.org/">Jenkins</a>，构建脚本使用的是<a href="http://maven.apache.org/">maven</a>，向服务器的部署使用的是Groovy写的部署脚本，调用了<a href="http://www.incanica.com/tour/whytableaux">Tableuax</a> API。</p>

<p>在<a href="http://jenkins-ci.org/">Jenkins</a>上有两个job，一个CI job，一个dev job。
每次提交代码都会在<a href="http://jenkins-ci.org/">Jenkins</a>上trigger CI ob，这个job会执行配置的<a href="http://maven.apache.org/">maven</a>命令<code>mvn clean install</code>，如果构建成功，会自动trigger dev job。这个job会执行部署脚本，部署脚本负责调用<a href="http://www.incanica.com/tour/whytableaux">Tableuax</a> API将前一个job构建的war包部署到服务器上。</p>

<!-- more -->


<p>由于部署是调用<a href="http://www.incanica.com/tour/whytableaux">Tableuax</a> API来实现的，我们需要在部署完成以后验证此次部署是否成功。如何进行那？可以分为如下几个步骤。</p>

<p><strong>首先, 当<a href="http://jenkins-ci.org/">Jenkins</a>的第一个job构建war包时，将这次构建的一些信息写入到MANIFEST.MF文件中。</strong></p>

<p>MANIFEST.MF文件是Java平台下的Jar包或者war包中都普遍存在的一个文件。这个文件通常被放置在META-INF文件夹下，名称通常为MANIFEST.MF。它其实相当于一个properties文件，里面都是一些键值对，特殊之处是每个jar包或者war包至多只能有一个MANIFEST.MF文件。</p>

<p>那么如何在<a href="http://jenkins-ci.org/">Jenkins</a>运行build时将本次构建的相关信息写入到MANIFEST.MF文件那？那要借助于maven.war.plugin插件。</p>

<p>当一个<a href="http://jenkins-ci.org/">Jenkins</a> job被执行时，会自动设置一些环境变量，这些环境变量可以在shell script, batch command或者Maven POM中被访问。（查看所有的环境变量请看<a href="https://wiki.jenkins-ci.org/display/JENKINS/Building+a+software+project#Buildingasoftwareproject-JenkinsSetEnvironmentVariables">这里</a>）。
所以我们可以在项目的pom.xml加入以下的plugin来设置一些build信息到MANIFEST.MF文件中。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>    <span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>        <span class="nt">&lt;groupId&gt;</span>org.apache.maven.plugins<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>        <span class="nt">&lt;artifactId&gt;</span>maven-war-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>        <span class="nt">&lt;version&gt;</span>2.2<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>        <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>            <span class="nt">&lt;archive&gt;</span>
</span><span class='line'>                <span class="nt">&lt;manifest&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;addDefaultImplementationEntries&gt;</span>true<span class="nt">&lt;/addDefaultImplementationEntries&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/manifest&gt;</span>
</span><span class='line'>                <span class="nt">&lt;manifestEntries&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;Build-Number&gt;</span>${BUILD_NUMBER}<span class="nt">&lt;/Build-Number&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;Job-Name&gt;</span>${JOB_NAME}<span class="nt">&lt;/Job-Name&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;Build-Url&gt;</span>${BUILD_URL}<span class="nt">&lt;/Build-Url&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;Svn-Revision&gt;</span>${SVN_REVISION}<span class="nt">&lt;/Svn-Revision&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;Timestamp&gt;</span>${maven.build.timestamp}<span class="nt">&lt;/Timestamp&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/manifestEntries&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/archive&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/plugin&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://jenkins-ci.org/">Jenkins</a> job执行完毕后，在打包好的WAR包中就含有一个MANIFEST.MF文件了。以下是一个示例。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>Manifest-Version: 1.0
</span><span class='line'>Implementation-Title: myWebApp
</span><span class='line'>Implementation-Version: 1.1-SNAPSHOT
</span><span class='line'>Job-Name: myWebApp-CI
</span><span class='line'>Built-By: bowen
</span><span class='line'>Created-By: Apache Maven
</span><span class='line'>Timestamp: 20130417-1654
</span><span class='line'>Build-Number: 118
</span><span class='line'>Svn-Revision: 5606
</span><span class='line'>Implementation-Vendor-Id: myWebApp
</span><span class='line'>Build-Url: http://10.70.21.74:80/job/myWebApp/118/
</span><span class='line'>Build-Jdk: 1.6.0_18
</span><span class='line'>Implementation-Build: 2013-04-17 16:54:54
</span><span class='line'>Archiver-Version: Plexus Archiver
</span></code></pre></td></tr></table></div></figure>


<p><strong>然后，创建一个页面来显示这些build信息，以便能随时查看当前部署在服务器上的war包的build number是多少，是由谁构建的，构建时间等信息。第二个job的部署脚本也可以通过这个页面得到build number，以此来判别部署的是否是想要的版本。</strong></p>

<p>这就牵扯到对MANIFEST.MF文件的读取了。有一个现成的库用于读取jar包或者war包中的MANIFEST.MF文件信息。</p>

<p>在项目的pom.xml文件中加入对这个库的依赖。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>  <span class="nt">&lt;groupId&gt;</span>com.jcabi<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;artifactId&gt;</span>jcabi-manifests<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;version&gt;</span>0.7.17<span class="nt">&lt;/version&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>对于war包而言，需要通过SevletContext来获取当前的MANIFEST.MF文件。首先需要创建一个继承自<code>ServletContextListener</code>接口的类来将ServletContext设置给Manifests对象。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">thoughtworks</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ContextListener</span> <span class="kd">implements</span> <span class="n">ServletContextListener</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">contextInitialized</span><span class="o">(</span><span class="n">ServletContextEvent</span> <span class="n">event</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Manifests</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getServletContext</span><span class="o">());</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后需要在web.xml配置文件中将这个Listener加入到Listener列表中。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;listener&gt;</span>
</span><span class='line'><span class="nt">&lt;listener-class&gt;</span>com.thoughtworks.ContextListener<span class="nt">&lt;/listener-class&gt;</span>
</span><span class='line'><span class="nt">&lt;/listener&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样就可以在Controller里直接使用Manifests对象来获取MANIFEST.MF文件记录的各种值了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">String</span> <span class="n">buildNumber</span> <span class="o">=</span> <span class="n">Manifests</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="s">&quot;Build-Number&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">String</span> <span class="n">buildJdk</span> <span class="o">=</span> <span class="n">Manifests</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="s">&quot;Build-Jdk&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">String</span> <span class="n">BuiltBy</span> <span class="o">=</span> <span class="n">Manifests</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="s">&quot;Built-By&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">String</span> <span class="n">timestamp</span> <span class="o">=</span> <span class="n">Manifests</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="s">&quot;Timestamp&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>再建立一个jsp页面用于显示这些值即可。</p>

<p><strong>最后，部署脚本获取该页面的内容，判断页面内容中的build number是否为期望部署的build number。</strong></p>

<p>这只是判断部署的war包是不是期望的war包。如果想要验证其是完全可以工作的，就需要部署脚本调用smoke test来进行功能性测试了。这个留到下次再讲。</p>
]]></content>
  </entry>
  
</feed>
