<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[黄博文的地盘]]></title>
  <link href="http://www.huangbowen.net/atom.xml" rel="self"/>
  <link href="http://www.huangbowen.net/"/>
  <updated>2014-02-22T19:30:12+08:00</updated>
  <id>http://www.huangbowen.net/</id>
  <author>
    <name><![CDATA[黄博文]]></name>
    <email><![CDATA[huangbowen521@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ActiveMQ第三弹:在Spring中使用内置的Message Broker]]></title>
    <link href="http://www.huangbowen.net/blog/2014/02/22/using-embeded-broker-in-spring/"/>
    <updated>2014-02-22T19:16:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2014/02/22/using-embeded-broker-in-spring</id>
    <content type="html"><![CDATA[<p>在上个例子中我们演示了如何使用Spring JMS来向ActiveMQ发送消息和接收消息。但是这个例子需要先从控制台使用ActiveMQ提供的命令行功能启动一个Message Broker,然后才能运行示例。这个Message Broker就相当于一个server，无论是发送方还是接收方都可以连接到这个Server进行消息的处理。在某些情况下，让Message Broker和consumer启动在同一个JVM里面，通信效率肯定会高不少。</p>

<!-- more -->


<p>ActiveMQ提供了很多方式来创建内置的broker。这篇文章主要介绍使用Spring及XBean来创建一个内置的broker。</p>

<p>首先需要在项目中引入xbean-spring依赖项。</p>

<figure class='code'><figcaption><span>pom.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>      <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>          <span class="nt">&lt;groupId&gt;</span>org.apache.xbean<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;artifactId&gt;</span>xbean-spring<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;version&gt;</span>3.16<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后在Spring配置文件中加入以下代码:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>    <span class="nt">&lt;amq:broker</span> <span class="na">id=</span><span class="s">&quot;activeMQBroker&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;amq:transportConnectors&gt;</span>
</span><span class='line'>            <span class="nt">&lt;amq:transportConnector</span> <span class="na">uri=</span><span class="s">&quot;${jms.broker.url}&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/amq:transportConnectors&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/amq:broker&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意在Spring配置文件中还要加入Namespace的定义。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.springframework.org/schema/beans&quot;</span>
</span><span class='line'>       <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>       <span class="na">xmlns:amq=</span><span class="s">&quot;http://activemq.apache.org/schema/core&quot;</span>
</span><span class='line'>       <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span>
</span><span class='line'><span class="s">       http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core-5.8.0.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>...
</span><span class='line'>...
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/beans&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>完整的Spring配置如下。</p>

<figure class='code'><figcaption><span>embedBroker.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.springframework.org/schema/beans&quot;</span>
</span><span class='line'>       <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>       <span class="na">xmlns:amq=</span><span class="s">&quot;http://activemq.apache.org/schema/core&quot;</span>
</span><span class='line'>       <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span>
</span><span class='line'><span class="s">       http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core-5.8.0.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">&quot;org.springframework.beans.factory.config.PropertyPlaceholderConfigurer&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;location&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;value&gt;</span>application.properties<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- Activemq connection factory --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;amqConnectionFactory&quot;</span> <span class="na">class=</span><span class="s">&quot;org.apache.activemq.ActiveMQConnectionFactory&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="c">&lt;!--&lt;property name=&quot;brokerURL&quot; value=&quot;${jms.broker.url}&quot;/&gt;--&gt;</span>
</span><span class='line'>        <span class="nt">&lt;constructor-arg</span> <span class="na">index=</span><span class="s">&quot;0&quot;</span> <span class="na">value=</span><span class="s">&quot;${jms.broker.url}&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;useAsyncSend&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;amq:broker</span> <span class="na">id=</span><span class="s">&quot;activeMQBroker&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;amq:transportConnectors&gt;</span>
</span><span class='line'>            <span class="nt">&lt;amq:transportConnector</span> <span class="na">uri=</span><span class="s">&quot;${jms.broker.url}&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/amq:transportConnectors&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/amq:broker&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- ConnectionFactory Definition --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;connectionFactory&quot;</span> <span class="na">class=</span><span class="s">&quot;org.springframework.jms.connection.CachingConnectionFactory&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;constructor-arg</span> <span class="na">ref=</span><span class="s">&quot;amqConnectionFactory&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!--  Default Destination Queue Definition--&gt;</span>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;defaultDestination&quot;</span> <span class="na">class=</span><span class="s">&quot;org.apache.activemq.command.ActiveMQQueue&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;constructor-arg</span> <span class="na">index=</span><span class="s">&quot;0&quot;</span> <span class="na">value=</span><span class="s">&quot;${jms.queue.name}&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- JmsTemplate Definition --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;jmsTemplate&quot;</span> <span class="na">class=</span><span class="s">&quot;org.springframework.jms.core.JmsTemplate&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;connectionFactory&quot;</span> <span class="na">ref=</span><span class="s">&quot;connectionFactory&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;defaultDestination&quot;</span> <span class="na">ref=</span><span class="s">&quot;defaultDestination&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- Message Sender Definition --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;messageSender&quot;</span> <span class="na">class=</span><span class="s">&quot;huangbowen.net.jms.MessageSender&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;constructor-arg</span> <span class="na">index=</span><span class="s">&quot;0&quot;</span> <span class="na">ref=</span><span class="s">&quot;jmsTemplate&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- Message Receiver Definition --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;messageReceiver&quot;</span> <span class="na">class=</span><span class="s">&quot;huangbowen.net.jms.MessageReceiver&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">&quot;org.springframework.jms.listener.SimpleMessageListenerContainer&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;connectionFactory&quot;</span> <span class="na">ref=</span><span class="s">&quot;connectionFactory&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;destinationName&quot;</span> <span class="na">value=</span><span class="s">&quot;${jms.queue.name}&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;messageListener&quot;</span> <span class="na">ref=</span><span class="s">&quot;messageReceiver&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/beans&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在<a href="https://github.com/huangbowen521/SpringJMSSample">示例项目</a>中我新加了一个Main方法来进行测试。可以运行EmbedBrokerApp中的Main方法来进行测试。</p>

<p><img src="http://www.huangbowen.net/images/messageTest.png"></p>

<p>如果客户端和broker在相同的JVM进程中，客户端连接时可以使用broker url为“vm://localhost:61616”,进程外连接则需要使用”tcp://localhost:61616&#8221;。如果有多个broker的话可以给每个broker起个名字。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>    <span class="nt">&lt;amq:broker</span> <span class="na">brokerName=</span><span class="s">&quot;broker1&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;amq:transportConnectors&gt;</span>
</span><span class='line'>            <span class="nt">&lt;amq:transportConnector</span> <span class="na">uri=</span><span class="s">&quot;tcp://localhost:61616&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/amq:transportConnectors&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/amq:broker&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;amq:broker</span> <span class="na">brokerName=</span><span class="s">&quot;broker2&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;amq:transportConnectors&gt;</span>
</span><span class='line'>            <span class="nt">&lt;amq:transportConnector</span> <span class="na">uri=</span><span class="s">&quot;tcp://localhost:61617&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/amq:transportConnectors&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/amq:broker&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>客户端连接时候可以直接使用broker名称连接，比如使用”vm://broker1”来使用第一个broker。</p>

<p>本章中的完整源码可从完整代码可从<a href="https://github.com/huangbowen521/SpringJMSSample">https://github.com/huangbowen521/SpringJMSSample</a>下载。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActiveMQ第二弹:使用Spring JMS与ActiveMQ通讯]]></title>
    <link href="http://www.huangbowen.net/blog/2014/02/20/spring-jms-and-activemq-sample/"/>
    <updated>2014-02-20T23:18:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2014/02/20/spring-jms-and-activemq-sample</id>
    <content type="html"><![CDATA[<p>本文章的完整代码可从我的github中下载：<a href="https://github.com/huangbowen521/SpringJMSSample.git">https://github.com/huangbowen521/SpringJMSSample.git</a></p>

<p>上一篇文章中介绍了如何安装和运行ActiveMQ。这一章主要讲述如何使用Spring JMS向ActiveMQ的Message Queue中发消息和读消息。</p>

<!-- more -->


<p>首先需要在项目中引入依赖库。</p>

<ul>
<li><p>spring-core: 用于启动Spring容器，加载bean。</p></li>
<li><p>spring-jms:使用Spring JMS提供的API。</p></li>
<li><p>activemq-all:使用ActiveMQ提供的API。</p></li>
</ul>


<p>在本示例中我使用maven来导入相应的依赖库。</p>

<figure class='code'><figcaption><span>pom.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>  <span class="nt">&lt;dependencies&gt;</span>
</span><span class='line'>    <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>      <span class="nt">&lt;groupId&gt;</span>junit<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>      <span class="nt">&lt;artifactId&gt;</span>junit<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>      <span class="nt">&lt;version&gt;</span>4.11<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>      <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>      <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>          <span class="nt">&lt;groupId&gt;</span>org.apache.activemq<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;artifactId&gt;</span>activemq-all<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;version&gt;</span>5.9.0<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>      <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>          <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;artifactId&gt;</span>spring-jms<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;version&gt;</span>4.0.2.RELEASE<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>      <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>          <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;artifactId&gt;</span>spring-core<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;version&gt;</span>4.0.2.RELEASE<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/dependencies&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>接下来配置与ActiveMQ的连接，以及一个自定义的MessageSender。</p>

<figure class='code'><figcaption><span>springJMSConfiguration.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.springframework.org/schema/beans&quot;</span>
</span><span class='line'>       <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>       <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://www.springframework.org/schema/beans</span>
</span><span class='line'><span class="s"> http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">&quot;org.springframework.beans.factory.config.PropertyPlaceholderConfigurer&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;location&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;value&gt;</span>application.properties<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- Activemq connection factory --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;amqConnectionFactory&quot;</span> <span class="na">class=</span><span class="s">&quot;org.apache.activemq.ActiveMQConnectionFactory&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;constructor-arg</span> <span class="na">index=</span><span class="s">&quot;0&quot;</span> <span class="na">value=</span><span class="s">&quot;${jms.broker.url}&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- ConnectionFactory Definition --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;connectionFactory&quot;</span> <span class="na">class=</span><span class="s">&quot;org.springframework.jms.connection.CachingConnectionFactory&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;constructor-arg</span> <span class="na">ref=</span><span class="s">&quot;amqConnectionFactory&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!--  Default Destination Queue Definition--&gt;</span>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;defaultDestination&quot;</span> <span class="na">class=</span><span class="s">&quot;org.apache.activemq.command.ActiveMQQueue&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;constructor-arg</span> <span class="na">index=</span><span class="s">&quot;0&quot;</span> <span class="na">value=</span><span class="s">&quot;${jms.queue.name}&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- JmsTemplate Definition --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;jmsTemplate&quot;</span> <span class="na">class=</span><span class="s">&quot;org.springframework.jms.core.JmsTemplate&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;connectionFactory&quot;</span> <span class="na">ref=</span><span class="s">&quot;connectionFactory&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;defaultDestination&quot;</span> <span class="na">ref=</span><span class="s">&quot;defaultDestination&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- Message Sender Definition --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;messageSender&quot;</span> <span class="na">class=</span><span class="s">&quot;huangbowen.net.jms.MessageSender&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;constructor-arg</span> <span class="na">index=</span><span class="s">&quot;0&quot;</span> <span class="na">ref=</span><span class="s">&quot;jmsTemplate&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'><span class="nt">&lt;/beans&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在此配置文件中，我们配置了一个ActiveMQ的connection factory,使用的是ActiveMQ提供的ActiveMQConnectionFactory类。然后又配置了一个Spring JMS提供的CachingConnectionFactory。我们定义了一个ActiveMQQueue作为消息的接收Queue。并创建了一个JmsTemplate，使用了之前创建的ConnectionFactory和Message Queue作为参数。最后自定义了一个MessageSender，使用该JmsTemplate进行消息发送。</p>

<p>以下MessageSender的实现。</p>

<figure class='code'><figcaption><span>MessageSender.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">huangbowen</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">jms</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.jms.core.JmsTemplate</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MessageSender</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">JmsTemplate</span> <span class="n">jmsTemplate</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">MessageSender</span><span class="o">(</span><span class="kd">final</span> <span class="n">JmsTemplate</span> <span class="n">jmsTemplate</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">jmsTemplate</span> <span class="o">=</span> <span class="n">jmsTemplate</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">send</span><span class="o">(</span><span class="kd">final</span> <span class="n">String</span> <span class="n">text</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">jmsTemplate</span><span class="o">.</span><span class="na">convertAndSend</span><span class="o">(</span><span class="n">text</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个MessageSender很简单，就是通过jmsTemplate发送一个字符串信息。</p>

<p>我们还需要配置一个Listener来监听和处理当前的Message Queue。</p>

<figure class='code'><figcaption><span>springJMSReceiver.xml </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.springframework.org/schema/beans&quot;</span>
</span><span class='line'>       <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>       <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://www.springframework.org/schema/beans</span>
</span><span class='line'><span class="s"> http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- Message Receiver Definition --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;messageReceiver&quot;</span> <span class="na">class=</span><span class="s">&quot;huangbowen.net.jms.MessageReceiver&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">&quot;org.springframework.jms.listener.SimpleMessageListenerContainer&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;connectionFactory&quot;</span> <span class="na">ref=</span><span class="s">&quot;connectionFactory&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;destinationName&quot;</span> <span class="na">value=</span><span class="s">&quot;${jms.queue.name}&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;messageListener&quot;</span> <span class="na">ref=</span><span class="s">&quot;messageReceiver&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/beans&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>在上述xml文件中,我们自定义了一个MessageListener，并且使用Spring提供的SimpleMessageListenerContainer作为Container。</p>

<p>以下是MessageLinser的具体实现。</p>

<figure class='code'><figcaption><span>MessageReceiver.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">huangbowen</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">jms</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.jms.*</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MessageReceiver</span> <span class="kd">implements</span> <span class="n">MessageListener</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onMessage</span><span class="o">(</span><span class="n">Message</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span><span class="o">(</span><span class="n">message</span> <span class="k">instanceof</span> <span class="n">TextMessage</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">TextMessage</span> <span class="n">textMessage</span> <span class="o">=</span> <span class="o">(</span><span class="n">TextMessage</span><span class="o">)</span> <span class="n">message</span><span class="o">;</span>
</span><span class='line'>            <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">String</span> <span class="n">text</span> <span class="o">=</span> <span class="n">textMessage</span><span class="o">.</span><span class="na">getText</span><span class="o">();</span>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;Received: %s&quot;</span><span class="o">,</span><span class="n">text</span><span class="o">));</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">JMSException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个MessageListener也相当的简单，就是从Queue中读取出消息以后输出到当前控制台中。</p>

<p>另外有关ActiveMQ的url和所使用的Message Queue的配置在application.properties文件中。</p>

<figure class='code'><figcaption><span>application.properties</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>jms.broker.url=tcp://localhost:61616
</span><span class='line'>jms.queue.name=bar
</span></code></pre></td></tr></table></div></figure>


<p>好了，配置大功告成。如何演示那？我创建了两个Main方法，一个用于发送消息到ActiveMQ的MessageQueue中，一个用于从MessageQueue中读取消息。</p>

<figure class='code'><figcaption><span>SenderApp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">huangbowen</span><span class="o">.</span><span class="na">net</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">huangbowen.net.jms.MessageSender</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.context.ApplicationContext</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.context.support.ClassPathXmlApplicationContext</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.util.StringUtils</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.BufferedReader</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.InputStreamReader</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SenderApp</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span> <span class="n">String</span><span class="o">[]</span> <span class="n">args</span> <span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">MessageSender</span> <span class="n">sender</span> <span class="o">=</span> <span class="n">getMessageSender</span><span class="o">();</span>
</span><span class='line'>        <span class="n">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="n">InputStreamReader</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">text</span> <span class="o">=</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">while</span> <span class="o">(!</span><span class="n">StringUtils</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">(</span><span class="n">text</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;send message: %s&quot;</span><span class="o">,</span> <span class="n">text</span><span class="o">));</span>
</span><span class='line'>            <span class="n">sender</span><span class="o">.</span><span class="na">send</span><span class="o">(</span><span class="n">text</span><span class="o">);</span>
</span><span class='line'>            <span class="n">text</span> <span class="o">=</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">MessageSender</span> <span class="nf">getMessageSender</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">ApplicationContext</span> <span class="n">context</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="s">&quot;springJMSConfiguration.xml&quot;</span><span class="o">);</span>
</span><span class='line'>       <span class="k">return</span> <span class="o">(</span><span class="n">MessageSender</span><span class="o">)</span> <span class="n">context</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">&quot;messageSender&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>ReceiverApp.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">huangbowen</span><span class="o">.</span><span class="na">net</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.context.support.ClassPathXmlApplicationContext</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ReceiverApp</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span> <span class="n">String</span><span class="o">[]</span> <span class="n">args</span> <span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="k">new</span> <span class="nf">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="s">&quot;springJMSConfiguration.xml&quot;</span><span class="o">,</span> <span class="s">&quot;springJMSReceiver.xml&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>OK，如果运行的话要先将ActiveMQ服务启动起来（更多启动方式参见我上篇文章）。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$:</span>/usr/local/Cellar/activemq/5.8.0/libexec<span class="nv">$ </span>activemq start xbean:./conf/activemq-demo.xml
</span></code></pre></td></tr></table></div></figure>


<p>然后运行SenderApp中的Main方法，就可以在控制台中输入消息发送到ActiveMQ的Message Queue中了。运行ReceiverApp中的Main方法，则会从Queue中将消息读出来，打印到控制台。</p>

<p>这就是使用Spring JMS与ActiveMQ交互的一个简单例子了。完整代码可从https://github.com/huangbowen521/SpringJMSSample下载。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActiveMQ第一弹:安装与运行]]></title>
    <link href="http://www.huangbowen.net/blog/2014/02/20/install-and-run-activemq/"/>
    <updated>2014-02-20T00:12:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2014/02/20/install-and-run-activemq</id>
    <content type="html"><![CDATA[<p>ActiveMQ使用java写的，所以天然跨平台，windows，各种类Unix系统都可运行，只需要下载对应的分发包即可。当前AciveMQ的最新版本是5.9.0。我目前在自己机子上安装的版本是5.8.0。</p>

<!-- more -->


<p>安装ActivceMQ需要先设置好系统环境。</p>

<ol>
<li><p>空间剩余磁盘大于60M。（这个肯定没问题）</p></li>
<li><p>需要预装JDK，版本为1.6.x及其以上。（ActiveMQ就是用java写的，肯定要装java环境的嘛）</p></li>
</ol>


<p>接下来就可以安装ActiveMQ了。</p>

<p>一种是直接下载分发包，地址是<a href="http://activemq.apache.org/">http://activemq.apache.org/</a>。找到想要安装的版本后解压缩即可。</p>

<p>另一种是通过源代码安装，地址是<a href="http://activemq.apache.org/download.html">http://activemq.apache.org/download.html</a>。该源代码是使用maven作为构建工具的，所以需要先安装maven，如何安装可参见<a href="http://maven.apache.org/">maven官网</a>（MAC用户如果安装了homebrew的话，直接运行<code>brew install maven</code>即可）。    然后使用<code>mvn clean install -Dmaven.test.skip=true</code>来构建源代码。如果构建成功的话在target目录下可以看到生成的activemq-x.x-SNAPSHOT.zip文件，解压缩以后就可以使用了。</p>

<p>当然MAC用户的话安装就简单了，直接使用<code>brew install activemq</code>就行（不知道homebrew为何物的参见我写的文章：
<a href="http://www.huangbowen.net/blog/2013/07/01/homebrew-in-mac/">Homebrew- MAC上的包管理利器</a>）。ActiveMQ会被默认安装到/usr/local/Cellar/activemq。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$:</span>/usr/local/Cellar/activemq<span class="nv">$ </span>ls
</span><span class='line'>5.7.0 5.8.0
</span><span class='line'><span class="nv">$:</span>/usr/local/Cellar/activemq<span class="nv">$ </span><span class="nb">cd </span>5.8.0
</span><span class='line'><span class="nv">$:</span>/usr/local/Cellar/activemq/5.8.0<span class="nv">$ </span>ls
</span><span class='line'>INSTALL_RECEIPT.json NOTICE               bin
</span><span class='line'>LICENSE              README.txt           libexec
</span></code></pre></td></tr></table></div></figure>


<p>HomeBrew会自动将activemq加入到系统路径中。</p>

<p>下表列出了与ActiveMQ有关的一些重要的环境变量。</p>

<ul>
<li><p>ACTIVEMQ_HOME: /usr/local/Cellar/activemq/5.8.0/libexec</p></li>
<li><p>ACTIVEMQ_BASE: /usr/local/Cellar/activemq/5.8.0/libexec</p></li>
<li><p>ACTIVEMQ_CONF: /usr/local/Cellar/activemq/5.8.0/libexec/conf</p></li>
<li><p>ACTIVEMQ_DATA: /usr/local/Cellar/activemq/5.8.0/libexec/data</p></li>
</ul>


<p><strong>注意一下所有命令有时基于ActiveMQ 5.8.0版本，不同版本命令稍有不同。</strong></p>

<p>先运行<code>activemq setup ~/.activemqrc</code>来指定activemq的环境配置文件。在这个文件中可以自定义activemq使用的JDK路径，jvm参数等信息。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$:</span>/usr/local/Cellar/activemq/5.8.0<span class="nv">$ </span>activemq setup ~/.activemqrc
</span><span class='line'>INFO: Loading <span class="s1">&#39;/Users/twer/.activemqrc&#39;</span>
</span><span class='line'>INFO: Creating configuration file: /Users/twer/.activemqrc
</span><span class='line'>INFO: It<span class="s1">&#39;s recommend to limit access to &#39;</span>/Users/twer/.activemqrc<span class="s1">&#39; to the priviledged user</span>
</span><span class='line'><span class="s1">INFO: (recommended: chown &#39;</span>twer<span class="s1">&#39;:nogroup &#39;</span>/Users/twer/.activemqrc<span class="s1">&#39;; chmod 600 &#39;</span>/Users/twer/.activemqrc’<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行<code>activemq</code>可以显示activemq相应的配置信息及可用的命令。（注意低版本中此命令是启动ActiveMQ）</p>

<p>运行<code>activemq start</code>可以在一个独立进程中启动activemq。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$:</span>/usr/local/Cellar/activemq/5.8.0<span class="nv">$ </span>activemq start
</span><span class='line'>INFO: Loading <span class="s1">&#39;/Users/twer/.activemqrc&#39;</span>
</span><span class='line'>INFO: Using java <span class="s1">&#39;/System/Library/Frameworks/JavaVM.framework/Home/bin/java&#39;</span>
</span><span class='line'>INFO: Starting - inspect logfiles specified in logging.properties and log4j.properties to get details
</span><span class='line'>INFO: pidfile created : <span class="s1">&#39;/usr/local/Cellar/activemq/5.8.0/libexec/data/activemq-bowen-huang.local.pid&#39;</span> <span class="o">(</span>pid <span class="s1">&#39;50873&#39;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到进程id是50873.</p>

<p>终止ActiveMQ的运行有两种方式。一种是使用<code>activemq stop</code>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$:</span>/usr/local/Cellar/activemq/5.8.0<span class="nv">$ </span>activemq stop
</span><span class='line'>INFO: Loading <span class="s1">&#39;/Users/twer/.activemqrc&#39;</span>
</span><span class='line'>INFO: Using java <span class="s1">&#39;/System/Library/Frameworks/JavaVM.framework/Home/bin/java&#39;</span>
</span><span class='line'>INFO: Waiting at least 30 seconds <span class="k">for </span>regular process termination of pid <span class="s1">&#39;50873&#39;</span> :
</span><span class='line'>Java Runtime: Apple Inc. 1.6.0_65 /System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home
</span><span class='line'>  Heap sizes: <span class="nv">current</span><span class="o">=</span>1035520k  <span class="nv">free</span><span class="o">=</span>1033420k  <span class="nv">max</span><span class="o">=</span>1035520k
</span><span class='line'>    JVM args: -Xms1G -Xmx1G -Djava.util.logging.config.file<span class="o">=</span>logging.properties -Dactivemq.classpath<span class="o">=</span>/usr/local/Cellar/activemq/5.8.0/libexec/conf; -Dactivemq.home<span class="o">=</span>/usr/local/Cellar/activemq/5.8.0/libexec -Dactivemq.base<span class="o">=</span>/usr/local/Cellar/activemq/5.8.0/libexec -Dactivemq.conf<span class="o">=</span>/usr/local/Cellar/activemq/5.8.0/libexec/conf -Dactivemq.data<span class="o">=</span>/usr/local/Cellar/activemq/5.8.0/libexec/data
</span><span class='line'>Extensions classpath:
</span><span class='line'>  <span class="o">[</span>/usr/local/Cellar/activemq/5.8.0/libexec/lib,/usr/local/Cellar/activemq/5.8.0/libexec/lib/camel,/usr/local/Cellar/activemq/5.8.0/libexec/lib/optional,/usr/local/Cellar/activemq/5.8.0/libexec/lib/web,/usr/local/Cellar/activemq/5.8.0/libexec/lib/extra<span class="o">]</span>
</span><span class='line'>ACTIVEMQ_HOME: /usr/local/Cellar/activemq/5.8.0/libexec
</span><span class='line'>ACTIVEMQ_BASE: /usr/local/Cellar/activemq/5.8.0/libexec
</span><span class='line'>ACTIVEMQ_CONF: /usr/local/Cellar/activemq/5.8.0/libexec/conf
</span><span class='line'>ACTIVEMQ_DATA: /usr/local/Cellar/activemq/5.8.0/libexec/data
</span><span class='line'>Connecting to pid: 50873
</span><span class='line'>.Stopping broker: localhost
</span><span class='line'>… FINISHED
</span></code></pre></td></tr></table></div></figure>


<p>另一种则是暴力的杀死进程,即<code>kill 50873</code>。</p>

<p>运行<code>activemq console</code>则会在当前console中启动activemq。这种好处是不用多开一个进程，而且可以直接从console中看到log。关闭activemq也很简单，直接按<code>ctrl</code>+<code>C</code>终止终端运行。</p>

<p>ActiveMQ的默认端口是61616，可以检测这端口来判断ActiveMQ是否启动成功。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$:</span>/usr/local/Cellar/activemq/5.8.0<span class="nv">$ </span>netstat -an|grep 61616
</span><span class='line'>tcp46      0      0  *.61616                *.*                    LISTEN
</span></code></pre></td></tr></table></div></figure>


<p>也可以访问web终端<a href="http://localhost:8161/admin">http://localhost:8161/admin</a>来查看和管理ActiveMQ。（默认用户名密码是admin/admin，你也可以修改配置，其在ActiveMQ安装目录下的libexec/conf/jetty-real.properties文件中）。</p>

<p>ActiveMQ支持xml文件格式对其进行配置。其实我们运行<code>activemq start</code>时，ActiveMQ就是默认使用了其安装目录下的libexec/conf/activemq.xml文件。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$:</span>/usr/local/Cellar/activemq/5.8.0/libexec/conf<span class="nv">$ </span>ls
</span><span class='line'>activemq-command.xml                 broker.ks
</span><span class='line'>activemq-demo.xml                    broker.ts
</span><span class='line'>activemq-dynamic-network-broker1.xml camel.xml
</span><span class='line'>activemq-dynamic-network-broker2.xml client.ks
</span><span class='line'>activemq-jdbc.xml                    client.ts
</span><span class='line'>activemq-scalability.xml             credentials-enc.properties
</span><span class='line'>activemq-security.xml                credentials.properties
</span><span class='line'>activemq-specjms.xml                 jetty-demo.xml
</span><span class='line'>activemq-static-network-broker1.xml  jetty-realm.properties
</span><span class='line'>activemq-static-network-broker2.xml  jetty.xml
</span><span class='line'>activemq-stomp.xml                   jmx.access
</span><span class='line'>activemq-throughput.xml              jmx.password
</span><span class='line'>activemq.xml                         log4j.properties
</span><span class='line'>broker-localhost.cert                logging.properties
</span></code></pre></td></tr></table></div></figure>


<p>我们当然可以使用自定义的配置文件，比如我们改用activemq-demo.xml。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$:</span>/usr/local/Cellar/activemq/5.8.0/libexec<span class="nv">$ </span>activemq start xbean:./conf/activemq-demo.xml
</span><span class='line'>INFO: Loading <span class="s1">&#39;/Users/twer/.activemqrc&#39;</span>
</span><span class='line'>INFO: Using java <span class="s1">&#39;/System/Library/Frameworks/JavaVM.framework/Home/bin/java&#39;</span>
</span><span class='line'>INFO: Starting - inspect logfiles specified in logging.properties and log4j.properties to get details
</span><span class='line'>INFO: pidfile created : <span class="s1">&#39;/usr/local/Cellar/activemq/5.8.0/libexec/data/activemq-bowen-huang.local.pid&#39;</span> <span class="o">(</span>pid <span class="err">&#39;</span>51375’<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>ActiveMQ在5.8.0版本及之后在安装包中包含了一些demo来演示对ActiveMQ的使用。使用方式很简单，首先采用activemq-demo.xml配置文件来启动ActiveMQ，然后访问<a href="http://localhost:8161/demo/">http://localhost:8161/demo/</a>尽情探索把。</p>

<p>这些demo的源码都在ActiveMQ安装目录下的libexec目录中，里面有个<code>user-guide.html</code>，可以用浏览器直接打开，它详细描述了该如何使用这些demo。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如果让我完善几年前的一个项目，我会做哪些改进?]]></title>
    <link href="http://www.huangbowen.net/blog/2014/02/17/how-to-improve-a-legacy-project/"/>
    <updated>2014-02-17T00:18:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2014/02/17/how-to-improve-a-legacy-project</id>
    <content type="html"><![CDATA[<p>在08年的时候，我还没有大学毕业，当时在一家公司实习。那时候老板接了一个项目，是一个给中石油某下属公司做的一个web版本的管理系统，我和一个同学硬着头皮接下来做完了。这个系统后端用的是c#的web form,前端普通的html+css+javascript，数据库使用的是sql server2005，部署服务器使用的是Microsoft Server 2008。现在回顾这个系统，虽然代码写的烂，架构写的烂，但是能够正常运行，这是偶尔有一些莫名其妙难以解决的小bug。毕竟是自己5年前的代码嘛，那时候自己太嫩了，好多东西都不知道，没有多少经验。</p>

<!-- more -->


<p>那如果现在要我给这个系统做功能升级，甚至重做这个系统，我会进行哪些改进那？这是个有意思的话题，如果你能真的找出很多可供改进的店出来，那么说明这几年来你真的在进步。</p>

<p>现在还真有可能会对这个系统做功能升级。我想了一下，会在一下几个方面做出改进和调整。</p>

<ol>
<li><p>使用最新的Visual Studio IDE,并且装上ReShaper插件。现在自己已经成了一个快捷键控、重构控。俗话说，工欲成其事,必先利其器。好的程序员当然要用最好的工具了。新的Visual Studio在效率方面、智能提示方面都有改善。ReShaper作为.net下的重构利器当然必不可少。</p></li>
<li><p>将代码托管到github的私有代码库中，使用git作为源代码管理工具。以前项目中使用的是svn，使用的公司服务器作代码托管，而公司服务器不是那么的稳定。git作为一款分布式源代码管理工具，脱离了中央服务器的束缚，并且拥有快速创建、切换分支，本地提交等特性，完爆svn。github作为全球最大的代码托管中心，方便实用，最便宜的会员7$每月，经济实惠。</p></li>
<li><p>给系统中的重要功能打好LOG。想当年我们想要记录一些程序log，还要自己写一个简易的log类库。现在有很多成熟的log框架可以被c#使用。试想当你的程序部署到服务器上以后，如果没有充足的log，那么排查bug是多么的困难。服务器上又不能让你还原现场，不能调试，唯一能帮上忙的就是那些log了。当然打log也有很多学问，比如log等级设置，输出设置等，这里就不细说了。</p></li>
<li><p>使用事务机制处理复杂逻辑。在这个系统中有很多并发操作，当时自己并不是很懂事务，使用了一些很蹩脚的方法来处理可能的数据异常。现在我会采用成熟的分布式事务机制来处理这些并发逻辑，使程序更加健壮。</p></li>
<li><p>使用TDD，提高单元测试覆盖率。以前的系统中没有任何单元测试，一段简单的代码都需要启动程序手工验证。这样的反馈太耗时，并且不具备重复性。测试驱动开发能够保证代码简洁、正确，并且能快速得到反馈，保证测试覆盖率。遇到遗留代码时，也可以先添加单元测试，建立保护网，使重构更有信心。</p></li>
<li><p>使用webdriver进行自动化功能性测试。曾经在给客户演示前，我改了一段代码，没想到这段代码恰好破坏了给客户演示的一个重要功能。如果有自动化的功能性测试那么就可以避免这一切。自动化功能测试能增强对产品的信心，每次改动都在可控范围之内。</p></li>
<li><p>编写构建脚本，实现持续集成。即使只有一个人工作在这个项目中，也应当编写构建脚本，应用持续集成。这样才能保证你的每一次提交都是安全的；并且将一些重复的工作自动化起来，可以解放你的大脑关注到更重要的地方去。</p></li>
<li><p>自动化部署。每次部署项目到服务器上是一个痛苦的经历，需要手动的替换项目中的某些文件，将文件复制到服务器上，终止当前服务器服务&#8230;..哪一个环节出错都是一个致命的打击。手动不仅效率低，而且极易出错。通过编写脚本实现自动化部署可以一劳永逸，和繁琐的手动操作说拜拜吧。</p></li>
<li><p>使用Nuget作为依赖项管理工具。如果你想要引用一个第三方依赖项，还需要手动从网上下载并添加到项目中的话，那你就out了。作为一个Java程序员，maven,gradle等构建工具已是标配，它们都提供了对依赖项的自动化管理。你只需要添加一行字符串来说明你想要使用那个类库，下载、引用就全交给管理工具来实现了。在c#世界中当然也有相应的产品，那就是Nuget，从此依赖项管理再也不是一件头痛的事情了。</p></li>
<li><p>多使用c#自身的特性，如LINQ，委托，函数式编程等。比起不思进取的java语言，c#不知道强多少倍。java在java 8版本才正式引入Lambda,而c#的LINQ早都出来多少年了。如果在进行列表操作时，你还只使用foreach，那么你太老土了。列表操作无非是filter,map,sort&#8230;而c#早为我们提供了一系列扩展方法，如Where,Select,Sort&#8230;.可怜Java中只能使用Guava这种不伦不类的第三方类库来实现相应的效果，而且远没有c#的原生功能漂亮。c#既然每年都会引用那么多的特性，那么就要学习、掌握和使用。很多人一边使用着c#的老土语法，一边说自己精通c#,真让人无语。放着那么多好特性不用，让我们这些java程序员真是羡慕嫉妒恨。</p></li>
<li><p>使用一些前端框架和JavaScript框架。对于我这种前端小白，想让我设计出漂亮的页面还真是力不从心。不用怕，设计者已经考虑到了前端无能者的感受，譬如bootstrap之类的前端UI框架简直为我们而生。这些不但使用简单，效果明显，还自带响应式设计，实在是前端小白的利器，实现自己精美的web站点不再是梦。JavaScript就不多说了，什么jQuery，AngularJs，ExtJs&#8230;..各种框架类库层出不穷，涵盖了前端开发的方方面面。无论你是想画图，操作DOM元素，创建单页应用,使用MVC架构&#8230;..在JavaScript的世界里你总有多种选择。想当年我为了在web页面中展现一张统计图，采用了使用.net在后台实时绘制成图片加载到前台显示，都是泪啊。现在好了，只需要将数据模型绑定给图表控件，分分钟搞定。</p></li>
</ol>


<p>好了，就写这么多了。如何判断一个程序员真的具有N年工作经验，而不是1年工作经验重复使用了N年？一个好的办法就是和拿出一个以前的项目出来，看他都会做哪些改进。</p>

<p>对于工作多年的程序员来说，知识面、视野一定要广，这样才有竞争力。这靠的是平时的学习和积累，还要善于思考，如何能把手头的事情做得更好。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[做一张故事卡时的感悟]]></title>
    <link href="http://www.huangbowen.net/blog/2014/02/11/thoughts-when-doing-user-story/"/>
    <updated>2014-02-11T17:36:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2014/02/11/thoughts-when-doing-user-story</id>
    <content type="html"><![CDATA[<p>今天和同事一起领了一个故事卡来做。看完用户故事卡中的描述和验收准则后一头雾水，不知道从哪里下手。由于卡中提到了几个模块都属于遗留系统中的功能，以前没有触及这些模块，对业务、对代码都不太了解。而且还要对这些模块进行修改，而这部分代码都是陈旧的EJB代码，复杂冗长，配置繁琐，修改点无法确定，影响范围无法预估。</p>

<!-- more -->


<p>那么接下来该怎么办那？</p>

<p>可能很多人都选择深入代码内部，从代码入手来搞清楚功能。我们刚开始想尝试这种方式，在EJB的代码群里跳来跳去，还是不明就里。我想这样不行啊，看到猴年马月去了。</p>

<p>这时候我就意识到我的方向错了。代码是业务逻辑的实现，应该先有业务逻辑，再有代码。我们这样反推只能会深陷细节，很难从中了解到整个业务逻辑的来龙去脉。</p>

<p>咋办那？找BA（需求分析师）呗。我们把BA拉过来，让她挨个把这张故事卡中的关联模块讲清楚。为什么我们要做这样的事情？这样做对用户来说能带来什么好处？做这样事情的场景是怎样的？&#8230;..</p>

<p>解答了这些问题以后，我们逐渐明白了这个故事卡的业务逻辑，也有信心来完成这张卡了。</p>

<p>接下来是不是要回到代码来看具体实现了那？非也，我们并没有急着看代码，而是消化了业务知识以后，打开了我们的功能性测试的项目，在里面查与该模块功能相关的功能性测试。由于这些测试是使用BDD框架写的，所以可读性非常强，并且本身就描述了使用场景与案例。看了这些功能性测试我们一可以加深对需求的了解；二知道了当前这张故事卡牵扯到的模块的覆盖率是个什么情况，有助于我们修改后不会破坏已有的功能；三是有助于我们为修改后的功能补上功能性测试。并且我们可以顺着功能性测试来查看该功能模块的调用情况，根据调用情况来深入该功能的代码细节，找到潜在的修改点。</p>

<p>通过功能性测试入手，我们阅读代码确实快了不少，很快就找到了潜在修改点。那么现在要动手修改吗？答案是否定的。我们又回到了功能性测试的项目，为我们即将要改变的功能加上了自动化测试。这个时候测试应该是跑不过的。然后我们才动手修改代码，完成功能修改。然后再次运行针对新功能的测试，一切OK。</p>

<p>完成了这个故事卡给我带来了成就感。不只是因为我们解决了这个故事卡上的问题，而是让我们学到了额外的知识。我们不能整天只为写代码而写代码，而是应该真正的以业务需求为核心，把需求吃透。一个程序员能够保证把事情做正确是远远不够的，而是能够确保他做的事情是正确的。</p>

<p>一个程序员在领到一个故事卡时，不应当急着写怎么实现，而是应该向业务分析师质疑，为什么我要做这个功能？加了这个功能能给用户带来什么价值？有没有其他简单的方式来达到甚至超越这个卡给用户带来的价值？只有当这些问题都被解决了以后，才能进行开发。现在你已经是了解需求的专家了，相信在编写代码考虑实现方式时，有足够的上下文了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[持续集成及部署利器:Go]]></title>
    <link href="http://www.huangbowen.net/blog/2014/01/27/introduction-of-go/"/>
    <updated>2014-01-27T18:39:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2014/01/27/introduction-of-go</id>
    <content type="html"><![CDATA[<p>Go是一款先进的持续集成和发布管理系统,由ThoughtWorks开发。（不要和Google的编程语言Go混淆了！）其前身为Cruise,是ThoughtWorks在做咨询和交付交付项目时自己开发的一款开源的持续集成工具。后来随着持续集成及持续部署的火热，ThoughtWorks专门成立了一个项目组，基于Cruise开发除了Go这款工具。</p>

<!-- more -->


<p>Go的官方网站是<a href="http://www.thoughtworks.com/products/go-continuous-delivery/">http://www.thoughtworks.com/products/go-continuous-delivery/</a>,其文档是<a href="http://www.thoughtworks.com/products/docs/go/13.3/help/welcome_to_go.html">http://www.thoughtworks.com/products/docs/go/13.3/help/welcome_to_go.html</a>。</p>

<p>在我目前的项目中，持续集成及部署工具使用的就是Go这款工具。使用Go来建立起一个项目的持续部署pipeline是非常快的，非常方便。</p>

<h2>Go的架构设计</h2>

<p>Go使用了Server-Agent的模式。Server用来展示和配置pipeline的DashBoard，并存放构建出来的Artifacts（存档文件，比如一个war包); Agent则用来执行真正的构建操作，一个Server可以和多个Agent建立连接，Agent支持多个主流的操作系统。</p>

<p><img src="http://www.huangbowen.net/images/Server-Agent.png"></p>

<p>这样的好处是：</p>

<ol>
<li><p>测试可以运行在不同的平台上，保证你的软件在多个平台都能良好的工作；</p></li>
<li><p>你可以将测试划分为不同的群组并并行的运行在多个Agent上，节省运行测试时间；</p></li>
<li><p>可以方便的管理Agent，及时响应不同的环境要求。</p></li>
</ol>


<h2>Agent的lifecycle</h2>

<p>下图是Agent工作的生命周期。</p>

<p><img src="http://www.huangbowen.net/images/AgentLifeCycle.png"></p>

<p>每一台Go的构建节点机器上都需要安装Go Agent软件（这个名字蛋痛，不是翻墙的那个软件），其用来建立起与Go Server的连接。
Go Agent会以轮询的方式来询问Go Server是否有当前有构建工作。如果有的话，Go Server会将其分配给处于ready状态的Agent。该Agent会在自己机器目录上创建一个目录，并下载同步最新的材料（比如配置的SVN repo地址）,然后执行指定的task，比如构建项目，运行单元测试或功能性测试等。如果配置了artifacts（比如构建的结果，一个war包），Agent执行完毕后将这个artifacts发布到Go Server上，这样artifacts就会被接下来的stage用到。</p>

<h2>Go中的一些概念</h2>

<p>Go对复杂的构建和部署活动进行了合理的抽象，并提供了GUI和XML两种方式来配置pipeline。</p>

<p><img src="http://www.huangbowen.net/images/GoConcepts.png"></p>

<p>在Go的世界中，多个pipeline可以共同组成一个group，这叫做pipeline group。没个pipeline又由多个stage组成。假设一个pipeline需要做如下事情： 构建项目->部署到测试环境->部署到生产环境。那么每一个环节都可以设置为一个stage。而一个stage则由1个或多个job组成。比如构建项目这个stage，可能会分为编译及验证->功能性测试，每一步可以作为一个job。job则由一个或多个task组成。比如功能性测试这个job可以分为两个task来完成，先将artifacts部署到测试机上，再运行功能性测试。</p>

<h2>Go和Jenkins的比较</h2>

<p>Go在设计之初就是一款持续部署工具，而Jenkins其实只是一款持续集成工具，如果要实现持续部署需要安装相应的插件。
Go由于是收费软件，有一定售后服务，而Jenkins作为开源软件，虽然免费，但是出现问题要么自己动手解决，要么等待维护社区修复。
Jenkins作为开源产品，社区比较活跃，文档资料和插件都比较多，而Go的文档或资料较少。</p>

<hr />

<p>Go的设计思想还是挺前卫的，在别人还在做持续集成这一步时，它已经做到了持续部署这个层次。但是目前就国内而言能做到持续部署的公司真的不多，甚至很多公司连持续集成这个实践都没有达到。所以Go作为一款收费产品很难在国内打开市场。</p>

<p>我觉得Go可以做出一个免费版来让个人试用，提供一些基本功能。然后为企业应用定制一些高级功能，放置到收费版中，可以扩大自己的市场占用率。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[记一次在StackOverFlow上问问题的经历]]></title>
    <link href="http://www.huangbowen.net/blog/2014/01/21/ask-question-on-stackoverflow/"/>
    <updated>2014-01-21T12:47:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2014/01/21/ask-question-on-stackoverflow</id>
    <content type="html"><![CDATA[<p>最近一直在做测试方面的事情，被测的一些功能需要连接到FTP服务器上。而我在做本地测试时为了方便，就使用java写了一个简单的ftp服务器，可以在命令行下直接启动运行。</p>

<!-- more -->


<p>当时在main函数里是这样写的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">App</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">FtpServer</span> <span class="n">ftpServer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FtpServer</span><span class="o">();</span>
</span><span class='line'>        <span class="n">ftpServer</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后在命令行运行<code>java -jar ftpserver.jar</code>就可以启动这个FTP服务。一切都很完美。当我想关闭FTP服务时，直接按了<code>Ctrl</code> + <code>C</code>来终止了这个JVM实例。但是我发现ftpserver.jar这个文件删不了了,原因是虽然我终止了该JVM实例，但是FTP服务器并没有被正确的退出。</p>

<p>那么如何实现在按<code>Ctrl</code>+<code>C</code>终止该JVM实例时，能够让程序调用FtpServer中的stop方法来关闭FTP服务？我想在Google上寻找答案，但是连续换了几个关键词都没找到解决方案。</p>

<p>这个时候我都有点差点放弃了，心想反正也不是一个很严重的问题。后来想到不如在StackOverFlow上问一下吧。说实话虽然我经常上StackOverFlow，但是很少在上面问问题。</p>

<p>我在StackOverFlow上发布了这个问题，链接如下。
<a href="http://stackoverflow.com/questions/21108059/stop-the-process-when-press-command-c-in-terminal">http://stackoverflow.com/questions/21108059/stop-the-process-when-press-command-c-in-terminal</a></p>

<p><img src="http://www.huangbowen.net/images/ftpquestion.png"></p>

<p>过了不到20分钟，就收到了一个回答。</p>

<p><img src="http://www.huangbowen.net/images/ftpanswer.png"></p>

<p>从上面可以看出，其实我这个问题之前已经有人问过了，并且收到了满意的答案。我根据回答中提供的链接，很快实现了方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">FtpServer</span> <span class="n">ftpServer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FtpServer</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Runtime</span><span class="o">.</span><span class="na">getRuntime</span><span class="o">().</span><span class="na">addShutdownHook</span><span class="o">(</span><span class="k">new</span> <span class="n">Thread</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">ftpServer</span><span class="o">.</span><span class="na">stop</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">});</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">ftpServer</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在oracle的官方文档中有对<a href="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Runtime.html#addShutdownHook%28java.lang.Thread%29">addShutdownHook</a>方法的详细解释。</p>

<p>通过文档可以看出JVM在两种事件下会响应shutdown：</p>

<ol>
<li><p>程序正常退出，比如最后的非后台线程退出或System.exit方法被调用。</p></li>
<li><p>用户终止了JVM，比如按下Ctrl+C，或者登出或关闭系统。</p></li>
</ol>


<p>某些情况下JVM是不会响应shutdown的，比如直接用kill命令杀死进程。JVM在shutdown时，会自动触发注册的hook线程，并以并行的方式来运行，JVM并不保证这些hook的调用顺序。</p>

<p>通过这个小事件给了我两个启示：</p>

<ol>
<li><p>当碰到技术困难时，不要轻言放弃，努力找出解决方案。即使找不到完美的解决方案，也要想一些替代方案。</p></li>
<li><p>在StackOverFlow上问问题时不要太着急，先查找下有没有类似的已经解决的问题，这样可以节省时间。</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java中的Set, List, Map漫谈]]></title>
    <link href="http://www.huangbowen.net/blog/2014/01/02/set/"/>
    <updated>2014-01-02T23:45:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2014/01/02/set</id>
    <content type="html"><![CDATA[<p>在编程语言中，集合是指代表一组对象的对象。Java平台专门有一个集合框架(Collections Framework)。集合框架是指表示和操作集合的统一架构，隔离了集合的操作和实现细节。</p>

<!-- more -->


<p>集合框架中的集合接口主要分为两大部分，一部分继承自<code>java.util.Collection</code>，另一部分继承自<code>java.util.Map</code> （其实Map本质上并不是集合，只是看起来好像可以像集合一样操作）。一个有趣的事情是这些接口的实现不一定都需要实现这些接口中的修改方法（如add，remove等），可以给某些不想实现的修改方法抛出一个运行时异常(UnsupportedOperationException)。</p>

<h2>List</h2>

<p>List是Java中的一个接口，继承了Collection接口。它是一个有序集合，又称序列，允许存储重复元素。其实现类常用的有ArrayList、LinkedList等。ArrayList是实现了List接口的可变长数组。它的特点是add方法操作时间复杂度为分期常量时间（amortized constant time），意思即如果添加n个元素则耗时O(n)，其它操作耗时则是线性时间。每个ArrayList都有个容量，即存放元素能力的大小。这个容量是list中元素个数。当添加新的元素时，这个容量也会自动添加，这需要消耗一定时间。如果要添加大量数据到ArrayList，可以先调用<code>ensureCapacity</code>操作，从而减少每次添加新元素容量自动调整的时间。</p>

<p>需要注意的是ArrayList并不是线程同步的。如果多个线程同时访问一个ArrayList实例，至少一个线程修改了其结构（添加或删除元素，或显式的调整了其大小，仅仅设置元素值并不属于结构修改），则会使程序进入不确定的状态。解决方式之一就是使用一个线程同步的对象来封装该ArrayList。或者也可以用Collections.synchronizedList来封装。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">List</span> <span class="n">list</span> <span class="o">=</span> <span class="n">Collections</span><span class="o">.</span><span class="na">synchronizedList</span><span class="o">(</span><span class="k">new</span> <span class="n">ArrayList</span><span class="o">(...));</span>
</span></code></pre></td></tr></table></div></figure>


<p>实现原理就是Collections.synchronizedList返回的类的iterator做了特殊处理。如果iterator被创建后，除了自己的add和delete方法，有其他行为导致了List结构被修改，iterator将会抛出一个<code>ConcurrentModificationException</code>异常。当然iterate这种处理方式并不能担保它能处理所有的异步并发修改，只能降低程序陷入不确定状态的概率。</p>

<p>LikedList是一个双重链表，它既实现了List接口，也实现了Deque接口。LikedList也不是线程安全的，解决方式与ArrrayList基本相同。</p>

<h2>Set</h2>

<p>Set也是Java中的一个接口，同样继承于Collection。与List不同的是，Set不允许放置重复元素,并且最多只能放置一个null元素。其实现类有HashSet、TreeSet等。</p>

<p>HashSet的实现其实是依托了一个HashMap的实例。HashSet并不保证元素的迭代顺序每次都是一致的。HashSet的基本操作（add,remove,contains及size）耗时都是常数时间，即迭代Set的耗时与Set的大小乘以HashMap实例的乘积成正比。HashSet也不是线程安全的。</p>

<h2>Map</h2>

<p>Map则是另一种重要的数据结构，是一组键值对的集合。Map不允许有重复的key存在。
它的实现中有HashTable和HashMap。两者非常相似，最大的不同是HashMap不是线程安全的，并且允许null值作为key或value，而HashTable则不允许。</p>

<p>HashMap的性能取决于两个因素：一个是初始容量，一个是负载因数。容量是哈希表中bucket的数量。初始容量则是HashMap被创建时容量。负载因数则是当容量需要自动增加的阀值。当HashMap中的元素超过了负载因数和当前容量的乘积，HashMap则会重新进行hash计算，以便bucket数量增加到以前的近似两倍。一般负载因子的默认值是0.75，这能达到时间和空间的一个平衡。负载因子过大，虽然会减少空间消耗，但是增加查找时间。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的2013年总结]]></title>
    <link href="http://www.huangbowen.net/blog/2014/01/02/my-conclusion-of-2013/"/>
    <updated>2014-01-02T21:30:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2014/01/02/my-conclusion-of-2013</id>
    <content type="html"><![CDATA[<ol>
<li><p>读了20多本书，有些书让人拍案叫绝，有些书则没产生多大共鸣。上半年读的多些，下半年有些懒散，读的相对少些。</p></li>
<li><p>翻译了一本书,《Effective JavaScript》并且已经出版，还在翻译另一本。翻译书这事情咋个说那？看似难，其实不难，只是需要花大量时间;看似不难其实难，英文好不一定就翻译的信、达、雅。</p></li>
<li><p>去澳洲出差了一个月，第一次跑这么远，跑到另一块大陆上。在那里感受到了国外的生活，开阔了自己的视野。</p></li>
<li><p>经过1个月的准备，英语考过了4个5，算是满足了拿澳洲457visa的要求。但是自我感觉英文在2013年提高并不大，还未到随心所欲的地步。</p></li>
<li><p>坚持写博客。虽然从2008年就开始写博客，但是中间断断续续，甚至2012年丢掉了之前所有的博客数据。索性在2013年又坚持起来，每个月至少5篇（11月份准备考雅思写的不多）。</p></li>
<li><p>2013年也尝试了很多新东西，AWS、node.js、ruby、haskell、groovy&#8230;&#8230;收获了很多的东西，但是感觉自己总结的力度还是不够。</p></li>
</ol>


<p>总的来说，2013年是充实的一年，2014年要给自己更大的压力，因为2014年就要为人父了，担上的压力会更重。 不过我对技术的热情和追求不会消退。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C#中的ThenBy是如何实现的]]></title>
    <link href="http://www.huangbowen.net/blog/2013/12/26/how-to-implement-thenby-in-c-number/"/>
    <updated>2013-12-26T23:14:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/12/26/how-to-implement-thenby-in-c-number</id>
    <content type="html"><![CDATA[<p>C#中给继承自IEnumerable的对象（最熟知的就是List了）提供了很丰富的扩展方法，涉及列表操作的方方面面。而扩展方法ThenBy就是很有意思的一个，它的实现也很巧妙。</p>

<!-- more -->


<p>如果有这样的一个Team类，里面有三个属性。</p>

<figure class='code'><figcaption><span>Team.cs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Team</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="nf">Team</span> <span class="p">(</span><span class="kt">string</span> <span class="n">name</span><span class="p">,</span> <span class="kt">int</span> <span class="n">timeCost</span><span class="p">,</span> <span class="kt">int</span> <span class="n">score</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">Name</span> <span class="p">=</span> <span class="n">name</span><span class="p">;</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">TimeCost</span> <span class="p">=</span> <span class="n">timeCost</span><span class="p">;</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">Score</span> <span class="p">=</span> <span class="n">score</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">get</span><span class="p">;</span>
</span><span class='line'>        <span class="k">private</span> <span class="k">set</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="kt">int</span> <span class="n">TimeCost</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">get</span><span class="p">;</span>
</span><span class='line'>        <span class="k">private</span> <span class="k">set</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="kt">int</span> <span class="n">Score</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">get</span><span class="p">;</span>
</span><span class='line'>        <span class="k">private</span> <span class="k">set</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后我们有一个Team的List。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">List</span><span class="p">&lt;</span><span class="n">Team</span><span class="p">&gt;</span> <span class="n">teams</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Team</span><span class="p">&gt;</span> <span class="p">();</span>
</span><span class='line'><span class="n">teams</span><span class="p">.</span><span class="n">Add</span> <span class="p">(</span><span class="k">new</span> <span class="n">Team</span> <span class="p">(</span><span class="s">&quot;teamA&quot;</span><span class="p">,</span> <span class="m">10</span><span class="p">,</span> <span class="m">22</span><span class="p">));</span>
</span><span class='line'><span class="n">teams</span><span class="p">.</span><span class="n">Add</span> <span class="p">(</span><span class="k">new</span> <span class="n">Team</span> <span class="p">(</span><span class="s">&quot;teamB&quot;</span><span class="p">,</span> <span class="m">12</span><span class="p">,</span> <span class="m">20</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="n">teams</span><span class="p">.</span><span class="n">Add</span> <span class="p">(</span><span class="k">new</span> <span class="n">Team</span> <span class="p">(</span><span class="s">&quot;teamC&quot;</span><span class="p">,</span> <span class="m">8</span><span class="p">,</span> <span class="m">18</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>那么如何求出teams中得分最高的那个队伍那？这个很简单，只需要一句话即可。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="n">teams</span><span class="p">.</span><span class="n">OrderByDescending</span> <span class="p">(</span><span class="n">team</span> <span class="p">=&gt;</span> <span class="n">team</span><span class="p">.</span><span class="n">Score</span><span class="p">).</span><span class="n">First</span> <span class="p">();</span>
</span><span class='line'><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span> <span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="n">Name</span><span class="p">);</span> <span class="c1">// teamA</span>
</span></code></pre></td></tr></table></div></figure>


<p>由于List实现了IEnumerable接口，而System.Linq中的Enumerable类中有针对IEnumerable接口的名为OrderByDescending的扩展方法，所以我们直接调用这个扩展方法可以对List按照指定的key进行降序排列，再调用First这个扩展方法来获取列表中的第一个元素。</p>

<p>如果我的List变成这个样子。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">List</span><span class="p">&lt;</span><span class="n">Team</span><span class="p">&gt;</span> <span class="n">teams</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Team</span><span class="p">&gt;</span> <span class="p">();</span>
</span><span class='line'><span class="n">teams</span><span class="p">.</span><span class="n">Add</span> <span class="p">(</span><span class="k">new</span> <span class="n">Team</span> <span class="p">(</span><span class="s">&quot;teamA&quot;</span><span class="p">,</span> <span class="m">10</span><span class="p">,</span> <span class="m">18</span><span class="p">));</span>
</span><span class='line'><span class="n">teams</span><span class="p">.</span><span class="n">Add</span> <span class="p">(</span><span class="k">new</span> <span class="n">Team</span> <span class="p">(</span><span class="s">&quot;teamB&quot;</span><span class="p">,</span> <span class="m">12</span><span class="p">,</span> <span class="m">16</span><span class="p">));</span>
</span><span class='line'><span class="n">teams</span><span class="p">.</span><span class="n">Add</span> <span class="p">(</span><span class="k">new</span> <span class="n">Team</span> <span class="p">(</span><span class="s">&quot;teamC&quot;</span><span class="p">,</span> <span class="m">8</span><span class="p">,</span> <span class="m">18</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>由于有可能两组以上的队伍都可能拿到最高分，那么在这些最高分的队伍中，我们选取用时最少的作为最终优胜者。有人说那可以这样写。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="n">teams</span><span class="p">.</span><span class="n">OrderByDescending</span> <span class="p">(</span><span class="n">team</span> <span class="p">=&gt;</span> <span class="n">team</span><span class="p">.</span><span class="n">Score</span><span class="p">).</span><span class="n">OrderBy</span><span class="p">(</span><span class="n">team</span> <span class="p">=&gt;</span> <span class="n">team</span><span class="p">.</span><span class="n">TimeCost</span><span class="p">).</span><span class="n">First</span> <span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>先对列表按Score降序排列，再对列表按TimeCost升序排列，然后取结果中的第一个元素。看来貌似是正确的，但其实是错误的。因为第一次调用OrderByDescending方法后返回了一个排序后的数组，再调用OrderBy是另外一次排序了，它会丢弃上一次排序，这与我们定的先看积分，如果积分相同再看耗时的规则违背。</p>

<p>那么应该如何实现那？C#给我们提供了一个叫做ThenBy的方法，可以满足我们的要求。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="n">teams</span><span class="p">.</span><span class="n">OrderByDescending</span> <span class="p">(</span><span class="n">team</span> <span class="p">=&gt;</span> <span class="n">team</span><span class="p">.</span><span class="n">Score</span><span class="p">).</span><span class="n">ThenBy</span><span class="p">(</span><span class="n">team</span> <span class="p">=&gt;</span> <span class="n">team</span><span class="p">.</span><span class="n">TimeCost</span><span class="p">).</span><span class="n">First</span> <span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span> <span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="n">Name</span><span class="p">);</span> <span class="c1">// teamC</span>
</span></code></pre></td></tr></table></div></figure>


<p>新的问题又来了。第一次调用OrderByDescending方法时返回的是一个新对象，再对这个新对象调用ThenBy时，它只有记录了上一次排序规则，才能达到我们想要的效果。那么C#是如何记录上次排序使用的key那？</p>

<p>这就先要看OrderByDescending方法是如何实现了的。查看源码发现OrderByDescending有两个重载，实现如下。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="n">IOrderedEnumerable</span><span class="p">&lt;</span><span class="n">TSource</span><span class="p">&gt;</span> <span class="n">OrderByDescending</span><span class="p">&lt;</span><span class="n">TSource</span><span class="p">,</span> <span class="n">TKey</span><span class="p">&gt;</span> <span class="p">(</span><span class="k">this</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">TSource</span><span class="p">&gt;</span> <span class="n">source</span><span class="p">,</span> <span class="n">Func</span><span class="p">&lt;</span><span class="n">TSource</span><span class="p">,</span> <span class="n">TKey</span><span class="p">&gt;</span> <span class="n">keySelector</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">source</span><span class="p">.</span><span class="n">OrderByDescending</span> <span class="p">(</span><span class="n">keySelector</span><span class="p">,</span> <span class="k">null</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="n">IOrderedEnumerable</span><span class="p">&lt;</span><span class="n">TSource</span><span class="p">&gt;</span> <span class="n">OrderByDescending</span><span class="p">&lt;</span><span class="n">TSource</span><span class="p">,</span> <span class="n">TKey</span><span class="p">&gt;</span> <span class="p">(</span><span class="k">this</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">TSource</span><span class="p">&gt;</span> <span class="n">source</span><span class="p">,</span> <span class="n">Func</span><span class="p">&lt;</span><span class="n">TSource</span><span class="p">,</span> <span class="n">TKey</span><span class="p">&gt;</span> <span class="n">keySelector</span><span class="p">,</span> <span class="n">IComparer</span><span class="p">&lt;</span><span class="n">TKey</span><span class="p">&gt;</span> <span class="n">comparer</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Check</span><span class="p">.</span><span class="n">SourceAndKeySelector</span> <span class="p">(</span><span class="n">source</span><span class="p">,</span> <span class="n">keySelector</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="n">OrderedSequence</span><span class="p">&lt;</span><span class="n">TSource</span><span class="p">,</span> <span class="n">TKey</span><span class="p">&gt;</span> <span class="p">(</span><span class="n">source</span><span class="p">,</span> <span class="n">keySelector</span><span class="p">,</span> <span class="n">comparer</span><span class="p">,</span> <span class="n">SortDirection</span><span class="p">.</span><span class="n">Descending</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在第二个重载中我们看到OrderByDescending方法返回时的是一个继承了IOrderedEnumerable接口的对象OrderedSequence。这个对象记录了我们的排序规则。</p>

<p>而我们再查看下ThenBy方法的定义。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="n">IOrderedEnumerable</span><span class="p">&lt;</span><span class="n">TSource</span><span class="p">&gt;</span> <span class="n">ThenBy</span><span class="p">&lt;</span><span class="n">TSource</span><span class="p">,</span> <span class="n">TKey</span><span class="p">&gt;</span> <span class="p">(</span><span class="k">this</span> <span class="n">IOrderedEnumerable</span><span class="p">&lt;</span><span class="n">TSource</span><span class="p">&gt;</span> <span class="n">source</span><span class="p">,</span> <span class="n">Func</span><span class="p">&lt;</span><span class="n">TSource</span><span class="p">,</span> <span class="n">TKey</span><span class="p">&gt;</span> <span class="n">keySelector</span><span class="p">,</span> <span class="n">IComparer</span><span class="p">&lt;</span><span class="n">TKey</span><span class="p">&gt;</span> <span class="n">comparer</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Check</span><span class="p">.</span><span class="n">SourceAndKeySelector</span> <span class="p">(</span><span class="n">source</span><span class="p">,</span> <span class="n">keySelector</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">source</span><span class="p">.</span><span class="n">CreateOrderedEnumerable</span><span class="p">&lt;</span><span class="n">TKey</span><span class="p">&gt;</span> <span class="p">(</span><span class="n">keySelector</span><span class="p">,</span> <span class="n">comparer</span><span class="p">,</span> <span class="k">false</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="n">IOrderedEnumerable</span><span class="p">&lt;</span><span class="n">TSource</span><span class="p">&gt;</span> <span class="n">ThenBy</span><span class="p">&lt;</span><span class="n">TSource</span><span class="p">,</span> <span class="n">TKey</span><span class="p">&gt;</span> <span class="p">(</span><span class="k">this</span> <span class="n">IOrderedEnumerable</span><span class="p">&lt;</span><span class="n">TSource</span><span class="p">&gt;</span> <span class="n">source</span><span class="p">,</span> <span class="n">Func</span><span class="p">&lt;</span><span class="n">TSource</span><span class="p">,</span> <span class="n">TKey</span><span class="p">&gt;</span> <span class="n">keySelector</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">source</span><span class="p">.</span><span class="n">ThenBy</span> <span class="p">(</span><span class="n">keySelector</span><span class="p">,</span> <span class="k">null</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们可以看到ThenBy这个扩展方法追加到的对象类型要实现IOrderedEnumerable接口，而OrderBy方法恰好返回的就是这个类型接口对象。那我们再看看IOrderedEnumerable接口的定义。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Collections</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nn">System.Linq</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">interface</span> <span class="n">IOrderedEnumerable</span><span class="p">&lt;</span><span class="n">TElement</span><span class="p">&gt;</span> <span class="p">:</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">TElement</span><span class="p">&gt;,</span> <span class="n">IEnumerable</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">//</span>
</span><span class='line'>        <span class="c1">// Methods</span>
</span><span class='line'>        <span class="c1">//</span>
</span><span class='line'>        <span class="n">IOrderedEnumerable</span><span class="p">&lt;</span><span class="n">TElement</span><span class="p">&gt;</span> <span class="n">CreateOrderedEnumerable</span><span class="p">&lt;</span><span class="n">TKey</span><span class="p">&gt;</span> <span class="p">(</span><span class="n">Func</span><span class="p">&lt;</span><span class="n">TElement</span><span class="p">,</span> <span class="n">TKey</span><span class="p">&gt;</span> <span class="n">keySelector</span><span class="p">,</span> <span class="n">IComparer</span><span class="p">&lt;</span><span class="n">TKey</span><span class="p">&gt;</span> <span class="n">comparer</span><span class="p">,</span> <span class="kt">bool</span> <span class="k">descending</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其继承自IEnumerable接口，并且要实现一个名为CreateOrderedEnumerable的方法，正是ThenBy方法实现中调用的这个方法。</p>

<p>所以玄机在OrderedSequence这个类上。实现了IEnumerable接口对象调用OrderBy后会返回OrderedSequence这个对象。而该对象记录了当前排序的规则，其实现了IOrderedEnumerable接口。而ThenBy扩展方法被加到了IOrderedEnumerable接口对象上，其返回值也是一个具有IOrderedEnumerable接口的对象。</p>

<p>照这么说，调用了一次OrderBy后，然后调用多次ThenBy也是可以工作的。我也从官方MSDN中找到了答案：</p>

<blockquote><blockquote><p>ThenBy and ThenByDescending are defined to extend the type IOrderedEnumerable<TElement>, which is also the return type of these methods. This design enables you to specify multiple sort criteria by applying any number of ThenBy or ThenByDescending methods.</p></blockquote></blockquote>

<p>翻译为: ThenBy及ThenByDescending是IOrderedEnumerable类型的扩展方法。ThenBy和ThenByDescending方法的返回值也是IOrderedEnumerable类型。这样设计是为了能够调用任意数量的ThenBy和ThenByDescending方法实现多重排序。</p>

<p>至此，ThenBy的神秘面纱就解开了，但是我不知道如何查看OrderedSequence类的源码，如果能看到这个类的源码就太完美了。知道的同学请告知方法。</p>

<p>注: 上述类的源码来自于Mono的实现。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gatling->次时代性能测试利器]]></title>
    <link href="http://www.huangbowen.net/blog/2013/12/23/the-power-of-gatling/"/>
    <updated>2013-12-23T23:07:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/12/23/the-power-of-gatling</id>
    <content type="html"><![CDATA[<p>Gatling作为一款开源免费的性能测试工具越来越受到广大程序员的欢迎。免费当然是好的，最缺钱的就是程序员了;开源更好啊，缺啥功能、想做定制化的可以自己动手，丰衣足食。其实我最喜欢的原因是其提供了简洁强大的API，原生支持命令行运行，不像JMeter那样需要在界面上点来点去。另外其出色的扩展API和轻量级的HTML报表都值得让人称道。</p>

<!-- more -->


<h2>Gatling版本</h2>

<p>Gatling的的官方网站是<a href="http://gatling-tool.org/">http://gatling-tool.org/</a>。目前Gatling有两个主线版本，一个是Gatling 1,最新版本是1.5.3;一个是Gatling 2,最新版本是2.0.0-M3a。Gatling 2使用了JDK7进行编译，使用的Scala版本是2.10，它对Gatling的API进行了一些重构和重新设计,内部也有一些调整。 目前Gatling 2还在开发阶段，所以如果要在项目中使用的话最好还是使用Gatling 1.5.3。</p>

<h2>安装Gatling</h2>

<p>其实Gatling是款绿色软件，可以直接从<a href="https://github.com/excilys/gatling/wiki/Downloads">https://github.com/excilys/gatling/wiki/Downloads</a>下载指定的版本。下载下来解压缩以后，我们可以看到其目录结构。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>twer@bowen-huang:~/sourcecode/GatlingWorkShop/gatling-charts-highcharts-1.5.2<span class="nv">$ </span>tree -L 2
</span><span class='line'>.
</span><span class='line'>├── bin                             //可执行文件目录
</span><span class='line'>│   ├── gatling.bat
</span><span class='line'>│   ├── gatling.sh
</span><span class='line'>│   ├── recorder.bat
</span><span class='line'>│   └── recorder.sh
</span><span class='line'>├── conf                            //配置目录
</span><span class='line'>│   ├── application.conf
</span><span class='line'>│   ├── gatling.conf
</span><span class='line'>│   └── logback.xml
</span><span class='line'>├── lib                             //依赖的程序库
</span><span class='line'>│   ├── akka-actor-2.0.4.jar
</span><span class='line'>│   ├── async-http-client-1.7.18.20130621.jar
</span><span class='line'>│   ├── commons-io-2.4.jar
</span><span class='line'>│   ├── commons-lang-2.6.jar
</span><span class='line'>│   ├── commons-math3-3.1.1.jar
</span><span class='line'>│   ├── commons-pool-1.6.jar
</span><span class='line'>│   ├── compiler-interface-0.12.3-sources.jar
</span><span class='line'>│   ├── config-1.0.1.jar
</span><span class='line'>│   ├── gatling-app-1.5.2.jar
</span><span class='line'>│   ├── gatling-charts-1.5.2.jar
</span><span class='line'>│   ├── gatling-charts-highcharts-1.5.2.jar
</span><span class='line'>│   ├── gatling-core-1.5.2.jar
</span><span class='line'>│   ├── gatling-http-1.5.2.jar
</span><span class='line'>│   ├── gatling-jdbc-1.5.2.jar
</span><span class='line'>│   ├── gatling-metrics-1.5.2.jar
</span><span class='line'>│   ├── gatling-recorder-1.5.2.jar
</span><span class='line'>│   ├── gatling-redis-1.5.2.jar
</span><span class='line'>│   ├── grizzled-slf4j_2.9.2-0.6.10.jar
</span><span class='line'>│   ├── incremental-compiler-0.12.3.jar
</span><span class='line'>│   ├── jaxen-1.1.6.jar
</span><span class='line'>│   ├── joda-convert-1.2.jar
</span><span class='line'>│   ├── joda-time-2.2.jar
</span><span class='line'>│   ├── jodd-core-3.4.4.jar
</span><span class='line'>│   ├── jodd-lagarto-3.4.4.jar
</span><span class='line'>│   ├── json-path-0.8.2.fix24.jar
</span><span class='line'>│   ├── json-smart-1.1.1.jar
</span><span class='line'>│   ├── jsoup-1.7.2.jar
</span><span class='line'>│   ├── logback-classic-1.0.12.jar
</span><span class='line'>│   ├── logback-core-1.0.12.jar
</span><span class='line'>│   ├── netty-3.6.6.Final.jar
</span><span class='line'>│   ├── opencsv-2.3.jar
</span><span class='line'>│   ├── redisclient_2.9.2-2.10.jar
</span><span class='line'>│   ├── scala-compiler-2.9.3.jar
</span><span class='line'>│   ├── scala-library-2.9.3.jar
</span><span class='line'>│   ├── scalate-core_2.9-1.6.1.jar
</span><span class='line'>│   ├── scalate-util_2.9-1.6.1.jar
</span><span class='line'>│   ├── scopt_2.9.2-2.1.0.jar
</span><span class='line'>│   ├── slf4j-api-1.7.5.jar
</span><span class='line'>│   ├── xercesImpl-2.11.0.jar
</span><span class='line'>│   ├── xml-apis-1.4.01.jar
</span><span class='line'>│   ├── xstream-1.4.3.jar
</span><span class='line'>│   └── zinc-0.2.5.jar
</span><span class='line'>├── results            //性能测试结果存放目录
</span><span class='line'>│   └── blogsimulation-20131218210445
</span><span class='line'>├── target             //性能测试脚本编译结果
</span><span class='line'>│   ├── cache
</span><span class='line'>│   ├── classes
</span><span class='line'>│   └── zincCache
</span><span class='line'>└── user-files     //性能测试脚本源文件
</span><span class='line'>    ├── data
</span><span class='line'>    ├── request-bodies
</span><span class='line'>    └── simulations
</span></code></pre></td></tr></table></div></figure>


<p>Gatling在user-files目录中提供了几个性能测试脚本的示例。不过由于脚本中被测试的网站已经无法访问，所以我自己写了几个简单的测试脚本，已经放置到了Github上，可以通过<a href="https://github.com/huangbowen521/GatlingWorkShop">https://github.com/huangbowen521/GatlingWorkShop</a>下载。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>twer@bowen-huang:~/sourcecode/GatlingWorkShop/gatling-charts-highcharts-1.5.2/user-files<span class="nv">$ </span>tree simulations
</span><span class='line'>simulations
</span><span class='line'>└── blog
</span><span class='line'>    ├── blog.scala
</span><span class='line'>    └── github.scala
</span><span class='line'>
</span><span class='line'>1 directory, 2 files
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>可以看到在simulations目录下有两个文件，一个是我给自己的博客写的性能测试脚本，一个是给github写的一个性能测试脚本。</p>

<h2>运行Gatling</h2>

<p>在命令行下运行bin目录下的Gatling.sh(如果是windows用户，请运行Gatling.bat)。Gatling会自动列出当前所有的测试脚本供自己选择，然后会让填写simulation id(模拟Id)以及run description（运行描述）。输入完毕后按回车键测试即可启动。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>twer@bowen-huang:~/sourcecode/GatlingWorkShop/gatling-charts-highcharts-1.5.2<span class="nv">$ </span>./bin/gatling.sh
</span><span class='line'>GATLING_HOME is <span class="nb">set </span>to /Users/twer/sourcecode/GatlingWorkShop/gatling-charts-highcharts-1.5.2
</span><span class='line'>Choose a simulation number:
</span><span class='line'>     <span class="o">[</span>0<span class="o">]</span> blog.BlogSimulation
</span><span class='line'>     <span class="o">[</span>1<span class="o">]</span> blog.GithubSimulation
</span><span class='line'>1
</span><span class='line'>Select simulation id <span class="o">(</span>default is <span class="s1">&#39;githubsimulation&#39;</span><span class="o">)</span>. Accepted characters are a-z, A-Z, 0-9, - and _
</span><span class='line'>github
</span><span class='line'>Select run description <span class="o">(</span>optional<span class="o">)</span>
</span><span class='line'>testing github
</span><span class='line'>
</span><span class='line'>Simulation blog.GithubSimulation started…
</span><span class='line'>
</span><span class='line'>……
</span><span class='line'>……
</span><span class='line'>……
</span><span class='line'>
</span><span class='line'>Simulation finished.
</span><span class='line'>Simulation successful.
</span><span class='line'>Generating reports...
</span><span class='line'>Reports generated in 0s.
</span><span class='line'>Please open the following file : /Users/twer/sourcecode/GatlingWorkShop/gatling-charts-highcharts-1.5.2/results/github-20131223214957/index.html
</span></code></pre></td></tr></table></div></figure>


<p>可以看到命令行中最后一行中标示了性能测试报表的存放路径。</p>

<h2>查看测试报告</h2>

<p>Gatling的测试报表其实就是一个html文件。Gatling使用了HighCharts这款JavaScript库来进行报表的展示。另外Gatling还提供了方便的接口用来自定义报告的展示。</p>

<p>以下是报表的部分截图。</p>

<p><img src="http://www.huangbowen.net/images/gatlingReport1.png" width="800"></p>

<p><img src="http://www.huangbowen.net/images/gatlingReport2.png" width="800"></p>

<h2>测试脚本示例</h2>

<p>这是GithubSimulation的性能测试脚本。其实它就是Scala的一个类，继承自Simulation。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">package</span> <span class="nn">blog</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="nn">com.excilys.ebi.gatling.core.Predef._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">com.excilys.ebi.gatling.http.Predef._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">com.excilys.ebi.gatling.jdbc.Predef._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">com.excilys.ebi.gatling.http.Headers.Names._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">akka.util.duration._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">bootstrap._</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">GithubSimulation</span> <span class="k">extends</span> <span class="nc">Simulation</span> <span class="o">{</span>
</span><span class='line'>     <span class="k">var</span> <span class="n">httpConf</span> <span class="k">=</span> <span class="n">httpConfig</span><span class="o">.</span>
</span><span class='line'>     <span class="n">baseURL</span><span class="o">(</span><span class="s">&quot;https://github.com&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>     <span class="k">var</span> <span class="n">scn</span> <span class="k">=</span> <span class="n">scenario</span><span class="o">(</span><span class="s">&quot;search in github.com&quot;</span><span class="o">)</span>
</span><span class='line'>     <span class="o">.</span><span class="n">exec</span><span class="o">(</span>
</span><span class='line'>          <span class="n">http</span><span class="o">(</span><span class="s">&quot;home page&quot;</span><span class="o">)</span>
</span><span class='line'>          <span class="o">.</span><span class="n">get</span><span class="o">(</span><span class="s">&quot;/&quot;</span><span class="o">)</span>
</span><span class='line'>          <span class="o">.</span><span class="n">check</span><span class="o">(</span><span class="n">status</span><span class="o">.</span><span class="n">is</span><span class="o">(</span><span class="mi">200</span><span class="o">)))</span>
</span><span class='line'>     <span class="o">.</span><span class="n">pause</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">12</span><span class="o">)</span>
</span><span class='line'>     <span class="o">.</span><span class="n">exec</span><span class="o">(</span>
</span><span class='line'>          <span class="n">http</span><span class="o">(</span><span class="s">&quot;do search&quot;</span><span class="o">)</span>
</span><span class='line'>          <span class="o">.</span><span class="n">get</span><span class="o">(</span><span class="s">&quot;/search&quot;</span><span class="o">)</span>
</span><span class='line'>          <span class="o">.</span><span class="n">queryParam</span><span class="o">(</span><span class="s">&quot;q&quot;</span><span class="o">,</span> <span class="s">&quot;gatling&quot;</span><span class="o">)</span>
</span><span class='line'>          <span class="o">.</span><span class="n">check</span><span class="o">(</span><span class="n">status</span><span class="o">.</span><span class="n">is</span><span class="o">(</span><span class="mi">200</span><span class="o">)))</span>
</span><span class='line'>
</span><span class='line'>     <span class="n">setUp</span><span class="o">(</span><span class="n">scn</span><span class="o">.</span><span class="n">users</span><span class="o">(</span><span class="mi">500</span><span class="o">).</span><span class="n">ramp</span><span class="o">(</span><span class="mi">10</span><span class="o">).</span><span class="n">protocolConfig</span><span class="o">(</span><span class="n">httpConf</span><span class="o">))</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>在这个类中定义了一个httpConf，指定了被测网站的根目录。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>     <span class="k">var</span> <span class="n">httpConf</span> <span class="k">=</span> <span class="n">httpConfig</span><span class="o">.</span>
</span><span class='line'>     <span class="n">baseURL</span><span class="o">(</span><span class="s">&quot;https://github.com&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后定义了一个测试场景，用户先访问Github首页，检查http返回状态码是否为200，然后暂停一段时间后再执行一个查询操作，查询关键字是gatling，检查http返回状态码是否为200。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>     <span class="k">var</span> <span class="n">scn</span> <span class="k">=</span> <span class="n">scenario</span><span class="o">(</span><span class="s">&quot;search in github.com&quot;</span><span class="o">)</span>
</span><span class='line'>     <span class="o">.</span><span class="n">exec</span><span class="o">(</span>
</span><span class='line'>          <span class="n">http</span><span class="o">(</span><span class="s">&quot;home page&quot;</span><span class="o">)</span>
</span><span class='line'>          <span class="o">.</span><span class="n">get</span><span class="o">(</span><span class="s">&quot;/&quot;</span><span class="o">)</span>
</span><span class='line'>          <span class="o">.</span><span class="n">check</span><span class="o">(</span><span class="n">status</span><span class="o">.</span><span class="n">is</span><span class="o">(</span><span class="mi">200</span><span class="o">)))</span>
</span><span class='line'>     <span class="o">.</span><span class="n">pause</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">12</span><span class="o">)</span>
</span><span class='line'>     <span class="o">.</span><span class="n">exec</span><span class="o">(</span>
</span><span class='line'>          <span class="n">http</span><span class="o">(</span><span class="s">&quot;do search&quot;</span><span class="o">)</span>
</span><span class='line'>          <span class="o">.</span><span class="n">get</span><span class="o">(</span><span class="s">&quot;/search&quot;</span><span class="o">)</span>
</span><span class='line'>          <span class="o">.</span><span class="n">queryParam</span><span class="o">(</span><span class="s">&quot;q&quot;</span><span class="o">,</span> <span class="s">&quot;gatling&quot;</span><span class="o">)</span>
</span><span class='line'>          <span class="o">.</span><span class="n">check</span><span class="o">(</span><span class="n">status</span><span class="o">.</span><span class="n">is</span><span class="o">(</span><span class="mi">200</span><span class="o">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后指定500个用户模拟该测试场景。500个用户以每秒50个递增，持续10秒。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>     <span class="n">setUp</span><span class="o">(</span><span class="n">scn</span><span class="o">.</span><span class="n">users</span><span class="o">(</span><span class="mi">500</span><span class="o">).</span><span class="n">ramp</span><span class="o">(</span><span class="mi">10</span><span class="o">).</span><span class="n">protocolConfig</span><span class="o">(</span><span class="n">httpConf</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>


<h2>技术栈</h2>

<p>这里列出了Gatling的一些主要的技术栈。</p>

<ul>
<li><p><strong>Akka Actors.</strong> Gatling 使用了Akka作为其并发编程的运行时。Akka的Actors模式能够有效的绕过JVM上多线程带来的性能问题。</p></li>
<li><p><strong>Scala.</strong>选择Scala最大的原因是因为Scala可以很好的集成Akka,另一原因是作为一款运行在JVM上的语言，Scala更容易提供给用户简洁强大的API设计。</p></li>
<li><p><strong>Async Http Client.</strong> 使用这款开源库来是实现异步http通讯。并且使用了Netty调用http。</p></li>
<li><p><strong>Highcharts及Highstock.</strong> Gatling使用Highcarts和Highstock这两款JavaScript库来进行测试结果报表的展示。</p></li>
</ul>


<hr />

<p>其实Gatling并不完美，比如目前支持的协议并不多，不支持对数据库的性能测试，不能进行分布式性能测试等。当然Gatling也在不断的进步，看好你哦！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用media queries实现一个响应式的菜单]]></title>
    <link href="http://www.huangbowen.net/blog/2013/12/15/responsive-menu-by-media-queries/"/>
    <updated>2013-12-15T21:56:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/12/15/responsive-menu-by-media-queries</id>
    <content type="html"><![CDATA[<p>Media queries是CSS3引入的一个特性，使用它可以方便的实现各种响应式效果。在这个示例中我们将会使用media queries实现一个响应式的菜单。这个菜单会根据当前浏览器屏幕的大小变化而自动的呈现出不同的样式。如果浏览器屏幕大于800px，菜单则会显示在页面左侧；如果浏览器屏幕介于401px到800px之间，菜单则会显示在页面上方，与其他内容是上下关系；如果屏幕小于400px，则菜单仍在页面上方，但是菜单会变为下拉列表形式。</p>

<!-- more -->


<p>预览地址: <a href="http://htmlpreview.github.io/?https://github.com/huangbowen521/ResponsiveDesignTrial/blob/master/responsiveMenu.html">http://htmlpreview.github.io/?https://github.com/huangbowen521/ResponsiveDesignTrial/blob/master/responsiveMenu.html</a></p>

<p>要实现这样的特效，首先要创建一个下拉列表形式的菜单，如下所示。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;small-menu&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;form&gt;</span>
</span><span class='line'>        <span class="nt">&lt;select</span> <span class="na">name=</span><span class="s">&quot;URL&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;option</span> <span class="na">value=</span><span class="s">&quot;home.html&quot;</span><span class="nt">&gt;</span>我的博客首页<span class="nt">&lt;/option&gt;</span>
</span><span class='line'>            <span class="nt">&lt;option</span> <span class="na">value=</span><span class="s">&quot;blog.html&quot;</span><span class="nt">&gt;</span>我的博客列表<span class="nt">&lt;/option&gt;</span>
</span><span class='line'>            <span class="nt">&lt;option</span> <span class="na">value=</span><span class="s">&quot;whoami.html&quot;</span><span class="nt">&gt;</span>我的个人简介<span class="nt">&lt;/option&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/select&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/form&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后还要创建一个使用了ul和li元素的菜单，放置在上面菜单的后面。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;large-menu&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ul&gt;</span>
</span><span class='line'>        <span class="nt">&lt;li&gt;</span>
</span><span class='line'>            <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;home.html&quot;</span><span class="nt">&gt;</span>我的博客首页<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>        <span class="nt">&lt;li&gt;</span>
</span><span class='line'>            <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;blog.html&quot;</span><span class="nt">&gt;</span>我的博客列表<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>        <span class="nt">&lt;li&gt;</span>
</span><span class='line'>            <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;whoami.html&quot;</span><span class="nt">&gt;</span>我的个人简介<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后再加一个div元素，用来放置一些文本以填充页面其他部分。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;content&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;p&gt;</span>
</span><span class='line'>        上周五的时候我对某个项目做了一个更改，将里面的构建脚本由maven换成了gradle。原因之一是因为maven的配置太繁琐，由于其引入了lifecycle的机制，
</span><span class='line'>        导致其不够灵活，而gradle作为用groovy写的DSL，代码清爽、简单、灵活。原因之二是我们所有的项目构建都换成了gradle，为了保持技术栈单一，此项目
</span><span class='line'>        做迁移也是大势所趋。<span class="nt">&lt;/p&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>接下来就要设置media queries了，指定在不同屏幕尺寸下菜单表现出不同的样式。</p>

<p>当屏幕宽度小于400px时，我们需要隐藏ul菜单，显现下拉框菜单。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="k">@media</span> <span class="nt">screen</span> <span class="nt">and</span> <span class="o">(</span> <span class="nt">max-width</span><span class="o">:</span> <span class="nt">400px</span> <span class="o">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="nc">.small-menu</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">display</span><span class="o">:</span> <span class="k">inline</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nc">.large-menu</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">display</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当屏幕介于401px和800px时，显示ul菜单，并且将其设置为水平排列。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="k">@media</span> <span class="nt">screen</span> <span class="nt">and</span> <span class="o">(</span> <span class="nt">min-width</span><span class="o">:</span> <span class="nt">401px</span> <span class="o">)</span> <span class="nt">and</span> <span class="o">(</span> <span class="nt">max-width</span><span class="o">:</span> <span class="nt">800px</span> <span class="o">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nc">.small-menu</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">display</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nc">.large-menu</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">display</span><span class="o">:</span> <span class="k">inline</span><span class="p">;</span>
</span><span class='line'>        <span class="k">width</span><span class="o">:</span> <span class="m">100</span><span class="o">%</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nc">.large-menu</span> <span class="nt">ul</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">list-style-type</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nc">.large-menu</span> <span class="nt">ul</span> <span class="nt">li</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">display</span><span class="o">:</span> <span class="k">inline</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nc">.content</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">width</span><span class="o">:</span> <span class="m">100</span><span class="o">%</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当屏幕尺寸大于800px时，则将ul菜单设置为页面左边，并且菜单排列为垂直排列。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="k">@media</span> <span class="nt">screen</span> <span class="nt">and</span> <span class="o">(</span> <span class="nt">min-width</span><span class="o">:</span> <span class="nt">801px</span> <span class="o">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nc">.small-menu</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">display</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nc">.large-menu</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">display</span><span class="o">:</span> <span class="k">inline</span><span class="p">;</span>
</span><span class='line'>        <span class="k">float</span><span class="o">:</span> <span class="k">left</span><span class="p">;</span>
</span><span class='line'>        <span class="k">width</span><span class="o">:</span> <span class="m">20</span><span class="o">%</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nc">.content</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">float</span><span class="o">:</span> <span class="k">right</span><span class="p">;</span>
</span><span class='line'>        <span class="k">width</span><span class="o">:</span> <span class="m">80</span><span class="o">%</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样就简单实现了一个响应式的菜单，其实主要就是根据media queries来设置screen的条件，根据不同screen宽度来给页面元素设置对应的样式。当屏幕宽度发生变化时，会自动应用相应的样式。</p>

<p>代码已经被放置到了github上了，地址是<a href="https://github.com/huangbowen521/ResponsiveDesignTrial">https://github.com/huangbowen521/ResponsiveDesignTrial</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[翻译:反思极限编程]]></title>
    <link href="http://www.huangbowen.net/blog/2013/12/12/reflection-of-extreme-programming/"/>
    <updated>2013-12-12T23:19:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/12/12/reflection-of-extreme-programming</id>
    <content type="html"><![CDATA[<p>译者注: Bob大叔14年后再次谈论极限编程。极限编程经历了14年的风风雨雨后，Bob大叔将会给它怎么样的定义那？</p>

<!-- more -->


<p>在我手中拿着的一本白皮薄书，在14年前彻底的改变了软件世界。这本书的标题是解析极限编程，副标题是拥抱变化。作者是Kent Beck,出版时间为1999年。</p>

<p>这本书很薄，不到200页。排版很宽，间隔很远。写作风格即自由散漫又平易近人。章节不多，概念简单。</p>

<p>但是其影响却像地震一样，甚至至今震动仍未平息下来。</p>

<p>起始于第53页的章节10，列出了12项实践，引爆了行业内的大辩论。并催生了一场革命，改变了我们编写软件的所有方式。这些实践是:</p>

<ul>
<li><p><strong>计划游戏</strong>：当今被成为SCRUM。此观点认为软件应该按照任务列表中的优先级循序渐进的开发。</p></li>
<li><p><strong>小版本</strong>：应当频繁和渐进式地部署软件。</p></li>
<li><p><strong>隐喻</strong>：该概念最终在Eric Evans编写的《领域驱动设计》一书中明确化。系统结构应当建立在针对问题域的简单的智力模型之上。</p></li>
<li><p><strong>简单设计</strong>：任何时候都要保证系统尽可能的简单，不用考虑对未来的担心。</p></li>
<li><p><strong>测试</strong>：程序员和客户一起编写自动化测试来验证产品代码的行为与预期一致。当今我们称之为测试驱动开发（TDD）及验收测试驱动开发(ATDD)。</p></li>
<li><p><strong>重构</strong>：软件内部结构能够并且应当被持续改进。</p></li>
<li><p><strong>结对编程</strong>：如果团队成员各自单独工作，那么这称不上一个团队。真正的团队需要经常通过键盘进行合作。这样可以相互充分的分享知识, 正是团队成员的义务。</p></li>
<li><p><strong>集体所有权</strong>：代码归属于整个团队，而不是某个个体。</p></li>
<li><p><strong>每周工作40小时</strong>：经常加班的团队是失败的团队。</p></li>
<li><p><strong>现场客户</strong>：在团队中加入一名真正的客户，用于对需求负责，开发团队能够始终轻易的接触到他。</p></li>
<li><p><strong>编码标准</strong>：团队应当使用一致的编码风格保证代码整洁，易于沟通。</p></li>
</ul>


<h2>争议？</h2>

<p>很奇怪是不是？是不是并不是所有实践都有争议？但是14年前引起了疯狂争议。确实，整本书出版时，人们争议书中的描述不可能应用于实践，争议所有拥护者是如何的必躬屈膝，不听劝解，甚至是一行代码没写过的傻子&#8230;&#8230;</p>

<p>呃，我不应当让这些过去的感受压倒我。因为，毕竟它们早已消失不再，而我们依然存在。</p>

<p>看看这12项实践，你没有践行其中哪项？我温柔的读者中的大多数可能长期的践行大多数实践。如果说它们已经被普及肯定稍显夸张，但是更不夸张的说，它们现在已经成为主流。更重要的是，还未践行这些实践的团队至少在尝试它们。这些实践已经可以被完美的落地实施，而不再是一个被唾骂的异端。</p>

<h2>崛起</h2>

<p>过去的14年已经变得陌生。极限编程论战催生出来的敏捷运动，飞速成功，随后被项目经理接受，推动程序员。我们已经看到了确定性的、疯狂的成功，以及相应的（可预见的）无力的认证。我们看到了只采用了计划游戏（例如SCRUM)而忽略其他11个实践的策略失败了。这种策略被Martin Fowler称为<strong>无力的Scrum</strong>。我们已经经历了咨询师和作者们持续的加工和宣传，以及看板、精益及每一个新的项目管理方法的竞争。我们已经看到了软件工艺运动的发展，以及敏捷基因被逐渐的退化和稀释。</p>

<p>在所有的炒作和翻腾中，这12项实践依然留存，只是其中一些名字有稍微改变。一周工作40小时变成了可持续增长率。测试变成了TDD。隐喻变成了DDD。小版本变成了持续集成和持续部署。但是尽管名称改变，但是这些实践依然和14年前描述的差不多。</p>

<p>我们也看到极限编程这个名称几乎完全不用了。极少数人现在还使用这个词。一些人仍然使用XP这个缩写，但名称的大部分都已经消失。如果听到一个团队描述他们正在做的是极限编程，甚至正在践行所描述的这12项实践，我会觉得非常罕见。名称变了，但是实践未变。这些实践是持久的。
在翻腾，炒作，争议的咆哮和胡言乱语中，在人类争夺一个又一个位置的风雨中，在人类的贪婪，激情和骄傲的杂乱中，在所有的政治中，这些实践依然留存。</p>

<h2>稳定的价值观</h2>

<p>我相信这些实践这么持久是因为他们基于稳定的价值观这个坚实的基础。Kent Beck在他的书中第7章第29页描述了这样的价值观：</p>

<ul>
<li><p>沟通</p></li>
<li><p>简单</p></li>
<li><p>反馈</p></li>
<li><p>勇气</p></li>
</ul>


<p>我可以尝试论证为什么这些价值观是正确的，但是我他们自身已经论证了这些。软件工匠能够拒绝这些价值观中的任何一个吗？软件工匠能够不努力争取在工作中保证这些价值观的展现吗？这些价值观正是软件工艺的价值观。</p>

<p>我可以尝试辩论书中这12项实践拥抱和体现了这些价值观，但是这些实践的持久性足够证明,尽管围绕这些实践的名词和运动已经消散。</p>

<h2>成功</h2>

<p>极限编程已经成功了！它成功的超越了其支持者的最疯狂的梦想。它的成功是因为从诞生时的争议中幸存下来，在不可避免的倡导者的流失中幸存下来。它成功了是因为它活的比自己的名字更久！</p>

<p>极限编程的成功正像结构化编程的成功。甚至没人再会考虑结构化编程，因为他们一直在使用结构化编程。我们正在尝试达到没人再会考虑极限编程的目标。</p>

<p>这就是成功！一个想法从这场运动诞生一直存活到成为我们日常生活的一部分，这就是成功！</p>

<h2>回顾</h2>

<p>所以现在，2013年的最后几个星期，我花了些时间回顾1999年。那个时间Kent Beck写了一个突破性的书。这本书改变了一切。回顾并谨记:极限编程。简单的说，请承认它是:</p>

<p><strong>优秀的软件实践的核心</strong></p>

<p>原文出处: <a href="http://blog.8thlight.com/uncle-bob/2013/12/10/Thankyou-Kent.html">http://blog.8thlight.com/uncle-bob/2013/12/10/Thankyou-Kent.html</a>, 作者Uncle Bob Martin。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Gradle运行集成测试]]></title>
    <link href="http://www.huangbowen.net/blog/2013/12/10/integration-test-in-gradle/"/>
    <updated>2013-12-10T13:17:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/12/10/integration-test-in-gradle</id>
    <content type="html"><![CDATA[<p>如果Gradle构建的项目是一个web项目的话，里面可能包含一些集成测试和功能性测试。这些测试和单元测试不同之处是在运行之前要先在本地将web服务启动起来，并且跑完测试后能够自动的关闭web服务。</p>

<!-- more -->


<p>在本地启动web服务我们可以使用Gradle内置的jetty插件。jetty是一个轻量级的web容器，其执行速度快，配置简单，远程调试方便。启用jetty只需在build.gradle中加入对这个插件的引用。</p>

<figure class='code'><figcaption><span>build.gradle</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;jetty&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>之后可以配置war包的名称，启动的端口等属性。</p>

<figure class='code'><figcaption><span>build.gradle</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;jetty&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">httpPort</span> <span class="o">=</span> <span class="mi">9876</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="n">jettyRun</span><span class="o">,</span> <span class="n">jettyRunWar</span><span class="o">,</span> <span class="n">jettyStop</span><span class="o">]*.</span><span class="na">stopPort</span> <span class="o">=</span> <span class="mi">9966</span>
</span><span class='line'><span class="o">[</span><span class="n">jettyRun</span><span class="o">,</span> <span class="n">jettyRunWar</span><span class="o">,</span> <span class="n">jettyStop</span><span class="o">]*.</span><span class="na">stopKey</span> <span class="o">=</span> <span class="s1">&#39;stopKey&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们需要将集成测试与一般的单元测试分开。因为单元测试并不需要事先启动web服务，保证其执行速度快，能够得到更快的反馈。一般做法是单元测试后缀名为Test.java，集成测试后缀名为IntegrationTest.java。</p>

<p>配置单元测试执行的测试集合。</p>

<figure class='code'><figcaption><span>build.gradle</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">test</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">include</span> <span class="s1">&#39;**/*Test.class&#39;</span>
</span><span class='line'>  <span class="n">exclude</span> <span class="s1">&#39;**/*IntegrationTest.class&#39;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后新建一个Task，用于运行集成测试。</p>

<figure class='code'><figcaption><span>build.gradle</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">task</span> <span class="nf">intTest</span><span class="o">(</span><span class="nl">type:</span> <span class="n">Test</span><span class="o">,</span> <span class="nl">dependsOn:</span> <span class="n">test</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">include</span> <span class="s1">&#39;**/*IntegrationTest.class&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">doFirst</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">jettyRun</span><span class="o">.</span><span class="na">daemon</span> <span class="o">=</span> <span class="kc">true</span>
</span><span class='line'>      <span class="n">jettyRun</span><span class="o">.</span><span class="na">execute</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">doLast</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">jettyStop</span><span class="o">.</span><span class="na">execute</span><span class="o">()</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上述代码首先是创建一个名为intTest的task，其类型为Test,依赖于test task。该集成测试只会运行后缀名为IntegrationTest的测试类。在运行测试之前，首先采用后台模式启动jetty服务器，运行完测试后再调用jettyStop task停止jetty服务。</p>

<p>为了使我们在运行<code>gradle build</code>时也会运行intTest task，可以添加对intTest的依赖。</p>

<figure class='code'><figcaption><span>build.gradle</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">build</span><span class="o">.</span><span class="na">dependsOn</span> <span class="n">intTest</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样在运行<code>gradle build</code>时也会运行集成测试。并且在集成测试前后web服务会自动的启动和关闭。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[毕业多年的程序员重拾英语考雅思]]></title>
    <link href="http://www.huangbowen.net/blog/2013/12/05/a-old-developer-learn-english/"/>
    <updated>2013-12-05T22:08:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/12/05/a-old-developer-learn-english</id>
    <content type="html"><![CDATA[<p>昨天雅思成绩出来了，我的听力，阅读，写作，口语分数分别是5.5，5.5，5，6。这样算下来总分是5.5。可能对于大多人而言这个成绩不算什么，但是对于我来说却不容易（至少在一年前我想考到这样的分数绝对是不可能）。这个分数也满足了我这次考雅思的目的，因为如果要去澳洲出差拿457签证的一个新要求是雅思成绩必须达到听说读写每门成绩5分以上。现在签证流程已经在走了，估计1月初就会到澳洲。</p>

<p>在查到雅思成绩单的时候我还是有些小兴奋的，这说明我的英语在这一年来有了巨大的进步。同时我想将我整个学英语的过程记录下来，希望能够给其他人有所启迪。因为我越来越觉得作为一个有追求的程序员，必须要学好英语，良好的英语绝对有助于你的IT职业生涯。</p>

<!-- more -->


<p>ok，英语就从我的初中说起。从初中我真正开始学英语，从初一到初三英语一直很不错。因为那时候学习成绩好，年级几百人经常考到前十名。我想主要是初中英语词汇量不大，而自己特别能下苦功夫背，所有单词能记得住，自然考试不再话下。</p>

<p>当时初中老师说努力学习，考上重点高中就解放了。我轻信了老师的话，辛苦三年考上了重点高中，才发现自己从一个火坑跳到了另一个更大的火坑。我实在受不了一天花10多个小时在学习上的这种日子，自己也变的贪玩起来。英语这个时候就渐渐拉下了。主要原因是没有下功夫去背单词，考试的时候很多单词都不认识，阅读理解越做越困难。渐渐的对英语也起了逆反心理，老是觉得学了又用不到，只拿来考试没什么实用价值。在重点高中竞争是相当激烈，尤其是在高考大省河南。我们一个年级有1千多人，我最好考过前30，一般在200左右徘徊，这个排名刚好能进入2本线。</p>

<p>第一次高考成绩出来了，差几分考上2本线，然后我就复读了。其实那时候复读风非常流行。一个应届班级60来号人，至少有40多人都要复读，不知道现在是怎么个情况。复读那年读书还是不怎么上心，记得那年魔兽世界刚开服，还去通宵打过几次魔兽世界。英语词汇量没有积累起来，考试全靠运气，口语更不用说了，发音根本不着调。这年高考我清楚的记得我的英语超水平发挥，当时看到题目就觉得挺简单的，最后考了120多分（满分150分），平时模拟考都是90多分的。但是我的数学却发挥失常，只考了90多分，最后差重点线9分。报志愿的时候我一心想离开河南，最后选了四川成都的一个2本学校。</p>

<p>到了大学以后，英语分班考试我被轻松的分到了C班，也就是英语最差的班。到了大学了那是放开的玩啊，英语课都没怎么去过，除非是老师点到。其实现在想想大学教授英文的方式还是挺好的，注重口语，时不时还看几部原生电影，不像高中之前都是哑巴英语。在大学期间我还秉承英语无用论。当然不是认为英语完全无用，而是不希望将英语作为一门必修课，而是作为选修课让那些喜欢外语的人去学。</p>

<p>到了大三随着对IT技术的持续学习，我渐渐觉得英语是有用的，尤其是咱们程序员。试想这些IT玩意都是老外捣鼓出来的，所有原始资料都是英文的，只看翻译后的资料到底是经过了一套工序，不能跟上老外的思维。但是这时候英语已经拉下太多了，我已经弱到了英语26个字母的标准发音都发不出来了。更为悲催的是英语四级报了6次名，结果都没考过。虽然这个过程中好几次都拿出了学习英语的劲头，但是每次都是只有三分钟热度，没有持之以恒。还在我们学校只要过了学校组织的英语考试就可以拿到学位证，万幸我通过了这个考试。</p>

<p>毕业以后步入社会，自己深知英语不行，当时找工作也没投几个外企，唯一面试的一个外企在口语面惨败告终。我整个大四都在一家成都本土IT公司实习，毕业后也留在了这个公司。我在这个公司呆了3年，英语越发的退步。直到2011年末的时候，我不想在这个公司呆下去了。这只是一个小私企，发展前景各方面都不大，我觉的再呆下去人就废了。那时候我想换到一个比较出名的大公司去，能够好好的磨练下自己技术，能够找到和自己志同道合愿意钻研技术的人一起学习。我已经意识到了英语是我的硬伤，所以就在2011年末的时候重拾英语。</p>

<p>当时每天下班后我都会看一些微软的教学视频，坚持看英文原版，配上中文字幕。这样一边能练习英语，一边还能学习新技术。我记得当时看的是Bob大叔教Windows Phone开发的系列视频，每天晚上看一期，自得其乐。同时我注重了对生疏单词的了解。每当我在编程或者看资料发现有不认识或不会读的单词时，就会查询意思并试着阅读。当时我英语差到了连Value和Delegate这两个单词如何发音都不知道，但是随着刻意学习，情况慢慢好转。</p>

<p>过了2个月后，也就是2012年初的时候，我发了一些简历，也收到了一些面试通知，有外企的也有私企的。当时我记得我做了一个笔记，里面有英文写的自我介绍，还有几个可能被问道的英文问题的答案，比如你的长处是什么等。每次面试前我都会拿出来背诵，然后自己模拟面试场景来练习。陆陆续续参加了几次面试，英文面感觉还凑合。当然也有打击，当时面软件园某家外包公司时，全程英文面，自己答的一塌糊涂，自信心大受打击。我的英文紧限于背诵自己预先写好的自我介绍及准备的几个问题，听力和应变完全不行。</p>

<p>当时其实还是收到不少offer的，但是基本都是一些私企，也有外企，不过这个外企对英文要求不高。在2013年3月时，我已经离职有1个多月了，我接触到了ThoughtWorks这家公司，第一轮是HR电话面，包含口语面。第一个问题就是英文自我介绍，我早都背的滚瓜乱熟了，张口就来。可是后来HR针对我的自我介绍问了很多问题，我基本一个没听懂，甚至What is your major？都没听懂(我根本不知道major是什么意思)。但是那时候我也不知道我怎么想的，不管她的问题是什么了，就自己不停的说，将自己预先准备的英文面的答案挨个往外说，什么我家里父母是干嘛的，我为什么选择本公司，我的长处是什么。唯一听懂的一个问题是why you love coding?我巴拉巴拉说了一大堆。</p>

<p>就这样我竟奇迹般的通过了电话面。对ThoughtWorks有所了解的同事肯定知道ThoughtWorks的面试流程是比较长的。其中有一面是给你三道编程题，让你任选一道实现，三天内做完。妈呀都是英文的，题目看懂都花了老半天。看着最后一道题貌似英文简单点，就用词典把最后一道题弄懂了，吭哧吭哧做完了。还有一面是考逻辑题和英文测试题，全英文。我看了题目就傻眼了，好多单词不认识。那时候我不知道哪里来的勇气，挨个问监考的HR这个单词是什么意思，那个单词是什么意思，最后超常发挥通过了。最后office面的终面都是全中文的，快结束时我心情还比较放松。但是没想到当时的面试官Jeff突然问我英文怎么样，我说还可以。然后他就用英文问了我一个问题，我压根没听懂。但是我并没有慌张，而是说了句，“I think my english is good, but others don&#8217;t think so.”。几个面试官都笑了。</p>

<p>当我走出办公室的时候，心情还是比较轻松了，不是因为我觉的我有戏，而是我觉的我竟然坚持走完了这些面试流程。在ThoughtWorks的整个面试流程中我有多次萌生退意，觉得就自己这水平面上希望渺茫。但是每次我都又自己给自己打气，凭着那种不服输的精神坚持了下来。</p>

<p>在这里我想给各位找工作或换工作的IT人士说一些心得。</p>

<ul>
<li><p>精心准备简历，突出重点。写简历的时候多换位思考，想想HR看到这份简历会怎么样，怎么能都博得HR的眼球。我看过很多人的简历，看完什么感觉都没有，没有能够吸引人的地方。当然这个吸引人的地方你要真有，不能作假。比如在github上多多分享自己的代码，参与开源项目的开发，积极撰写技术博客，搞搞翻译，在豆瓣分享自己的读书心得等。这些写在简历里很容易抓住HR的心。</p></li>
<li><p>一定要从网上搜集各种面试题来看，复习。不懂的就去学。我当时下了20多页的面试题，一道道做，一道道记。面试时至少80%的题都能从题库中找到。</p></li>
<li><p>无论面试什么样的公司，事前都要充分准备，并且要自己坚持，不能主动放弃。人在有压力的时候很容易产生动摇，有的人挺住了，他成功了，有的人动摇了，那就失败了。</p></li>
</ul>


<p>面上ThoughtWorks以后，在2012年5月份入职了。此时我的英语口语还是一塌糊涂，词汇量不足200。第一天入职是English Only Day。即整天只能说英语，说一句中文罚款一块（自愿）。还没从面试成功的喜悦中清醒过来，又掉入了一个冰窟。加上以前搞的是C#,现在加入了Java的项目组，顿时感到亚历山大。</p>

<p>那时候确实辛苦，整天不分上下班的学习，早上7点多起来读英语，晚上学习技术之余要预留一个小时读英语。白天开站会、和国外同事交流时努力在笔记本上几下每一个不认识的单词，随时翻阅。为了改变自己一口浓重的“河南口音”，自己下载了VOA的一段音频，跟着读了上千遍，直到跟VOA里面说的几乎一模一样。通过高强度的练习自己的英文进步很快，加上平时坚持查阅外文资料，多管齐下，逐渐能够应付工作。那时写了一篇文章，可以参见<a href="http://www.huangbowen.net/blog/2012/08/08/zai-thoughtworksgong-zuo-liang-ge-duo-yue-de-zong-jie/">这里</a>。</p>

<p>不过等到可以应付日常工作的时候，那时候已经11月份了，自己也放松了对英语的学习，导致后来英语进步较慢。后来2013年7月的时候去澳洲出差了一个月。去之前心理还是挺忐忑的，怕自己hold不住。过去以后才发现并没有想象中的那么困难。在澳洲一个月自己的听力也有了一些进步，无论是听力还是口语。</p>

<p>回国之后打算考雅思。也没有怎么特别准备，只是买了一本雅思题库书，做了4套模拟题，熟悉了一下雅思题型。考试前心理还是挺忐忑的，毕竟好久没有参加过这样的考试了。考完以后感觉发挥的还是可以，5分应该没问题。成绩出来后也不出所料，顺利过关。我觉的雅思考到5分还是很容易的，但是要达到7分就要下一些功夫。听力和阅读要考够7分再努力把应该可以。而写作和阅读则一定要有所积累，并且一定要多学习国外那种很native的用法。其实我在和外国同事交流过程中发现他们其实有很多很常用的用法，但是在国内英语教材中很难体现出来。多看一些美剧，多读一些英文书籍能够提高这方面的能力。</p>

<p>现在英语在平时的工作和学习中早已不可或缺。它已经不是挡在我面前的一座大山，而是成为我个人成长的助推器。希望这篇文章能够激励咱们的IT同仁们，都能够克服英语这个难关。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gradle中使用idea插件的一些实践]]></title>
    <link href="http://www.huangbowen.net/blog/2013/12/04/use-idea-plugin-in-gradle/"/>
    <updated>2013-12-04T22:19:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/12/04/use-idea-plugin-in-gradle</id>
    <content type="html"><![CDATA[<p>如果你的项目使用了Gradle作为构建工具，那么你一定要使用Gradle来自动生成IDE的项目文件，无需再手动的将源代码导入到你的IDE中去了。</p>

<!-- more -->


<p>如果你使用的是eclipse，可以在build.gradle中加入这么一行.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;eclipse&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后在命令行中输入<code>gradle eclipse</code>就可以生成eclipse的项目文件，直接使用eclipse打开生成的项目文件即可。</p>

<p>当然作为Java程序开发者，最好使的IDE还是Intellij,昨天听闻Intellij 13已经发布了，增加了不少新功能，看来又要掏腰包了。如果要让Gradle自动生成Intellij的项目文件，需要使用idea插件。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;idea&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>命令行下输入<code>gradle idea</code>，就会生成Intellij的项目文件，真是省时省力。如果在已经存在Intellij的项目文件情况下，想根据build.gradle中的配置来更新项目文件，可以输入<code>gradle cleanIdea idea</code>。<code>cleanIdea</code>可以清除已有的Intellij项目文件。</p>

<p>Intellij项目文件主要有三种类型。</p>

<ul>
<li><p>.ipr Intellij工程文件</p></li>
<li><p>.iml Intellij 模块文件</p></li>
<li><p>.iws Intellij 工作区文件</p></li>
</ul>


<p>如果只简单的使用<code>gradle idea</code>生成Intellij的工程文件，其实在使用Intellij打开项目以后，我们还要做一些手工配置，比如指定JDK的版本，指定源代码管理工具等。Gradle的idea命令本质上就是生成这三个xml文件,所以Gradle提供了生成文件时的hook(钩子)，让我们可以方便的做定制化，实现最大程度的自动化。这就需要自定义idea这个任务了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">idea</span><span class="o">.</span><span class="na">project</span> <span class="o">{</span>
</span><span class='line'>     <span class="n">jdkName</span> <span class="o">=</span> <span class="s1">&#39;1.6&#39;</span>
</span><span class='line'>     <span class="n">languageLevel</span> <span class="o">=</span> <span class="s1">&#39;1.6&#39;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个用来配置项目的jdk及languageLevel。</p>

<p>如果要指定源代码管理工具类型，就需要调用hook修改生成的ipr文件。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">idea</span><span class="o">.</span><span class="na">project</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ipr</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">withXml</span> <span class="o">{</span> <span class="n">provider</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="n">provider</span><span class="o">.</span><span class="na">node</span><span class="o">.</span><span class="na">component</span><span class="o">.</span><span class="na">find</span> <span class="o">{</span> <span class="n">it</span><span class="o">.</span><span class="nd">@name</span> <span class="o">==</span> <span class="s1">&#39;VcsDirectoryMappings&#39;</span> <span class="o">}.</span><span class="na">mapping</span><span class="o">.</span><span class="nd">@vcs</span> <span class="o">=</span> <span class="s1">&#39;Git&#39;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过这种方式可以最大限度的实现对Intellij项目文件的定制化。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[记一次扯到蛋的教训]]></title>
    <link href="http://www.huangbowen.net/blog/2013/11/06/task-and-validation-is-important/"/>
    <updated>2013-11-06T00:27:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/11/06/task-and-validation-is-important</id>
    <content type="html"><![CDATA[<p>上周五的时候我对某个项目做了一个更改，将里面的构建脚本由maven换成了gradle。原因之一是因为maven的配置太繁琐，由于其引入了lifecycle的机制，导致其不够灵活，而gradle作为用groovy写的DSL，代码清爽、简单、灵活。原因之二是我们所有的项目构建都换成了gradle，为了保持技术栈单一，此项目做迁移也是大势所趋。（其实最重要的原因是我想练练手，虽然对maven已经相当熟悉了，但是gradle的练习不多。）</p>

<!-- more -->


<p>完成迁移以后，我在本地试了一下，编译的war包可以成功运行。并且我也修改了构建管道，使其能够支持新的gradle脚本将war包部署到服务器上。</p>

<p>然后我就给项目成员发了封邮件，告知了这件事情。</p>

<p>周一来上班的时候，收到了项目组的回信，大家都对我的劳动表示感谢。其中有一个组员建议我将这个项目的名称更换一下。因为该项目之前叫做ais-stub，他的主要功能是模拟ais服务，但是后来我们也加入了对其他web service的模拟，应该改为service-stub更具有意义。</p>

<p>我觉的这个改动应该比较简单，无非就是修改一下该项目的名称，并且更改构建出来的war包名称，修改构建管道的配置。然后我就动手改了。待我改了war包名称后，想起来这样会引起url中的contextPath也发生变化，而功能测试引用了这个url，那么我就修改了功能测试中的url。然后我又发现我需要修改其他项目中的配置，将使用了该url的地方替换为新的url。待我将我的修改提交后，发现部署失败了。原来是由于war包名称改变，部署脚本在获取war包时找不到新war包，我不得不修改部署脚本。但是修改过程中我发现有一段部署脚本由于权限原因我无法修改，只能请求对该脚本有修改权限的人替我修改，这又浪费了不少时间。全部修改完后我想起项目wiki上的介绍也要跟着改，把所有使用到该项目名称的地方都需要改成新名称……</p>

<p>就这样一步步的做下去，本来觉得2小时就能完成的任务我足足干了4个多小时。最后全部改完后，我试着跑一下看看能运行不。结果傻眼了，将该项目部署到服务器上后，其他项目请求该服务失败，具体原因未知。由于我已经做了太多的改变，很难定位到问题所在。我刚开始怀疑部署有问题，想查看服务器上的构建版本，发现查询不到。找了半天原因后发现原来星期五我做构建脚本迁移时遗漏了一个插件，导致没有将构建版本记录到war包中。我只能先放弃查看服务器上的war包构建版本，而在本地将该项目的服务器起起来，使用其他项目进行访问，结果又一切正常。那证明可能还是服务器上的部署有问题。我查看了构建出来的war包，发现里面的properties文件不是期望的那个，这时我想起周五修改构建管道时，随手删除了一个自认为多余的task，可能正是这个原因导致最后导入war包的properties不对。我只好又修改构建脚本，确保其能包含正确的war包……</p>

<p>很快时间已经到了6点多了，该下班了，但是我仍然深陷这个泥潭，没有找到问题原因，反而时不时要解决一些其他杂七杂八的东西。看来今天是完成不了了，因为修改的东西太多了，每个修改都没有进行验证，所以问题排查很难，并且还经常发现新的问题。</p>

<p>最后，我只好打住。决定明天早上一来把今天所有的修改都撤销掉，等于说今天的活都白干了。今天下班了，感觉很不好。作为一个丰富的程序员，给羊剪羊毛（出自《卓有成效的程序员》，指剪不断理还乱，本来要解决这个问题，但解决过程中面对的都是与根本问题不相干的其他问题）这件事情怎么会发生在我的身上那？</p>

<p>我觉得最大的问题有两个：</p>

<ol>
<li><p>没有对改名这个任务列详细的task。刚开始太轻敌，以为改名很简单，没有仔细想。结果自己把自己带到了沟里，步子迈的太大了，把蛋给扯到了。列出详细的task好处是你能预估出完成的时间，并且了解可能会出现哪些风险。每个task都循序渐进、可以验证，并且保证随时可以回退。由于没有列task，直接导致我明天撤销修改时还要努力回想到底今天做了哪些修改。</p></li>
<li><p>我没有及时进行验证。TDD的思想就是先测试-》测试失败->再写实现->测试成功。这样周而复始来驱动出你的代码。由于所有代码都有测试覆盖，你有充分的信心保证你的实现是正确的。而虽然我对项目的修改无法及时通过自动化测试进行验证，但起码也应当在做了一个小改动时及时的手工进行验证。比如在将构建脚本替换成gradle之后，不仅要在本地测试一下是否正确，还应当测试部署到服务器上的war包是否正确。这样至少能及时发现构建版本信息缺失及properties文件不对的问题。</p></li>
</ol>


<p>以前老教导别人做事的时候要列task，要及时验证和反馈，没想自己今天在这上面宰了一跟头，还是太轻敌啊。不过吃一堑长一智，希望以后少犯这种低级错误。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[开阔自己的视野，勇敢的接触新知识]]></title>
    <link href="http://www.huangbowen.net/blog/2013/10/31/learn-new-things/"/>
    <updated>2013-10-31T23:40:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/10/31/learn-new-things</id>
    <content type="html"><![CDATA[<p>在我们公司有buddy制度。每个新员工都会被分配给一个有经验的员工。老员工会在新员工6个月的试用期内给予各种各样的帮助。前几天我被分配到一个新buddy。在和他一起聊天的过程中，明显感觉到她有一些忧虑。“我以前主要做的是c++，没做过java，怎么能够快速上手那？”，“咱们这个办公室主要使用的是什么技术？”“如果换了项目组的话，使用的技术会不会变那？”。</p>

<!-- more -->


<p>从这些问题上，我可以感到他对自己不熟悉的技术、新知识很敏感，究其原因就是对学习新技术自信心不足。我想很多人可能都有这样的心态，在学习新技术上有抵触心理或畏惧心理。我之前曾写过一篇文章叫做《走出你的舒适区》，里面讲到抱着自己熟悉的技术就是呆在舒适区中。如果学习新技术就会走出自己的舒适区，很多人都会感到不适应。这种不适应很大程度上是由于人对未知事物的恐惧引起来的。</p>

<h2>不要对自己不了解的技术存在偏见</h2>

<p>记得去年的时候我已经有4年+的工作经验了（09年毕业，1年全职实习+3年工作）。但那个时候我一直把自己局限在C#程序员的范畴。看似有多年工作经验，其实只是一直吃老本而已。期间自己曾想自学下QT，但是最后还是不了了之。当时我和不喜欢用LinQ，偶然看某篇文章说LinQ执行效率低，这点就成了我抵制LinQ的理由。其实这就是一个典型的偏见。当我深入学习LinQ以后，才发现它是多么强大的语法，能大大提高开发速度，使程序更加简单可读。回想起来，正因为你不了解LinQ，所以才会有偏见存在。</p>

<p>还记得每个月都会在论坛掀起讨论的Java和C#优劣、工资比较的话题。换做以前自己很喜欢参与这样的讨论。而现在自己则不屑一顾。参与的最热烈的人恰恰是至少对其中一门一知半解的人。如果你深入了解了这两门语言，你自然知道它们各自的优劣、适用场景，自然知道这种话题没有多少实际意义。</p>

<h2>不要对自己不熟悉的技术心存恐惧</h2>

<p>我记得去年跳槽第一天上班，就被拉入了一个主要使用Java的项目组。而这之前我的Java经验为0。项目组里使用了Spring MVC、Spring WebFlow等开发框架，使用了Mockito、concordion、selenium等测试框架，使用了Maven构建工具……太多完全没接触的技术和框架让我手足无措。对于一个呆惯了舒适区的人极不适应。其实那段时间是我成长最快的时候，三个月内我学习、吸收了大量的知识，可以抵得上我两年的学习量。有的时候就是很奇妙，给了你压力才知道你的潜力有多大。正是这段经历使我完全消除了对陌生技术的恐惧。无论是以后学Haskell、Ruby还是JavaScript，我都是一种轻松加愉快的心态。</p>

<h2>如何学习新技术</h2>

<p>而了解和学习技术最快的方式是直接上其官方网站。一般官方网站都有简单的介绍和入门教程，能让你快速的建立其对这个技术的整体认识。另外还有详细的文档供你进阶。当然，如果要深入掌握的话还需要大量的实践经验才行，毕竟实践出真知嘛。另外这些官方网站十个有九个半都是英文的（谁让大部分的技术都是老外发明的），所以<strong>将英文练好还是很有必要的</strong>。</p>

<p>比如前段时间我在研究云计算，想学习下Chef-一个基础设施管理工具。第一步是访问其官网。从官网可以了解为什么要设计Chef、Chef解决了什么问题，进而了解了Chef的架构、实现策略，然后根据官网的基础教程走了一遍。短短两天就可以建立起对Chef的整体认识，甚至我还在办公室做了一次Chef知识的分享。</p>

<p>什么叫稳定？稳定不是你在一个公司一呆就是10年，而是你今天从公司离职，明天就能找到新工作。对于没背景的屌丝而言，唯一能跟别人竞争的就是自己的实力。能他人所不能，就是自己实力的最好实践。而坚持学习则是保证自己竞争力的唯一方法。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[亚马逊云服务之CloudFormation]]></title>
    <link href="http://www.huangbowen.net/blog/2013/10/23/aws-cloudformation/"/>
    <updated>2013-10-23T16:07:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/10/23/aws-cloudformation</id>
    <content type="html"><![CDATA[<p>亚马逊的Web Service其实包含了一套云服务。云服务主要分为三种:</p>

<ul>
<li><p>IaaS: Infrastructure as a service,基础设施即服务。</p></li>
<li><p>PaaS: Platform as a service, 平台即服务。</p></li>
<li><p>SaaS: Software as a service, 软件即服务。</p></li>
</ul>


<p>而亚马逊提供的云服务至少涵盖了前面两种。以下是亚马逊提供的各种服务。</p>

<!-- more -->


<p><img src="http://www.huangbowen.net/images/cloudformation1.png" width="680"></p>

<p>以上的图中S3、EC2等就属于IaaS，RDS、DynamoDB等就属于PaaS。</p>

<p>今天分享的是亚马逊的CloudFormation，亚马逊将其归类为Deployment&amp;Management（部署及管理类别）。为什么亚马逊要推出这项服务那？我们可以假设一个场景。如果你要将一个WordPress网站部署到亚马逊上，你需要以下几步:创建一个EC2实例->在此EC2实例上配置WordPress->创建RDS数据库实例->在WordPress中配置与该RDS的连接。整个过程耗时耗力，需要在亚马逊不同的云服务间跳转。这些操作关联性很强，不具备自动化。如果你使用了CloudFormation以后，只需要在页面上点几个按钮，输入一些参数，就可以创建一个博客，省时省力,甚至完全不用任何UI，直接通过命令行完成。</p>

<p><strong>CloudFormation给予了用户一种简单的方法来创建和管理一系列有关联的AWS的资源,可以有序的及可预见的初始化和更新这些资源。</strong></p>

<p>要了解CloudFomation之前，先要了解几个概念。</p>

<h3>Template - 模板</h3>

<p>Template是CloudFormation的一个重要概念。Template本质上是一个json格式的文件。该文件定义了你需要使用那些AWS的资源，并且如何初始化这些资源。CloudFormation支持的资源如下图所示。</p>

<p><img src="http://www.huangbowen.net/images/cloudformation2.png" width="680"></p>

<p>一个Template文件至少包含一下几个属性:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;AWSTemplateFormatVersion&quot;</span> <span class="p">:</span> <span class="s2">&quot;2010-09-09&quot;</span><span class="p">,</span>  <span class="err">//Template版本</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&quot;Description&quot;</span> <span class="p">:</span> <span class="s2">&quot;描述该Template的用途&quot;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&quot;Parameters&quot;</span><span class="p">:</span> <span class="p">{</span>        <span class="err">//</span> <span class="err">应用该Template需要配置的参数</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&quot;Resources&quot;</span> <span class="p">:</span> <span class="p">{</span>        <span class="err">//</span> <span class="err">使用到的AWS的资源及它们之间的关系</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&quot;Outputs&quot;</span> <span class="p">:</span> <span class="p">{</span>        <span class="err">//</span> <span class="err">stack创建完毕后的一系列返回值</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个Template就是用来创建一个EC2的虚拟机。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span> <span class="nt">&quot;AWSTemplateFormatVersion&quot;</span> <span class="p">:</span> <span class="s2">&quot;2010-09-09&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;Description&quot;</span> <span class="p">:</span> <span class="s2">&quot;Create an EC2 instance running the Amazon Linux 32 bit AMI.&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;Outputs&quot;</span> <span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;InstanceId&quot;</span> <span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;Description&quot;</span> <span class="p">:</span> <span class="s2">&quot;The InstanceId of the newly created EC2 instance&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;Value&quot;</span> <span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;Ref&quot;</span> <span class="p">:</span> <span class="s2">&quot;Ec2Instance&quot;</span> <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span> <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;Parameters&quot;</span> <span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;KeyPair&quot;</span> <span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;Description&quot;</span> <span class="p">:</span> <span class="s2">&quot;The EC2 Key Pair to allow SSH access to the instance&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;Type&quot;</span> <span class="p">:</span> <span class="s2">&quot;String&quot;</span>
</span><span class='line'>        <span class="p">}</span> <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;Resources&quot;</span> <span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;Ec2Instance&quot;</span> <span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;Properties&quot;</span> <span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;ImageId&quot;</span> <span class="p">:</span> <span class="s2">&quot;ami-3b355a52&quot;</span><span class="p">,</span>
</span><span class='line'>              <span class="nt">&quot;KeyName&quot;</span> <span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;Ref&quot;</span> <span class="p">:</span> <span class="s2">&quot;KeyPair&quot;</span> <span class="p">}</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>          <span class="nt">&quot;Type&quot;</span> <span class="p">:</span> <span class="s2">&quot;AWS::EC2::Instance&quot;</span>
</span><span class='line'>        <span class="p">}</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>AWS官方提供了很多Template的资源，我们可以直接使用，当然也可以按需修改，甚至自己手动编写自己的Template。&lt;http://aws.amazon.com/cloudformation/aws-cloudformation-templates/ >列出了一系列可供使用的Template。</p>

<h3>Stack - 堆</h3>

<p>Template只是一个json格式的文件，如果想要使用它的话，需要创建一个Stack,在Stack中指定你要使用的Template,然后亚马逊才会按照Template中的定义来创建及初始化资源。可以在AWS Management Console中或通过命令行调用API的方式来创建Stack。</p>

<h2>实战</h2>

<p>接下来，我们就通过AWS Management Console，使用CloudFormation来创建一个部署在EC2上、使用RDS作为数据库的WordPress网站。</p>

<p>首先，需要登录到AWS Management Console，选择EC2服务，点击左侧菜单的Key Pair,创建一个Key Pair。这个Key Pair将在接下来被使用，主要使AWS能够ssh到创建的EC2机器上。当然你也可以使用已有的Key Pair。</p>

<p><img src="http://www.huangbowen.net/images/cloudformation3.png" width="680"></p>

<p>然后选择CloudFormation服务，点击<code>Create Stack</code>按钮。</p>

<p>然后输入Stack名称，并选择一个Template。由于我们要创建一个WordPress的站点，可以选择<code>use a sample temple</code>,并选择WordPress这个模板。</p>

<p><img src="http://www.huangbowen.net/images/cloudformation4.png" width="680"></p>

<p><img src="http://www.huangbowen.net/images/cloudformation5.png" width="680"></p>

<p>然后点击<code>continue</code>按钮，配置相关的参数。注意在KeyName一项中输入我们第一步创建的Key Pair。</p>

<p><img src="http://www.huangbowen.net/images/cloudformation6.png" width="680"></p>

<p>然后点击<code>continue</code>按钮，配置此Stack的标签，这个是可选项，可以跳过。再点一下<code>continue</code>，将会再次确认想要的创建的资源信息，继续后就可以看到资源正在创建了。</p>

<p><img src="http://www.huangbowen.net/images/cloudformation7.png" width="680"></p>

<p>页面下半部分有很多标签，你可以随时查看该Stack的描述、资源、事件、参数、输出等各项信息。</p>

<p>等待大约20分钟，Stack就会执行完毕，在Outputs标签中你会看到有一个url。</p>

<p><img src="http://www.huangbowen.net/images/cloudformation8.png" width="680"></p>

<p>这个就是我们创建的WordPress的入口地址，访问该链接会进入WordPress的初始化设置页面。</p>

<p><img src="http://www.huangbowen.net/images/cloudformation9.png" width="680"></p>

<p>配置完以后，一个新的WordPress就诞生了，重新访问URL，你会看到你的博客首页。</p>

<p><img src="http://www.huangbowen.net/images/cloudformation10.png" width="680"></p>

<h2>CloudFormer</h2>

<p>提到CloudFormation就不得不说CloudFormer。CloudFormer是亚马逊提供的一个工具，用来给已有的AWS资源创建CloudFormation Template。这样你在以后创建相同的AWS资源时就可以直接使用这个Template了。</p>

<p>要使用CloudFormer首先要创建一个Stack，CloudFormer就被部署到一台EC2机器上，通过这个Stack返回的Outputs的URL我们可以一步步勾选使用到的资源，最终生成一个Template，该Template会自动放置到你的S3中。</p>

<p>首先创建Stack,Template选择use a sample template,并选择CloudFormer。</p>

<p><img src="http://www.huangbowen.net/images/cloudformation11.png" width="680"></p>

<p>然后点击<code>continue</code>，配置其他参数，直到走完创建Stack这个流程。</p>

<p><img src="http://www.huangbowen.net/images/cloudformation12.png" width="680"></p>

<p>等待这个Stack创建完毕后，就可以从Outputs标签得到一个URL。这个URL是执行CloudFormer工具的入口地址。</p>

<p><img src="http://www.huangbowen.net/images/cloudformation13.png" width="680"></p>

<p>点击此URL,即可按照配置一步步配置自己的Template。</p>

<p><img src="http://www.huangbowen.net/images/cloudformation14.png" width="680"></p>

<p>流程走完后，生成的Template会存放到你的S3 bucket中。</p>

<hr />

<p>由于CloudFormation支持对几乎所有的AWS资源进行创建和配置，并且能够按照指定顺序创建，其Template简洁易懂、容易配置、可重用，所以是你使用AWS的不可多得的好帮手。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[XML相关知识全接触（一）]]></title>
    <link href="http://www.huangbowen.net/blog/2013/10/14/xml-knowledge/"/>
    <updated>2013-10-14T00:32:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/10/14/xml-knowledge</id>
    <content type="html"><![CDATA[<p><img src="http://www.huangbowen.net/images/xml.png" width="400"></p>

<p>XML文件格式已经出来很久了。他的风头如今在JSON、YAML等新兴文件格式的冲击下已经显的不那么强劲。但是XML仍然是当今世界上使用最广泛的文件格式。围绕着它也有一大堆的概念和知识点。所以我们还是很有必要全面了解下。</p>

<!-- more -->


<h2>XML</h2>

<p>XML全称为eXtensible Markup Language，即可扩展标记语言。其被设计用来传输及存储数据。</p>

<p>XML与HTML看似比较相似，但是其设计目的并不相同。</p>

<ul>
<li><p>XML用来传输及存储数据，主要关注数据是什么。</p></li>
<li><p>HTML用来显示数据，主要关注数据看起来是什么样。</p></li>
<li><p>HTML的tag是预定义的，比如说table标签，浏览器会知道它是什么含义。</p></li>
<li><p>XML的tag不是预定义的，需要自己设计tag并描述tag的含义。XML中的tag如果不借助XSLT文件，浏览器只会以简单的文本方式展示。</p></li>
</ul>


<p>很多人认为HTML是XML文件的一个子集。其实这种观点是错误的，因为HTML的实现并未严格遵循XML的语法。比如XML要求每个tag必须要有闭合标记，XML的tag是大小写敏感的，XML给tag添加的属性必须要使用引号包起来…这些语法要求HTML都不满足。</p>

<p>请看XML的一个示例。</p>

<figure class='code'><figcaption><span>book.xml </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;book&gt;</span>
</span><span class='line'>    <span class="nt">&lt;name&gt;</span>Effective JavaScript<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;category&gt;</span>Program Language<span class="nt">&lt;/category&gt;</span>
</span><span class='line'>    <span class="nt">&lt;author&gt;</span>Bowen<span class="nt">&lt;/author&gt;</span>
</span><span class='line'>    <span class="nt">&lt;description&gt;</span>This book is about JavaScript Language.<span class="nt">&lt;/description&gt;</span>
</span><span class='line'><span class="nt">&lt;/book&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这是一个简单的XML文件。第一行说明了xml的版本及编码类型。接下来是一个根节点book，根节点可以包含很多子节点。</p>

<h3>XML命名空间</h3>

<p>由于XML的tag并不像HTML那样是预定义的，那么很有可能两个XML中的同名tag具有不同的含义。那么在合并XML等操作时势必会造成冲突。解决的办法就是给XML的tag加上命名空间（即namespace），每一个namespace都可以指定一个前缀。这些前缀会区分同名tag。</p>

<p>假设这里有另一个xml文件。</p>

<figure class='code'><figcaption><span>anotherBook.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;book&gt;</span>
</span><span class='line'>    <span class="nt">&lt;name&gt;</span>Rework<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;page&gt;</span>120<span class="nt">&lt;/page&gt;</span>
</span><span class='line'>    <span class="nt">&lt;publishDate&gt;</span>2013-10-08<span class="nt">&lt;/publishDate&gt;</span>
</span><span class='line'><span class="nt">&lt;/book&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果我们要合并这两个xml节点到同一个xml文件中时，不加namespace会发生冲突，因为含有同名的tag，其子节点的结构并不相同。接下来我们给其加上命名空间并合并。</p>

<figure class='code'><figcaption><span>combined.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;root&gt;</span>
</span><span class='line'><span class="nt">&lt;ns1:book</span> <span class="na">xmlns:ns1=</span><span class="s">&quot;http://www.huangbowen.net/ns1&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ns1:name&gt;</span>Effective JavaScript<span class="nt">&lt;/ns1:name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ns1:category&gt;</span>Program Language<span class="nt">&lt;/ns1:category&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ns1:author&gt;</span>Bowen<span class="nt">&lt;/ns1:author&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ns1:description&gt;</span>This book is about JavaScript Language.<span class="nt">&lt;/ns1:description&gt;</span>
</span><span class='line'><span class="nt">&lt;/ns1:book&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;ns2:book</span> <span class="na">xmlns:ns2=</span><span class="s">&quot;http://www.huangbowen.net/ns2&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>     <span class="nt">&lt;ns2:name&gt;</span>Rework<span class="nt">&lt;/ns2:name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ns2:page&gt;</span>120<span class="nt">&lt;/ns2:page&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ns2:publishDate&gt;</span>2013-10-08<span class="nt">&lt;/ns2:publishDate&gt;</span>
</span><span class='line'>     <span class="nt">&lt;/ns2:book&gt;</span>
</span><span class='line'><span class="nt">&lt;/root&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>xmlns是xml namespace的缩写。引号后面是tag的前缀。这个前缀可以省略，比如<code>xmlns="http://www.huangbowen.net/ns1"</code>,相当于没有前缀的tag自动应用默认的命名空间。需要注意的是命名空间的URI只是给命名空间提供一个唯一的标识，xml解析器并不会访问这个URI来获取任何信息。很多公司习惯将这个URI一个web页面，该web页面描述了该namespace的相关信息。</p>

<h2>XSD</h2>

<p>XSD全称为XML Schema Definition,即XML结构定义语言。每个XSD文件是对一个XML文件的结构定义。
由于XML中的tag并不是预定义的，那么每人都可以创建自己的XML结构文档。如果你想让别人按照你的标准创建一份xml文件，你可以使用XSD文件来描述你的标准。</p>

<p>这是针对本文示例book.xml文件的一个XSD文件。</p>

<figure class='code'><figcaption><span>book.xsd</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;xs:schema</span> <span class="na">attributeFormDefault=</span><span class="s">&quot;unqualified&quot;</span> <span class="na">elementFormDefault=</span><span class="s">&quot;qualified&quot;</span>
</span><span class='line'>           <span class="na">xmlns:xs=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;xs:element</span> <span class="na">name=</span><span class="s">&quot;book&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;xs:complexType&gt;</span>
</span><span class='line'>            <span class="nt">&lt;xs:sequence&gt;</span>
</span><span class='line'>                <span class="nt">&lt;xs:element</span> <span class="na">type=</span><span class="s">&quot;xs:string&quot;</span> <span class="na">name=</span><span class="s">&quot;name&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>                <span class="nt">&lt;xs:element</span> <span class="na">type=</span><span class="s">&quot;xs:string&quot;</span> <span class="na">name=</span><span class="s">&quot;category&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>                <span class="nt">&lt;xs:element</span> <span class="na">type=</span><span class="s">&quot;xs:string&quot;</span> <span class="na">name=</span><span class="s">&quot;author&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>                <span class="nt">&lt;xs:element</span> <span class="na">type=</span><span class="s">&quot;xs:string&quot;</span> <span class="na">name=</span><span class="s">&quot;description&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/xs:sequence&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/xs:complexType&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/xs:element&gt;</span>
</span><span class='line'><span class="nt">&lt;/xs:schema&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>从上可以看出其实XSD文件本身就是一个XML文件，它遵循XML语法，比如每个tag都需要有结束标记，必须有且只有一个根节点等。</p>

<p>在一个XML文件中可以添加其Schema的引用信息。</p>

<figure class='code'><figcaption><span>book.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;ns1:book</span> <span class="na">xmlns:ns1=</span><span class="s">&quot;http://www.huangbowen.net/ns1&quot;</span> <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="na">xsi:targetLocation=</span><span class="s">&quot;http://www.huangbowen.net/book.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ns1:name&gt;</span>Effective JavaScript<span class="nt">&lt;/ns1:name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ns1:category&gt;</span>Program Language<span class="nt">&lt;/ns1:category&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ns1:author&gt;</span>Bowen<span class="nt">&lt;/ns1:author&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ns1:description&gt;</span>This book is about JavaScript Language.<span class="nt">&lt;/ns1:description&gt;</span>
</span><span class='line'><span class="nt">&lt;/ns1:book&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在IDE中，如果你的XML节点没有遵守你引用的Schema中的定义，就会给出错误提醒。</p>

<h2>XSLT</h2>

<p>XSLT全称为EXtensible Stylesheet Language Transformations。 XSLT用于将XML文档转换为XHTML或其他XML文档。</p>

<p>在讲XSLT之前我们先讲讲XSL。XSL全称为Extensible Stylesheet Language,即可扩展样式表语言。众所周知，CSS是HTML文件的样式表，而XSL则是XML文件的样式表。XSL文件描述了XML文件应该如何被显示。</p>

<p>其实XSL不仅仅是样式表语言，它主要包含3部分:</p>

<ul>
<li><p>XSLT - 用来转换XML文档</p></li>
<li><p>XPath - 查询和操作XML文档中的节点</p></li>
<li><p>XSL-FO - 格式化XML文档</p></li>
</ul>


<p>XSLT使用XPath来查找XML中的元素。</p>

<p>XSLT通过一个xml文件来定义源xml文件与目标文件之间的转换关系。该xml文件必须以<code>&lt;xsl:stylesheet&gt;</code>或<code>&lt;xsl:transform&gt;</code>作为根节点。</p>

<p>对于本文的示例book.xml,如果我们使用浏览器打开显示效果如下。</p>

<p><img src="http://www.huangbowen.net/images/bookxml.png" width="600"></p>

<p>现在我们创建一个XSLT文件将其转换为一个HTML文件。</p>

<figure class='code'><figcaption><span>book.xsl</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;xsl:stylesheet</span> <span class="na">version=</span><span class="s">&quot;1.0&quot;</span>
</span><span class='line'><span class="na">xmlns:xsl=</span><span class="s">&quot;http://www.w3.org/1999/XSL/Transform&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;xsl:template</span> <span class="na">match=</span><span class="s">&quot;/&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;html&gt;</span>
</span><span class='line'>  <span class="nt">&lt;body&gt;</span>
</span><span class='line'>  <span class="nt">&lt;h2&gt;</span>My Book<span class="nt">&lt;/h2&gt;</span>
</span><span class='line'>  <span class="nt">&lt;table</span> <span class="na">border=</span><span class="s">&quot;1&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>      <span class="nt">&lt;td&gt;</span>name<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>      <span class="nt">&lt;td&gt;&lt;xsl:value</span><span class="na">-of</span> <span class="na">select=</span><span class="s">&quot;book/name&quot;</span> <span class="nt">/&gt;&lt;/td&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>    <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>      <span class="nt">&lt;td&gt;</span>category<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>      <span class="nt">&lt;td&gt;&lt;xsl:value</span><span class="na">-of</span> <span class="na">select=</span><span class="s">&quot;book/category&quot;</span> <span class="nt">/&gt;&lt;/td&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>    <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>      <span class="nt">&lt;td&gt;</span>author<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>      <span class="nt">&lt;td&gt;&lt;xsl:value</span><span class="na">-of</span> <span class="na">select=</span><span class="s">&quot;book/author&quot;</span> <span class="nt">/&gt;&lt;/td&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>    <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>      <span class="nt">&lt;td&gt;</span>description<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>      <span class="nt">&lt;td&gt;&lt;xsl:value</span><span class="na">-of</span> <span class="na">select=</span><span class="s">&quot;book/description&quot;</span> <span class="nt">/&gt;&lt;/td&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/table&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/html&gt;</span>
</span><span class='line'><span class="nt">&lt;/xsl:template&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/xsl:stylesheet&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后我们在book.xml文件中加入对这个XSLT文件的引用。</p>

<figure class='code'><figcaption><span>book.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span>
</span><span class='line'><span class="cp">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;book.xsl&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;book&gt;</span>
</span><span class='line'>    <span class="nt">&lt;name&gt;</span>Effective JavaScript<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;category&gt;</span>Program Language<span class="nt">&lt;/category&gt;</span>
</span><span class='line'>    <span class="nt">&lt;author&gt;</span>Bowen<span class="nt">&lt;/author&gt;</span>
</span><span class='line'>    <span class="nt">&lt;description&gt;</span>This book is about JavaScript Language.<span class="nt">&lt;/description&gt;</span>
</span><span class='line'><span class="nt">&lt;/book&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>接下来我们再用浏览器打开book.xml文件，发现显示变成了这样。是不是很神奇？</p>

<p><img src="http://www.huangbowen.net/images/bookxmlwithxslt.png" width="600"></p>

<p>注意如果你使用chrome打开该book.xml文件，请设置chrome的<code>--allow-file-access-from-files</code>属性，这样chrome才允许加载本地的xsl文件。解决方案看这里：<a href="http://stackoverflow.com/questions/3828898/can-chrome-be-made-to-perform-an-xsl-transform-on-a-local-file">http://stackoverflow.com/questions/3828898/can-chrome-be-made-to-perform-an-xsl-transform-on-a-local-file</a></p>

<p>OK，这篇文章讲的够多了，下篇接着讲XPath，XML to Object以及XML文档格式与近来风头强劲的JSON、YAML格式的比较。</p>
]]></content>
  </entry>
  
</feed>
