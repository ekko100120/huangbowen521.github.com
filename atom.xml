<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[黄博文的地盘]]></title>
  <link href="http://www.huangbowen.net/atom.xml" rel="self"/>
  <link href="http://www.huangbowen.net/"/>
  <updated>2014-01-02T21:32:41+08:00</updated>
  <id>http://www.huangbowen.net/</id>
  <author>
    <name><![CDATA[黄博文]]></name>
    <email><![CDATA[huangbowen521@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[我的2013年总结]]></title>
    <link href="http://www.huangbowen.net/blog/2014/01/02/my-conclusion-of-2013/"/>
    <updated>2014-01-02T21:30:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2014/01/02/my-conclusion-of-2013</id>
    <content type="html"><![CDATA[<ol>
<li><p>读了20多本书，有些书让人拍案叫绝，有些书则没产生多大共鸣。上半年读的多些，下半年有些懒散，读的相对少些。</p></li>
<li><p>翻译了一本书,《Effective JavaScript》并且已经出版，还在翻译另一本。翻译书这事情咋个说那？看似难，其实不难，只是需要花大量时间;看似不难其实难，英文好不一定就翻译的信、达、雅。</p></li>
<li><p>去澳洲出差了一个月，第一次跑这么远，跑到另一块大陆上。在那里感受到了国外的生活，开阔了自己的视野。</p></li>
<li><p>经过1个月的准备，英语考过了4个5，算是满足了拿澳洲457visa的要求。但是自我感觉英文在2013年提高并不大，还未到随心所欲的地步。</p></li>
<li><p>坚持写博客。虽然从2008年就开始写博客，但是中间断断续续，甚至2012年丢掉了之前所有的博客数据。索性在2013年又坚持起来，每个月至少5篇（11月份准备考雅思写的不多）。</p></li>
<li><p>2013年也尝试了很多新东西，AWS、node.js、ruby、haskell、groovy&#8230;&#8230;收获了很多的东西，但是感觉自己总结的力度还是不够。</p></li>
</ol>


<p>总的来说，2013年是充实的一年，2014年要给自己更大的压力，因为2014年就要为人父了，担上的压力会更重。 不过我对技术的热情和追求不会消退。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C#中的ThenBy是如何实现的]]></title>
    <link href="http://www.huangbowen.net/blog/2013/12/26/how-to-implement-thenby-in-c-number/"/>
    <updated>2013-12-26T23:14:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/12/26/how-to-implement-thenby-in-c-number</id>
    <content type="html"><![CDATA[<p>C#中给继承自IEnumerable的对象（最熟知的就是List了）提供了很丰富的扩展方法，涉及列表操作的方方面面。而扩展方法ThenBy就是很有意思的一个，它的实现也很巧妙。</p>

<!-- more -->


<p>如果有这样的一个Team类，里面有三个属性。</p>

<figure class='code'><figcaption><span>Team.cs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Team</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="nf">Team</span> <span class="p">(</span><span class="kt">string</span> <span class="n">name</span><span class="p">,</span> <span class="kt">int</span> <span class="n">timeCost</span><span class="p">,</span> <span class="kt">int</span> <span class="n">score</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">Name</span> <span class="p">=</span> <span class="n">name</span><span class="p">;</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">TimeCost</span> <span class="p">=</span> <span class="n">timeCost</span><span class="p">;</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">Score</span> <span class="p">=</span> <span class="n">score</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">get</span><span class="p">;</span>
</span><span class='line'>        <span class="k">private</span> <span class="k">set</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="kt">int</span> <span class="n">TimeCost</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">get</span><span class="p">;</span>
</span><span class='line'>        <span class="k">private</span> <span class="k">set</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="kt">int</span> <span class="n">Score</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">get</span><span class="p">;</span>
</span><span class='line'>        <span class="k">private</span> <span class="k">set</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后我们有一个Team的List。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">List</span><span class="p">&lt;</span><span class="n">Team</span><span class="p">&gt;</span> <span class="n">teams</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Team</span><span class="p">&gt;</span> <span class="p">();</span>
</span><span class='line'><span class="n">teams</span><span class="p">.</span><span class="n">Add</span> <span class="p">(</span><span class="k">new</span> <span class="n">Team</span> <span class="p">(</span><span class="s">&quot;teamA&quot;</span><span class="p">,</span> <span class="m">10</span><span class="p">,</span> <span class="m">22</span><span class="p">));</span>
</span><span class='line'><span class="n">teams</span><span class="p">.</span><span class="n">Add</span> <span class="p">(</span><span class="k">new</span> <span class="n">Team</span> <span class="p">(</span><span class="s">&quot;teamB&quot;</span><span class="p">,</span> <span class="m">12</span><span class="p">,</span> <span class="m">20</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="n">teams</span><span class="p">.</span><span class="n">Add</span> <span class="p">(</span><span class="k">new</span> <span class="n">Team</span> <span class="p">(</span><span class="s">&quot;teamC&quot;</span><span class="p">,</span> <span class="m">8</span><span class="p">,</span> <span class="m">18</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>那么如何求出teams中得分最高的那个队伍那？这个很简单，只需要一句话即可。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="n">teams</span><span class="p">.</span><span class="n">OrderByDescending</span> <span class="p">(</span><span class="n">team</span> <span class="p">=&gt;</span> <span class="n">team</span><span class="p">.</span><span class="n">Score</span><span class="p">).</span><span class="n">First</span> <span class="p">();</span>
</span><span class='line'><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span> <span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="n">Name</span><span class="p">);</span> <span class="c1">// teamA</span>
</span></code></pre></td></tr></table></div></figure>


<p>由于List实现了IEnumerable接口，而System.Linq中的Enumerable类中有针对IEnumerable接口的名为OrderByDescending的扩展方法，所以我们直接调用这个扩展方法可以对List按照指定的key进行降序排列，再调用First这个扩展方法来获取列表中的第一个元素。</p>

<p>如果我的List变成这个样子。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">List</span><span class="p">&lt;</span><span class="n">Team</span><span class="p">&gt;</span> <span class="n">teams</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Team</span><span class="p">&gt;</span> <span class="p">();</span>
</span><span class='line'><span class="n">teams</span><span class="p">.</span><span class="n">Add</span> <span class="p">(</span><span class="k">new</span> <span class="n">Team</span> <span class="p">(</span><span class="s">&quot;teamA&quot;</span><span class="p">,</span> <span class="m">10</span><span class="p">,</span> <span class="m">18</span><span class="p">));</span>
</span><span class='line'><span class="n">teams</span><span class="p">.</span><span class="n">Add</span> <span class="p">(</span><span class="k">new</span> <span class="n">Team</span> <span class="p">(</span><span class="s">&quot;teamB&quot;</span><span class="p">,</span> <span class="m">12</span><span class="p">,</span> <span class="m">16</span><span class="p">));</span>
</span><span class='line'><span class="n">teams</span><span class="p">.</span><span class="n">Add</span> <span class="p">(</span><span class="k">new</span> <span class="n">Team</span> <span class="p">(</span><span class="s">&quot;teamC&quot;</span><span class="p">,</span> <span class="m">8</span><span class="p">,</span> <span class="m">18</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>由于有可能两组以上的队伍都可能拿到最高分，那么在这些最高分的队伍中，我们选取用时最少的作为最终优胜者。有人说那可以这样写。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="n">teams</span><span class="p">.</span><span class="n">OrderByDescending</span> <span class="p">(</span><span class="n">team</span> <span class="p">=&gt;</span> <span class="n">team</span><span class="p">.</span><span class="n">Score</span><span class="p">).</span><span class="n">OrderBy</span><span class="p">(</span><span class="n">team</span> <span class="p">=&gt;</span> <span class="n">team</span><span class="p">.</span><span class="n">TimeCost</span><span class="p">).</span><span class="n">First</span> <span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>先对列表按Score降序排列，再对列表按TimeCost升序排列，然后取结果中的第一个元素。看来貌似是正确的，但其实是错误的。因为第一次调用OrderByDescending方法后返回了一个排序后的数组，再调用OrderBy是另外一次排序了，它会丢弃上一次排序，这与我们定的先看积分，如果积分相同再看耗时的规则违背。</p>

<p>那么应该如何实现那？C#给我们提供了一个叫做ThenBy的方法，可以满足我们的要求。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="n">teams</span><span class="p">.</span><span class="n">OrderByDescending</span> <span class="p">(</span><span class="n">team</span> <span class="p">=&gt;</span> <span class="n">team</span><span class="p">.</span><span class="n">Score</span><span class="p">).</span><span class="n">ThenBy</span><span class="p">(</span><span class="n">team</span> <span class="p">=&gt;</span> <span class="n">team</span><span class="p">.</span><span class="n">TimeCost</span><span class="p">).</span><span class="n">First</span> <span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span> <span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="n">Name</span><span class="p">);</span> <span class="c1">// teamC</span>
</span></code></pre></td></tr></table></div></figure>


<p>新的问题又来了。第一次调用OrderByDescending方法时返回的是一个新对象，再对这个新对象调用ThenBy时，它只有记录了上一次排序规则，才能达到我们想要的效果。那么C#是如何记录上次排序使用的key那？</p>

<p>这就先要看OrderByDescending方法是如何实现了的。查看源码发现OrderByDescending有两个重载，实现如下。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="n">IOrderedEnumerable</span><span class="p">&lt;</span><span class="n">TSource</span><span class="p">&gt;</span> <span class="n">OrderByDescending</span><span class="p">&lt;</span><span class="n">TSource</span><span class="p">,</span> <span class="n">TKey</span><span class="p">&gt;</span> <span class="p">(</span><span class="k">this</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">TSource</span><span class="p">&gt;</span> <span class="n">source</span><span class="p">,</span> <span class="n">Func</span><span class="p">&lt;</span><span class="n">TSource</span><span class="p">,</span> <span class="n">TKey</span><span class="p">&gt;</span> <span class="n">keySelector</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">source</span><span class="p">.</span><span class="n">OrderByDescending</span> <span class="p">(</span><span class="n">keySelector</span><span class="p">,</span> <span class="k">null</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="n">IOrderedEnumerable</span><span class="p">&lt;</span><span class="n">TSource</span><span class="p">&gt;</span> <span class="n">OrderByDescending</span><span class="p">&lt;</span><span class="n">TSource</span><span class="p">,</span> <span class="n">TKey</span><span class="p">&gt;</span> <span class="p">(</span><span class="k">this</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">TSource</span><span class="p">&gt;</span> <span class="n">source</span><span class="p">,</span> <span class="n">Func</span><span class="p">&lt;</span><span class="n">TSource</span><span class="p">,</span> <span class="n">TKey</span><span class="p">&gt;</span> <span class="n">keySelector</span><span class="p">,</span> <span class="n">IComparer</span><span class="p">&lt;</span><span class="n">TKey</span><span class="p">&gt;</span> <span class="n">comparer</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Check</span><span class="p">.</span><span class="n">SourceAndKeySelector</span> <span class="p">(</span><span class="n">source</span><span class="p">,</span> <span class="n">keySelector</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="n">OrderedSequence</span><span class="p">&lt;</span><span class="n">TSource</span><span class="p">,</span> <span class="n">TKey</span><span class="p">&gt;</span> <span class="p">(</span><span class="n">source</span><span class="p">,</span> <span class="n">keySelector</span><span class="p">,</span> <span class="n">comparer</span><span class="p">,</span> <span class="n">SortDirection</span><span class="p">.</span><span class="n">Descending</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在第二个重载中我们看到OrderByDescending方法返回时的是一个继承了IOrderedEnumerable接口的对象OrderedSequence。这个对象记录了我们的排序规则。</p>

<p>而我们再查看下ThenBy方法的定义。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="n">IOrderedEnumerable</span><span class="p">&lt;</span><span class="n">TSource</span><span class="p">&gt;</span> <span class="n">ThenBy</span><span class="p">&lt;</span><span class="n">TSource</span><span class="p">,</span> <span class="n">TKey</span><span class="p">&gt;</span> <span class="p">(</span><span class="k">this</span> <span class="n">IOrderedEnumerable</span><span class="p">&lt;</span><span class="n">TSource</span><span class="p">&gt;</span> <span class="n">source</span><span class="p">,</span> <span class="n">Func</span><span class="p">&lt;</span><span class="n">TSource</span><span class="p">,</span> <span class="n">TKey</span><span class="p">&gt;</span> <span class="n">keySelector</span><span class="p">,</span> <span class="n">IComparer</span><span class="p">&lt;</span><span class="n">TKey</span><span class="p">&gt;</span> <span class="n">comparer</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Check</span><span class="p">.</span><span class="n">SourceAndKeySelector</span> <span class="p">(</span><span class="n">source</span><span class="p">,</span> <span class="n">keySelector</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">source</span><span class="p">.</span><span class="n">CreateOrderedEnumerable</span><span class="p">&lt;</span><span class="n">TKey</span><span class="p">&gt;</span> <span class="p">(</span><span class="n">keySelector</span><span class="p">,</span> <span class="n">comparer</span><span class="p">,</span> <span class="k">false</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="n">IOrderedEnumerable</span><span class="p">&lt;</span><span class="n">TSource</span><span class="p">&gt;</span> <span class="n">ThenBy</span><span class="p">&lt;</span><span class="n">TSource</span><span class="p">,</span> <span class="n">TKey</span><span class="p">&gt;</span> <span class="p">(</span><span class="k">this</span> <span class="n">IOrderedEnumerable</span><span class="p">&lt;</span><span class="n">TSource</span><span class="p">&gt;</span> <span class="n">source</span><span class="p">,</span> <span class="n">Func</span><span class="p">&lt;</span><span class="n">TSource</span><span class="p">,</span> <span class="n">TKey</span><span class="p">&gt;</span> <span class="n">keySelector</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">source</span><span class="p">.</span><span class="n">ThenBy</span> <span class="p">(</span><span class="n">keySelector</span><span class="p">,</span> <span class="k">null</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们可以看到ThenBy这个扩展方法追加到的对象类型要实现IOrderedEnumerable接口，而OrderBy方法恰好返回的就是这个类型接口对象。那我们再看看IOrderedEnumerable接口的定义。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Collections</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nn">System.Linq</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">interface</span> <span class="n">IOrderedEnumerable</span><span class="p">&lt;</span><span class="n">TElement</span><span class="p">&gt;</span> <span class="p">:</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">TElement</span><span class="p">&gt;,</span> <span class="n">IEnumerable</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">//</span>
</span><span class='line'>        <span class="c1">// Methods</span>
</span><span class='line'>        <span class="c1">//</span>
</span><span class='line'>        <span class="n">IOrderedEnumerable</span><span class="p">&lt;</span><span class="n">TElement</span><span class="p">&gt;</span> <span class="n">CreateOrderedEnumerable</span><span class="p">&lt;</span><span class="n">TKey</span><span class="p">&gt;</span> <span class="p">(</span><span class="n">Func</span><span class="p">&lt;</span><span class="n">TElement</span><span class="p">,</span> <span class="n">TKey</span><span class="p">&gt;</span> <span class="n">keySelector</span><span class="p">,</span> <span class="n">IComparer</span><span class="p">&lt;</span><span class="n">TKey</span><span class="p">&gt;</span> <span class="n">comparer</span><span class="p">,</span> <span class="kt">bool</span> <span class="k">descending</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其继承自IEnumerable接口，并且要实现一个名为CreateOrderedEnumerable的方法，正是ThenBy方法实现中调用的这个方法。</p>

<p>所以玄机在OrderedSequence这个类上。实现了IEnumerable接口对象调用OrderBy后会返回OrderedSequence这个对象。而该对象记录了当前排序的规则，其实现了IOrderedEnumerable接口。而ThenBy扩展方法被加到了IOrderedEnumerable接口对象上，其返回值也是一个具有IOrderedEnumerable接口的对象。</p>

<p>照这么说，调用了一次OrderBy后，然后调用多次ThenBy也是可以工作的。我也从官方MSDN中找到了答案：</p>

<blockquote><blockquote><p>ThenBy and ThenByDescending are defined to extend the type IOrderedEnumerable<TElement>, which is also the return type of these methods. This design enables you to specify multiple sort criteria by applying any number of ThenBy or ThenByDescending methods.</p></blockquote></blockquote>

<p>翻译为: ThenBy及ThenByDescending是IOrderedEnumerable类型的扩展方法。ThenBy和ThenByDescending方法的返回值也是IOrderedEnumerable类型。这样设计是为了能够调用任意数量的ThenBy和ThenByDescending方法实现多重排序。</p>

<p>至此，ThenBy的神秘面纱就解开了，但是我不知道如何查看OrderedSequence类的源码，如果能看到这个类的源码就太完美了。知道的同学请告知方法。</p>

<p>注: 上述类的源码来自于Mono的实现。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gatling->次时代性能测试利器]]></title>
    <link href="http://www.huangbowen.net/blog/2013/12/23/the-power-of-gatling/"/>
    <updated>2013-12-23T23:07:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/12/23/the-power-of-gatling</id>
    <content type="html"><![CDATA[<p>Gatling作为一款开源免费的性能测试工具越来越受到广大程序员的欢迎。免费当然是好的，最缺钱的就是程序员了;开源更好啊，缺啥功能、想做定制化的可以自己动手，丰衣足食。其实我最喜欢的原因是其提供了简洁强大的API，原生支持命令行运行，不像JMeter那样需要在界面上点来点去。另外其出色的扩展API和轻量级的HTML报表都值得让人称道。</p>

<!-- more -->


<h2>Gatling版本</h2>

<p>Gatling的的官方网站是<a href="http://gatling-tool.org/">http://gatling-tool.org/</a>。目前Gatling有两个主线版本，一个是Gatling 1,最新版本是1.5.3;一个是Gatling 2,最新版本是2.0.0-M3a。Gatling 2使用了JDK7进行编译，使用的Scala版本是2.10，它对Gatling的API进行了一些重构和重新设计,内部也有一些调整。 目前Gatling 2还在开发阶段，所以如果要在项目中使用的话最好还是使用Gatling 1.5.3。</p>

<h2>安装Gatling</h2>

<p>其实Gatling是款绿色软件，可以直接从<a href="https://github.com/excilys/gatling/wiki/Downloads">https://github.com/excilys/gatling/wiki/Downloads</a>下载指定的版本。下载下来解压缩以后，我们可以看到其目录结构。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>twer@bowen-huang:~/sourcecode/GatlingWorkShop/gatling-charts-highcharts-1.5.2<span class="nv">$ </span>tree -L 2
</span><span class='line'>.
</span><span class='line'>├── bin                             //可执行文件目录
</span><span class='line'>│   ├── gatling.bat
</span><span class='line'>│   ├── gatling.sh
</span><span class='line'>│   ├── recorder.bat
</span><span class='line'>│   └── recorder.sh
</span><span class='line'>├── conf                            //配置目录
</span><span class='line'>│   ├── application.conf
</span><span class='line'>│   ├── gatling.conf
</span><span class='line'>│   └── logback.xml
</span><span class='line'>├── lib                             //依赖的程序库
</span><span class='line'>│   ├── akka-actor-2.0.4.jar
</span><span class='line'>│   ├── async-http-client-1.7.18.20130621.jar
</span><span class='line'>│   ├── commons-io-2.4.jar
</span><span class='line'>│   ├── commons-lang-2.6.jar
</span><span class='line'>│   ├── commons-math3-3.1.1.jar
</span><span class='line'>│   ├── commons-pool-1.6.jar
</span><span class='line'>│   ├── compiler-interface-0.12.3-sources.jar
</span><span class='line'>│   ├── config-1.0.1.jar
</span><span class='line'>│   ├── gatling-app-1.5.2.jar
</span><span class='line'>│   ├── gatling-charts-1.5.2.jar
</span><span class='line'>│   ├── gatling-charts-highcharts-1.5.2.jar
</span><span class='line'>│   ├── gatling-core-1.5.2.jar
</span><span class='line'>│   ├── gatling-http-1.5.2.jar
</span><span class='line'>│   ├── gatling-jdbc-1.5.2.jar
</span><span class='line'>│   ├── gatling-metrics-1.5.2.jar
</span><span class='line'>│   ├── gatling-recorder-1.5.2.jar
</span><span class='line'>│   ├── gatling-redis-1.5.2.jar
</span><span class='line'>│   ├── grizzled-slf4j_2.9.2-0.6.10.jar
</span><span class='line'>│   ├── incremental-compiler-0.12.3.jar
</span><span class='line'>│   ├── jaxen-1.1.6.jar
</span><span class='line'>│   ├── joda-convert-1.2.jar
</span><span class='line'>│   ├── joda-time-2.2.jar
</span><span class='line'>│   ├── jodd-core-3.4.4.jar
</span><span class='line'>│   ├── jodd-lagarto-3.4.4.jar
</span><span class='line'>│   ├── json-path-0.8.2.fix24.jar
</span><span class='line'>│   ├── json-smart-1.1.1.jar
</span><span class='line'>│   ├── jsoup-1.7.2.jar
</span><span class='line'>│   ├── logback-classic-1.0.12.jar
</span><span class='line'>│   ├── logback-core-1.0.12.jar
</span><span class='line'>│   ├── netty-3.6.6.Final.jar
</span><span class='line'>│   ├── opencsv-2.3.jar
</span><span class='line'>│   ├── redisclient_2.9.2-2.10.jar
</span><span class='line'>│   ├── scala-compiler-2.9.3.jar
</span><span class='line'>│   ├── scala-library-2.9.3.jar
</span><span class='line'>│   ├── scalate-core_2.9-1.6.1.jar
</span><span class='line'>│   ├── scalate-util_2.9-1.6.1.jar
</span><span class='line'>│   ├── scopt_2.9.2-2.1.0.jar
</span><span class='line'>│   ├── slf4j-api-1.7.5.jar
</span><span class='line'>│   ├── xercesImpl-2.11.0.jar
</span><span class='line'>│   ├── xml-apis-1.4.01.jar
</span><span class='line'>│   ├── xstream-1.4.3.jar
</span><span class='line'>│   └── zinc-0.2.5.jar
</span><span class='line'>├── results            //性能测试结果存放目录
</span><span class='line'>│   └── blogsimulation-20131218210445
</span><span class='line'>├── target             //性能测试脚本编译结果
</span><span class='line'>│   ├── cache
</span><span class='line'>│   ├── classes
</span><span class='line'>│   └── zincCache
</span><span class='line'>└── user-files     //性能测试脚本源文件
</span><span class='line'>    ├── data
</span><span class='line'>    ├── request-bodies
</span><span class='line'>    └── simulations
</span></code></pre></td></tr></table></div></figure>


<p>Gatling在user-files目录中提供了几个性能测试脚本的示例。不过由于脚本中被测试的网站已经无法访问，所以我自己写了几个简单的测试脚本，已经放置到了Github上，可以通过<a href="https://github.com/huangbowen521/GatlingWorkShop">https://github.com/huangbowen521/GatlingWorkShop</a>下载。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>twer@bowen-huang:~/sourcecode/GatlingWorkShop/gatling-charts-highcharts-1.5.2/user-files<span class="nv">$ </span>tree simulations
</span><span class='line'>simulations
</span><span class='line'>└── blog
</span><span class='line'>    ├── blog.scala
</span><span class='line'>    └── github.scala
</span><span class='line'>
</span><span class='line'>1 directory, 2 files
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>可以看到在simulations目录下有两个文件，一个是我给自己的博客写的性能测试脚本，一个是给github写的一个性能测试脚本。</p>

<h2>运行Gatling</h2>

<p>在命令行下运行bin目录下的Gatling.sh(如果是windows用户，请运行Gatling.bat)。Gatling会自动列出当前所有的测试脚本供自己选择，然后会让填写simulation id(模拟Id)以及run description（运行描述）。输入完毕后按回车键测试即可启动。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>twer@bowen-huang:~/sourcecode/GatlingWorkShop/gatling-charts-highcharts-1.5.2<span class="nv">$ </span>./bin/gatling.sh
</span><span class='line'>GATLING_HOME is <span class="nb">set </span>to /Users/twer/sourcecode/GatlingWorkShop/gatling-charts-highcharts-1.5.2
</span><span class='line'>Choose a simulation number:
</span><span class='line'>     <span class="o">[</span>0<span class="o">]</span> blog.BlogSimulation
</span><span class='line'>     <span class="o">[</span>1<span class="o">]</span> blog.GithubSimulation
</span><span class='line'>1
</span><span class='line'>Select simulation id <span class="o">(</span>default is <span class="s1">&#39;githubsimulation&#39;</span><span class="o">)</span>. Accepted characters are a-z, A-Z, 0-9, - and _
</span><span class='line'>github
</span><span class='line'>Select run description <span class="o">(</span>optional<span class="o">)</span>
</span><span class='line'>testing github
</span><span class='line'>
</span><span class='line'>Simulation blog.GithubSimulation started…
</span><span class='line'>
</span><span class='line'>……
</span><span class='line'>……
</span><span class='line'>……
</span><span class='line'>
</span><span class='line'>Simulation finished.
</span><span class='line'>Simulation successful.
</span><span class='line'>Generating reports...
</span><span class='line'>Reports generated in 0s.
</span><span class='line'>Please open the following file : /Users/twer/sourcecode/GatlingWorkShop/gatling-charts-highcharts-1.5.2/results/github-20131223214957/index.html
</span></code></pre></td></tr></table></div></figure>


<p>可以看到命令行中最后一行中标示了性能测试报表的存放路径。</p>

<h2>查看测试报告</h2>

<p>Gatling的测试报表其实就是一个html文件。Gatling使用了HighCharts这款JavaScript库来进行报表的展示。另外Gatling还提供了方便的接口用来自定义报告的展示。</p>

<p>以下是报表的部分截图。</p>

<p><img src="http://www.huangbowen.net/images/gatlingReport1.png" width="800"></p>

<p><img src="http://www.huangbowen.net/images/gatlingReport2.png" width="800"></p>

<h2>测试脚本示例</h2>

<p>这是GithubSimulation的性能测试脚本。其实它就是Scala的一个类，继承自Simulation。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">package</span> <span class="nn">blog</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="nn">com.excilys.ebi.gatling.core.Predef._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">com.excilys.ebi.gatling.http.Predef._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">com.excilys.ebi.gatling.jdbc.Predef._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">com.excilys.ebi.gatling.http.Headers.Names._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">akka.util.duration._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">bootstrap._</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">GithubSimulation</span> <span class="k">extends</span> <span class="nc">Simulation</span> <span class="o">{</span>
</span><span class='line'>     <span class="k">var</span> <span class="n">httpConf</span> <span class="k">=</span> <span class="n">httpConfig</span><span class="o">.</span>
</span><span class='line'>     <span class="n">baseURL</span><span class="o">(</span><span class="s">&quot;https://github.com&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>     <span class="k">var</span> <span class="n">scn</span> <span class="k">=</span> <span class="n">scenario</span><span class="o">(</span><span class="s">&quot;search in github.com&quot;</span><span class="o">)</span>
</span><span class='line'>     <span class="o">.</span><span class="n">exec</span><span class="o">(</span>
</span><span class='line'>          <span class="n">http</span><span class="o">(</span><span class="s">&quot;home page&quot;</span><span class="o">)</span>
</span><span class='line'>          <span class="o">.</span><span class="n">get</span><span class="o">(</span><span class="s">&quot;/&quot;</span><span class="o">)</span>
</span><span class='line'>          <span class="o">.</span><span class="n">check</span><span class="o">(</span><span class="n">status</span><span class="o">.</span><span class="n">is</span><span class="o">(</span><span class="mi">200</span><span class="o">)))</span>
</span><span class='line'>     <span class="o">.</span><span class="n">pause</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">12</span><span class="o">)</span>
</span><span class='line'>     <span class="o">.</span><span class="n">exec</span><span class="o">(</span>
</span><span class='line'>          <span class="n">http</span><span class="o">(</span><span class="s">&quot;do search&quot;</span><span class="o">)</span>
</span><span class='line'>          <span class="o">.</span><span class="n">get</span><span class="o">(</span><span class="s">&quot;/search&quot;</span><span class="o">)</span>
</span><span class='line'>          <span class="o">.</span><span class="n">queryParam</span><span class="o">(</span><span class="s">&quot;q&quot;</span><span class="o">,</span> <span class="s">&quot;gatling&quot;</span><span class="o">)</span>
</span><span class='line'>          <span class="o">.</span><span class="n">check</span><span class="o">(</span><span class="n">status</span><span class="o">.</span><span class="n">is</span><span class="o">(</span><span class="mi">200</span><span class="o">)))</span>
</span><span class='line'>
</span><span class='line'>     <span class="n">setUp</span><span class="o">(</span><span class="n">scn</span><span class="o">.</span><span class="n">users</span><span class="o">(</span><span class="mi">500</span><span class="o">).</span><span class="n">ramp</span><span class="o">(</span><span class="mi">10</span><span class="o">).</span><span class="n">protocolConfig</span><span class="o">(</span><span class="n">httpConf</span><span class="o">))</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>在这个类中定义了一个httpConf，指定了被测网站的根目录。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>     <span class="k">var</span> <span class="n">httpConf</span> <span class="k">=</span> <span class="n">httpConfig</span><span class="o">.</span>
</span><span class='line'>     <span class="n">baseURL</span><span class="o">(</span><span class="s">&quot;https://github.com&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后定义了一个测试场景，用户先访问Github首页，检查http返回状态码是否为200，然后暂停一段时间后再执行一个查询操作，查询关键字是gatling，检查http返回状态码是否为200。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>     <span class="k">var</span> <span class="n">scn</span> <span class="k">=</span> <span class="n">scenario</span><span class="o">(</span><span class="s">&quot;search in github.com&quot;</span><span class="o">)</span>
</span><span class='line'>     <span class="o">.</span><span class="n">exec</span><span class="o">(</span>
</span><span class='line'>          <span class="n">http</span><span class="o">(</span><span class="s">&quot;home page&quot;</span><span class="o">)</span>
</span><span class='line'>          <span class="o">.</span><span class="n">get</span><span class="o">(</span><span class="s">&quot;/&quot;</span><span class="o">)</span>
</span><span class='line'>          <span class="o">.</span><span class="n">check</span><span class="o">(</span><span class="n">status</span><span class="o">.</span><span class="n">is</span><span class="o">(</span><span class="mi">200</span><span class="o">)))</span>
</span><span class='line'>     <span class="o">.</span><span class="n">pause</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">12</span><span class="o">)</span>
</span><span class='line'>     <span class="o">.</span><span class="n">exec</span><span class="o">(</span>
</span><span class='line'>          <span class="n">http</span><span class="o">(</span><span class="s">&quot;do search&quot;</span><span class="o">)</span>
</span><span class='line'>          <span class="o">.</span><span class="n">get</span><span class="o">(</span><span class="s">&quot;/search&quot;</span><span class="o">)</span>
</span><span class='line'>          <span class="o">.</span><span class="n">queryParam</span><span class="o">(</span><span class="s">&quot;q&quot;</span><span class="o">,</span> <span class="s">&quot;gatling&quot;</span><span class="o">)</span>
</span><span class='line'>          <span class="o">.</span><span class="n">check</span><span class="o">(</span><span class="n">status</span><span class="o">.</span><span class="n">is</span><span class="o">(</span><span class="mi">200</span><span class="o">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后指定500个用户模拟该测试场景。500个用户以每秒50个递增，持续10秒。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>     <span class="n">setUp</span><span class="o">(</span><span class="n">scn</span><span class="o">.</span><span class="n">users</span><span class="o">(</span><span class="mi">500</span><span class="o">).</span><span class="n">ramp</span><span class="o">(</span><span class="mi">10</span><span class="o">).</span><span class="n">protocolConfig</span><span class="o">(</span><span class="n">httpConf</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>


<h2>技术栈</h2>

<p>这里列出了Gatling的一些主要的技术栈。</p>

<ul>
<li><p><strong>Akka Actors.</strong> Gatling 使用了Akka作为其并发编程的运行时。Akka的Actors模式能够有效的绕过JVM上多线程带来的性能问题。</p></li>
<li><p><strong>Scala.</strong>选择Scala最大的原因是因为Scala可以很好的集成Akka,另一原因是作为一款运行在JVM上的语言，Scala更容易提供给用户简洁强大的API设计。</p></li>
<li><p><strong>Async Http Client.</strong> 使用这款开源库来是实现异步http通讯。并且使用了Netty调用http。</p></li>
<li><p><strong>Highcharts及Highstock.</strong> Gatling使用Highcarts和Highstock这两款JavaScript库来进行测试结果报表的展示。</p></li>
</ul>


<hr />

<p>其实Gatling并不完美，比如目前支持的协议并不多，不支持对数据库的性能测试，不能进行分布式性能测试等。当然Gatling也在不断的进步，看好你哦！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用media queries实现一个响应式的菜单]]></title>
    <link href="http://www.huangbowen.net/blog/2013/12/15/responsive-menu-by-media-queries/"/>
    <updated>2013-12-15T21:56:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/12/15/responsive-menu-by-media-queries</id>
    <content type="html"><![CDATA[<p>Media queries是CSS3引入的一个特性，使用它可以方便的实现各种响应式效果。在这个示例中我们将会使用media queries实现一个响应式的菜单。这个菜单会根据当前浏览器屏幕的大小变化而自动的呈现出不同的样式。如果浏览器屏幕大于800px，菜单则会显示在页面左侧；如果浏览器屏幕介于401px到800px之间，菜单则会显示在页面上方，与其他内容是上下关系；如果屏幕小于400px，则菜单仍在页面上方，但是菜单会变为下拉列表形式。</p>

<!-- more -->


<p>预览地址: <a href="http://htmlpreview.github.io/?https://github.com/huangbowen521/ResponsiveDesignTrial/blob/master/responsiveMenu.html">http://htmlpreview.github.io/?https://github.com/huangbowen521/ResponsiveDesignTrial/blob/master/responsiveMenu.html</a></p>

<p>要实现这样的特效，首先要创建一个下拉列表形式的菜单，如下所示。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;small-menu&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;form&gt;</span>
</span><span class='line'>        <span class="nt">&lt;select</span> <span class="na">name=</span><span class="s">&quot;URL&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;option</span> <span class="na">value=</span><span class="s">&quot;home.html&quot;</span><span class="nt">&gt;</span>我的博客首页<span class="nt">&lt;/option&gt;</span>
</span><span class='line'>            <span class="nt">&lt;option</span> <span class="na">value=</span><span class="s">&quot;blog.html&quot;</span><span class="nt">&gt;</span>我的博客列表<span class="nt">&lt;/option&gt;</span>
</span><span class='line'>            <span class="nt">&lt;option</span> <span class="na">value=</span><span class="s">&quot;whoami.html&quot;</span><span class="nt">&gt;</span>我的个人简介<span class="nt">&lt;/option&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/select&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/form&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后还要创建一个使用了ul和li元素的菜单，放置在上面菜单的后面。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;large-menu&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ul&gt;</span>
</span><span class='line'>        <span class="nt">&lt;li&gt;</span>
</span><span class='line'>            <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;home.html&quot;</span><span class="nt">&gt;</span>我的博客首页<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>        <span class="nt">&lt;li&gt;</span>
</span><span class='line'>            <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;blog.html&quot;</span><span class="nt">&gt;</span>我的博客列表<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>        <span class="nt">&lt;li&gt;</span>
</span><span class='line'>            <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;whoami.html&quot;</span><span class="nt">&gt;</span>我的个人简介<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后再加一个div元素，用来放置一些文本以填充页面其他部分。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;content&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;p&gt;</span>
</span><span class='line'>        上周五的时候我对某个项目做了一个更改，将里面的构建脚本由maven换成了gradle。原因之一是因为maven的配置太繁琐，由于其引入了lifecycle的机制，
</span><span class='line'>        导致其不够灵活，而gradle作为用groovy写的DSL，代码清爽、简单、灵活。原因之二是我们所有的项目构建都换成了gradle，为了保持技术栈单一，此项目
</span><span class='line'>        做迁移也是大势所趋。<span class="nt">&lt;/p&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>接下来就要设置media queries了，指定在不同屏幕尺寸下菜单表现出不同的样式。</p>

<p>当屏幕宽度小于400px时，我们需要隐藏ul菜单，显现下拉框菜单。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="k">@media</span> <span class="nt">screen</span> <span class="nt">and</span> <span class="o">(</span> <span class="nt">max-width</span><span class="o">:</span> <span class="nt">400px</span> <span class="o">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="nc">.small-menu</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">display</span><span class="o">:</span> <span class="k">inline</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nc">.large-menu</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">display</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当屏幕介于401px和800px时，显示ul菜单，并且将其设置为水平排列。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="k">@media</span> <span class="nt">screen</span> <span class="nt">and</span> <span class="o">(</span> <span class="nt">min-width</span><span class="o">:</span> <span class="nt">401px</span> <span class="o">)</span> <span class="nt">and</span> <span class="o">(</span> <span class="nt">max-width</span><span class="o">:</span> <span class="nt">800px</span> <span class="o">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nc">.small-menu</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">display</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nc">.large-menu</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">display</span><span class="o">:</span> <span class="k">inline</span><span class="p">;</span>
</span><span class='line'>        <span class="k">width</span><span class="o">:</span> <span class="m">100</span><span class="o">%</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nc">.large-menu</span> <span class="nt">ul</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">list-style-type</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nc">.large-menu</span> <span class="nt">ul</span> <span class="nt">li</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">display</span><span class="o">:</span> <span class="k">inline</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nc">.content</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">width</span><span class="o">:</span> <span class="m">100</span><span class="o">%</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当屏幕尺寸大于800px时，则将ul菜单设置为页面左边，并且菜单排列为垂直排列。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="k">@media</span> <span class="nt">screen</span> <span class="nt">and</span> <span class="o">(</span> <span class="nt">min-width</span><span class="o">:</span> <span class="nt">801px</span> <span class="o">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nc">.small-menu</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">display</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nc">.large-menu</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">display</span><span class="o">:</span> <span class="k">inline</span><span class="p">;</span>
</span><span class='line'>        <span class="k">float</span><span class="o">:</span> <span class="k">left</span><span class="p">;</span>
</span><span class='line'>        <span class="k">width</span><span class="o">:</span> <span class="m">20</span><span class="o">%</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nc">.content</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">float</span><span class="o">:</span> <span class="k">right</span><span class="p">;</span>
</span><span class='line'>        <span class="k">width</span><span class="o">:</span> <span class="m">80</span><span class="o">%</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样就简单实现了一个响应式的菜单，其实主要就是根据media queries来设置screen的条件，根据不同screen宽度来给页面元素设置对应的样式。当屏幕宽度发生变化时，会自动应用相应的样式。</p>

<p>代码已经被放置到了github上了，地址是<a href="https://github.com/huangbowen521/ResponsiveDesignTrial">https://github.com/huangbowen521/ResponsiveDesignTrial</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[翻译:反思极限编程]]></title>
    <link href="http://www.huangbowen.net/blog/2013/12/12/reflection-of-extreme-programming/"/>
    <updated>2013-12-12T23:19:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/12/12/reflection-of-extreme-programming</id>
    <content type="html"><![CDATA[<p>译者注: Bob大叔14年后再次谈论极限编程。极限编程经历了14年的风风雨雨后，Bob大叔将会给它怎么样的定义那？</p>

<!-- more -->


<p>在我手中拿着的一本白皮薄书，在14年前彻底的改变了软件世界。这本书的标题是解析极限编程，副标题是拥抱变化。作者是Kent Beck,出版时间为1999年。</p>

<p>这本书很薄，不到200页。排版很宽，间隔很远。写作风格即自由散漫又平易近人。章节不多，概念简单。</p>

<p>但是其影响却像地震一样，甚至至今震动仍未平息下来。</p>

<p>起始于第53页的章节10，列出了12项实践，引爆了行业内的大辩论。并催生了一场革命，改变了我们编写软件的所有方式。这些实践是:</p>

<ul>
<li><p><strong>计划游戏</strong>：当今被成为SCRUM。此观点认为软件应该按照任务列表中的优先级循序渐进的开发。</p></li>
<li><p><strong>小版本</strong>：应当频繁和渐进式地部署软件。</p></li>
<li><p><strong>隐喻</strong>：该概念最终在Eric Evans编写的《领域驱动设计》一书中明确化。系统结构应当建立在针对问题域的简单的智力模型之上。</p></li>
<li><p><strong>简单设计</strong>：任何时候都要保证系统尽可能的简单，不用考虑对未来的担心。</p></li>
<li><p><strong>测试</strong>：程序员和客户一起编写自动化测试来验证产品代码的行为与预期一致。当今我们称之为测试驱动开发（TDD）及验收测试驱动开发(ATDD)。</p></li>
<li><p><strong>重构</strong>：软件内部结构能够并且应当被持续改进。</p></li>
<li><p><strong>结对编程</strong>：如果团队成员各自单独工作，那么这称不上一个团队。真正的团队需要经常通过键盘进行合作。这样可以相互充分的分享知识, 正是团队成员的义务。</p></li>
<li><p><strong>集体所有权</strong>：代码归属于整个团队，而不是某个个体。</p></li>
<li><p><strong>每周工作40小时</strong>：经常加班的团队是失败的团队。</p></li>
<li><p><strong>现场客户</strong>：在团队中加入一名真正的客户，用于对需求负责，开发团队能够始终轻易的接触到他。</p></li>
<li><p><strong>编码标准</strong>：团队应当使用一致的编码风格保证代码整洁，易于沟通。</p></li>
</ul>


<h2>争议？</h2>

<p>很奇怪是不是？是不是并不是所有实践都有争议？但是14年前引起了疯狂争议。确实，整本书出版时，人们争议书中的描述不可能应用于实践，争议所有拥护者是如何的必躬屈膝，不听劝解，甚至是一行代码没写过的傻子&#8230;&#8230;</p>

<p>呃，我不应当让这些过去的感受压倒我。因为，毕竟它们早已消失不再，而我们依然存在。</p>

<p>看看这12项实践，你没有践行其中哪项？我温柔的读者中的大多数可能长期的践行大多数实践。如果说它们已经被普及肯定稍显夸张，但是更不夸张的说，它们现在已经成为主流。更重要的是，还未践行这些实践的团队至少在尝试它们。这些实践已经可以被完美的落地实施，而不再是一个被唾骂的异端。</p>

<h2>崛起</h2>

<p>过去的14年已经变得陌生。极限编程论战催生出来的敏捷运动，飞速成功，随后被项目经理接受，推动程序员。我们已经看到了确定性的、疯狂的成功，以及相应的（可预见的）无力的认证。我们看到了只采用了计划游戏（例如SCRUM)而忽略其他11个实践的策略失败了。这种策略被Martin Fowler称为<strong>无力的Scrum</strong>。我们已经经历了咨询师和作者们持续的加工和宣传，以及看板、精益及每一个新的项目管理方法的竞争。我们已经看到了软件工艺运动的发展，以及敏捷基因被逐渐的退化和稀释。</p>

<p>在所有的炒作和翻腾中，这12项实践依然留存，只是其中一些名字有稍微改变。一周工作40小时变成了可持续增长率。测试变成了TDD。隐喻变成了DDD。小版本变成了持续集成和持续部署。但是尽管名称改变，但是这些实践依然和14年前描述的差不多。</p>

<p>我们也看到极限编程这个名称几乎完全不用了。极少数人现在还使用这个词。一些人仍然使用XP这个缩写，但名称的大部分都已经消失。如果听到一个团队描述他们正在做的是极限编程，甚至正在践行所描述的这12项实践，我会觉得非常罕见。名称变了，但是实践未变。这些实践是持久的。
在翻腾，炒作，争议的咆哮和胡言乱语中，在人类争夺一个又一个位置的风雨中，在人类的贪婪，激情和骄傲的杂乱中，在所有的政治中，这些实践依然留存。</p>

<h2>稳定的价值观</h2>

<p>我相信这些实践这么持久是因为他们基于稳定的价值观这个坚实的基础。Kent Beck在他的书中第7章第29页描述了这样的价值观：</p>

<ul>
<li><p>沟通</p></li>
<li><p>简单</p></li>
<li><p>反馈</p></li>
<li><p>勇气</p></li>
</ul>


<p>我可以尝试论证为什么这些价值观是正确的，但是我他们自身已经论证了这些。软件工匠能够拒绝这些价值观中的任何一个吗？软件工匠能够不努力争取在工作中保证这些价值观的展现吗？这些价值观正是软件工艺的价值观。</p>

<p>我可以尝试辩论书中这12项实践拥抱和体现了这些价值观，但是这些实践的持久性足够证明,尽管围绕这些实践的名词和运动已经消散。</p>

<h2>成功</h2>

<p>极限编程已经成功了！它成功的超越了其支持者的最疯狂的梦想。它的成功是因为从诞生时的争议中幸存下来，在不可避免的倡导者的流失中幸存下来。它成功了是因为它活的比自己的名字更久！</p>

<p>极限编程的成功正像结构化编程的成功。甚至没人再会考虑结构化编程，因为他们一直在使用结构化编程。我们正在尝试达到没人再会考虑极限编程的目标。</p>

<p>这就是成功！一个想法从这场运动诞生一直存活到成为我们日常生活的一部分，这就是成功！</p>

<h2>回顾</h2>

<p>所以现在，2013年的最后几个星期，我花了些时间回顾1999年。那个时间Kent Beck写了一个突破性的书。这本书改变了一切。回顾并谨记:极限编程。简单的说，请承认它是:</p>

<p><strong>优秀的软件实践的核心</strong></p>

<p>原文出处: <a href="http://blog.8thlight.com/uncle-bob/2013/12/10/Thankyou-Kent.html">http://blog.8thlight.com/uncle-bob/2013/12/10/Thankyou-Kent.html</a>, 作者Uncle Bob Martin。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Gradle运行集成测试]]></title>
    <link href="http://www.huangbowen.net/blog/2013/12/10/integration-test-in-gradle/"/>
    <updated>2013-12-10T13:17:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/12/10/integration-test-in-gradle</id>
    <content type="html"><![CDATA[<p>如果Gradle构建的项目是一个web项目的话，里面可能包含一些集成测试和功能性测试。这些测试和单元测试不同之处是在运行之前要先在本地将web服务启动起来，并且跑完测试后能够自动的关闭web服务。</p>

<!-- more -->


<p>在本地启动web服务我们可以使用Gradle内置的jetty插件。jetty是一个轻量级的web容器，其执行速度快，配置简单，远程调试方便。启用jetty只需在build.gradle中加入对这个插件的引用。</p>

<figure class='code'><figcaption><span>build.gradle</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;jetty&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>之后可以配置war包的名称，启动的端口等属性。</p>

<figure class='code'><figcaption><span>build.gradle</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;jetty&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">httpPort</span> <span class="o">=</span> <span class="mi">9876</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="n">jettyRun</span><span class="o">,</span> <span class="n">jettyRunWar</span><span class="o">,</span> <span class="n">jettyStop</span><span class="o">]*.</span><span class="na">stopPort</span> <span class="o">=</span> <span class="mi">9966</span>
</span><span class='line'><span class="o">[</span><span class="n">jettyRun</span><span class="o">,</span> <span class="n">jettyRunWar</span><span class="o">,</span> <span class="n">jettyStop</span><span class="o">]*.</span><span class="na">stopKey</span> <span class="o">=</span> <span class="s1">&#39;stopKey&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们需要将集成测试与一般的单元测试分开。因为单元测试并不需要事先启动web服务，保证其执行速度快，能够得到更快的反馈。一般做法是单元测试后缀名为Test.java，集成测试后缀名为IntegrationTest.java。</p>

<p>配置单元测试执行的测试集合。</p>

<figure class='code'><figcaption><span>build.gradle</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">test</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">include</span> <span class="s1">&#39;**/*Test.class&#39;</span>
</span><span class='line'>  <span class="n">exclude</span> <span class="s1">&#39;**/*IntegrationTest.class&#39;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后新建一个Task，用于运行集成测试。</p>

<figure class='code'><figcaption><span>build.gradle</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">task</span> <span class="nf">intTest</span><span class="o">(</span><span class="nl">type:</span> <span class="n">Test</span><span class="o">,</span> <span class="nl">dependsOn:</span> <span class="n">test</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">include</span> <span class="s1">&#39;**/*IntegrationTest.class&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">doFirst</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">jettyRun</span><span class="o">.</span><span class="na">daemon</span> <span class="o">=</span> <span class="kc">true</span>
</span><span class='line'>      <span class="n">jettyRun</span><span class="o">.</span><span class="na">execute</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">doLast</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">jettyStop</span><span class="o">.</span><span class="na">execute</span><span class="o">()</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上述代码首先是创建一个名为intTest的task，其类型为Test,依赖于test task。该集成测试只会运行后缀名为IntegrationTest的测试类。在运行测试之前，首先采用后台模式启动jetty服务器，运行完测试后再调用jettyStop task停止jetty服务。</p>

<p>为了使我们在运行<code>gradle build</code>时也会运行intTest task，可以添加对intTest的依赖。</p>

<figure class='code'><figcaption><span>build.gradle</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">build</span><span class="o">.</span><span class="na">dependsOn</span> <span class="n">intTest</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样在运行<code>gradle build</code>时也会运行集成测试。并且在集成测试前后web服务会自动的启动和关闭。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[毕业多年的程序员重拾英语考雅思]]></title>
    <link href="http://www.huangbowen.net/blog/2013/12/05/a-old-developer-learn-english/"/>
    <updated>2013-12-05T22:08:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/12/05/a-old-developer-learn-english</id>
    <content type="html"><![CDATA[<p>昨天雅思成绩出来了，我的听力，阅读，写作，口语分数分别是5.5，5.5，5，6。这样算下来总分是5.5。可能对于大多人而言这个成绩不算什么，但是对于我来说却不容易（至少在一年前我想考到这样的分数绝对是不可能）。这个分数也满足了我这次考雅思的目的，因为如果要去澳洲出差拿457签证的一个新要求是雅思成绩必须达到听说读写每门成绩5分以上。现在签证流程已经在走了，估计1月初就会到澳洲。</p>

<p>在查到雅思成绩单的时候我还是有些小兴奋的，这说明我的英语在这一年来有了巨大的进步。同时我想将我整个学英语的过程记录下来，希望能够给其他人有所启迪。因为我越来越觉得作为一个有追求的程序员，必须要学好英语，良好的英语绝对有助于你的IT职业生涯。</p>

<!-- more -->


<p>ok，英语就从我的初中说起。从初中我真正开始学英语，从初一到初三英语一直很不错。因为那时候学习成绩好，年级几百人经常考到前十名。我想主要是初中英语词汇量不大，而自己特别能下苦功夫背，所有单词能记得住，自然考试不再话下。</p>

<p>当时初中老师说努力学习，考上重点高中就解放了。我轻信了老师的话，辛苦三年考上了重点高中，才发现自己从一个火坑跳到了另一个更大的火坑。我实在受不了一天花10多个小时在学习上的这种日子，自己也变的贪玩起来。英语这个时候就渐渐拉下了。主要原因是没有下功夫去背单词，考试的时候很多单词都不认识，阅读理解越做越困难。渐渐的对英语也起了逆反心理，老是觉得学了又用不到，只拿来考试没什么实用价值。在重点高中竞争是相当激烈，尤其是在高考大省河南。我们一个年级有1千多人，我最好考过前30，一般在200左右徘徊，这个排名刚好能进入2本线。</p>

<p>第一次高考成绩出来了，差几分考上2本线，然后我就复读了。其实那时候复读风非常流行。一个应届班级60来号人，至少有40多人都要复读，不知道现在是怎么个情况。复读那年读书还是不怎么上心，记得那年魔兽世界刚开服，还去通宵打过几次魔兽世界。英语词汇量没有积累起来，考试全靠运气，口语更不用说了，发音根本不着调。这年高考我清楚的记得我的英语超水平发挥，当时看到题目就觉得挺简单的，最后考了120多分（满分150分），平时模拟考都是90多分的。但是我的数学却发挥失常，只考了90多分，最后差重点线9分。报志愿的时候我一心想离开河南，最后选了四川成都的一个2本学校。</p>

<p>到了大学以后，英语分班考试我被轻松的分到了C班，也就是英语最差的班。到了大学了那是放开的玩啊，英语课都没怎么去过，除非是老师点到。其实现在想想大学教授英文的方式还是挺好的，注重口语，时不时还看几部原生电影，不像高中之前都是哑巴英语。在大学期间我还秉承英语无用论。当然不是认为英语完全无用，而是不希望将英语作为一门必修课，而是作为选修课让那些喜欢外语的人去学。</p>

<p>到了大三随着对IT技术的持续学习，我渐渐觉得英语是有用的，尤其是咱们程序员。试想这些IT玩意都是老外捣鼓出来的，所有原始资料都是英文的，只看翻译后的资料到底是经过了一套工序，不能跟上老外的思维。但是这时候英语已经拉下太多了，我已经弱到了英语26个字母的标准发音都发不出来了。更为悲催的是英语四级报了6次名，结果都没考过。虽然这个过程中好几次都拿出了学习英语的劲头，但是每次都是只有三分钟热度，没有持之以恒。还在我们学校只要过了学校组织的英语考试就可以拿到学位证，万幸我通过了这个考试。</p>

<p>毕业以后步入社会，自己深知英语不行，当时找工作也没投几个外企，唯一面试的一个外企在口语面惨败告终。我整个大四都在一家成都本土IT公司实习，毕业后也留在了这个公司。我在这个公司呆了3年，英语越发的退步。直到2011年末的时候，我不想在这个公司呆下去了。这只是一个小私企，发展前景各方面都不大，我觉的再呆下去人就废了。那时候我想换到一个比较出名的大公司去，能够好好的磨练下自己技术，能够找到和自己志同道合愿意钻研技术的人一起学习。我已经意识到了英语是我的硬伤，所以就在2011年末的时候重拾英语。</p>

<p>当时每天下班后我都会看一些微软的教学视频，坚持看英文原版，配上中文字幕。这样一边能练习英语，一边还能学习新技术。我记得当时看的是Bob大叔教Windows Phone开发的系列视频，每天晚上看一期，自得其乐。同时我注重了对生疏单词的了解。每当我在编程或者看资料发现有不认识或不会读的单词时，就会查询意思并试着阅读。当时我英语差到了连Value和Delegate这两个单词如何发音都不知道，但是随着刻意学习，情况慢慢好转。</p>

<p>过了2个月后，也就是2012年初的时候，我发了一些简历，也收到了一些面试通知，有外企的也有私企的。当时我记得我做了一个笔记，里面有英文写的自我介绍，还有几个可能被问道的英文问题的答案，比如你的长处是什么等。每次面试前我都会拿出来背诵，然后自己模拟面试场景来练习。陆陆续续参加了几次面试，英文面感觉还凑合。当然也有打击，当时面软件园某家外包公司时，全程英文面，自己答的一塌糊涂，自信心大受打击。我的英文紧限于背诵自己预先写好的自我介绍及准备的几个问题，听力和应变完全不行。</p>

<p>当时其实还是收到不少offer的，但是基本都是一些私企，也有外企，不过这个外企对英文要求不高。在2013年3月时，我已经离职有1个多月了，我接触到了ThoughtWorks这家公司，第一轮是HR电话面，包含口语面。第一个问题就是英文自我介绍，我早都背的滚瓜乱熟了，张口就来。可是后来HR针对我的自我介绍问了很多问题，我基本一个没听懂，甚至What is your major？都没听懂(我根本不知道major是什么意思)。但是那时候我也不知道我怎么想的，不管她的问题是什么了，就自己不停的说，将自己预先准备的英文面的答案挨个往外说，什么我家里父母是干嘛的，我为什么选择本公司，我的长处是什么。唯一听懂的一个问题是why you love coding?我巴拉巴拉说了一大堆。</p>

<p>就这样我竟奇迹般的通过了电话面。对ThoughtWorks有所了解的同事肯定知道ThoughtWorks的面试流程是比较长的。其中有一面是给你三道编程题，让你任选一道实现，三天内做完。妈呀都是英文的，题目看懂都花了老半天。看着最后一道题貌似英文简单点，就用词典把最后一道题弄懂了，吭哧吭哧做完了。还有一面是考逻辑题和英文测试题，全英文。我看了题目就傻眼了，好多单词不认识。那时候我不知道哪里来的勇气，挨个问监考的HR这个单词是什么意思，那个单词是什么意思，最后超常发挥通过了。最后office面的终面都是全中文的，快结束时我心情还比较放松。但是没想到当时的面试官Jeff突然问我英文怎么样，我说还可以。然后他就用英文问了我一个问题，我压根没听懂。但是我并没有慌张，而是说了句，“I think my english is good, but others don&#8217;t think so.”。几个面试官都笑了。</p>

<p>当我走出办公室的时候，心情还是比较轻松了，不是因为我觉的我有戏，而是我觉的我竟然坚持走完了这些面试流程。在ThoughtWorks的整个面试流程中我有多次萌生退意，觉得就自己这水平面上希望渺茫。但是每次我都又自己给自己打气，凭着那种不服输的精神坚持了下来。</p>

<p>在这里我想给各位找工作或换工作的IT人士说一些心得。</p>

<ul>
<li><p>精心准备简历，突出重点。写简历的时候多换位思考，想想HR看到这份简历会怎么样，怎么能都博得HR的眼球。我看过很多人的简历，看完什么感觉都没有，没有能够吸引人的地方。当然这个吸引人的地方你要真有，不能作假。比如在github上多多分享自己的代码，参与开源项目的开发，积极撰写技术博客，搞搞翻译，在豆瓣分享自己的读书心得等。这些写在简历里很容易抓住HR的心。</p></li>
<li><p>一定要从网上搜集各种面试题来看，复习。不懂的就去学。我当时下了20多页的面试题，一道道做，一道道记。面试时至少80%的题都能从题库中找到。</p></li>
<li><p>无论面试什么样的公司，事前都要充分准备，并且要自己坚持，不能主动放弃。人在有压力的时候很容易产生动摇，有的人挺住了，他成功了，有的人动摇了，那就失败了。</p></li>
</ul>


<p>面上ThoughtWorks以后，在2012年5月份入职了。此时我的英语口语还是一塌糊涂，词汇量不足200。第一天入职是English Only Day。即整天只能说英语，说一句中文罚款一块（自愿）。还没从面试成功的喜悦中清醒过来，又掉入了一个冰窟。加上以前搞的是C#,现在加入了Java的项目组，顿时感到亚历山大。</p>

<p>那时候确实辛苦，整天不分上下班的学习，早上7点多起来读英语，晚上学习技术之余要预留一个小时读英语。白天开站会、和国外同事交流时努力在笔记本上几下每一个不认识的单词，随时翻阅。为了改变自己一口浓重的“河南口音”，自己下载了VOA的一段音频，跟着读了上千遍，直到跟VOA里面说的几乎一模一样。通过高强度的练习自己的英文进步很快，加上平时坚持查阅外文资料，多管齐下，逐渐能够应付工作。那时写了一篇文章，可以参见<a href="http://www.huangbowen.net/blog/2012/08/08/zai-thoughtworksgong-zuo-liang-ge-duo-yue-de-zong-jie/">这里</a>。</p>

<p>不过等到可以应付日常工作的时候，那时候已经11月份了，自己也放松了对英语的学习，导致后来英语进步较慢。后来2013年7月的时候去澳洲出差了一个月。去之前心理还是挺忐忑的，怕自己hold不住。过去以后才发现并没有想象中的那么困难。在澳洲一个月自己的听力也有了一些进步，无论是听力还是口语。</p>

<p>回国之后打算考雅思。也没有怎么特别准备，只是买了一本雅思题库书，做了4套模拟题，熟悉了一下雅思题型。考试前心理还是挺忐忑的，毕竟好久没有参加过这样的考试了。考完以后感觉发挥的还是可以，5分应该没问题。成绩出来后也不出所料，顺利过关。我觉的雅思考到5分还是很容易的，但是要达到7分就要下一些功夫。听力和阅读要考够7分再努力把应该可以。而写作和阅读则一定要有所积累，并且一定要多学习国外那种很native的用法。其实我在和外国同事交流过程中发现他们其实有很多很常用的用法，但是在国内英语教材中很难体现出来。多看一些美剧，多读一些英文书籍能够提高这方面的能力。</p>

<p>现在英语在平时的工作和学习中早已不可或缺。它已经不是挡在我面前的一座大山，而是成为我个人成长的助推器。希望这篇文章能够激励咱们的IT同仁们，都能够克服英语这个难关。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gradle中使用idea插件的一些实践]]></title>
    <link href="http://www.huangbowen.net/blog/2013/12/04/use-idea-plugin-in-gradle/"/>
    <updated>2013-12-04T22:19:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/12/04/use-idea-plugin-in-gradle</id>
    <content type="html"><![CDATA[<p>如果你的项目使用了Gradle作为构建工具，那么你一定要使用Gradle来自动生成IDE的项目文件，无需再手动的将源代码导入到你的IDE中去了。</p>

<!-- more -->


<p>如果你使用的是eclipse，可以在build.gradle中加入这么一行.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;eclipse&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后在命令行中输入<code>gradle eclipse</code>就可以生成eclipse的项目文件，直接使用eclipse打开生成的项目文件即可。</p>

<p>当然作为Java程序开发者，最好使的IDE还是Intellij,昨天听闻Intellij 13已经发布了，增加了不少新功能，看来又要掏腰包了。如果要让Gradle自动生成Intellij的项目文件，需要使用idea插件。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;idea&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>命令行下输入<code>gradle idea</code>，就会生成Intellij的项目文件，真是省时省力。如果在已经存在Intellij的项目文件情况下，想根据build.gradle中的配置来更新项目文件，可以输入<code>gradle cleanIdea idea</code>。<code>cleanIdea</code>可以清除已有的Intellij项目文件。</p>

<p>Intellij项目文件主要有三种类型。</p>

<ul>
<li><p>.ipr Intellij工程文件</p></li>
<li><p>.iml Intellij 模块文件</p></li>
<li><p>.iws Intellij 工作区文件</p></li>
</ul>


<p>如果只简单的使用<code>gradle idea</code>生成Intellij的工程文件，其实在使用Intellij打开项目以后，我们还要做一些手工配置，比如指定JDK的版本，指定源代码管理工具等。Gradle的idea命令本质上就是生成这三个xml文件,所以Gradle提供了生成文件时的hook(钩子)，让我们可以方便的做定制化，实现最大程度的自动化。这就需要自定义idea这个任务了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">idea</span><span class="o">.</span><span class="na">project</span> <span class="o">{</span>
</span><span class='line'>     <span class="n">jdkName</span> <span class="o">=</span> <span class="s1">&#39;1.6&#39;</span>
</span><span class='line'>     <span class="n">languageLevel</span> <span class="o">=</span> <span class="s1">&#39;1.6&#39;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个用来配置项目的jdk及languageLevel。</p>

<p>如果要指定源代码管理工具类型，就需要调用hook修改生成的ipr文件。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">idea</span><span class="o">.</span><span class="na">project</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ipr</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">withXml</span> <span class="o">{</span> <span class="n">provider</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="n">provider</span><span class="o">.</span><span class="na">node</span><span class="o">.</span><span class="na">component</span><span class="o">.</span><span class="na">find</span> <span class="o">{</span> <span class="n">it</span><span class="o">.</span><span class="nd">@name</span> <span class="o">==</span> <span class="s1">&#39;VcsDirectoryMappings&#39;</span> <span class="o">}.</span><span class="na">mapping</span><span class="o">.</span><span class="nd">@vcs</span> <span class="o">=</span> <span class="s1">&#39;Git&#39;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过这种方式可以最大限度的实现对Intellij项目文件的定制化。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[记一次扯到蛋的教训]]></title>
    <link href="http://www.huangbowen.net/blog/2013/11/06/task-and-validation-is-important/"/>
    <updated>2013-11-06T00:27:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/11/06/task-and-validation-is-important</id>
    <content type="html"><![CDATA[<p>上周五的时候我对某个项目做了一个更改，将里面的构建脚本由maven换成了gradle。原因之一是因为maven的配置太繁琐，由于其引入了lifecycle的机制，导致其不够灵活，而gradle作为用groovy写的DSL，代码清爽、简单、灵活。原因之二是我们所有的项目构建都换成了gradle，为了保持技术栈单一，此项目做迁移也是大势所趋。（其实最重要的原因是我想练练手，虽然对maven已经相当熟悉了，但是gradle的练习不多。）</p>

<!-- more -->


<p>完成迁移以后，我在本地试了一下，编译的war包可以成功运行。并且我也修改了构建管道，使其能够支持新的gradle脚本将war包部署到服务器上。</p>

<p>然后我就给项目成员发了封邮件，告知了这件事情。</p>

<p>周一来上班的时候，收到了项目组的回信，大家都对我的劳动表示感谢。其中有一个组员建议我将这个项目的名称更换一下。因为该项目之前叫做ais-stub，他的主要功能是模拟ais服务，但是后来我们也加入了对其他web service的模拟，应该改为service-stub更具有意义。</p>

<p>我觉的这个改动应该比较简单，无非就是修改一下该项目的名称，并且更改构建出来的war包名称，修改构建管道的配置。然后我就动手改了。待我改了war包名称后，想起来这样会引起url中的contextPath也发生变化，而功能测试引用了这个url，那么我就修改了功能测试中的url。然后我又发现我需要修改其他项目中的配置，将使用了该url的地方替换为新的url。待我将我的修改提交后，发现部署失败了。原来是由于war包名称改变，部署脚本在获取war包时找不到新war包，我不得不修改部署脚本。但是修改过程中我发现有一段部署脚本由于权限原因我无法修改，只能请求对该脚本有修改权限的人替我修改，这又浪费了不少时间。全部修改完后我想起项目wiki上的介绍也要跟着改，把所有使用到该项目名称的地方都需要改成新名称……</p>

<p>就这样一步步的做下去，本来觉得2小时就能完成的任务我足足干了4个多小时。最后全部改完后，我试着跑一下看看能运行不。结果傻眼了，将该项目部署到服务器上后，其他项目请求该服务失败，具体原因未知。由于我已经做了太多的改变，很难定位到问题所在。我刚开始怀疑部署有问题，想查看服务器上的构建版本，发现查询不到。找了半天原因后发现原来星期五我做构建脚本迁移时遗漏了一个插件，导致没有将构建版本记录到war包中。我只能先放弃查看服务器上的war包构建版本，而在本地将该项目的服务器起起来，使用其他项目进行访问，结果又一切正常。那证明可能还是服务器上的部署有问题。我查看了构建出来的war包，发现里面的properties文件不是期望的那个，这时我想起周五修改构建管道时，随手删除了一个自认为多余的task，可能正是这个原因导致最后导入war包的properties不对。我只好又修改构建脚本，确保其能包含正确的war包……</p>

<p>很快时间已经到了6点多了，该下班了，但是我仍然深陷这个泥潭，没有找到问题原因，反而时不时要解决一些其他杂七杂八的东西。看来今天是完成不了了，因为修改的东西太多了，每个修改都没有进行验证，所以问题排查很难，并且还经常发现新的问题。</p>

<p>最后，我只好打住。决定明天早上一来把今天所有的修改都撤销掉，等于说今天的活都白干了。今天下班了，感觉很不好。作为一个丰富的程序员，给羊剪羊毛（出自《卓有成效的程序员》，指剪不断理还乱，本来要解决这个问题，但解决过程中面对的都是与根本问题不相干的其他问题）这件事情怎么会发生在我的身上那？</p>

<p>我觉得最大的问题有两个：</p>

<ol>
<li><p>没有对改名这个任务列详细的task。刚开始太轻敌，以为改名很简单，没有仔细想。结果自己把自己带到了沟里，步子迈的太大了，把蛋给扯到了。列出详细的task好处是你能预估出完成的时间，并且了解可能会出现哪些风险。每个task都循序渐进、可以验证，并且保证随时可以回退。由于没有列task，直接导致我明天撤销修改时还要努力回想到底今天做了哪些修改。</p></li>
<li><p>我没有及时进行验证。TDD的思想就是先测试-》测试失败->再写实现->测试成功。这样周而复始来驱动出你的代码。由于所有代码都有测试覆盖，你有充分的信心保证你的实现是正确的。而虽然我对项目的修改无法及时通过自动化测试进行验证，但起码也应当在做了一个小改动时及时的手工进行验证。比如在将构建脚本替换成gradle之后，不仅要在本地测试一下是否正确，还应当测试部署到服务器上的war包是否正确。这样至少能及时发现构建版本信息缺失及properties文件不对的问题。</p></li>
</ol>


<p>以前老教导别人做事的时候要列task，要及时验证和反馈，没想自己今天在这上面宰了一跟头，还是太轻敌啊。不过吃一堑长一智，希望以后少犯这种低级错误。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[开阔自己的视野，勇敢的接触新知识]]></title>
    <link href="http://www.huangbowen.net/blog/2013/10/31/learn-new-things/"/>
    <updated>2013-10-31T23:40:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/10/31/learn-new-things</id>
    <content type="html"><![CDATA[<p>在我们公司有buddy制度。每个新员工都会被分配给一个有经验的员工。老员工会在新员工6个月的试用期内给予各种各样的帮助。前几天我被分配到一个新buddy。在和他一起聊天的过程中，明显感觉到她有一些忧虑。“我以前主要做的是c++，没做过java，怎么能够快速上手那？”，“咱们这个办公室主要使用的是什么技术？”“如果换了项目组的话，使用的技术会不会变那？”。</p>

<!-- more -->


<p>从这些问题上，我可以感到他对自己不熟悉的技术、新知识很敏感，究其原因就是对学习新技术自信心不足。我想很多人可能都有这样的心态，在学习新技术上有抵触心理或畏惧心理。我之前曾写过一篇文章叫做《走出你的舒适区》，里面讲到抱着自己熟悉的技术就是呆在舒适区中。如果学习新技术就会走出自己的舒适区，很多人都会感到不适应。这种不适应很大程度上是由于人对未知事物的恐惧引起来的。</p>

<h2>不要对自己不了解的技术存在偏见</h2>

<p>记得去年的时候我已经有4年+的工作经验了（09年毕业，1年全职实习+3年工作）。但那个时候我一直把自己局限在C#程序员的范畴。看似有多年工作经验，其实只是一直吃老本而已。期间自己曾想自学下QT，但是最后还是不了了之。当时我和不喜欢用LinQ，偶然看某篇文章说LinQ执行效率低，这点就成了我抵制LinQ的理由。其实这就是一个典型的偏见。当我深入学习LinQ以后，才发现它是多么强大的语法，能大大提高开发速度，使程序更加简单可读。回想起来，正因为你不了解LinQ，所以才会有偏见存在。</p>

<p>还记得每个月都会在论坛掀起讨论的Java和C#优劣、工资比较的话题。换做以前自己很喜欢参与这样的讨论。而现在自己则不屑一顾。参与的最热烈的人恰恰是至少对其中一门一知半解的人。如果你深入了解了这两门语言，你自然知道它们各自的优劣、适用场景，自然知道这种话题没有多少实际意义。</p>

<h2>不要对自己不熟悉的技术心存恐惧</h2>

<p>我记得去年跳槽第一天上班，就被拉入了一个主要使用Java的项目组。而这之前我的Java经验为0。项目组里使用了Spring MVC、Spring WebFlow等开发框架，使用了Mockito、concordion、selenium等测试框架，使用了Maven构建工具……太多完全没接触的技术和框架让我手足无措。对于一个呆惯了舒适区的人极不适应。其实那段时间是我成长最快的时候，三个月内我学习、吸收了大量的知识，可以抵得上我两年的学习量。有的时候就是很奇妙，给了你压力才知道你的潜力有多大。正是这段经历使我完全消除了对陌生技术的恐惧。无论是以后学Haskell、Ruby还是JavaScript，我都是一种轻松加愉快的心态。</p>

<h2>如何学习新技术</h2>

<p>而了解和学习技术最快的方式是直接上其官方网站。一般官方网站都有简单的介绍和入门教程，能让你快速的建立其对这个技术的整体认识。另外还有详细的文档供你进阶。当然，如果要深入掌握的话还需要大量的实践经验才行，毕竟实践出真知嘛。另外这些官方网站十个有九个半都是英文的（谁让大部分的技术都是老外发明的），所以<strong>将英文练好还是很有必要的</strong>。</p>

<p>比如前段时间我在研究云计算，想学习下Chef-一个基础设施管理工具。第一步是访问其官网。从官网可以了解为什么要设计Chef、Chef解决了什么问题，进而了解了Chef的架构、实现策略，然后根据官网的基础教程走了一遍。短短两天就可以建立起对Chef的整体认识，甚至我还在办公室做了一次Chef知识的分享。</p>

<p>什么叫稳定？稳定不是你在一个公司一呆就是10年，而是你今天从公司离职，明天就能找到新工作。对于没背景的屌丝而言，唯一能跟别人竞争的就是自己的实力。能他人所不能，就是自己实力的最好实践。而坚持学习则是保证自己竞争力的唯一方法。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[亚马逊云服务之CloudFormation]]></title>
    <link href="http://www.huangbowen.net/blog/2013/10/23/aws-cloudformation/"/>
    <updated>2013-10-23T16:07:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/10/23/aws-cloudformation</id>
    <content type="html"><![CDATA[<p>亚马逊的Web Service其实包含了一套云服务。云服务主要分为三种:</p>

<ul>
<li><p>IaaS: Infrastructure as a service,基础设施即服务。</p></li>
<li><p>PaaS: Platform as a service, 平台即服务。</p></li>
<li><p>SaaS: Software as a service, 软件即服务。</p></li>
</ul>


<p>而亚马逊提供的云服务至少涵盖了前面两种。以下是亚马逊提供的各种服务。</p>

<!-- more -->


<p><img src="http://www.huangbowen.net/images/cloudformation1.png" width="680"></p>

<p>以上的图中S3、EC2等就属于IaaS，RDS、DynamoDB等就属于PaaS。</p>

<p>今天分享的是亚马逊的CloudFormation，亚马逊将其归类为Deployment&amp;Management（部署及管理类别）。为什么亚马逊要推出这项服务那？我们可以假设一个场景。如果你要将一个WordPress网站部署到亚马逊上，你需要以下几步:创建一个EC2实例->在此EC2实例上配置WordPress->创建RDS数据库实例->在WordPress中配置与该RDS的连接。整个过程耗时耗力，需要在亚马逊不同的云服务间跳转。这些操作关联性很强，不具备自动化。如果你使用了CloudFormation以后，只需要在页面上点几个按钮，输入一些参数，就可以创建一个博客，省时省力,甚至完全不用任何UI，直接通过命令行完成。</p>

<p><strong>CloudFormation给予了用户一种简单的方法来创建和管理一系列有关联的AWS的资源,可以有序的及可预见的初始化和更新这些资源。</strong></p>

<p>要了解CloudFomation之前，先要了解几个概念。</p>

<h3>Template - 模板</h3>

<p>Template是CloudFormation的一个重要概念。Template本质上是一个json格式的文件。该文件定义了你需要使用那些AWS的资源，并且如何初始化这些资源。CloudFormation支持的资源如下图所示。</p>

<p><img src="http://www.huangbowen.net/images/cloudformation2.png" width="680"></p>

<p>一个Template文件至少包含一下几个属性:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;AWSTemplateFormatVersion&quot;</span> <span class="p">:</span> <span class="s2">&quot;2010-09-09&quot;</span><span class="p">,</span>  <span class="err">//Template版本</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&quot;Description&quot;</span> <span class="p">:</span> <span class="s2">&quot;描述该Template的用途&quot;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&quot;Parameters&quot;</span><span class="p">:</span> <span class="p">{</span>        <span class="err">//</span> <span class="err">应用该Template需要配置的参数</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&quot;Resources&quot;</span> <span class="p">:</span> <span class="p">{</span>        <span class="err">//</span> <span class="err">使用到的AWS的资源及它们之间的关系</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&quot;Outputs&quot;</span> <span class="p">:</span> <span class="p">{</span>        <span class="err">//</span> <span class="err">stack创建完毕后的一系列返回值</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个Template就是用来创建一个EC2的虚拟机。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span> <span class="nt">&quot;AWSTemplateFormatVersion&quot;</span> <span class="p">:</span> <span class="s2">&quot;2010-09-09&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;Description&quot;</span> <span class="p">:</span> <span class="s2">&quot;Create an EC2 instance running the Amazon Linux 32 bit AMI.&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;Outputs&quot;</span> <span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;InstanceId&quot;</span> <span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;Description&quot;</span> <span class="p">:</span> <span class="s2">&quot;The InstanceId of the newly created EC2 instance&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;Value&quot;</span> <span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;Ref&quot;</span> <span class="p">:</span> <span class="s2">&quot;Ec2Instance&quot;</span> <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span> <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;Parameters&quot;</span> <span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;KeyPair&quot;</span> <span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;Description&quot;</span> <span class="p">:</span> <span class="s2">&quot;The EC2 Key Pair to allow SSH access to the instance&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;Type&quot;</span> <span class="p">:</span> <span class="s2">&quot;String&quot;</span>
</span><span class='line'>        <span class="p">}</span> <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;Resources&quot;</span> <span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;Ec2Instance&quot;</span> <span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;Properties&quot;</span> <span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;ImageId&quot;</span> <span class="p">:</span> <span class="s2">&quot;ami-3b355a52&quot;</span><span class="p">,</span>
</span><span class='line'>              <span class="nt">&quot;KeyName&quot;</span> <span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;Ref&quot;</span> <span class="p">:</span> <span class="s2">&quot;KeyPair&quot;</span> <span class="p">}</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>          <span class="nt">&quot;Type&quot;</span> <span class="p">:</span> <span class="s2">&quot;AWS::EC2::Instance&quot;</span>
</span><span class='line'>        <span class="p">}</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>AWS官方提供了很多Template的资源，我们可以直接使用，当然也可以按需修改，甚至自己手动编写自己的Template。&lt;http://aws.amazon.com/cloudformation/aws-cloudformation-templates/ >列出了一系列可供使用的Template。</p>

<h3>Stack - 堆</h3>

<p>Template只是一个json格式的文件，如果想要使用它的话，需要创建一个Stack,在Stack中指定你要使用的Template,然后亚马逊才会按照Template中的定义来创建及初始化资源。可以在AWS Management Console中或通过命令行调用API的方式来创建Stack。</p>

<h2>实战</h2>

<p>接下来，我们就通过AWS Management Console，使用CloudFormation来创建一个部署在EC2上、使用RDS作为数据库的WordPress网站。</p>

<p>首先，需要登录到AWS Management Console，选择EC2服务，点击左侧菜单的Key Pair,创建一个Key Pair。这个Key Pair将在接下来被使用，主要使AWS能够ssh到创建的EC2机器上。当然你也可以使用已有的Key Pair。</p>

<p><img src="http://www.huangbowen.net/images/cloudformation3.png" width="680"></p>

<p>然后选择CloudFormation服务，点击<code>Create Stack</code>按钮。</p>

<p>然后输入Stack名称，并选择一个Template。由于我们要创建一个WordPress的站点，可以选择<code>use a sample temple</code>,并选择WordPress这个模板。</p>

<p><img src="http://www.huangbowen.net/images/cloudformation4.png" width="680"></p>

<p><img src="http://www.huangbowen.net/images/cloudformation5.png" width="680"></p>

<p>然后点击<code>continue</code>按钮，配置相关的参数。注意在KeyName一项中输入我们第一步创建的Key Pair。</p>

<p><img src="http://www.huangbowen.net/images/cloudformation6.png" width="680"></p>

<p>然后点击<code>continue</code>按钮，配置此Stack的标签，这个是可选项，可以跳过。再点一下<code>continue</code>，将会再次确认想要的创建的资源信息，继续后就可以看到资源正在创建了。</p>

<p><img src="http://www.huangbowen.net/images/cloudformation7.png" width="680"></p>

<p>页面下半部分有很多标签，你可以随时查看该Stack的描述、资源、事件、参数、输出等各项信息。</p>

<p>等待大约20分钟，Stack就会执行完毕，在Outputs标签中你会看到有一个url。</p>

<p><img src="http://www.huangbowen.net/images/cloudformation8.png" width="680"></p>

<p>这个就是我们创建的WordPress的入口地址，访问该链接会进入WordPress的初始化设置页面。</p>

<p><img src="http://www.huangbowen.net/images/cloudformation9.png" width="680"></p>

<p>配置完以后，一个新的WordPress就诞生了，重新访问URL，你会看到你的博客首页。</p>

<p><img src="http://www.huangbowen.net/images/cloudformation10.png" width="680"></p>

<h2>CloudFormer</h2>

<p>提到CloudFormation就不得不说CloudFormer。CloudFormer是亚马逊提供的一个工具，用来给已有的AWS资源创建CloudFormation Template。这样你在以后创建相同的AWS资源时就可以直接使用这个Template了。</p>

<p>要使用CloudFormer首先要创建一个Stack，CloudFormer就被部署到一台EC2机器上，通过这个Stack返回的Outputs的URL我们可以一步步勾选使用到的资源，最终生成一个Template，该Template会自动放置到你的S3中。</p>

<p>首先创建Stack,Template选择use a sample template,并选择CloudFormer。</p>

<p><img src="http://www.huangbowen.net/images/cloudformation11.png" width="680"></p>

<p>然后点击<code>continue</code>，配置其他参数，直到走完创建Stack这个流程。</p>

<p><img src="http://www.huangbowen.net/images/cloudformation12.png" width="680"></p>

<p>等待这个Stack创建完毕后，就可以从Outputs标签得到一个URL。这个URL是执行CloudFormer工具的入口地址。</p>

<p><img src="http://www.huangbowen.net/images/cloudformation13.png" width="680"></p>

<p>点击此URL,即可按照配置一步步配置自己的Template。</p>

<p><img src="http://www.huangbowen.net/images/cloudformation14.png" width="680"></p>

<p>流程走完后，生成的Template会存放到你的S3 bucket中。</p>

<hr />

<p>由于CloudFormation支持对几乎所有的AWS资源进行创建和配置，并且能够按照指定顺序创建，其Template简洁易懂、容易配置、可重用，所以是你使用AWS的不可多得的好帮手。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[XML相关知识全接触（一）]]></title>
    <link href="http://www.huangbowen.net/blog/2013/10/14/xml-knowledge/"/>
    <updated>2013-10-14T00:32:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/10/14/xml-knowledge</id>
    <content type="html"><![CDATA[<p><img src="http://www.huangbowen.net/images/xml.png" width="400"></p>

<p>XML文件格式已经出来很久了。他的风头如今在JSON、YAML等新兴文件格式的冲击下已经显的不那么强劲。但是XML仍然是当今世界上使用最广泛的文件格式。围绕着它也有一大堆的概念和知识点。所以我们还是很有必要全面了解下。</p>

<!-- more -->


<h2>XML</h2>

<p>XML全称为eXtensible Markup Language，即可扩展标记语言。其被设计用来传输及存储数据。</p>

<p>XML与HTML看似比较相似，但是其设计目的并不相同。</p>

<ul>
<li><p>XML用来传输及存储数据，主要关注数据是什么。</p></li>
<li><p>HTML用来显示数据，主要关注数据看起来是什么样。</p></li>
<li><p>HTML的tag是预定义的，比如说table标签，浏览器会知道它是什么含义。</p></li>
<li><p>XML的tag不是预定义的，需要自己设计tag并描述tag的含义。XML中的tag如果不借助XSLT文件，浏览器只会以简单的文本方式展示。</p></li>
</ul>


<p>很多人认为HTML是XML文件的一个子集。其实这种观点是错误的，因为HTML的实现并未严格遵循XML的语法。比如XML要求每个tag必须要有闭合标记，XML的tag是大小写敏感的，XML给tag添加的属性必须要使用引号包起来…这些语法要求HTML都不满足。</p>

<p>请看XML的一个示例。</p>

<figure class='code'><figcaption><span>book.xml </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;book&gt;</span>
</span><span class='line'>    <span class="nt">&lt;name&gt;</span>Effective JavaScript<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;category&gt;</span>Program Language<span class="nt">&lt;/category&gt;</span>
</span><span class='line'>    <span class="nt">&lt;author&gt;</span>Bowen<span class="nt">&lt;/author&gt;</span>
</span><span class='line'>    <span class="nt">&lt;description&gt;</span>This book is about JavaScript Language.<span class="nt">&lt;/description&gt;</span>
</span><span class='line'><span class="nt">&lt;/book&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这是一个简单的XML文件。第一行说明了xml的版本及编码类型。接下来是一个根节点book，根节点可以包含很多子节点。</p>

<h3>XML命名空间</h3>

<p>由于XML的tag并不像HTML那样是预定义的，那么很有可能两个XML中的同名tag具有不同的含义。那么在合并XML等操作时势必会造成冲突。解决的办法就是给XML的tag加上命名空间（即namespace），每一个namespace都可以指定一个前缀。这些前缀会区分同名tag。</p>

<p>假设这里有另一个xml文件。</p>

<figure class='code'><figcaption><span>anotherBook.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;book&gt;</span>
</span><span class='line'>    <span class="nt">&lt;name&gt;</span>Rework<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;page&gt;</span>120<span class="nt">&lt;/page&gt;</span>
</span><span class='line'>    <span class="nt">&lt;publishDate&gt;</span>2013-10-08<span class="nt">&lt;/publishDate&gt;</span>
</span><span class='line'><span class="nt">&lt;/book&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果我们要合并这两个xml节点到同一个xml文件中时，不加namespace会发生冲突，因为含有同名的tag，其子节点的结构并不相同。接下来我们给其加上命名空间并合并。</p>

<figure class='code'><figcaption><span>combined.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;root&gt;</span>
</span><span class='line'><span class="nt">&lt;ns1:book</span> <span class="na">xmlns:ns1=</span><span class="s">&quot;http://www.huangbowen.net/ns1&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ns1:name&gt;</span>Effective JavaScript<span class="nt">&lt;/ns1:name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ns1:category&gt;</span>Program Language<span class="nt">&lt;/ns1:category&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ns1:author&gt;</span>Bowen<span class="nt">&lt;/ns1:author&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ns1:description&gt;</span>This book is about JavaScript Language.<span class="nt">&lt;/ns1:description&gt;</span>
</span><span class='line'><span class="nt">&lt;/ns1:book&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;ns2:book</span> <span class="na">xmlns:ns2=</span><span class="s">&quot;http://www.huangbowen.net/ns2&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>     <span class="nt">&lt;ns2:name&gt;</span>Rework<span class="nt">&lt;/ns2:name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ns2:page&gt;</span>120<span class="nt">&lt;/ns2:page&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ns2:publishDate&gt;</span>2013-10-08<span class="nt">&lt;/ns2:publishDate&gt;</span>
</span><span class='line'>     <span class="nt">&lt;/ns2:book&gt;</span>
</span><span class='line'><span class="nt">&lt;/root&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>xmlns是xml namespace的缩写。引号后面是tag的前缀。这个前缀可以省略，比如<code>xmlns="http://www.huangbowen.net/ns1"</code>,相当于没有前缀的tag自动应用默认的命名空间。需要注意的是命名空间的URI只是给命名空间提供一个唯一的标识，xml解析器并不会访问这个URI来获取任何信息。很多公司习惯将这个URI一个web页面，该web页面描述了该namespace的相关信息。</p>

<h2>XSD</h2>

<p>XSD全称为XML Schema Definition,即XML结构定义语言。每个XSD文件是对一个XML文件的结构定义。
由于XML中的tag并不是预定义的，那么每人都可以创建自己的XML结构文档。如果你想让别人按照你的标准创建一份xml文件，你可以使用XSD文件来描述你的标准。</p>

<p>这是针对本文示例book.xml文件的一个XSD文件。</p>

<figure class='code'><figcaption><span>book.xsd</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;xs:schema</span> <span class="na">attributeFormDefault=</span><span class="s">&quot;unqualified&quot;</span> <span class="na">elementFormDefault=</span><span class="s">&quot;qualified&quot;</span>
</span><span class='line'>           <span class="na">xmlns:xs=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;xs:element</span> <span class="na">name=</span><span class="s">&quot;book&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;xs:complexType&gt;</span>
</span><span class='line'>            <span class="nt">&lt;xs:sequence&gt;</span>
</span><span class='line'>                <span class="nt">&lt;xs:element</span> <span class="na">type=</span><span class="s">&quot;xs:string&quot;</span> <span class="na">name=</span><span class="s">&quot;name&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>                <span class="nt">&lt;xs:element</span> <span class="na">type=</span><span class="s">&quot;xs:string&quot;</span> <span class="na">name=</span><span class="s">&quot;category&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>                <span class="nt">&lt;xs:element</span> <span class="na">type=</span><span class="s">&quot;xs:string&quot;</span> <span class="na">name=</span><span class="s">&quot;author&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>                <span class="nt">&lt;xs:element</span> <span class="na">type=</span><span class="s">&quot;xs:string&quot;</span> <span class="na">name=</span><span class="s">&quot;description&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/xs:sequence&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/xs:complexType&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/xs:element&gt;</span>
</span><span class='line'><span class="nt">&lt;/xs:schema&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>从上可以看出其实XSD文件本身就是一个XML文件，它遵循XML语法，比如每个tag都需要有结束标记，必须有且只有一个根节点等。</p>

<p>在一个XML文件中可以添加其Schema的引用信息。</p>

<figure class='code'><figcaption><span>book.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;ns1:book</span> <span class="na">xmlns:ns1=</span><span class="s">&quot;http://www.huangbowen.net/ns1&quot;</span> <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="na">xsi:targetLocation=</span><span class="s">&quot;http://www.huangbowen.net/book.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ns1:name&gt;</span>Effective JavaScript<span class="nt">&lt;/ns1:name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ns1:category&gt;</span>Program Language<span class="nt">&lt;/ns1:category&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ns1:author&gt;</span>Bowen<span class="nt">&lt;/ns1:author&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ns1:description&gt;</span>This book is about JavaScript Language.<span class="nt">&lt;/ns1:description&gt;</span>
</span><span class='line'><span class="nt">&lt;/ns1:book&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在IDE中，如果你的XML节点没有遵守你引用的Schema中的定义，就会给出错误提醒。</p>

<h2>XSLT</h2>

<p>XSLT全称为EXtensible Stylesheet Language Transformations。 XSLT用于将XML文档转换为XHTML或其他XML文档。</p>

<p>在讲XSLT之前我们先讲讲XSL。XSL全称为Extensible Stylesheet Language,即可扩展样式表语言。众所周知，CSS是HTML文件的样式表，而XSL则是XML文件的样式表。XSL文件描述了XML文件应该如何被显示。</p>

<p>其实XSL不仅仅是样式表语言，它主要包含3部分:</p>

<ul>
<li><p>XSLT - 用来转换XML文档</p></li>
<li><p>XPath - 查询和操作XML文档中的节点</p></li>
<li><p>XSL-FO - 格式化XML文档</p></li>
</ul>


<p>XSLT使用XPath来查找XML中的元素。</p>

<p>XSLT通过一个xml文件来定义源xml文件与目标文件之间的转换关系。该xml文件必须以<code>&lt;xsl:stylesheet&gt;</code>或<code>&lt;xsl:transform&gt;</code>作为根节点。</p>

<p>对于本文的示例book.xml,如果我们使用浏览器打开显示效果如下。</p>

<p><img src="http://www.huangbowen.net/images/bookxml.png" width="600"></p>

<p>现在我们创建一个XSLT文件将其转换为一个HTML文件。</p>

<figure class='code'><figcaption><span>book.xsl</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;xsl:stylesheet</span> <span class="na">version=</span><span class="s">&quot;1.0&quot;</span>
</span><span class='line'><span class="na">xmlns:xsl=</span><span class="s">&quot;http://www.w3.org/1999/XSL/Transform&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;xsl:template</span> <span class="na">match=</span><span class="s">&quot;/&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;html&gt;</span>
</span><span class='line'>  <span class="nt">&lt;body&gt;</span>
</span><span class='line'>  <span class="nt">&lt;h2&gt;</span>My Book<span class="nt">&lt;/h2&gt;</span>
</span><span class='line'>  <span class="nt">&lt;table</span> <span class="na">border=</span><span class="s">&quot;1&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>      <span class="nt">&lt;td&gt;</span>name<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>      <span class="nt">&lt;td&gt;&lt;xsl:value</span><span class="na">-of</span> <span class="na">select=</span><span class="s">&quot;book/name&quot;</span> <span class="nt">/&gt;&lt;/td&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>    <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>      <span class="nt">&lt;td&gt;</span>category<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>      <span class="nt">&lt;td&gt;&lt;xsl:value</span><span class="na">-of</span> <span class="na">select=</span><span class="s">&quot;book/category&quot;</span> <span class="nt">/&gt;&lt;/td&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>    <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>      <span class="nt">&lt;td&gt;</span>author<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>      <span class="nt">&lt;td&gt;&lt;xsl:value</span><span class="na">-of</span> <span class="na">select=</span><span class="s">&quot;book/author&quot;</span> <span class="nt">/&gt;&lt;/td&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>    <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>      <span class="nt">&lt;td&gt;</span>description<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>      <span class="nt">&lt;td&gt;&lt;xsl:value</span><span class="na">-of</span> <span class="na">select=</span><span class="s">&quot;book/description&quot;</span> <span class="nt">/&gt;&lt;/td&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/table&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/html&gt;</span>
</span><span class='line'><span class="nt">&lt;/xsl:template&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/xsl:stylesheet&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后我们在book.xml文件中加入对这个XSLT文件的引用。</p>

<figure class='code'><figcaption><span>book.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span>
</span><span class='line'><span class="cp">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;book.xsl&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;book&gt;</span>
</span><span class='line'>    <span class="nt">&lt;name&gt;</span>Effective JavaScript<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;category&gt;</span>Program Language<span class="nt">&lt;/category&gt;</span>
</span><span class='line'>    <span class="nt">&lt;author&gt;</span>Bowen<span class="nt">&lt;/author&gt;</span>
</span><span class='line'>    <span class="nt">&lt;description&gt;</span>This book is about JavaScript Language.<span class="nt">&lt;/description&gt;</span>
</span><span class='line'><span class="nt">&lt;/book&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>接下来我们再用浏览器打开book.xml文件，发现显示变成了这样。是不是很神奇？</p>

<p><img src="http://www.huangbowen.net/images/bookxmlwithxslt.png" width="600"></p>

<p>注意如果你使用chrome打开该book.xml文件，请设置chrome的<code>--allow-file-access-from-files</code>属性，这样chrome才允许加载本地的xsl文件。解决方案看这里：<a href="http://stackoverflow.com/questions/3828898/can-chrome-be-made-to-perform-an-xsl-transform-on-a-local-file">http://stackoverflow.com/questions/3828898/can-chrome-be-made-to-perform-an-xsl-transform-on-a-local-file</a></p>

<p>OK，这篇文章讲的够多了，下篇接着讲XPath，XML to Object以及XML文档格式与近来风头强劲的JSON、YAML格式的比较。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hello Vagrant]]></title>
    <link href="http://www.huangbowen.net/blog/2013/10/02/hello-vagrant/"/>
    <updated>2013-10-02T23:50:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/10/02/hello-vagrant</id>
    <content type="html"><![CDATA[<p>回想以前，想要安装个虚拟机是多么的麻烦。先要费尽心机找到想要的操作系统镜像文件，然后安装虚拟化软件，按照其提供的GUI界面操作一步步创建,整个过程费时费力。但是，自从使用了Vagrant以后，咱腰不酸了，腿不痛了，一口气起5个虚拟机还不费劲。</p>

<!-- more -->


<h2>Vagrant是什么？</h2>

<p>这是<a href="http://www.vagrantup.com/">官网</a>上Vagrant的介绍。</p>

<blockquote><p>Create and Configure lightweight, reproducible, and portable development environments.</p></blockquote>

<p>即用来创建和配置轻量级、可重现的、便携式的开发环境。</p>

<p>使用Vagrant可以将创建虚拟机的整个过程自动化起来,并具有高度的重用性。假如你是个开发者，你可以很容易为每个团队成员创建一模一样的开发环境，从根本上防止‘在我的机器上可以工作’之类的bug。假如你是个测试人员，可以一键创建多个一模一样的测试环境并行跑测试，并且跑完测试后还可以一键销毁这些测试环境，达到真正的按需创建。如果你是devops成员，需要和AWS、Chef之类的工具打交道，那么Vagrant是个很好的结合点。你可以通过Vagrant在AWS上直接创建虚拟机，并且自动运行Chef的脚本配置你的新虚拟机。</p>

<h2>几个概念</h2>

<p>正式介绍Vagrant功能之前先了解一下Vagrant使用的一些概念。</p>

<ul>
<li><p>Provider - 供应商，在这里指Vagrant调用的虚拟化工具。Vagrant本身并没有能力创建虚拟机，它是调用一些虚拟化工具来创建，如VirtualBox,VMWare，甚至AWS。</p></li>
<li><p>Box - 可被Vagrant直接使用的虚拟机镜像文件。针对不同的Provider，Box文件的格式是不一样的。</p></li>
<li><p>Vagrantfile - Vagrant根据Vagrantfile中的配置来创建虚拟机。在Vagrantfile文件中你需要指明使用哪个Box,需要预安装哪些软件，虚拟机的网络配置等。</p></li>
</ul>


<h2>Vagrant的安装</h2>

<p>安装Vagrant非常简单，可以在<a href="http://downloads.vagrantup.com/">Downloads</a>页面选择最新的版本安装。Vagrant支持Windows、Linux、Mac等平台。</p>

<h2>Box管理</h2>

<p>使用Vagrant之前先要给Vagrant添加Box，也就是可供Vagrant使用的虚拟机镜像文件。Vagrant官网本身维护了一些镜像文件，我们可以直接使用。<a href="http://www.vagrantbox.es/">http://www.vagrantbox.es/</a>上面有更多的box可以供我们使用。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#添加名为precise32的box文件</span>
</span><span class='line'> <span class="nv">$ </span>vagrant init precise32 http://files.vagrantup.com/precise32.box
</span><span class='line'><span class="nv">$ </span>vagrant box list
</span><span class='line'>precise32 <span class="o">(</span>virtualbox<span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>vagrant box remove precise64 virtualbox
</span></code></pre></td></tr></table></div></figure>


<p>可以看到Box与Provider是相关的，每个Box都必须指定Provier，只有使用对应的Provier才能正确使用Box。</p>

<h2>创建并运行虚拟机</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vagrant box list
</span><span class='line'>precise32 <span class="o">(</span>virtualbox<span class="o">)</span>
</span><span class='line'><span class="nv">$ </span>vagrant init precise32
</span><span class='line'>A <span class="sb">`</span>Vagrantfile<span class="sb">`</span> has been placed in this directory. You are now
</span><span class='line'>ready to <span class="sb">`</span>vagrant up<span class="sb">`</span> your first virtual environment! Please <span class="nb">read</span>
</span><span class='line'>the comments in the Vagrantfile as well as documentation on
</span><span class='line'><span class="sb">`</span>vagrantup.com<span class="sb">`</span> <span class="k">for </span>more information on using Vagrant.
</span><span class='line'><span class="nv">$ </span>vagrant up
</span><span class='line'>Bringing machine <span class="s1">&#39;default&#39;</span> up with <span class="s1">&#39;virtualbox&#39;</span> provider...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Importing base box <span class="s1">&#39;precise32&#39;</span>...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Matching MAC address <span class="k">for </span>NAT networking...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Setting the name of the VM...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Clearing any previously <span class="nb">set </span>forwarded ports...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Creating shared folders metadata...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Clearing any previously <span class="nb">set </span>network interfaces...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Preparing network interfaces based on configuration...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Forwarding ports...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> -- <span class="nv">22</span> <span class="o">=</span>&gt; 2222 <span class="o">(</span>adapter 1<span class="o">)</span>
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Booting VM...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Waiting <span class="k">for </span>machine to boot. This may take a few minutes...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Machine booted and ready!
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Mounting shared folders...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> -- /vagrant
</span></code></pre></td></tr></table></div></figure>


<p><code>vagrant init precise32</code>会在当前目录下生成一个Vagrantfie文件，其使用precise32作为box。<code>vagrant up</code>则是使用virtual box这个provider来初始化并启动precise32这个虚拟机。</p>

<p>我们可以详细的看看Vagrantfile这个文件。</p>

<figure class='code'><figcaption><span>Vagrantfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># -*- mode: ruby -*-</span>
</span><span class='line'><span class="c1"># vi: set ft=ruby :</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Vagrantfile API及语法版本</span>
</span><span class='line'><span class="no">VAGRANTFILE_API_VERSION</span> <span class="o">=</span> <span class="s2">&quot;2&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="no">Vagrant</span><span class="o">.</span><span class="n">configure</span><span class="p">(</span><span class="no">VAGRANTFILE_API_VERSION</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># 使用的box</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">box</span> <span class="o">=</span> <span class="s2">&quot;precise32&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Create a forwarded port mapping which allows access to a specific port</span>
</span><span class='line'>  <span class="c1"># within the machine from a port on the host machine. In the example below,</span>
</span><span class='line'>  <span class="c1"># accessing &quot;localhost:8080&quot; will access port 80 on the guest machine.</span>
</span><span class='line'>  <span class="c1"># config.vm.network :forwarded_port, guest: 80, host: 8080</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Create a private network, which allows host-only access to the machine</span>
</span><span class='line'>  <span class="c1"># using a specific IP.</span>
</span><span class='line'>  <span class="c1"># config.vm.network :private_network, ip: &quot;192.168.33.10&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Create a public network, which generally matched to bridged network.</span>
</span><span class='line'>  <span class="c1"># Bridged networks make the machine appear as another physical device on</span>
</span><span class='line'>  <span class="c1"># your network.</span>
</span><span class='line'>  <span class="c1"># config.vm.network :public_network</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># If true, then any SSH connections made will enable agent forwarding.</span>
</span><span class='line'>  <span class="c1"># Default value: false</span>
</span><span class='line'>  <span class="c1"># config.ssh.forward_agent = true</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Share an additional folder to the guest VM. The first argument is</span>
</span><span class='line'>  <span class="c1"># the path on the host to the actual folder. The second argument is</span>
</span><span class='line'>  <span class="c1"># the path on the guest to mount the folder. And the optional third</span>
</span><span class='line'>  <span class="c1"># argument is a set of non-required options.</span>
</span><span class='line'>  <span class="c1"># config.vm.synced_folder &quot;../data&quot;, &quot;/vagrant_data&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Provider-specific configuration so you can fine-tune various</span>
</span><span class='line'>  <span class="c1"># backing providers for Vagrant. These expose provider-specific options.</span>
</span><span class='line'>  <span class="c1"># Example for VirtualBox:</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="c1"># config.vm.provider :virtualbox do |vb|</span>
</span><span class='line'>  <span class="c1">#   # Don&#39;t boot with headless mode</span>
</span><span class='line'>  <span class="c1">#   vb.gui = true</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="c1">#   # Use VBoxManage to customize the VM. For example to change memory:</span>
</span><span class='line'>  <span class="c1">#   vb.customize [&quot;modifyvm&quot;, :id, &quot;--memory&quot;, &quot;1024&quot;]</span>
</span><span class='line'>  <span class="c1"># end</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="c1"># View the documentation for the provider you&#39;re using for more</span>
</span><span class='line'>  <span class="c1"># information on available options.</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Enable provisioning with Puppet stand alone.  Puppet manifests</span>
</span><span class='line'>  <span class="c1"># are contained in a directory path relative to this Vagrantfile.</span>
</span><span class='line'>  <span class="c1"># You will need to create the manifests directory and a manifest in</span>
</span><span class='line'>  <span class="c1"># the file precise32.pp in the manifests_path directory.</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="c1"># An example Puppet manifest to provision the message of the day:</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="c1"># # group { &quot;puppet&quot;:</span>
</span><span class='line'>  <span class="c1"># #   ensure =&gt; &quot;present&quot;,</span>
</span><span class='line'>  <span class="c1"># # }</span>
</span><span class='line'>  <span class="c1"># #</span>
</span><span class='line'>  <span class="c1"># # File { owner =&gt; 0, group =&gt; 0, mode =&gt; 0644 }</span>
</span><span class='line'>  <span class="c1"># #</span>
</span><span class='line'>  <span class="c1"># # file { &#39;/etc/motd&#39;:</span>
</span><span class='line'>  <span class="c1"># #   content =&gt; &quot;Welcome to your Vagrant-built virtual machine!</span>
</span><span class='line'>  <span class="c1"># #               Managed by Puppet.\n&quot;</span>
</span><span class='line'>  <span class="c1"># # }</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="c1"># config.vm.provision :puppet do |puppet|</span>
</span><span class='line'>  <span class="c1">#   puppet.manifests_path = &quot;manifests&quot;</span>
</span><span class='line'>  <span class="c1">#   puppet.manifest_file  = &quot;site.pp&quot;</span>
</span><span class='line'>  <span class="c1"># end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Enable provisioning with chef solo, specifying a cookbooks path, roles</span>
</span><span class='line'>  <span class="c1"># path, and data_bags path (all relative to this Vagrantfile), and adding</span>
</span><span class='line'>  <span class="c1"># some recipes and/or roles.</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="c1"># config.vm.provision :chef_solo do |chef|</span>
</span><span class='line'>  <span class="c1">#   chef.cookbooks_path = &quot;../my-recipes/cookbooks&quot;</span>
</span><span class='line'>  <span class="c1">#   chef.roles_path = &quot;../my-recipes/roles&quot;</span>
</span><span class='line'>  <span class="c1">#   chef.data_bags_path = &quot;../my-recipes/data_bags&quot;</span>
</span><span class='line'>  <span class="c1">#   chef.add_recipe &quot;mysql&quot;</span>
</span><span class='line'>  <span class="c1">#   chef.add_role &quot;web&quot;</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="c1">#   # You may also specify custom JSON attributes:</span>
</span><span class='line'>  <span class="c1">#   chef.json = { :mysql_password =&gt; &quot;foo&quot; }</span>
</span><span class='line'>  <span class="c1"># end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Enable provisioning with chef server, specifying the chef server URL,</span>
</span><span class='line'>  <span class="c1"># and the path to the validation key (relative to this Vagrantfile).</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="c1"># The Opscode Platform uses HTTPS. Substitute your organization for</span>
</span><span class='line'>  <span class="c1"># ORGNAME in the URL and validation key.</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="c1"># If you have your own Chef Server, use the appropriate URL, which may be</span>
</span><span class='line'>  <span class="c1"># HTTP instead of HTTPS depending on your configuration. Also change the</span>
</span><span class='line'>  <span class="c1"># validation key to validation.pem.</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="c1"># config.vm.provision :chef_client do |chef|</span>
</span><span class='line'>  <span class="c1">#   chef.chef_server_url = &quot;https://api.opscode.com/organizations/ORGNAME&quot;</span>
</span><span class='line'>  <span class="c1">#   chef.validation_key_path = &quot;ORGNAME-validator.pem&quot;</span>
</span><span class='line'>  <span class="c1"># end</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="c1"># If you&#39;re using the Opscode platform, your validator client is</span>
</span><span class='line'>  <span class="c1"># ORGNAME-validator, replacing ORGNAME with your organization name.</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="c1"># If you have your own Chef Server, the default validation client name is</span>
</span><span class='line'>  <span class="c1"># chef-validator, unless you changed the configuration.</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="c1">#   chef.validation_client_name = &quot;ORGNAME-validator&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>从上述的文件可以看出Vagrantfile可以配置很多东西，比如使用的Box，需要转发的端口，同步指定的目录，使用Chef、puppet等对虚拟机进行预配置等。</p>

<p>如果修改了Vagrantfile中的配置，只需要执行<code>vagrant reload</code>来应用新配置。</p>

<h2>同步目录</h2>

<p>虚拟机启动起来以后就可以ssh上去了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vagrant ssh
</span><span class='line'>Welcome to Ubuntu 12.04 LTS <span class="o">(</span>GNU/Linux 3.2.0-23-generic-pae i686<span class="o">)</span>
</span><span class='line'>
</span><span class='line'> * Documentation:  https://help.ubuntu.com/
</span><span class='line'>Welcome to your Vagrant-built virtual machine.
</span><span class='line'>Last login: Wed Oct  2 09:41:08 2013 from 10.0.2.2
</span><span class='line'>vagrant@precise32:~<span class="nv">$ </span>who
</span><span class='line'>vagrant  pts/0        2013-10-02 09:47 <span class="o">(</span>10.0.2.2<span class="o">)</span>
</span><span class='line'>vagrant@precise32:~<span class="nv">$ </span>hostname
</span><span class='line'>precise32
</span><span class='line'>vagrant@precise32:~<span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>Vagrant会自动给虚拟机根目录下创建一个名为vagrant的目录。这个目录可以与主机Vagrantfile所在的目录保持同步。这个同步是相互的，无论改动了主机目录中的文件，还是虚拟机目录中的文件，都可以自动同步到另一方。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>vagrant@precise32:~<span class="nv">$ </span><span class="nb">cd</span> /vagrant/
</span><span class='line'>vagrant@precise32:/vagrant<span class="nv">$ </span>ls
</span><span class='line'>Vagrantfile
</span><span class='line'>vagrant@precise32:/vagrant<span class="nv">$ </span>touch test.txt
</span><span class='line'>vagrant@precise32:/vagrant<span class="nv">$ </span><span class="nb">exit</span>
</span><span class='line'><span class="nb">logout</span>
</span><span class='line'>Connection to 127.0.0.1 closed.
</span><span class='line'><span class="nv">$ </span>ls
</span><span class='line'>Vagrantfile test.txt
</span></code></pre></td></tr></table></div></figure>


<h2>多机器管理</h2>

<p>其实Vagrantfile支持配置多台机器，如果你需要设置多台服务器及数据库环境，可以用一个Vagrantfile搞定。</p>

<figure class='code'><figcaption><span>Vagrantfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Vagrant</span><span class="o">.</span><span class="n">configure</span><span class="p">(</span><span class="s2">&quot;2&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provision</span> <span class="s2">&quot;shell&quot;</span><span class="p">,</span> <span class="ss">inline</span><span class="p">:</span> <span class="s2">&quot;echo Hello&quot;</span>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">define</span> <span class="s2">&quot;web&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">web</span><span class="o">|</span>    <span class="n">web</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">box</span> <span class="o">=</span> <span class="s2">&quot;apache&quot;</span>  <span class="k">end</span>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">define</span> <span class="s2">&quot;db&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">db</span><span class="o">|</span>    <span class="n">db</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">box</span> <span class="o">=</span> <span class="s2">&quot;mysql&quot;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个文件配置了两个box，一个叫web，一个叫db。现在启动虚拟机就需要加上虚拟机名了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#启动web虚拟机</span>
</span><span class='line'><span class="nv">$ </span>vagrant up web
</span><span class='line'>
</span><span class='line'><span class="c">#启用db虚拟机</span>
</span><span class='line'><span class="nv">$ </span>vagrant up db
</span><span class='line'>
</span><span class='line'><span class="c">#默认启动所有的虚拟机</span>
</span><span class='line'><span class="nv">$ </span>vagrant up
</span></code></pre></td></tr></table></div></figure>


<h2>关闭虚拟机</h2>

<p>Vagrant提供了好几种方法来关闭虚拟机，你可以根据不同的情况选择不同的方式。</p>

<p><code>vagrant suspend</code>将虚拟机置于休眠状态。这时候主机会保存虚拟机的当前状态。再用<code>vagrant up</code>启动虚拟机时能够返回之前工作的状态。这种方式优点是休眠和启动速度都很快，只有几秒钟。缺点是需要额外的磁盘空间来存储当前状态。</p>

<p><code>vagrant halt</code>则是关机。如果想再次启动还是使用<code>vagrant up</code>命令，不过需要多花些时间。</p>

<p><code>vagrant destroy</code>则会将虚拟机从磁盘中删除。如果想重新创建还是使用<code>vagrant up</code>命令。</p>

<p>另外1.2以上版本的Vagrant还引用了插件机制。可以通过<code>vagrant plugin</code>来添加各种各样的plugin，这给Vagrant的应用带来了更大的灵活性和针对性。比如可以添加<code>vagrant-windows</code>的插件来增加对windows系统的支持，通过添加<code>vagrant-aws</code>插件来实现给AWS创建虚拟机的功能。你也可以编写自己的插件。由于Vagrant是ruby写的一个gem，其插件的编写也是使用的Ruby语言。这里就不多做介绍了。感兴趣的可以去<a href="http://www.vagrantup.com/">官网</a>查看。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[将我的博客迁移到亚马逊云端（2）]]></title>
    <link href="http://www.huangbowen.net/blog/2013/10/01/migrate-octopress-to-aws-step-2/"/>
    <updated>2013-10-01T21:54:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/10/01/migrate-octopress-to-aws-step-2</id>
    <content type="html"><![CDATA[<p><img src="http://www.huangbowen.net/images/edgelocation.png"></p>

<p>上篇文章中讲了将我的Octopress博客部署到亚马逊的S3上。而这篇文章则主要讲如何使用亚马逊提供的CloudFront作为内容分发并将自己的独立域名绑定到此CloudFront上。</p>

<!-- more -->


<p>首先，需要启用亚马逊的CloudFront。我刚开始以为只需要‘sign up’就行。但是当我在&#8217;AWS Management Console&#8217;中点击‘Services’中的CloudFront时，却得到了‘Account Blocked’错误。</p>

<p><img src="http://www.huangbowen.net/images/accountblocked.png" width="780"></p>

<p>这个问题很奇怪，CloudFront明明已经在&#8217; Services You&#8217;re Signed Up For&#8217; list中了，但是咋个无法使用那？我只好使用gmail给Amazon客服中心发了邮件询问，结果客服中心告诉我需要使用一个business email(商业邮箱)来发送激活申请。我只好使用公司邮箱发送了申请，过了几个小时就收到了回信，告诉我已经可以使用了。</p>

<p>登陆&#8217;AWS Management Console&#8217;后，点击&#8217;Services&#8217;中的‘CloudFront’，就可以看到控制界面了。</p>

<p><img src="http://www.huangbowen.net/images/cloudfront.png" width="780"></p>

<p>点击&#8217;Create Distribution&#8217;按钮，Delivery method选择Download。 Download主要针对一些html，css,js等静态文件，而Streaming则主要是一些音视频文件。</p>

<p><img src="http://www.huangbowen.net/images/deliverymethod.png" width="780"></p>

<p>下一步，要选择Origin,即要进行内容分发的源。虽然亚马逊会自动列出你的S3 bucket，但是千万不要选。而是自己手动输入example.com这个Bucket的Endpoint(Endpoint在S3 Console的Properties标签下的Static Website hosting里看得到)。为什么不直接选S3 bucket那?这是因为当我们访问一个目录时，我们期望能返回默认的object。虽然CouldFront有个Default Root Object设置，只是对根目录起作用，对子目录不起作用。如果使用Bucket的Endpoint，再加上之前已经给该Bucket配置了Default Object，就可以解决这个问题。</p>

<p><img src="http://www.huangbowen.net/images/originname.png" width="780"></p>

<p>在CNAMEs项中输入自己的域名，多个域名以逗号分隔。</p>

<p><img src="http://www.huangbowen.net/images/alternatedomain.png" width="780"></p>

<p>这样子CoudFront就算配置好了。通过管理页面也可以配置Error page等。</p>

<p><img src="http://www.huangbowen.net/images/cloudfrontoverview.png" width="780"></p>

<p>接下来，需要登录自己域名的提供商的管理后台，添加一条自己独立域名的转发，转发到这个CloudFront的Domain Name上。</p>

<p><img src="http://www.huangbowen.net/images/domainnamechange.png" width="780"></p>

<p>一般需要10分钟到2个小时等待新的域名转发设置生效。</p>

<p>另外要专门提一下CloudFront的cache机制。CloudFront主要通过检测Origin中的http header中的cache-control属性。根据cache-control的值来设置cache时间。但是CloudFront最长只保留24小时的cache，过后就会清空并重新cache。对于我的小博客来说24小时太长了，那如何给Octopress注入cache-control这个http header那？其实在上篇文章已经提过了。S3支持给每个object设置 http header，我们可以通过s3cmd来自动设置，这就是为什么在S3 task中要加入这个参数。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">desc</span> <span class="s2">&quot;Deploy website via s3cmd&quot;</span>
</span><span class='line'><span class="n">task</span> <span class="ss">:s3</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;## Deploying website via s3cmd&quot;</span>
</span><span class='line'>  <span class="n">ok_failed</span> <span class="nb">system</span><span class="p">(</span><span class="s2">&quot;s3cmd sync --acl-public --reduced-redundancy --add-header </span><span class="se">\&quot;</span><span class="s2">Cache-Control: max-age=</span><span class="si">#{</span><span class="n">s3_cache_secs</span><span class="si">}</span><span class="se">\&quot;</span><span class="s2">  public/* s3://</span><span class="si">#{</span><span class="n">s3_bucket</span><span class="si">}</span><span class="s2">/&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中S3_cache_secs就是设置cache时间，我把它设置为3600,也就是一个小时。</p>

<p>至此，我的Octopress博客已经在云端了。感觉访问速度比以前快不少。以前我是部署在github pages，服务器放置在美国。现在使用了CloudFront，亚马逊会自动将请求转发到最近的CloudFront edge location。接下来我再研究下 Amazon Route 53,看看有什么好玩的。</p>

<p>我的博客地址: <a href="http://www.huangbowen.net">http://www.huangbowen.net</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[将我的博客迁移到亚马逊云端(1)]]></title>
    <link href="http://www.huangbowen.net/blog/2013/09/30/migrate-octopress-to-aws/"/>
    <updated>2013-09-30T14:09:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/09/30/migrate-octopress-to-aws</id>
    <content type="html"><![CDATA[<p><img src="http://www.huangbowen.net/images/cloudcompute.png" width="400"></p>

<p><a href="http://octopress.org/">Octopress</a>已经被公认为Geeker的博客框架。它所拥有的特性都很符合Geeker的癖好:强大的命令行操作方式、简洁的MarkDown语法、灵活的插件配置、美轮美奂的theme（自带响应式设计哦）、完全可定义的部署&#8230;&#8230;</p>

<p>一般大家都喜欢把博客部署到github pages上，免费速度快，与<a href="http://octopress.org/">Octopress</a>无缝结合。但是自己最近迷上了AWS，就捉摸着将自己的<a href="http://octopress.org/">Octopress</a>博客部署到AWS的S3上，使用CloudFront做CDN，使用Amazon Route 53做域名映射。倒腾了两天，终于搞定了，也学到了很多东西。不敢私藏，拿出来和大家分享。</p>

<!-- more -->


<p>这篇文章主要讲如何将Octopress博客部署到S3上去。下一篇文章会讲如何将CloudFront做CDN,并与现有域名绑定。</p>

<p>在此之前先普及一些概念。</p>

<p>AWS - Amazon Web Service,亚马逊提供的云服务简称。</p>

<p>S3 - Amazon Simple Storage Service, 亚马逊提供的一种存储静态资源（如css、js、html文件，音视频文件）的服务。</p>

<p>CDN - Content Delivery Network, 内容分发网络。</p>

<p>Amazon CloudFront - 亚马逊提供的一种内容分发服务，提高你的网站访问速度。</p>

<p>Amazon Route 53 - 亚马逊提供的一种稳定高效的域名解析系统。</p>

<p>第一步，注册一个亚马逊的账号，注册地址是<a href="https://portal.aws.amazon.com/gp/aws/developer/registration/index.html">https://portal.aws.amazon.com/gp/aws/developer/registration/index.html</a>。注意注册的时候需要提供一张具备外币功能的信用卡。</p>

<p>第二步，登陆到Amazon management console里，单击右上角的名称，选择Security Credentials标签，然后点击左侧标签按照向导创建一个group,一个从属于这个group的user，并为该user生成一个Access key，记录下来Access key Id 及 Secret Access Key。亚马逊的文档还是非常详细的，不懂的可以多看看提示信息和帮助文档。</p>

<p>第三步，在Amazon management console里选择Services -> S3 service，并创建两个bucket。假如你的博客域名为example.com，那么两个bucket的名称分别为example.com,www.example.com。为什么要创建两个那？是因为我们要保证用户无论输入www.example.com还是example.com都可以访问我们的网站。</p>

<p><img src="http://www.huangbowen.net/images/twobucket.png" width="780"></p>

<p>第四步，选择www.example.com这个bucket，点击properties标签，在Static Website Hosting中选择Redirect all requests to another host name，并配置‘Redirect all requests to:’为example.com。这样来自www.example.com bucket的访问都会自动转发给example.com这个bucket。我们只需为example.com这个bucket同步我们的博客文件即可。</p>

<p><img src="http://www.huangbowen.net/images/redirectrequest.png" width="780"></p>

<p>第五步，选择example.com这个bucket，在Static Website Hosting中选择‘Enable Website Hosting’,并配置Index Document，我的是index.html。这个Index Document是默认返回的object名称。比如如果用户直接访问bucket的某个目录，系统会检测该目录下是否存在Index Document中配置的文件名，如果有则会自动返回这个object。</p>

<p><img src="http://www.huangbowen.net/images/staticwebsitehosting.png" width="780"></p>

<p>第六步，选择&#8217;Permissions&#8217;标签，点击’add bucket policy‘按钮，加入如下的policy.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>     <span class="s2">&quot;Version&quot;</span><span class="o">:</span> <span class="s2">&quot;2008-10-17&quot;</span><span class="p">,</span>
</span><span class='line'>     <span class="s2">&quot;Statement&quot;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>               <span class="s2">&quot;Sid&quot;</span><span class="o">:</span> <span class="s2">&quot;AddPerm&quot;</span><span class="p">,</span>
</span><span class='line'>               <span class="s2">&quot;Effect&quot;</span><span class="o">:</span> <span class="s2">&quot;Allow&quot;</span><span class="p">,</span>
</span><span class='line'>               <span class="s2">&quot;Principal&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                    <span class="s2">&quot;AWS&quot;</span><span class="o">:</span> <span class="s2">&quot;*&quot;</span>
</span><span class='line'>               <span class="p">},</span>
</span><span class='line'>               <span class="s2">&quot;Action&quot;</span><span class="o">:</span> <span class="s2">&quot;s3:GetObject&quot;</span><span class="p">,</span>
</span><span class='line'>               <span class="s2">&quot;Resource&quot;</span><span class="o">:</span> <span class="s2">&quot;arn:aws:s3:::example.com/*&quot;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>     <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个policy其实是给所有匿名用户访问该bucket里面文件的权限。</p>

<p><img src="http://www.huangbowen.net/images/bucketpolicy.png" width="780"></p>

<p>第七步，还是在’Permissions‘标签里，点击’Add CORS configuration‘按钮，加入如下的配置：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;CORSConfiguration</span> <span class="na">xmlns=</span><span class="s">&quot;http://s3.amazonaws.com/doc/2006-03-01/&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;CORSRule&gt;</span>
</span><span class='line'>        <span class="nt">&lt;AllowedOrigin&gt;</span>*<span class="nt">&lt;/AllowedOrigin&gt;</span>
</span><span class='line'>        <span class="nt">&lt;AllowedMethod&gt;</span>GET<span class="nt">&lt;/AllowedMethod&gt;</span>
</span><span class='line'>        <span class="nt">&lt;MaxAgeSeconds&gt;</span>3000<span class="nt">&lt;/MaxAgeSeconds&gt;</span>
</span><span class='line'>        <span class="nt">&lt;AllowedHeader&gt;</span>Authorization<span class="nt">&lt;/AllowedHeader&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/CORSRule&gt;</span>
</span><span class='line'><span class="nt">&lt;/CORSConfiguration&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个是用来配置跨域访问的权限，即是否允许其他网站访问这个bucket上的资源。由于Octopress博客集成了很多插件，比如google analiycis, github等，都需要跨域加载JavaScript文件，执行JavaScript文件，所以要加入这些配置。</p>

<p><img src="http://www.huangbowen.net/images/corsconfiguration.png" width="780"></p>

<p>第八步，下载安装<a href="http://s3tools.org/s3cmd">s3cmd</a>。<a href="http://s3tools.org/s3cmd">s3cmd</a>是一款操作AWS S3的命令行工具。通过它可以创建或删除bucket，上传或下载object，我们在部署octopress博客时，主要就是通过它来将博客上传到S3上去。如果是mac系统化可以通过HomeBrew直接安装。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># brew install s3cmd</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果是windows系统可以从<a href="http://s3tools.org/s3cmd">官网</a>下载安装包进行安装。</p>

<p>第九步，配置<a href="http://s3tools.org/s3cmd">s3cmd</a>与你的S3的连接。在命令行下输入<code>s3cmd --configure</code>，按照向导来配置与S3的连接。这时候在前面保存的Access key就派上用场了。所有的配置信息其实都存在当前用户名下的.s3cfg文件中。你也可以随后修改这些信息。运行<code>s3cmd ls</code>来检测是否配置成功。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>s3cmd ls <span class="c">#列出所有的bucket</span>
</span><span class='line'>2013-09-27 05:05  s3://huangbowen.net
</span><span class='line'>2013-09-28 03:24  s3://www.huangbowen.net
</span></code></pre></td></tr></table></div></figure>


<p>第十步，配置Octopress支持向S3的部署。在Octopress目录下找到Rakefile文件，修改或添加下述配置。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>deploy_default = &quot;s3&quot;   #部署task
</span><span class='line'>s3_bucket = &quot;example.com&quot; # bucket名称
</span><span class='line'>
</span><span class='line'>s3_cache_secs = 3600  # header中的cache controll属性，即缓存时间，后面CloudFront要用到
</span></code></pre></td></tr></table></div></figure>


<p>然后添加一个新的task。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">desc</span> <span class="s2">&quot;Deploy website via s3cmd&quot;</span>
</span><span class='line'><span class="n">task</span> <span class="ss">:s3</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;## Deploying website via s3cmd&quot;</span>
</span><span class='line'>  <span class="n">ok_failed</span> <span class="nb">system</span><span class="p">(</span><span class="s2">&quot;s3cmd sync --acl-public --reduced-redundancy --add-header </span><span class="se">\&quot;</span><span class="s2">Cache-Control: max-age=</span><span class="si">#{</span><span class="n">s3_cache_secs</span><span class="si">}</span><span class="se">\&quot;</span><span class="s2">  public/* s3://</span><span class="si">#{</span><span class="n">s3_bucket</span><span class="si">}</span><span class="s2">/&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>OK，大功告成，运行<code>rake generate</code>
及<code>&amp;&amp; rake deploy</code>就可以将生成的静态站点上传到S3中区。然后就可以通过S3的EndPoint来访问新站点了。（EndPoint可以在Amazon management console的S3 dashboard的
‘Static Website Hosting’ 标签中找到）</p>

<p>当然现在还不能使用自己的域名来访问，你可以通过配置CNAME来启用自己的域名。</p>

<p>下篇文章会讲如何将CloudFront作为内容分发，并且如何将自己的域名与CloudFront绑定。</p>

<p>现在我的博客已经在云端了，地址是<a href="http://www.huangbowen.net">http://www.huangbowen.net</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[升级ruby版本那"不堪回首的经历"]]></title>
    <link href="http://www.huangbowen.net/blog/2013/09/23/not-easy-to-install-ruby/"/>
    <updated>2013-09-23T13:53:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/09/23/not-easy-to-install-ruby</id>
    <content type="html"><![CDATA[<p>前段时间在玩Chef-一个IT基础设施自动化工具。由于Chef是由Ruby写的一个gem，那么就需要安装Ruby。当然Ruby我早就安装了，并且使用rvm来管理Ruby及Gem。本来一切看似正常，但是不会预料后面会遇到那么多的坑。</p>

<!-- more -->


<p>Chef本地的repo包中有一个vagrant虚拟机的模板文件，通过它可以setup一个虚拟机，然后使用Chef来操作这个节点。那么就使用vagrant命令来setup这个虚拟机把。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vagrant up --no-color
</span><span class='line'>Vagrant failed to initialize at a very early stage:
</span><span class='line'>
</span><span class='line'>It appears that you<span class="s1">&#39;ve ran a newer version of Vagrant on this</span>
</span><span class='line'><span class="s1">computer. Unfortunately, newer versions of Vagrant change internal</span>
</span><span class='line'><span class="s1">directory layouts that cause older versions to break. This version</span>
</span><span class='line'><span class="s1">of Vagrant cannot properly run.</span>
</span><span class='line'>
</span><span class='line'><span class="s1">If you&#39;</span>d like to start from a clean state, please remove the
</span><span class='line'>Vagrant state directory: /Users/twer/.vagrant.d
</span><span class='line'>
</span><span class='line'>Warning that this will remove all your boxes and potentially corrupt
</span><span class='line'>existing Vagrant environments that were running based on the future
</span><span class='line'>version.
</span></code></pre></td></tr></table></div></figure>


<p>console中说Vagrant版本有问题，那么就按说明删除.vagrant.d文件夹把。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rm -rf ~/.vagrant.d/
</span><span class='line'><span class="nv">$ </span>vagrant up --no-color
</span><span class='line'>/Users/twer/sourcecode/chef-repo/Vagrantfile:8:in <span class="sb">`</span>&lt;top <span class="o">(</span>required<span class="o">)</span>&gt;<span class="s1">&#39;: undefined method `configure&#39;</span> <span class="k">for </span>Vagrant:Module <span class="o">(</span>NoMethodError<span class="o">)</span>
</span><span class='line'>     from /usr/local/rvm/gems/ruby-1.9.3-p194/gems/vagrant-1.0.7/lib/vagrant/config/loader.rb:115:in <span class="sb">`</span>load<span class="s1">&#39;</span>
</span><span class='line'><span class="s1">     from /usr/local/rvm/gems/ruby-1.9.3-p194/gems/vagrant-1.0.7/lib/vagrant/config/loader.rb:115:in `block in procs_for_source&#39;</span>
</span><span class='line'>     from /usr/local/rvm/gems/ruby-1.9.3-p194/gems/vagrant-1.0.7/lib/vagrant/config.rb:41:in <span class="sb">`</span>block in capture_configures<span class="err">&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>窝里个去，又出新问题了。那好吧，看看当前ruby的版本。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rvm list
</span><span class='line'>
</span><span class='line'>rvm rubies
</span><span class='line'>
</span><span class='line'>   ruby-1.9.2-p320 <span class="o">[</span> x86_64 <span class="o">]</span>
</span><span class='line'><span class="o">=</span>* ruby-1.9.3-p194 <span class="o">[</span> x86_64 <span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="c"># =&gt; - current</span>
</span><span class='line'><span class="c"># =* - current &amp;&amp; default</span>
</span><span class='line'><span class="c">#  * - default</span>
</span></code></pre></td></tr></table></div></figure>


<p>试着将Ruby的版本切换到1.9.2-p320再试试。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rvm use ruby-1.9.2-p320
</span><span class='line'>Using /usr/local/rvm/gems/ruby-1.9.2-p320
</span><span class='line'><span class="nv">$ </span>vagrant up
</span><span class='line'>Bringing machine <span class="s1">&#39;default&#39;</span> up with <span class="s1">&#39;virtualbox&#39;</span> provider...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Setting the name of the VM...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Clearing any previously <span class="nb">set </span>forwarded ports...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Creating shared folders metadata...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Clearing any previously <span class="nb">set </span>network interfaces...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Preparing network interfaces based on configuration...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Forwarding ports...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> -- <span class="nv">22</span> <span class="o">=</span>&gt; 2222 <span class="o">(</span>adapter 1<span class="o">)</span>
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Booting VM...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Waiting <span class="k">for </span>VM to boot. This can take a few minutes.
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> VM booted and ready <span class="k">for </span>use!
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Setting hostname...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Mounting shared folders...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> -- /vagrant
</span></code></pre></td></tr></table></div></figure>


<p>搞定。看来问题是当前使用的ruby的版本有问题。</p>

<p>老是使用旧版本也不是个事，把Ruby升级到最新版本看还有这个问题不。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rvm list known
</span><span class='line'><span class="c"># MRI Rubies</span>
</span><span class='line'><span class="o">[</span>ruby-<span class="o">]</span>1.8.6<span class="o">[</span>-p420<span class="o">]</span>
</span><span class='line'><span class="o">[</span>ruby-<span class="o">]</span>1.8.7<span class="o">[</span>-p374<span class="o">]</span>
</span><span class='line'><span class="o">[</span>ruby-<span class="o">]</span>1.9.1<span class="o">[</span>-p431<span class="o">]</span>
</span><span class='line'><span class="o">[</span>ruby-<span class="o">]</span>1.9.2<span class="o">[</span>-p320<span class="o">]</span>
</span><span class='line'><span class="o">[</span>ruby-<span class="o">]</span>1.9.3<span class="o">[</span>-p448<span class="o">]</span>
</span><span class='line'><span class="o">[</span>ruby-<span class="o">]</span>2.0.0-p195
</span><span class='line'><span class="o">[</span>ruby-<span class="o">]</span>2.0.0<span class="o">[</span>-p247<span class="o">]</span>
</span><span class='line'><span class="o">[</span>ruby-<span class="o">]</span>2.0.0-head
</span><span class='line'>ruby-head
</span></code></pre></td></tr></table></div></figure>


<p>看来ruby的1.9.3已经有p448了，那么就升级到p448。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rvm install 1.9.3
</span><span class='line'>Checking requirements <span class="k">for </span>osx.
</span><span class='line'>Installing requirements <span class="k">for </span>osx.
</span><span class='line'>Updating system.
</span><span class='line'>Installing required packages: libksba, openssl..........
</span><span class='line'>Error running <span class="s1">&#39;requirements_osx_brew_libs_install gcc libksba openssl&#39;</span>,
</span><span class='line'>please <span class="nb">read</span> /usr/local/rvm/log/1379843991_ruby-1.9.3-p448/package_install_gcc_libksba_openssl.log
</span><span class='line'>Requirements installation failed with status: 1.
</span></code></pre></td></tr></table></div></figure>


<p>升级失败，那么看看log。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">==</span>&gt; make bootstrap
</span><span class='line'>configure: error: cannot compute suffix of object files: cannot compile
</span><span class='line'>See <span class="sb">`</span>config.log<span class="err">&#39;</span> <span class="k">for </span>more details.
</span><span class='line'>make<span class="o">[</span>2<span class="o">]</span>: *** <span class="o">[</span>configure-stage1-target-libgcc<span class="o">]</span> Error 1
</span><span class='line'>make<span class="o">[</span>1<span class="o">]</span>: *** <span class="o">[</span>stage1-bubble<span class="o">]</span> Error 2
</span><span class='line'>make: *** <span class="o">[</span>bootstrap<span class="o">]</span> Error 2
</span><span class='line'>
</span><span class='line'>READ THIS: https://github.com/mxcl/homebrew/wiki/troubleshooting
</span><span class='line'>
</span><span class='line'>There were package installation errors, make sure to <span class="nb">read </span>the log.
</span><span class='line'>
</span><span class='line'>Try <span class="sb">`</span>brew tap --repair<span class="sb">`</span> and make sure <span class="sb">`</span>brew doctor<span class="sb">`</span> looks reasonable.
</span></code></pre></td></tr></table></div></figure>


<p>通过看log是gcc编译失败，并且通过log可以看出rvm是通过homebrew来安装必备文件的。</p>

<p>通过一番查资料后，找到了解决办法。那就是将Xcode升级到最新版本，然后在Preference里选择Downloads标签，然后安装Command Line Tools。</p>

<p><img src="http://www.huangbowen.net/images/developerTools.png" width="600"></p>

<p>安装完毕后再用Homebrew安装gcc49。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew install <span class="nv">gcc49</span>
</span><span class='line'><span class="o">==</span>&gt; Downloading ftp://gcc.gnu.org/pub/gcc/snapshots/4.9-20130915/gcc-4.9-20130915.tar.bz2
</span><span class='line'>Already downloaded: /Library/Caches/Homebrew/gcc49-4.9-20130915.tar.bz2
</span><span class='line'><span class="o">==</span>&gt; ../configure --build<span class="o">=</span>x86_64-apple-darwin12.5.0 --prefix<span class="o">=</span>/usr/local/Cellar/gcc49/4.9-20130915/gcc
</span><span class='line'><span class="o">==</span>&gt; make <span class="nv">bootstrap</span>
</span><span class='line'><span class="o">==</span>&gt; make <span class="nv">install</span>
</span><span class='line'><span class="o">==</span>&gt; Caveats
</span><span class='line'>This is a snapshot of GCC trunk, which is in active development and
</span><span class='line'>supposed to have bugs and should not be used in production
</span><span class='line'>environment.
</span><span class='line'><span class="o">==</span>&gt; Summary
</span><span class='line'>🍺  /usr/local/Cellar/gcc49/4.9-20130915: 977 files, 93M, built in 21.6 minutes
</span></code></pre></td></tr></table></div></figure>


<p>成功安装GCC。</p>

<p>继续回到安装Ruby的任务上来。由于在安装Ruby前会先安装必备文件，那么干脆直接先安装必备文件的了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rvm requirements
</span><span class='line'>Checking requirements <span class="k">for </span>osx.
</span><span class='line'>Installing requirements <span class="k">for </span>osx.
</span><span class='line'>mkdir: /usr/local/rvm/log/1379829979_ruby-1.9.3-p448: Permission denied
</span><span class='line'>tee: /usr/local/rvm/log/1379829979_ruby-1.9.3-p448/update_system.log: No such file or directory
</span><span class='line'>tee: /usr/local/rvm/log/1379829979_ruby-1.9.3-p448/update_system.log: No such file or directory
</span></code></pre></td></tr></table></div></figure>


<p>我勒个去，貌似是权限问题，那么用sudo解决。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo rvm requirements
</span><span class='line'>
</span><span class='line'>Checking requirements <span class="k">for </span>osx.
</span><span class='line'>Installing requirements <span class="k">for </span>osx.
</span><span class='line'>Updating system.
</span><span class='line'>Installing required packages: libksba, openssl..........
</span><span class='line'>Error running <span class="s1">&#39;requirements_osx_brew_libs_install libksba openssl&#39;</span>,
</span><span class='line'>please <span class="nb">read</span> /usr/local/rvm/log/1379843991_ruby-1.9.3-p448/package_install_libksba_openssl.log
</span><span class='line'>Requirements installation failed with status: 1.
</span></code></pre></td></tr></table></div></figure>


<p>又失败，看看错误日志吧。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>current path: /Users/twer
</span><span class='line'><span class="nb">command</span><span class="o">(</span>3<span class="o">)</span>: requirements_osx_brew_libs_install libksba openssl
</span><span class='line'>Error: No such keg: /usr/local/Cellar/libksba
</span><span class='line'>Error: Cowardly refusing to <span class="sb">`</span>sudo brew install<span class="sb">`</span>
</span><span class='line'>You can use brew with sudo, but only <span class="k">if </span>the brew executable is owned by root.
</span><span class='line'>However, this is both not recommended and completely unsupported so <span class="k">do </span>so at
</span><span class='line'>your own risk.
</span><span class='line'>There were package installation errors, make sure to <span class="nb">read </span>the log.
</span><span class='line'>
</span><span class='line'>Try <span class="sb">`</span>brew tap --repair<span class="sb">`</span> and make sure <span class="sb">`</span>brew doctor<span class="sb">`</span> looks reasonable.
</span></code></pre></td></tr></table></div></figure>


<p>看了日志貌似明白了，使用brew安装libksba由于加了sudo所以出问题了。那么直接在命令行使用sudo试试。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo brew install libksba
</span><span class='line'>Error: Cowardly refusing to <span class="sb">`</span>sudo brew install<span class="sb">`</span>
</span><span class='line'>You can use brew with sudo, but only <span class="k">if </span>the brew executable is owned by root.
</span><span class='line'>However, this is both not recommended and completely unsupported so <span class="k">do </span>so at
</span><span class='line'>your own risk.
</span></code></pre></td></tr></table></div></figure>


<p>窝里个去，不使用sudo吧rvm requirements执行不成功。加上sudo吧rvm requirements调用的brew install又不行。好吧，就按上面说的将brew转换到root模式。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ls -al /usr/local/bin/brew
</span><span class='line'>-rwxr-xr-x  1 twer  admin  703 Mar 14  2013 /usr/local/bin/brew
</span><span class='line'><span class="nv">$ </span>sudo chown root:admin /usr/local/bin/brew
</span><span class='line'>Password:
</span><span class='line'><span class="nv">$ </span>ls -al /usr/local/bin/brew
</span><span class='line'>-rwxr-xr-x  1 root  admin  703 Mar 14  2013 /usr/local/bin/brew
</span></code></pre></td></tr></table></div></figure>


<p>OK。再执行吧。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo rvm requirements
</span><span class='line'>Password:
</span><span class='line'>Checking requirements <span class="k">for </span>osx.
</span><span class='line'>Certificates in <span class="s1">&#39;/usr/local/etc/openssl/cert.pem&#39;</span> already are up to date.
</span><span class='line'>Requirements installation successful.
</span></code></pre></td></tr></table></div></figure>


<p>搞定。把brew再切换到原来的用户和组。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo chown twer:admin /usr/local/bin/brew
</span></code></pre></td></tr></table></div></figure>


<p>绕了一大圈了终于可以安装Ruby了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rvm install 1.9.3
</span><span class='line'>Searching <span class="k">for </span>binary rubies, this might take some time.
</span><span class='line'>No binary rubies available <span class="k">for</span>: osx/10.8/x86_64/ruby-1.9.3-p448.
</span><span class='line'>Continuing with compilation. Please <span class="nb">read</span> <span class="s1">&#39;rvm help mount&#39;</span> to get more information on binary rubies.
</span><span class='line'>Checking requirements <span class="k">for </span>osx.
</span><span class='line'>Certificates in <span class="s1">&#39;/usr/local/etc/openssl/cert.pem&#39;</span> already are up to date.
</span><span class='line'>Requirements installation successful.
</span><span class='line'>Installing Ruby from <span class="nb">source </span>to: /usr/local/rvm/rubies/ruby-1.9.3-p448, this may take a <span class="k">while </span>depending on your cpu<span class="o">(</span>s<span class="o">)</span>...
</span><span class='line'>ruby-1.9.3-p448 - <span class="c">#downloading ruby-1.9.3-p448, this may take a while depending on your connection...</span>
</span><span class='line'>  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
</span><span class='line'>                                 Dload  Upload   Total   Spent    Left  Speed
</span><span class='line'>  0     0    0     0    0     0      0      0 --:--:--  0:00:02 --:--:--     0Warning: Failed to create the file ruby-1.9.3-p448.tar.bz2: Permission denied
</span><span class='line'>  0 9816k    0   745    0     0    320      0  8:43:34  0:00:02  8:43:32  2623
</span><span class='line'>curl: <span class="o">(</span>23<span class="o">)</span> Failed writing body <span class="o">(</span>0 !<span class="o">=</span> 745<span class="o">)</span>
</span><span class='line'>There was an error<span class="o">(</span>23<span class="o">)</span>.
</span><span class='line'>Checking fallback: http://ftp.ruby-lang.org/pub/ruby/1.9/ruby-1.9.3-p448.tar.bz2
</span><span class='line'>  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
</span><span class='line'>                                 Dload  Upload   Total   Spent    Left  Speed
</span><span class='line'>  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0Warning: Failed to create the file ruby-1.9.3-p448.tar.bz2: Permission denied
</span><span class='line'>  0 9816k    0  3329    0     0   4578      0  0:36:35 --:--:--  0:36:35  8853
</span><span class='line'>curl: <span class="o">(</span>23<span class="o">)</span> Failed writing body <span class="o">(</span>0 !<span class="o">=</span> 3329<span class="o">)</span>
</span><span class='line'>There was an error<span class="o">(</span>23<span class="o">)</span>.
</span><span class='line'>Failed download
</span><span class='line'>There has been an error fetching the ruby interpreter. Halting the installation.
</span></code></pre></td></tr></table></div></figure>


<p>又有错。走到这步上了，继续解决吧。经过分析貌似是下载文件有问题，可能又是权限问题。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo rvm install 1.9.3
</span><span class='line'>Password:
</span><span class='line'>Searching <span class="k">for </span>binary rubies, this might take some time.
</span><span class='line'>No binary rubies available <span class="k">for</span>: osx/10.8/x86_64/ruby-1.9.3-p448.
</span><span class='line'>Continuing with compilation. Please <span class="nb">read</span> <span class="s1">&#39;rvm help mount&#39;</span> to get more information on binary rubies.
</span><span class='line'>Checking requirements <span class="k">for </span>osx.
</span><span class='line'>Certificates in <span class="s1">&#39;/usr/local/etc/openssl/cert.pem&#39;</span> already are up to date.
</span><span class='line'>Requirements installation successful.
</span><span class='line'>Installing Ruby from <span class="nb">source </span>to: /usr/local/rvm/rubies/ruby-1.9.3-p448, this may take a <span class="k">while </span>depending on your cpu<span class="o">(</span>s<span class="o">)</span>...
</span><span class='line'>ruby-1.9.3-p448 - <span class="c">#downloading ruby-1.9.3-p448, this may take a while depending on your connection...</span>
</span><span class='line'>  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
</span><span class='line'>                                 Dload  Upload   Total   Spent    Left  Speed
</span><span class='line'>100 9816k  100 9816k    0     0   422k      0  0:00:23  0:00:23 --:--:--  154k
</span><span class='line'>ruby-1.9.3-p448 - <span class="c">#extracting ruby-1.9.3-p448 to /usr/local/rvm/src/ruby-1.9.3-p448</span>
</span><span class='line'>ruby-1.9.3-p448 - <span class="c">#extracted to /usr/local/rvm/src/ruby-1.9.3-p448</span>
</span><span class='line'>ruby-1.9.3-p448 - <span class="c">#configuring...............................................................................................................................................................................................................................................................................................................................................................................................................................................................................</span>
</span><span class='line'>ruby-1.9.3-p448 - <span class="c">#post-configuration</span>
</span><span class='line'>ruby-1.9.3-p448 - <span class="c">#compilingspan>
</span><span class='line'>ruby-1.9.3-p448 - <span class="c">#installing.........................................................................................................</span>
</span><span class='line'>curl: <span class="o">(</span>35<span class="o">)</span> Unknown SSL protocol error in connection to rubygems.org:443
</span><span class='line'>There was an error <span class="k">while </span>trying to resolve rubygems version <span class="k">for</span> <span class="s1">&#39;latest&#39;</span>.
</span><span class='line'>Halting the installation.
</span></code></pre></td></tr></table></div></figure>


<p>前面那个错没了，但是新来了一个错。貌似是ssh到rubygems.org网站有问题，突然想起在rvm requirements时安装了openssl，应该是ssl设置的问题。从网上查了下，貌似要重置macport。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo rm -rf /opt/local
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>sudo rm -rf <span class="nv">$rvm_path</span>/usr
</span><span class='line'><span class="nv">$ </span>sudo rm -rf <span class="nv">$rvm_path</span>/bin/port
</span><span class='line'>sudo: cannot get working directory
</span><span class='line'><span class="nv">$ </span>sudo rvm autolibs homebrew
</span></code></pre></td></tr></table></div></figure>


<p>最后，再重新安装Ruby。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo rvm reinstall 1.9.3
</span><span class='line'>Removing /usr/local/rvm/src/ruby-1.9.3-p448...
</span><span class='line'>Removing /usr/local/rvm/rubies/ruby-1.9.3-p448...
</span><span class='line'>Searching <span class="k">for </span>binary rubies, this might take some time.
</span><span class='line'>No binary rubies available <span class="k">for</span>: osx/10.8/x86_64/ruby-1.9.3-p448.
</span><span class='line'>Continuing with compilation. Please <span class="nb">read</span> <span class="s1">&#39;rvm help mount&#39;</span> to get more information on binary rubies.
</span><span class='line'>Checking requirements <span class="k">for </span>osx_brew.
</span><span class='line'>Certificates in <span class="s1">&#39;/usr/local/etc/openssl/cert.pem&#39;</span> already are up to date.
</span><span class='line'>Requirements installation successful.
</span><span class='line'>Installing Ruby from <span class="nb">source </span>to: /usr/local/rvm/rubies/ruby-1.9.3-p448, this may take a <span class="k">while </span>depending on your cpu<span class="o">(</span>s<span class="o">)</span>...
</span><span class='line'>ruby-1.9.3-p448 - <span class="c">#downloading ruby-1.9.3-p448, this may take a while depending on your connection...</span>
</span><span class='line'>ruby-1.9.3-p448 - <span class="c">#extracting ruby-1.9.3-p448 to /usr/local/rvm/src/ruby-1.9.3-p448</span>
</span><span class='line'>ruby-1.9.3-p448 - <span class="c">#extracted to /usr/local/rvm/src/ruby-1.9.3-p448</span>
</span><span class='line'>ruby-1.9.3-p448 - <span class="c">#configuring...............................................................................................................................................................................................................................................................................................................................................................................................................................................................................</span>
</span><span class='line'>ruby-1.9.3-p448 - <span class="c">#post-configuration</span>
</span><span class='line'>ruby-1.9.3-p448 - <span class="c">#compilingspan>
</span><span class='line'>ruby-1.9.3-p448 - <span class="c">#installing.........................................................................................................</span>
</span><span class='line'>Retrieving rubygems-2.1.4
</span><span class='line'>  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
</span><span class='line'>                                 Dload  Upload   Total   Spent    Left  Speed
</span><span class='line'>100  356k  100  356k    0     0  11672      0  0:00:31  0:00:31 --:--:-- 20611
</span><span class='line'>Extracting rubygems-2.1.4 ...
</span><span class='line'>Removing old Rubygems files...
</span><span class='line'><span class="nv">$LANG</span> was empty, setting up <span class="nv">LANG</span><span class="o">=</span>en_US, <span class="k">if </span>it fails again try setting LANG to something sane and try again.
</span><span class='line'>Installing rubygems-2.1.4 <span class="k">for </span>ruby-1.9.3-p448............................................................................................................................................
</span><span class='line'>Installation of rubygems completed successfully.
</span><span class='line'>Saving wrappers to <span class="s1">&#39;/usr/local/rvm/wrappers/ruby-1.9.3-p448&#39;</span>........
</span><span class='line'>
</span><span class='line'>ruby-1.9.3-p448 - <span class="c">#adjusting #shebangs for (gem irb erb ri rdoc testrb rake).</span>
</span><span class='line'>ruby-1.9.3-p448 - <span class="c">#importing default gemsets, this may take time.......................</span>
</span><span class='line'>Install of ruby-1.9.3-p448 - <span class="c">#complete</span>
</span><span class='line'>Making gemset ruby-1.9.3-p448 pristine....
</span><span class='line'>Making gemset ruby-1.9.3-p448@global pristine....
</span></code></pre></td></tr></table></div></figure>


<p>终于安装上了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rvm list
</span><span class='line'>
</span><span class='line'>rvm rubies
</span><span class='line'>
</span><span class='line'>   ruby-1.9.2-p320 <span class="o">[</span> x86_64 <span class="o">]</span>
</span><span class='line'> * ruby-1.9.3-p194 <span class="o">[</span> x86_64 <span class="o">]</span>
</span><span class='line'><span class="o">=</span>&gt; ruby-1.9.3-p448 <span class="o">[</span> x86_64 <span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="c"># =&gt; - current</span>
</span><span class='line'><span class="c"># =* - current &amp;&amp; default</span>
</span><span class='line'><span class="c">#  * - default</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>rvm use ruby-1.9.3-p448
</span><span class='line'><span class="nv">$ </span>rvm list
</span><span class='line'>
</span><span class='line'>rvm rubies
</span><span class='line'>
</span><span class='line'>   ruby-1.9.2-p320 <span class="o">[</span> x86_64 <span class="o">]</span>
</span><span class='line'> * ruby-1.9.3-p194 <span class="o">[</span> x86_64 <span class="o">]</span>
</span><span class='line'><span class="o">=</span>&gt; ruby-1.9.3-p448 <span class="o">[</span> x86_64 <span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="c"># =&gt; - current</span>
</span><span class='line'><span class="c"># =* - current &amp;&amp; default</span>
</span><span class='line'><span class="c">#  * - default</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>vagrant up
</span><span class='line'>Bringing machine <span class="s1">&#39;default&#39;</span> up with <span class="s1">&#39;virtualbox&#39;</span> provider...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> VirtualBox VM is already running.
</span></code></pre></td></tr></table></div></figure>


<p>终于将Ruby升级到1.9.3-p448了。回顾这整个过程，都是泪啊。本来是想装个虚拟机玩玩，哪想到惹出这么多事情来。不过好歹问题是解决了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[让你的CI跑起来-《持续集成》读书总结]]></title>
    <link href="http://www.huangbowen.net/blog/2013/09/22/continous-integration/"/>
    <updated>2013-09-22T16:49:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/09/22/continous-integration</id>
    <content type="html"><![CDATA[<p>持续集成已经被公认为极具价值的一项工程实践。在初始化一个项目时一个重要的任务就是搭建持续集成服务器，编写构建脚本。在我工作的所有项目中都引入了持续集成机制。它已经像氧气一样成为软件开发过程中的一项工程活动。</p>

<!-- more -->


<p>《持续集成》站在理论的角度阐述了持续集成能够解决什么样的问题，如何解决，需要遵循那些原则等。这本书的副标题是-软件质量改进和风险降低之道（Improving Software Quality and Reducing Risk）。副标题直指持续集成的两个好处：提高软件质量及降低项目风险。</p>

<h2>当前面临的问题</h2>

<p>当前软件开发一直存在两大难题：<strong>一是确定软件的需求，即确定目标。</strong>究竟软件要做成什么样子，在客户的头脑里可能是个三角形，在业务分析员的头脑中可能是个正方形，在开发者的头脑中可能是个圆形，而最终出来的产品或多或少都会给客户带来“惊喜”。</p>

<p><strong>二是确定目前离目标还有好远，即确定剩余的工作量。</strong>这个问题就是项目缺少可见性的问题。当一个程序员告诉他的经理说这个功能只剩下20%的工作量时，具体指什么那？这个20%的比例是怎么得到的？是还要再花20%的时间？&#8230;&#8230;</p>

<p>持续集成虽然解决不了第一个问题，但是关于第二个问题，持续集成向我们介绍了一种增加项目可见性，提高开发效率，降低项目失败风险的有效实践经验。</p>

<p>其实持续集成蕴含有哲学思想：分而治之。即我们通常说的 “滴水穿石，跬步千里”。</p>

<p>传统瀑布方法一般将系统集成放置到开发完成后，这样会导致一系列的问题。</p>

<ul>
<li><p><strong>没有一致的、可部署的软件。</strong>只有等到集成完成之后，我们才能够拿到一个可以使用的软件。</p></li>
<li><p><strong>很晚才发现缺陷。</strong>接口不一致、接口不满足实际需求、开发人员对功能理解有偏差….这些问题在集成测试时统统暴露出来。由于软件根基已经建立，这时候修改容易伤筋动骨。</p></li>
<li><p><strong>低品质的软件。</strong>正如上条所说，缺陷发现的越晚，修改的代价越大。在交付的压力下，各种猴子补丁散落在系统的各个地方，软件的品质自然也很难提高。</p></li>
<li><p><strong>缺少项目可见性。</strong>直到系统集成之前，你都拿不出可用的软件。而且系统集成之时，往往是项目中最棘手、最紧张的时刻，你很难预估集成什么时候能够彻底完成。这样的项目自然谈不上什么可见性了。</p></li>
</ul>


<h2>CI的价值</h2>

<p>引入了CI（Continuos Integration，即持续集成）以后，每个开发人员在提交代码的时候都会自动进行构建，包括代码审查、编译、单元测试、打包、功能测试等。这样保证了开发人员的每次提交都是安全的。打包生成的文件随时可以被测试人员拿去测试。如果需要给客户演示功能，也只需从CI服务器上直接获取指定的打包完成的文件即可。</p>

<p>CI的好处多多。</p>

<ul>
<li><strong>减少风险</strong></li>
</ul>


<p>缺陷的检测和修复变得更快，让寻找和修改bug的工作变简单（只修改系统一小部分，无需看太多代码。由于提交后就可以得到反馈，记忆很新鲜，可以进行差异调试。）同时过早的引入集成，使我们能更好的审视各个模块的接口是否满足要求，减少项目中的假定。</p>

<ul>
<li><strong>减少重复过程</strong></li>
</ul>


<p>由于CI将大量的工作给自动化了，那么可以让人们有时间做更多的需要动脑筋的、更高价值的工作。而且通过对重要过程自动化，克服了项目中某些成员对实现改进的抵制，有利于持续集成的推进。这样就形成了一个良性循环。</p>

<ul>
<li><strong>在任何时间、任何地点生成可部署的软件</strong></li>
</ul>


<p>对于客户来说，可以部署的软件是最实际的资产。而CI则可以轻松做到这一点。</p>

<ul>
<li><strong>增强项目的可见性</strong></li>
</ul>


<p>通过对CI服务器的监控，可以随时了解项目的趋势。CI上的红色或绿色表示了当前项目的健康程度。每一个功能的交付都经历了单元测试或集成测试的考验。</p>

<ul>
<li><strong>对开发团队的软件产品建立起更强大的产品信心</strong></li>
</ul>


<p>CI可以防止破窗综合症，让开发团队一点点积累起对产品的信息。</p>

<h2>CI的特征</h2>

<p><img src="http://www.huangbowen.net/images/CIOverView.png"></p>

<p>从上述图中可以看出CI有四个特征：</p>

<ul>
<li><strong>与版本控制系统的连接</strong></li>
</ul>


<p>当开发者提交代码时，就会触发CI系统的运行。</p>

<ul>
<li><strong>构建脚本</strong></li>
</ul>


<p>构建脚本继承了审查、编译、测试、打包、功能测试等环节，保证了产品的质量与可用性。</p>

<ul>
<li><strong>某种类型的反馈机制</strong></li>
</ul>


<p>集成的结果要能很容易的获取到。可以通过一个web页面来呈现，也可以给团队人员发Email。我们公司有些团队做了一些有意思的插件，比如将build的结果映射到一个灯上，或者当构建失败时播放一段音乐等，随时提醒团队成员对build的关注。</p>

<ul>
<li><strong>集成源代码变更的过程</strong></li>
</ul>


<p>代码变更会触发构建,保证了CI能够经常性的运行。</p>

<h2>CI对团队的要求</h2>

<p>很多团队说我们引入了持续集成，但是收到的效果并不好。比如遇到了CI持续失败、没人关注构建结果、没有及时修复build等。那是因为开发团队没有遵循一定的原则。</p>

<ul>
<li><p><strong>经常提交代码</strong></p></li>
<li><p><strong>不要提交无法构建的代码</strong></p></li>
<li><p><strong>立即修复无法集成的构建</strong></p></li>
<li><p><strong>编写自动化的开发者测试</strong></p></li>
<li><p><strong>必须通过所有测试和审查</strong></p></li>
<li><p><strong>执行私有构建</strong></p></li>
<li><p><strong>避免迁出无法构建的代码</strong></p></li>
</ul>


<hr />

<p>持续集成是一个实践性很强的工程活动，其实发展到现在也遇到了一些新的挑战。比如如何减少构建时间、怎样实现分阶段分布式构建、如何应用在有Branch的代码库中、从持续集成进阶到持续交付等。这本书基本没怎么涉及这些话题，毕竟它出版有些年头了，但这仍不失为一本好书。</p>

<p>如果你理解了持续集成的好处，那么在应用过程中就不会有抵触心理，而且也更容易理解持续交付。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[翻译-page对象]]></title>
    <link href="http://www.huangbowen.net/blog/2013/09/17/page-object/"/>
    <updated>2013-09-17T02:14:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/09/17/page-object</id>
    <content type="html"><![CDATA[<p>译者注：这篇文章翻译自马丁·福勒（Martin Flower，对，没错，就是软件教父）官网的一篇文章，原文出处在文底。如果你正在做WEB自动化测试，那么我强烈推荐你看这篇文章。另外透露Martin Flower将于10月份左右来成都ThoughtWorks办公室，大家有机会一睹他的风采。</p>

<!-- more -->


<p>当你在为web页面编写测试时，你需要操作该web页面上的元素来点击链接或验证显示的内容。然而，如果你在测试代码中直接操作html元素,那么你的代码是及其脆弱的，因为UI会经常变动。一个page对象可以封装一个html页面或部分页面，你可以通过提供的应用程序特定的API来操作页面元素，而不需要在HTML中四处搜寻。</p>

<p><img src="http://www.huangbowen.net/images/page_object.png" width="700"></p>

<p>page对象的一个基本经验法则是凡是人类能做的事page对象通过软件客户端都能够做到。它也应当提供一个易于编程的接口并隐藏窗口中低层的部件。所以访问一个文本框应该通过一个访问方法（accessor method）来实现字符串的获取与返回，复选框应当使用布尔值，按钮应当被表示为行为导向的方法名。page对象应当将在GUI控件上所有查询和操作数据的行为封装为方法。一个好的经验法则是，即使改变具体的控制，page对象的接口也不应当发生变化。</p>

<p>尽管该术语是”页面“对象，并不意味着针对每个页面建立一个这样的对象，比如页面有重要意义的元素可以独立为一个page对象[1]。所以,一个显示多个相册的页面可以有一个相册列表的page对象，该对象包含了几个相册page对象。也有可能会有一个页眉page对象及一个页脚page对象。也就是说，如果某些复杂UI的层次结构只是用来组织UI，那么它就不应当与page对象扯上关系。经验法则的目的在于通过给页面建模，从而对应用程序的使用者变得有意义。</p>

<p>同样，如果你导航到另一个页面，初始page对象应当返回另一个page对象作为新页面[2]。一般而言，page对象的操作应当返回基本类型（字符串，日期）或另一个page对象。</p>

<p>一个有意见分歧的地方是page对象是否应自身包含断言，或者仅仅提供数据给测试脚本来设置断言。在page对象中包含断言的倡导者认为，这有助于避免在测试脚本中出现重复的断言，可以更容易的提供更好的错误信息，并且提供更接近<a href="http://martinfowler.com/bliki/TellDontAsk.html">只做不问</a>风格的API。不在page对象中包含断言的倡导者则认为,包含断言会混合访问页面数据和实现断言逻辑的职责，并且导致page对象过于臃肿。</p>

<p>我赞成在page对象中不包含断言。我认为你可以通过为常用的断言提供断言库的方式来消除重复，这还可以提供更好的诊断。[3]</p>

<p>page对象通常用于测试中，但自身不应包含断言。它们的职责是提供对基本页面状态的访问，实现断言逻辑则是测试客户端的职责。</p>

<p>我所描述的这个模式针对HTML，但同样的模式也同样适用于任何UI技术。我见过这种模式有效的隐藏了Java swing UI的细节，并且我深信它已经被广泛的应用于几乎所有其他的UI框架。</p>

<p>并行问题是另一个page对象可以封装的话题。这可能涉及异步操作中隐藏不作为异步呈现给用户的异步性，也有可能涉及封装UI框架中你不得不担心的UI和工作线程之间分配行为的线程问题。</p>

<p>page对象在测试中的使用非常常见，但是也被用于在应用程序上层提供一个脚本接口。一般而言，我们最好将脚本接口置于UI下层，这样做的复杂底，执行速度快。然而，对于在UI层有太多行为ide应用程序而言，使用page对象可能是在槽糕的工作中最好的选择。（但是尽量将UI操作逻辑移入到page对象中，长期来看会导致更好的脚本以及更健康的UI。）</p>

<p>使用一些<a href="http://martinfowler.com/bliki/DomainSpecificLanguage.html">领域特定语言</a>来书写测试非常普遍，比如Cucumber或一门内部DSL。如果你尽量在page对象层级之上编写测试DSL，那么你可以通过一个解析器将DSL声明转换为调用page对象。</p>

<blockquote><p>如果你在测试方法中使用了WebDriver API，那么你做错了 &#8211; <a href="http://blog.rocketpoweredjetpants.com/">Simon Stewart</a>.</p></blockquote>

<p>对于那些将逻辑从页面元素中剥离的模式（例如 <a href="http://martinfowler.com/eaaDev/PresentationModel.html">Presentation Model</a>, <a href="http://martinfowler.com/eaaDev/SupervisingPresenter.html">Supervising Controller</a>, 及<a href="http://martinfowler.com/eaaDev/PassiveScreen.html">Passive View</a>)而言,在UI层面做测试用处不大，所以也不太需要page对象了。</p>

<p>page对象是封装的一个典型示例。它们从其它组件（如测试）部件中隐藏了UI结构的细节。如果你自问“我如何能从软件测试中隐藏细节？”，当你做开发时在这样的情况采用page对象不失于一个好的设计原则。封装体现了两方面的好处。我已经强调，通过将操作UI的逻辑限制到单个地方有助于你修改逻辑而不影响系统的其他组件。一个间接的好处是使测试端代码更容易理解，因为逻辑是关于测试的意图，而不会被UI细节搞乱。</p>

<h2>延伸阅读</h2>

<p>我刚开始将这种模式命名为<a href="http://martinfowler.com/eaaDev/WindowDriver.html">窗口驱动</a>(Window Driver)。然而自从Selenium web测试框架使用“page object”这个名称，page对象变成了常用的名称。</p>

<p><a href="https://code.google.com/p/selenium/wiki/PageObjects">Selenium的维基</a>强烈推荐使用page对象，并提供了如何使用它们的建议。它也赞成page对象不包含断言。</p>

<h2>致谢</h2>

<p>Perryn Fowler, Pete Hodgson及Simon Stewart为这篇博客的草稿提供了非常有用的意见。同样像往常一样我非常感激ThoughtWorks软件开发列表中的形形色色的参与者提供的建议和修正意见。</p>

<h2>脚注</h2>

<ol>
<li><p>有观点认为”page对象“名称是一个误导。因为它让你认为一个页面只能有一个page对象。类似面板对象可能会更好，但是page对象已经被广泛接受。Page对象再次验证了命名是计算机科学中唯二的<a href="http://martinfowler.com/bliki/TwoHardThings.html">两件困难事</a>之一.</p></li>
<li><p>page对象负责创建其他的page对象（比如导航）是共同的建议。然而，一些从业者更喜欢page对象返回一些通用的浏览器上下文，并且测试来居于测试流程（特别是条件流）中的上下文来控制page对象的创建。
他们的偏好是基于测试脚本知道期望的下个页面是哪个这一事实，所以page对象自身并需要这些逻辑。使用静态类型语言的从业者更偏好这样，因为静态类型语言通常以类型标记来表示页面导航。</p></li>
<li><p>page对象中包含断言也行，尽管大多数人（比如我）更青睐无断言风格。这些断言应该检查页面或应用程序在此时此刻的不变量，而不是测试探索的具体东西。</p></li>
</ol>


<p>本文出处: <a href="http://martinfowler.com/bliki/PageObject.html">http://martinfowler.com/bliki/PageObject.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[云时代基础设置自动化管理利器： Chef]]></title>
    <link href="http://www.huangbowen.net/blog/2013/09/16/introduction-of-chef/"/>
    <updated>2013-09-16T23:29:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/09/16/introduction-of-chef</id>
    <content type="html"><![CDATA[<p><img src="http://www.huangbowen.net/images/migrate_to_cloud.png"></p>

<p>云时代的到来势不可挡。尤其作为程序员，我们每天或多或少的直接或间接的使用者各种云服务。云平台有很多种，如云软件（SaaS， Software as a service）、云平台（PaaS, Platform as a service）、云设备(IaaS, Infrastructure as a service)。云计算由于其价格低廉、按需提高、使用方便等特点，越来越受到人们的欢迎。</p>

<!-- more -->


<h2>Chef是什么？</h2>

<p>Chef的出现正是顺应了云潮流。如果你是一个公司的devops成员，每天配置服务器上的软件和服务，为了给服务器新加一个节点而通宵作业，为了解决服务器上的一个奇诡问题而想破脑袋。
这时候，你应该考虑使用Chef。</p>

<blockquote><p>Chef is built to address the hardest infrastructure challenges on the planet. By modeling IT infrastructure and application delivery as code, Chef provides the power and flexibility to compete in the digital economy.</p></blockquote>

<p>通过这段话，可以总结出Chef的几个特点。</p>

<ol>
<li><p>Chef是为了解决基础设施难题。</p></li>
<li><p>Chef通过建模将基础设施及应用程序交付抽象为代码。</p></li>
<li><p>Chef具有强大的能力及灵活性.</p></li>
<li>由于配置即代码，基础设施即代码，Chef自动具有了版本控制功能，同时添加复制服务器也变得更容易。</li>
</ol>


<p>Chef主要包括三大块：Workstation、Chef Server、Chef Client。（另外还有个chef-solo，是个简化版的Chef-Client，不在本文讨论范围。）</p>

<p>以下是Chef的架构图。</p>

<p><img src="http://www.huangbowen.net/images/chef_overview.png" width="600"></p>

<h2>Workstation</h2>

<p>Workstation可以简单地认为是自己的工作电脑，在上面需要建立一个chef-repo。chef-repo管理了cookbooks、recipes、roles、environment等数据。cookbooks、recipes、roles是Chef对infrastructure做的一层抽象。可以打个这样的比喻，cookbooks可以理解为一个菜系，recipes就是这个菜系里面的一道道菜，比如宫保鸡丁，roles则是一桌丰富的宴席，比如满汉全席。而nodes则是一个个盛菜的桌子。我们可以来一个满汉全席（直接给这个node设置一个role），也可以从菜系里抽一些菜品来做一到家常小菜（给指定node设置一个run list，里面包括指定的recipe）。recipe就是一系列的资源，比如在node上需要安装jvm，那么安装jvm的包就是一个recipe。</p>

<p>在Workstation上主要通过knife这个命令行工具来创建和管理这些资源。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>knife <span class="nb">help </span>list
</span><span class='line'>Available <span class="nb">help </span>topics are:
</span><span class='line'>  bootstrap
</span><span class='line'>  chef-shell
</span><span class='line'>  client
</span><span class='line'>  configure
</span><span class='line'>  cookbook
</span><span class='line'>  cookbook-site
</span><span class='line'>  data-bag
</span><span class='line'>  environment
</span><span class='line'>  <span class="nb">exec</span>
</span><span class='line'><span class="nb">  </span>index
</span><span class='line'>  knife
</span><span class='line'>  node
</span><span class='line'>  role
</span><span class='line'>  search
</span><span class='line'>  shef
</span><span class='line'>  ssh
</span><span class='line'>  status
</span><span class='line'>  tag
</span></code></pre></td></tr></table></div></figure>


<p>knife是由ruby写的一个gem。它的API很有表现力。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># 创建一个recipe</span>
</span><span class='line'><span class="nv">$ </span>knife cookbook create myRecipe
</span><span class='line'>** Creating cookbook myRecipe
</span><span class='line'>** Creating README <span class="k">for </span>cookbook: myRecipe
</span><span class='line'>** Creating CHANGELOG <span class="k">for </span>cookbook: myRecipe
</span><span class='line'>** Creating metadata <span class="k">for </span>cookbook: myRecipe
</span><span class='line'>
</span><span class='line'><span class="c">#从cookbook server上下载recipe</span>
</span><span class='line'><span class="nv">$ </span>knife cookbook site install apache2
</span><span class='line'>
</span><span class='line'><span class="c">#将本地的recipe上传到服务器上</span>
</span><span class='line'><span class="nv">$ </span>knife cookbook upload myRecipe
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c">#查看服务上当前注册的所有的node</span>
</span><span class='line'><span class="nv">$ </span>knife node list
</span><span class='line'>bowenhuang-starter
</span><span class='line'>
</span><span class='line'><span class="c">#查看bowenhuang-starter node的详细信息</span>
</span><span class='line'><span class="nv">$ </span>knife node show bowenhuang-starter
</span><span class='line'>Node Name:   bowenhuang-starter
</span><span class='line'>Environment: _default
</span><span class='line'>FQDN:        bowenhuang-starter
</span><span class='line'>IP:          10.0.2.15
</span><span class='line'>Run List:    recipe<span class="o">[</span>apt<span class="o">]</span>, recipe<span class="o">[</span>apache2<span class="o">]</span>
</span><span class='line'>Roles:
</span><span class='line'>Recipes:     apt, apache2
</span><span class='line'>Platform:    ubuntu 12.04
</span><span class='line'>Tags:
</span><span class='line'>
</span><span class='line'><span class="c">#将指定IP或主机名的机器注册到服务器上</span>
</span><span class='line'><span class="nv">$ </span>knife bootstrap IP <span class="se">\</span>
</span><span class='line'>  --ssh-user USERNAME <span class="se">\</span>
</span><span class='line'>  --ssh-password PASSWORD <span class="se">\</span>
</span><span class='line'>  --ssh-port PORT <span class="se">\</span>
</span><span class='line'>  --sudo
</span></code></pre></td></tr></table></div></figure>


<p>在cehf-repo下需要建立一个隐藏的文件夹.chef，该文件夹中包含三个重要的文件：USER.pem, ORGANIZATION-validator.pem, knife.rb。USER.pem是一个私钥，用于workstation与chef server通讯。ORGANIZATION-validator.pem是另一个私钥，用于bootstrap一个新node时该node第一次与服务器通讯。knife.rb则是knife的配置的文件，比如客户端key文件路径，chef server的api地址，cookbook的路径等。</p>

<h2>Chef Server</h2>

<p>Chef Server用来存储workstaton上传的各种资源，包括cookbooks，roles，environments，nodes等。我们可以使用公有的Server，如opscode,也可以通过开源软件架设自己的私服。Chef server提供了一系列的api，用于与workstation和nodes传输资源和数据。opscode上的server需要注册，注册以后需要建立一个organisation, 并从server上下载生成的USER.pem私钥和ORGANISATION-validitor.pem私钥。Chef server也提供了一个search的API，可以通过workstation根据attributes检索注册在服务器上的node。</p>

<p>Chef Server本来是使用ruby写的，后来为了保持高并发和稳定性，能够同时服务一定数量级的node，Chef Server内核采用了支持高并发的Erlang程序，而前端则仍然使用ruby on rails。</p>

<h2>Nodes</h2>

<p>在bootstrap一个node时候，首先需要在该node上安装chef-client包，并将workstation上的ORGANIZATION-validator.pem文件拷贝到node节点上，供node与chef server建立连接。chef server通过验证后会发给node一个新的私钥，以后node就可以通过这个新的私钥与chef server交互。在node的<code>etc\chef</code>的目录下会生成四个文件：client.pem, client.rb, first-boot.json, validation.pem。vlidation.pem就是从workstation拷贝过来的秘钥，client.pem则是服务器为该node新生成的秘钥，client.rb则定义了服务器的API地址，秘钥文件路径等信息，first-boot.json则存放了bootstrap该node节点时的配置信息，如run list信息，role信息等。</p>

<p>chef-client是一个可定期的后台运行的命令行程序。chef-client会收集当前node的各种信息，如操作信息型号版本等，和chef server建立连接，获取chef server上对该节点的配置信息，并安装指定的recipe，运行指定的服务。</p>

<hr />

<p>通过Chef，可以一键更新所有的服务器，在指定的服务器上安装指定的软件。如果有新同事入职，可以很轻松的setup一台开发机；如果服务器节点需要扩展，也只需要几个命令就可搞定。运筹帷幄，一切皆在掌控之中。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gradle的属性设置大全]]></title>
    <link href="http://www.huangbowen.net/blog/2013/09/12/setup-properties-in-gradle/"/>
    <updated>2013-09-12T22:41:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/09/12/setup-properties-in-gradle</id>
    <content type="html"><![CDATA[<p>Gradle作为一款项目构建工具，由于其强大、灵活、快速、完全兼容Ant等特性，越来越受到人们欢迎。Gradle的灵活有时候也会引起人们的困惑。比如在Gradle中设置变量和属性就有N种办法。由于Gradle的理念是Convention over configruation(约定优于配置),所以如果了解了这些约定，那么在使用Gradle的属性配置时一定会如鱼得水。</p>

<!-- more -->


<hr />

<p><strong>在项目根目录下建立名为gradle.properties文件，在该文件中定义需要的属性。这些属性在Gradle构建Gradle领域对象（即project对象实例）时会被自动加到project对象实例中作为其属性被直接调用。</strong></p>

<figure class='code'><figcaption><span>gradle.properties</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>guestName= Bowen
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>build.gradle</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">task</span> <span class="n">hello</span> <span class="o">&lt;&lt;</span> <span class="o">{</span>
</span><span class='line'>     <span class="n">println</span> <span class="n">$guestName</span>
</span><span class='line'>     <span class="n">println</span> <span class="s2">&quot;hello, $guestName&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>gradle hello -q
</span><span class='line'>Bowen
</span><span class='line'>hello, Bowen
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>gradle properties | grep guestName
</span><span class='line'>guestName: Bowen
</span></code></pre></td></tr></table></div></figure>


<hr />

<p><strong>定义在build.gradle中的ext块中。ext准确的说是Gradle领域对象的一个属性，我们可以将自定义的属性添加到ext对象上，Build.gradle中的其它代码片段可以使用。</strong></p>

<figure class='code'><figcaption><span>build.gradle</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">ext</span> <span class="o">{</span>
</span><span class='line'>     <span class="n">guestName</span><span class="o">=</span><span class="s1">&#39;Bowen&#39;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">task</span> <span class="n">hello</span> <span class="o">&lt;&lt;</span> <span class="o">{</span>
</span><span class='line'>     <span class="n">println</span> <span class="n">guestName</span>
</span><span class='line'>     <span class="n">println</span> <span class="s2">&quot;hello, $guestName&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>gradle hello -q
</span><span class='line'>Bowen
</span><span class='line'>hello, Bowen
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>gradle properties | grep guestName
</span><span class='line'>guestName: Bowen
</span><span class='line'><span class="nv">$ </span>gradle properties | grep ext
</span><span class='line'>ext: org.gradle.api.internal.plugins.DefaultExtraPropertiesExtension@10ef5fa0
</span></code></pre></td></tr></table></div></figure>


<p>从上述可以看到ext对象其实是DefaultExtraPropertiesExtension对象的一个实例。</p>

<hr />

<p><strong>在命令行中通过<code>-D</code>或者<code>-P</code>给Gradle实时创建属性。</strong>
<code>-D</code>属性会被传送给启动Gradle的jvm，作为一个系统属性被jvm使用。</p>

<figure class='code'><figcaption><span>build.gradle</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">task</span> <span class="n">hello</span> <span class="o">&lt;&lt;</span> <span class="o">{</span>
</span><span class='line'>     <span class="n">println</span> <span class="n">System</span><span class="o">.</span><span class="na">properties</span><span class="o">[</span><span class="s1">&#39;guestName&#39;</span><span class="o">]</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>gradle hello -DguestName<span class="o">=</span><span class="s1">&#39;Bowen&#39;</span> -q
</span><span class='line'>Bowen
</span></code></pre></td></tr></table></div></figure>


<p><code>-P</code>属性则会被直接加载到Gradle领域对象上。</p>

<figure class='code'><figcaption><span>build.gradle</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">task</span> <span class="n">hello</span> <span class="o">&lt;&lt;</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">println</span> <span class="s2">&quot;hello, $guestName&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>gradle hello -PguestName<span class="o">=</span><span class="s1">&#39;Bowen&#39;</span> -q
</span><span class='line'>hello, Bowen
</span></code></pre></td></tr></table></div></figure>


<hr />

<p><strong>在Gradle配置文件中创建系统属性。刚讲过在gradle.properties文件可以创建属性，同时我们也可以创建系统属性。如果有<code>systemProp.</code>前缀的属性会被识别为系统属性。</strong></p>

<figure class='code'><figcaption><span>gradle.properties</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>systemProp.guestName = &#39;Bowen&#39;
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>build.gradle</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">task</span> <span class="n">hello</span> <span class="o">&lt;&lt;</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">println</span> <span class="s2">&quot;hello, &quot;</span> <span class="o">+</span> <span class="n">System</span><span class="o">.</span><span class="na">properties</span><span class="o">[</span><span class="s1">&#39;guestName&#39;</span><span class="o">]</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>gradle hello -q
</span><span class='line'>hello, Bowen
</span></code></pre></td></tr></table></div></figure>


<hr />

<p><strong>将特殊前缀的系统属性或环境变量自动加入到Gradle领域对象中。</strong></p>

<p>如果有环境变量以<code>ORG_GRADLE_PROJECT.</code>为前缀，那么该变量会被自动添加到Gradle领域对象中。同样，如果有系统属性以<code>org.gradle.project.</code>为前缀，那么也会被自动加入到Gradl领域对象中。这一特性的目的之一是为了隐藏一些敏感的信息。比如在执行Gradle脚本时需要传入密码信息，如果以<code>-P</code>的方式传送会被别人看到。而把该属性保存为环境变量，只有系统管理员才有权访问和修改。在运行Gralde的时候该环境变量会被自动加入到Gradle对象中被使用，隔离了明暗数据，又不行影响其他用户使用。（其他用户可以通过<code>-P</code>方式是设置该属性）。</p>

<figure class='code'><figcaption><span>build.gradle</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">task</span> <span class="n">hello</span> <span class="o">&lt;&lt;</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">println</span> <span class="s2">&quot;hello, &quot;</span> <span class="o">+</span> <span class="n">guestName</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>gradle hello -Dorg.gradle.project.guestName<span class="o">=</span>Bowen -q
</span><span class='line'>hello, Bowen
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span><span class="nb">export </span><span class="nv">ORG_GRADLE_PROJECT_guestName</span><span class="o">=</span>Bob
</span><span class='line'><span class="nv">$ </span>gradle hello -q
</span><span class='line'>hello, Bob
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
