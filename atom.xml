<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[黄博文的地盘]]></title>
  <link href="http://www.huangbowen.net/atom.xml" rel="self"/>
  <link href="http://www.huangbowen.net/"/>
  <updated>2013-10-17T14:08:22+08:00</updated>
  <id>http://www.huangbowen.net/</id>
  <author>
    <name><![CDATA[黄博文]]></name>
    <email><![CDATA[huangbowen521@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[XML相关知识全接触（一）]]></title>
    <link href="http://www.huangbowen.net/blog/2013/10/14/xml-knowledge/"/>
    <updated>2013-10-14T00:32:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/10/14/xml-knowledge</id>
    <content type="html"><![CDATA[<p><img src="http://www.huangbowen.net/images/xml.png" width="400"></p>

<p>XML文件格式已经出来很久了。他的风头如今在JSON、YAML等新兴文件格式的冲击下已经显的不那么强劲。但是XML仍然是当今世界上使用最广泛的文件格式。围绕着它也有一大堆的概念和知识点。所以我们还是很有必要全面了解下。</p>

<!-- more -->


<h2>XML</h2>

<p>XML全称为eXtensible Markup Language，即可扩展标记语言。其被设计用来传输及存储数据。</p>

<p>XML与HTML看似比较相似，但是其设计目的并不相同。</p>

<ul>
<li><p>XML用来传输及存储数据，主要关注数据是什么。</p></li>
<li><p>HTML用来显示数据，主要关注数据看起来是什么样。</p></li>
<li><p>HTML的tag是预定义的，比如说table标签，浏览器会知道它是什么含义。</p></li>
<li><p>XML的tag不是预定义的，需要自己设计tag并描述tag的含义。XML中的tag如果不借助XSLT文件，浏览器只会以简单的文本方式展示。</p></li>
</ul>


<p>很多人认为HTML是XML文件的一个子集。其实这种观点是错误的，因为HTML的实现并未严格遵循XML的语法。比如XML要求每个tag必须要有闭合标记，XML的tag是大小写敏感的，XML给tag添加的属性必须要使用引号包起来…这些语法要求HTML都不满足。</p>

<p>请看XML的一个示例。</p>

<figure class='code'><figcaption><span>book.xml </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;book&gt;</span>
</span><span class='line'>    <span class="nt">&lt;name&gt;</span>Effective JavaScript<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;category&gt;</span>Program Language<span class="nt">&lt;/category&gt;</span>
</span><span class='line'>    <span class="nt">&lt;author&gt;</span>Bowen<span class="nt">&lt;/author&gt;</span>
</span><span class='line'>    <span class="nt">&lt;description&gt;</span>This book is about JavaScript Language.<span class="nt">&lt;/description&gt;</span>
</span><span class='line'><span class="nt">&lt;/book&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这是一个简单的XML文件。第一行说明了xml的版本及编码类型。接下来是一个根节点book，根节点可以包含很多子节点。</p>

<h3>XML命名空间</h3>

<p>由于XML的tag并不像HTML那样是预定义的，那么很有可能两个XML中的同名tag具有不同的含义。那么在合并XML等操作时势必会造成冲突。解决的办法就是给XML的tag加上命名空间（即namespace），每一个namespace都可以指定一个前缀。这些前缀会区分同名tag。</p>

<p>假设这里有另一个xml文件。</p>

<figure class='code'><figcaption><span>anotherBook.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;book&gt;</span>
</span><span class='line'>    <span class="nt">&lt;name&gt;</span>Rework<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;page&gt;</span>120<span class="nt">&lt;/page&gt;</span>
</span><span class='line'>    <span class="nt">&lt;publishDate&gt;</span>2013-10-08<span class="nt">&lt;/publishDate&gt;</span>
</span><span class='line'><span class="nt">&lt;/book&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果我们要合并这两个xml节点到同一个xml文件中时，不加namespace会发生冲突，因为含有同名的tag，其子节点的结构并不相同。接下来我们给其加上命名空间并合并。</p>

<figure class='code'><figcaption><span>combined.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;root&gt;</span>
</span><span class='line'><span class="nt">&lt;ns1:book</span> <span class="na">xmlns:ns1=</span><span class="s">&quot;http://www.huangbowen.net/ns1&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ns1:name&gt;</span>Effective JavaScript<span class="nt">&lt;/ns1:name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ns1:category&gt;</span>Program Language<span class="nt">&lt;/ns1:category&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ns1:author&gt;</span>Bowen<span class="nt">&lt;/ns1:author&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ns1:description&gt;</span>This book is about JavaScript Language.<span class="nt">&lt;/ns1:description&gt;</span>
</span><span class='line'><span class="nt">&lt;/ns1:book&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;ns2:book</span> <span class="na">xmlns:ns2=</span><span class="s">&quot;http://www.huangbowen.net/ns2&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>     <span class="nt">&lt;ns2:name&gt;</span>Rework<span class="nt">&lt;/ns2:name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ns2:page&gt;</span>120<span class="nt">&lt;/ns2:page&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ns2:publishDate&gt;</span>2013-10-08<span class="nt">&lt;/ns2:publishDate&gt;</span>
</span><span class='line'>     <span class="nt">&lt;/ns2:book&gt;</span>
</span><span class='line'><span class="nt">&lt;/root&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>xmlns是xml namespace的缩写。引号后面是tag的前缀。这个前缀可以省略，比如<code>xmlns="http://www.huangbowen.net/ns1"</code>,相当于没有前缀的tag自动应用默认的命名空间。需要注意的是命名空间的URI只是给命名空间提供一个唯一的标识，xml解析器并不会访问这个URI来获取任何信息。很多公司习惯将这个URI一个web页面，该web页面描述了该namespace的相关信息。</p>

<h2>XSD</h2>

<p>XSD全称为XML Schema Definition,即XML结构定义语言。每个XSD文件是对一个XML文件的结构定义。
由于XML中的tag并不是预定义的，那么每人都可以创建自己的XML结构文档。如果你想让别人按照你的标准创建一份xml文件，你可以使用XSD文件来描述你的标准。</p>

<p>这是针对本文示例book.xml文件的一个XSD文件。</p>

<figure class='code'><figcaption><span>book.xsd</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;xs:schema</span> <span class="na">attributeFormDefault=</span><span class="s">&quot;unqualified&quot;</span> <span class="na">elementFormDefault=</span><span class="s">&quot;qualified&quot;</span>
</span><span class='line'>           <span class="na">xmlns:xs=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;xs:element</span> <span class="na">name=</span><span class="s">&quot;book&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;xs:complexType&gt;</span>
</span><span class='line'>            <span class="nt">&lt;xs:sequence&gt;</span>
</span><span class='line'>                <span class="nt">&lt;xs:element</span> <span class="na">type=</span><span class="s">&quot;xs:string&quot;</span> <span class="na">name=</span><span class="s">&quot;name&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>                <span class="nt">&lt;xs:element</span> <span class="na">type=</span><span class="s">&quot;xs:string&quot;</span> <span class="na">name=</span><span class="s">&quot;category&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>                <span class="nt">&lt;xs:element</span> <span class="na">type=</span><span class="s">&quot;xs:string&quot;</span> <span class="na">name=</span><span class="s">&quot;author&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>                <span class="nt">&lt;xs:element</span> <span class="na">type=</span><span class="s">&quot;xs:string&quot;</span> <span class="na">name=</span><span class="s">&quot;description&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/xs:sequence&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/xs:complexType&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/xs:element&gt;</span>
</span><span class='line'><span class="nt">&lt;/xs:schema&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>从上可以看出其实XSD文件本身就是一个XML文件，它遵循XML语法，比如每个tag都需要有结束标记，必须有且只有一个根节点等。</p>

<p>在一个XML文件中可以添加其Schema的引用信息。</p>

<figure class='code'><figcaption><span>book.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;ns1:book</span> <span class="na">xmlns:ns1=</span><span class="s">&quot;http://www.huangbowen.net/ns1&quot;</span> <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="na">xsi:targetLocation=</span><span class="s">&quot;http://www.huangbowen.net/book.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ns1:name&gt;</span>Effective JavaScript<span class="nt">&lt;/ns1:name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ns1:category&gt;</span>Program Language<span class="nt">&lt;/ns1:category&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ns1:author&gt;</span>Bowen<span class="nt">&lt;/ns1:author&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ns1:description&gt;</span>This book is about JavaScript Language.<span class="nt">&lt;/ns1:description&gt;</span>
</span><span class='line'><span class="nt">&lt;/ns1:book&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在IDE中，如果你的XML节点没有遵守你引用的Schema中的定义，就会给出错误提醒。</p>

<h2>XSLT</h2>

<p>XSLT全称为EXtensible Stylesheet Language Transformations。 XSLT用于将XML文档转换为XHTML或其他XML文档。</p>

<p>在讲XSLT之前我们先讲讲XSL。XSL全称为Extensible Stylesheet Language,即可扩展样式表语言。众所周知，CSS是HTML文件的样式表，而XSL则是XML文件的样式表。XSL文件描述了XML文件应该如何被显示。</p>

<p>其实XSL不仅仅是样式表语言，它主要包含3部分:</p>

<ul>
<li><p>XSLT - 用来转换XML文档</p></li>
<li><p>XPath - 查询和操作XML文档中的节点</p></li>
<li><p>XSL-FO - 格式化XML文档</p></li>
</ul>


<p>XSLT使用XPath来查找XML中的元素。</p>

<p>XSLT通过一个xml文件来定义源xml文件与目标文件之间的转换关系。该xml文件必须以<code>&lt;xsl:stylesheet&gt;</code>或<code>&lt;xsl:transform&gt;</code>作为根节点。</p>

<p>对于本文的示例book.xml,如果我们使用浏览器打开显示效果如下。</p>

<p><img src="http://www.huangbowen.net/images/bookxml.png" width="600"></p>

<p>现在我们创建一个XSLT文件将其转换为一个HTML文件。</p>

<figure class='code'><figcaption><span>book.xsl</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;xsl:stylesheet</span> <span class="na">version=</span><span class="s">&quot;1.0&quot;</span>
</span><span class='line'><span class="na">xmlns:xsl=</span><span class="s">&quot;http://www.w3.org/1999/XSL/Transform&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;xsl:template</span> <span class="na">match=</span><span class="s">&quot;/&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;html&gt;</span>
</span><span class='line'>  <span class="nt">&lt;body&gt;</span>
</span><span class='line'>  <span class="nt">&lt;h2&gt;</span>My Book<span class="nt">&lt;/h2&gt;</span>
</span><span class='line'>  <span class="nt">&lt;table</span> <span class="na">border=</span><span class="s">&quot;1&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>      <span class="nt">&lt;td&gt;</span>name<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>      <span class="nt">&lt;td&gt;&lt;xsl:value</span><span class="na">-of</span> <span class="na">select=</span><span class="s">&quot;book/name&quot;</span> <span class="nt">/&gt;&lt;/td&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>    <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>      <span class="nt">&lt;td&gt;</span>category<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>      <span class="nt">&lt;td&gt;&lt;xsl:value</span><span class="na">-of</span> <span class="na">select=</span><span class="s">&quot;book/category&quot;</span> <span class="nt">/&gt;&lt;/td&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>    <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>      <span class="nt">&lt;td&gt;</span>author<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>      <span class="nt">&lt;td&gt;&lt;xsl:value</span><span class="na">-of</span> <span class="na">select=</span><span class="s">&quot;book/author&quot;</span> <span class="nt">/&gt;&lt;/td&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>    <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>      <span class="nt">&lt;td&gt;</span>description<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>      <span class="nt">&lt;td&gt;&lt;xsl:value</span><span class="na">-of</span> <span class="na">select=</span><span class="s">&quot;book/description&quot;</span> <span class="nt">/&gt;&lt;/td&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/table&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/html&gt;</span>
</span><span class='line'><span class="nt">&lt;/xsl:template&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/xsl:stylesheet&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后我们在book.xml文件中加入对这个XSLT文件的引用。</p>

<figure class='code'><figcaption><span>book.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span>
</span><span class='line'><span class="cp">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;book.xsl&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;book&gt;</span>
</span><span class='line'>    <span class="nt">&lt;name&gt;</span>Effective JavaScript<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;category&gt;</span>Program Language<span class="nt">&lt;/category&gt;</span>
</span><span class='line'>    <span class="nt">&lt;author&gt;</span>Bowen<span class="nt">&lt;/author&gt;</span>
</span><span class='line'>    <span class="nt">&lt;description&gt;</span>This book is about JavaScript Language.<span class="nt">&lt;/description&gt;</span>
</span><span class='line'><span class="nt">&lt;/book&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>接下来我们再用浏览器打开book.xml文件，发现显示变成了这样。是不是很神奇？</p>

<p><img src="http://www.huangbowen.net/images/bookxmlwithxslt.png" width="600"></p>

<p>注意如果你使用chrome打开该book.xml文件，请设置chrome的<code>--allow-file-access-from-files</code>属性，这样chrome才允许加载本地的xsl文件。解决方案看这里：<a href="http://stackoverflow.com/questions/3828898/can-chrome-be-made-to-perform-an-xsl-transform-on-a-local-file">http://stackoverflow.com/questions/3828898/can-chrome-be-made-to-perform-an-xsl-transform-on-a-local-file</a></p>

<p>OK，这篇文章讲的够多了，下篇接着讲XPath，XML to Object以及XML文档格式与近来风头强劲的JSON、YAML格式的比较。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hello Vagrant]]></title>
    <link href="http://www.huangbowen.net/blog/2013/10/02/hello-vagrant/"/>
    <updated>2013-10-02T23:50:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/10/02/hello-vagrant</id>
    <content type="html"><![CDATA[<p>回想以前，想要安装个虚拟机是多么的麻烦。先要费尽心机找到想要的操作系统镜像文件，然后安装虚拟化软件，按照其提供的GUI界面操作一步步创建,整个过程费时费力。但是，自从使用了Vagrant以后，咱腰不酸了，腿不痛了，一口气起5个虚拟机还不费劲。</p>

<!-- more -->


<h2>Vagrant是什么？</h2>

<p>这是<a href="http://www.vagrantup.com/">官网</a>上Vagrant的介绍。</p>

<blockquote><p>Create and Configure lightweight, reproducible, and portable development environments.</p></blockquote>

<p>即用来创建和配置轻量级、可重现的、便携式的开发环境。</p>

<p>使用Vagrant可以将创建虚拟机的整个过程自动化起来,并具有高度的重用性。假如你是个开发者，你可以很容易为每个团队成员创建一模一样的开发环境，从根本上防止‘在我的机器上可以工作’之类的bug。假如你是个测试人员，可以一键创建多个一模一样的测试环境并行跑测试，并且跑完测试后还可以一键销毁这些测试环境，达到真正的按需创建。如果你是devops成员，需要和AWS、Chef之类的工具打交道，那么Vagrant是个很好的结合点。你可以通过Vagrant在AWS上直接创建虚拟机，并且自动运行Chef的脚本配置你的新虚拟机。</p>

<h2>几个概念</h2>

<p>正式介绍Vagrant功能之前先了解一下Vagrant使用的一些概念。</p>

<ul>
<li><p>Provider - 供应商，在这里指Vagrant调用的虚拟化工具。Vagrant本身并没有能力创建虚拟机，它是调用一些虚拟化工具来创建，如VirtualBox,VMWare，甚至AWS。</p></li>
<li><p>Box - 可被Vagrant直接使用的虚拟机镜像文件。针对不同的Provider，Box文件的格式是不一样的。</p></li>
<li><p>Vagrantfile - Vagrant根据Vagrantfile中的配置来创建虚拟机。在Vagrantfile文件中你需要指明使用哪个Box,需要预安装哪些软件，虚拟机的网络配置等。</p></li>
</ul>


<h2>Vagrant的安装</h2>

<p>安装Vagrant非常简单，可以在<a href="http://downloads.vagrantup.com/">Downloads</a>页面选择最新的版本安装。Vagrant支持Windows、Linux、Mac等平台。</p>

<h2>Box管理</h2>

<p>使用Vagrant之前先要给Vagrant添加Box，也就是可供Vagrant使用的虚拟机镜像文件。Vagrant官网本身维护了一些镜像文件，我们可以直接使用。<a href="http://www.vagrantbox.es/">http://www.vagrantbox.es/</a>上面有更多的box可以供我们使用。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#添加名为precise32的box文件</span>
</span><span class='line'> <span class="nv">$ </span>vagrant init precise32 http://files.vagrantup.com/precise32.box
</span><span class='line'><span class="nv">$ </span>vagrant box list
</span><span class='line'>precise32 <span class="o">(</span>virtualbox<span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>vagrant box remove precise64 virtualbox
</span></code></pre></td></tr></table></div></figure>


<p>可以看到Box与Provider是相关的，每个Box都必须指定Provier，只有使用对应的Provier才能正确使用Box。</p>

<h2>创建并运行虚拟机</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vagrant box list
</span><span class='line'>precise32 <span class="o">(</span>virtualbox<span class="o">)</span>
</span><span class='line'><span class="nv">$ </span>vagrant init precise32
</span><span class='line'>A <span class="sb">`</span>Vagrantfile<span class="sb">`</span> has been placed in this directory. You are now
</span><span class='line'>ready to <span class="sb">`</span>vagrant up<span class="sb">`</span> your first virtual environment! Please <span class="nb">read</span>
</span><span class='line'>the comments in the Vagrantfile as well as documentation on
</span><span class='line'><span class="sb">`</span>vagrantup.com<span class="sb">`</span> <span class="k">for </span>more information on using Vagrant.
</span><span class='line'><span class="nv">$ </span>vagrant up
</span><span class='line'>Bringing machine <span class="s1">&#39;default&#39;</span> up with <span class="s1">&#39;virtualbox&#39;</span> provider...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Importing base box <span class="s1">&#39;precise32&#39;</span>...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Matching MAC address <span class="k">for </span>NAT networking...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Setting the name of the VM...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Clearing any previously <span class="nb">set </span>forwarded ports...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Creating shared folders metadata...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Clearing any previously <span class="nb">set </span>network interfaces...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Preparing network interfaces based on configuration...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Forwarding ports...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> -- <span class="nv">22</span> <span class="o">=</span>&gt; 2222 <span class="o">(</span>adapter 1<span class="o">)</span>
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Booting VM...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Waiting <span class="k">for </span>machine to boot. This may take a few minutes...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Machine booted and ready!
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Mounting shared folders...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> -- /vagrant
</span></code></pre></td></tr></table></div></figure>


<p><code>vagrant init precise32</code>会在当前目录下生成一个Vagrantfie文件，其使用precise32作为box。<code>vagrant up</code>则是使用virtual box这个provider来初始化并启动precise32这个虚拟机。</p>

<p>我们可以详细的看看Vagrantfile这个文件。</p>

<figure class='code'><figcaption><span>Vagrantfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># -*- mode: ruby -*-</span>
</span><span class='line'><span class="c1"># vi: set ft=ruby :</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Vagrantfile API及语法版本</span>
</span><span class='line'><span class="no">VAGRANTFILE_API_VERSION</span> <span class="o">=</span> <span class="s2">&quot;2&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="no">Vagrant</span><span class="o">.</span><span class="n">configure</span><span class="p">(</span><span class="no">VAGRANTFILE_API_VERSION</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># 使用的box</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">box</span> <span class="o">=</span> <span class="s2">&quot;precise32&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Create a forwarded port mapping which allows access to a specific port</span>
</span><span class='line'>  <span class="c1"># within the machine from a port on the host machine. In the example below,</span>
</span><span class='line'>  <span class="c1"># accessing &quot;localhost:8080&quot; will access port 80 on the guest machine.</span>
</span><span class='line'>  <span class="c1"># config.vm.network :forwarded_port, guest: 80, host: 8080</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Create a private network, which allows host-only access to the machine</span>
</span><span class='line'>  <span class="c1"># using a specific IP.</span>
</span><span class='line'>  <span class="c1"># config.vm.network :private_network, ip: &quot;192.168.33.10&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Create a public network, which generally matched to bridged network.</span>
</span><span class='line'>  <span class="c1"># Bridged networks make the machine appear as another physical device on</span>
</span><span class='line'>  <span class="c1"># your network.</span>
</span><span class='line'>  <span class="c1"># config.vm.network :public_network</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># If true, then any SSH connections made will enable agent forwarding.</span>
</span><span class='line'>  <span class="c1"># Default value: false</span>
</span><span class='line'>  <span class="c1"># config.ssh.forward_agent = true</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Share an additional folder to the guest VM. The first argument is</span>
</span><span class='line'>  <span class="c1"># the path on the host to the actual folder. The second argument is</span>
</span><span class='line'>  <span class="c1"># the path on the guest to mount the folder. And the optional third</span>
</span><span class='line'>  <span class="c1"># argument is a set of non-required options.</span>
</span><span class='line'>  <span class="c1"># config.vm.synced_folder &quot;../data&quot;, &quot;/vagrant_data&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Provider-specific configuration so you can fine-tune various</span>
</span><span class='line'>  <span class="c1"># backing providers for Vagrant. These expose provider-specific options.</span>
</span><span class='line'>  <span class="c1"># Example for VirtualBox:</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="c1"># config.vm.provider :virtualbox do |vb|</span>
</span><span class='line'>  <span class="c1">#   # Don&#39;t boot with headless mode</span>
</span><span class='line'>  <span class="c1">#   vb.gui = true</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="c1">#   # Use VBoxManage to customize the VM. For example to change memory:</span>
</span><span class='line'>  <span class="c1">#   vb.customize [&quot;modifyvm&quot;, :id, &quot;--memory&quot;, &quot;1024&quot;]</span>
</span><span class='line'>  <span class="c1"># end</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="c1"># View the documentation for the provider you&#39;re using for more</span>
</span><span class='line'>  <span class="c1"># information on available options.</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Enable provisioning with Puppet stand alone.  Puppet manifests</span>
</span><span class='line'>  <span class="c1"># are contained in a directory path relative to this Vagrantfile.</span>
</span><span class='line'>  <span class="c1"># You will need to create the manifests directory and a manifest in</span>
</span><span class='line'>  <span class="c1"># the file precise32.pp in the manifests_path directory.</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="c1"># An example Puppet manifest to provision the message of the day:</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="c1"># # group { &quot;puppet&quot;:</span>
</span><span class='line'>  <span class="c1"># #   ensure =&gt; &quot;present&quot;,</span>
</span><span class='line'>  <span class="c1"># # }</span>
</span><span class='line'>  <span class="c1"># #</span>
</span><span class='line'>  <span class="c1"># # File { owner =&gt; 0, group =&gt; 0, mode =&gt; 0644 }</span>
</span><span class='line'>  <span class="c1"># #</span>
</span><span class='line'>  <span class="c1"># # file { &#39;/etc/motd&#39;:</span>
</span><span class='line'>  <span class="c1"># #   content =&gt; &quot;Welcome to your Vagrant-built virtual machine!</span>
</span><span class='line'>  <span class="c1"># #               Managed by Puppet.\n&quot;</span>
</span><span class='line'>  <span class="c1"># # }</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="c1"># config.vm.provision :puppet do |puppet|</span>
</span><span class='line'>  <span class="c1">#   puppet.manifests_path = &quot;manifests&quot;</span>
</span><span class='line'>  <span class="c1">#   puppet.manifest_file  = &quot;site.pp&quot;</span>
</span><span class='line'>  <span class="c1"># end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Enable provisioning with chef solo, specifying a cookbooks path, roles</span>
</span><span class='line'>  <span class="c1"># path, and data_bags path (all relative to this Vagrantfile), and adding</span>
</span><span class='line'>  <span class="c1"># some recipes and/or roles.</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="c1"># config.vm.provision :chef_solo do |chef|</span>
</span><span class='line'>  <span class="c1">#   chef.cookbooks_path = &quot;../my-recipes/cookbooks&quot;</span>
</span><span class='line'>  <span class="c1">#   chef.roles_path = &quot;../my-recipes/roles&quot;</span>
</span><span class='line'>  <span class="c1">#   chef.data_bags_path = &quot;../my-recipes/data_bags&quot;</span>
</span><span class='line'>  <span class="c1">#   chef.add_recipe &quot;mysql&quot;</span>
</span><span class='line'>  <span class="c1">#   chef.add_role &quot;web&quot;</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="c1">#   # You may also specify custom JSON attributes:</span>
</span><span class='line'>  <span class="c1">#   chef.json = { :mysql_password =&gt; &quot;foo&quot; }</span>
</span><span class='line'>  <span class="c1"># end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Enable provisioning with chef server, specifying the chef server URL,</span>
</span><span class='line'>  <span class="c1"># and the path to the validation key (relative to this Vagrantfile).</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="c1"># The Opscode Platform uses HTTPS. Substitute your organization for</span>
</span><span class='line'>  <span class="c1"># ORGNAME in the URL and validation key.</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="c1"># If you have your own Chef Server, use the appropriate URL, which may be</span>
</span><span class='line'>  <span class="c1"># HTTP instead of HTTPS depending on your configuration. Also change the</span>
</span><span class='line'>  <span class="c1"># validation key to validation.pem.</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="c1"># config.vm.provision :chef_client do |chef|</span>
</span><span class='line'>  <span class="c1">#   chef.chef_server_url = &quot;https://api.opscode.com/organizations/ORGNAME&quot;</span>
</span><span class='line'>  <span class="c1">#   chef.validation_key_path = &quot;ORGNAME-validator.pem&quot;</span>
</span><span class='line'>  <span class="c1"># end</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="c1"># If you&#39;re using the Opscode platform, your validator client is</span>
</span><span class='line'>  <span class="c1"># ORGNAME-validator, replacing ORGNAME with your organization name.</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="c1"># If you have your own Chef Server, the default validation client name is</span>
</span><span class='line'>  <span class="c1"># chef-validator, unless you changed the configuration.</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="c1">#   chef.validation_client_name = &quot;ORGNAME-validator&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>从上述的文件可以看出Vagrantfile可以配置很多东西，比如使用的Box，需要转发的端口，同步指定的目录，使用Chef、puppet等对虚拟机进行预配置等。</p>

<p>如果修改了Vagrantfile中的配置，只需要执行<code>vagrant reload</code>来应用新配置。</p>

<h2>同步目录</h2>

<p>虚拟机启动起来以后就可以ssh上去了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vagrant ssh
</span><span class='line'>Welcome to Ubuntu 12.04 LTS <span class="o">(</span>GNU/Linux 3.2.0-23-generic-pae i686<span class="o">)</span>
</span><span class='line'>
</span><span class='line'> * Documentation:  https://help.ubuntu.com/
</span><span class='line'>Welcome to your Vagrant-built virtual machine.
</span><span class='line'>Last login: Wed Oct  2 09:41:08 2013 from 10.0.2.2
</span><span class='line'>vagrant@precise32:~<span class="nv">$ </span>who
</span><span class='line'>vagrant  pts/0        2013-10-02 09:47 <span class="o">(</span>10.0.2.2<span class="o">)</span>
</span><span class='line'>vagrant@precise32:~<span class="nv">$ </span>hostname
</span><span class='line'>precise32
</span><span class='line'>vagrant@precise32:~<span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>Vagrant会自动给虚拟机根目录下创建一个名为vagrant的目录。这个目录可以与主机Vagrantfile所在的目录保持同步。这个同步是相互的，无论改动了主机目录中的文件，还是虚拟机目录中的文件，都可以自动同步到另一方。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>vagrant@precise32:~<span class="nv">$ </span><span class="nb">cd</span> /vagrant/
</span><span class='line'>vagrant@precise32:/vagrant<span class="nv">$ </span>ls
</span><span class='line'>Vagrantfile
</span><span class='line'>vagrant@precise32:/vagrant<span class="nv">$ </span>touch test.txt
</span><span class='line'>vagrant@precise32:/vagrant<span class="nv">$ </span><span class="nb">exit</span>
</span><span class='line'><span class="nb">logout</span>
</span><span class='line'>Connection to 127.0.0.1 closed.
</span><span class='line'><span class="nv">$ </span>ls
</span><span class='line'>Vagrantfile test.txt
</span></code></pre></td></tr></table></div></figure>


<h2>多机器管理</h2>

<p>其实Vagrantfile支持配置多台机器，如果你需要设置多台服务器及数据库环境，可以用一个Vagrantfile搞定。</p>

<figure class='code'><figcaption><span>Vagrantfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Vagrant</span><span class="o">.</span><span class="n">configure</span><span class="p">(</span><span class="s2">&quot;2&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provision</span> <span class="s2">&quot;shell&quot;</span><span class="p">,</span> <span class="ss">inline</span><span class="p">:</span> <span class="s2">&quot;echo Hello&quot;</span>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">define</span> <span class="s2">&quot;web&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">web</span><span class="o">|</span>    <span class="n">web</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">box</span> <span class="o">=</span> <span class="s2">&quot;apache&quot;</span>  <span class="k">end</span>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">define</span> <span class="s2">&quot;db&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">db</span><span class="o">|</span>    <span class="n">db</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">box</span> <span class="o">=</span> <span class="s2">&quot;mysql&quot;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个文件配置了两个box，一个叫web，一个叫db。现在启动虚拟机就需要加上虚拟机名了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#启动web虚拟机</span>
</span><span class='line'><span class="nv">$ </span>vagrant up web
</span><span class='line'>
</span><span class='line'><span class="c">#启用db虚拟机</span>
</span><span class='line'><span class="nv">$ </span>vagrant up db
</span><span class='line'>
</span><span class='line'><span class="c">#默认启动所有的虚拟机</span>
</span><span class='line'><span class="nv">$ </span>vagrant up
</span></code></pre></td></tr></table></div></figure>


<h2>关闭虚拟机</h2>

<p>Vagrant提供了好几种方法来关闭虚拟机，你可以根据不同的情况选择不同的方式。</p>

<p><code>vagrant suspend</code>将虚拟机置于休眠状态。这时候主机会保存虚拟机的当前状态。再用<code>vagrant up</code>启动虚拟机时能够返回之前工作的状态。这种方式优点是休眠和启动速度都很快，只有几秒钟。缺点是需要额外的磁盘空间来存储当前状态。</p>

<p><code>vagrant halt</code>则是关机。如果想再次启动还是使用<code>vagrant up</code>命令，不过需要多花些时间。</p>

<p><code>vagrant destroy</code>则会将虚拟机从磁盘中删除。如果想重新创建还是使用<code>vagrant up</code>命令。</p>

<p>另外1.2以上版本的Vagrant还引用了插件机制。可以通过<code>vagrant plugin</code>来添加各种各样的plugin，这给Vagrant的应用带来了更大的灵活性和针对性。比如可以添加<code>vagrant-windows</code>的插件来增加对windows系统的支持，通过添加<code>vagrant-aws</code>插件来实现给AWS创建虚拟机的功能。你也可以编写自己的插件。由于Vagrant是ruby写的一个gem，其插件的编写也是使用的Ruby语言。这里就不多做介绍了。感兴趣的可以去<a href="http://www.vagrantup.com/">官网</a>查看。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[将我的博客迁移到亚马逊云端（2）]]></title>
    <link href="http://www.huangbowen.net/blog/2013/10/01/migrate-octopress-to-aws-step-2/"/>
    <updated>2013-10-01T21:54:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/10/01/migrate-octopress-to-aws-step-2</id>
    <content type="html"><![CDATA[<p><img src="http://www.huangbowen.net/images/edgelocation.png"></p>

<p>上篇文章中讲了将我的Octopress博客部署到亚马逊的S3上。而这篇文章则主要讲如何使用亚马逊提供的CloudFront作为内容分发并将自己的独立域名绑定到此CloudFront上。</p>

<!-- more -->


<p>首先，需要启用亚马逊的CloudFront。我刚开始以为只需要‘sign up’就行。但是当我在&#8217;AWS Management Console&#8217;中点击‘Services’中的CloudFront时，却得到了‘Account Blocked’错误。</p>

<p><img src="http://www.huangbowen.net/images/accountblocked.png" width="780"></p>

<p>这个问题很奇怪，CloudFront明明已经在&#8217; Services You&#8217;re Signed Up For&#8217; list中了，但是咋个无法使用那？我只好使用gmail给Amazon客服中心发了邮件询问，结果客服中心告诉我需要使用一个business email(商业邮箱)来发送激活申请。我只好使用公司邮箱发送了申请，过了几个小时就收到了回信，告诉我已经可以使用了。</p>

<p>登陆&#8217;AWS Management Console&#8217;后，点击&#8217;Services&#8217;中的‘CloudFront’，就可以看到控制界面了。</p>

<p><img src="http://www.huangbowen.net/images/cloudfront.png" width="780"></p>

<p>点击&#8217;Create Distribution&#8217;按钮，Delivery method选择Download。 Download主要针对一些html，css,js等静态文件，而Streaming则主要是一些音视频文件。</p>

<p><img src="http://www.huangbowen.net/images/deliverymethod.png" width="780"></p>

<p>下一步，要选择Origin,即要进行内容分发的源。虽然亚马逊会自动列出你的S3 bucket，但是千万不要选。而是自己手动输入example.com这个Bucket的Endpoint(Endpoint在S3 Console的Properties标签下的Static Website hosting里看得到)。为什么不直接选S3 bucket那?这是因为当我们访问一个目录时，我们期望能返回默认的object。虽然CouldFront有个Default Root Object设置，只是对根目录起作用，对子目录不起作用。如果使用Bucket的Endpoint，再加上之前已经给该Bucket配置了Default Object，就可以解决这个问题。</p>

<p><img src="http://www.huangbowen.net/images/originname.png" width="780"></p>

<p>在CNAMEs项中输入自己的域名，多个域名以逗号分隔。</p>

<p><img src="http://www.huangbowen.net/images/alternatedomain.png" width="780"></p>

<p>这样子CoudFront就算配置好了。通过管理页面也可以配置Error page等。</p>

<p><img src="http://www.huangbowen.net/images/cloudfrontoverview.png" width="780"></p>

<p>接下来，需要登录自己域名的提供商的管理后台，添加一条自己独立域名的转发，转发到这个CloudFront的Domain Name上。</p>

<p><img src="http://www.huangbowen.net/images/domainnamechange.png" width="780"></p>

<p>一般需要10分钟到2个小时等待新的域名转发设置生效。</p>

<p>另外要专门提一下CloudFront的cache机制。CloudFront主要通过检测Origin中的http header中的cache-control属性。根据cache-control的值来设置cache时间。但是CloudFront最长只保留24小时的cache，过后就会清空并重新cache。对于我的小博客来说24小时太长了，那如何给Octopress注入cache-control这个http header那？其实在上篇文章已经提过了。S3支持给每个object设置 http header，我们可以通过s3cmd来自动设置，这就是为什么在S3 task中要加入这个参数。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">desc</span> <span class="s2">&quot;Deploy website via s3cmd&quot;</span>
</span><span class='line'><span class="n">task</span> <span class="ss">:s3</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;## Deploying website via s3cmd&quot;</span>
</span><span class='line'>  <span class="n">ok_failed</span> <span class="nb">system</span><span class="p">(</span><span class="s2">&quot;s3cmd sync --acl-public --reduced-redundancy --add-header </span><span class="se">\&quot;</span><span class="s2">Cache-Control: max-age=</span><span class="si">#{</span><span class="n">s3_cache_secs</span><span class="si">}</span><span class="se">\&quot;</span><span class="s2">  public/* s3://</span><span class="si">#{</span><span class="n">s3_bucket</span><span class="si">}</span><span class="s2">/&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中S3_cache_secs就是设置cache时间，我把它设置为3600,也就是一个小时。</p>

<p>至此，我的Octopress博客已经在云端了。感觉访问速度比以前快不少。以前我是部署在github pages，服务器放置在美国。现在使用了CloudFront，亚马逊会自动将请求转发到最近的CloudFront edge location。接下来我再研究下 Amazon Route 53,看看有什么好玩的。</p>

<p>我的博客地址: <a href="http://www.huangbowen.net">http://www.huangbowen.net</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[将我的博客迁移到亚马逊云端(1)]]></title>
    <link href="http://www.huangbowen.net/blog/2013/09/30/migrate-octopress-to-aws/"/>
    <updated>2013-09-30T14:09:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/09/30/migrate-octopress-to-aws</id>
    <content type="html"><![CDATA[<p><img src="http://www.huangbowen.net/images/cloudcompute.png" width="400"></p>

<p><a href="http://octopress.org/">Octopress</a>已经被公认为Geeker的博客框架。它所拥有的特性都很符合Geeker的癖好:强大的命令行操作方式、简洁的MarkDown语法、灵活的插件配置、美轮美奂的theme（自带响应式设计哦）、完全可定义的部署&#8230;&#8230;</p>

<p>一般大家都喜欢把博客部署到github pages上，免费速度快，与<a href="http://octopress.org/">Octopress</a>无缝结合。但是自己最近迷上了AWS，就捉摸着将自己的<a href="http://octopress.org/">Octopress</a>博客部署到AWS的S3上，使用CloudFront做CDN，使用Amazon Route 53做域名映射。倒腾了两天，终于搞定了，也学到了很多东西。不敢私藏，拿出来和大家分享。</p>

<!-- more -->


<p>这篇文章主要讲如何将Octopress博客部署到S3上去。下一篇文章会讲如何将CloudFront做CDN,并与现有域名绑定。</p>

<p>在此之前先普及一些概念。</p>

<p>AWS - Amazon Web Service,亚马逊提供的云服务简称。</p>

<p>S3 - Amazon Simple Storage Service, 亚马逊提供的一种存储静态资源（如css、js、html文件，音视频文件）的服务。</p>

<p>CDN - Content Delivery Network, 内容分发网络。</p>

<p>Amazon CloudFront - 亚马逊提供的一种内容分发服务，提高你的网站访问速度。</p>

<p>Amazon Route 53 - 亚马逊提供的一种稳定高效的域名解析系统。</p>

<p>第一步，注册一个亚马逊的账号，注册地址是<a href="https://portal.aws.amazon.com/gp/aws/developer/registration/index.html">https://portal.aws.amazon.com/gp/aws/developer/registration/index.html</a>。注意注册的时候需要提供一张具备外币功能的信用卡。</p>

<p>第二步，登陆到Amazon management console里，单击右上角的名称，选择Security Credentials标签，然后点击左侧标签按照向导创建一个group,一个从属于这个group的user，并为该user生成一个Access key，记录下来Access key Id 及 Secret Access Key。亚马逊的文档还是非常详细的，不懂的可以多看看提示信息和帮助文档。</p>

<p>第三步，在Amazon management console里选择Services -> S3 service，并创建两个bucket。假如你的博客域名为example.com，那么两个bucket的名称分别为example.com,www.example.com。为什么要创建两个那？是因为我们要保证用户无论输入www.example.com还是example.com都可以访问我们的网站。</p>

<p><img src="http://www.huangbowen.net/images/twobucket.png" width="780"></p>

<p>第四步，选择www.example.com这个bucket，点击properties标签，在Static Website Hosting中选择Redirect all requests to another host name，并配置‘Redirect all requests to:’为example.com。这样来自www.example.com bucket的访问都会自动转发给example.com这个bucket。我们只需为example.com这个bucket同步我们的博客文件即可。</p>

<p><img src="http://www.huangbowen.net/images/redirectrequest.png" width="780"></p>

<p>第五步，选择example.com这个bucket，在Static Website Hosting中选择‘Enable Website Hosting’,并配置Index Document，我的是index.html。这个Index Document是默认返回的object名称。比如如果用户直接访问bucket的某个目录，系统会检测该目录下是否存在Index Document中配置的文件名，如果有则会自动返回这个object。</p>

<p><img src="http://www.huangbowen.net/images/staticwebsitehosting.png" width="780"></p>

<p>第六步，选择&#8217;Permissions&#8217;标签，点击’add bucket policy‘按钮，加入如下的policy.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>     <span class="s2">&quot;Version&quot;</span><span class="o">:</span> <span class="s2">&quot;2008-10-17&quot;</span><span class="p">,</span>
</span><span class='line'>     <span class="s2">&quot;Statement&quot;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>               <span class="s2">&quot;Sid&quot;</span><span class="o">:</span> <span class="s2">&quot;AddPerm&quot;</span><span class="p">,</span>
</span><span class='line'>               <span class="s2">&quot;Effect&quot;</span><span class="o">:</span> <span class="s2">&quot;Allow&quot;</span><span class="p">,</span>
</span><span class='line'>               <span class="s2">&quot;Principal&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                    <span class="s2">&quot;AWS&quot;</span><span class="o">:</span> <span class="s2">&quot;*&quot;</span>
</span><span class='line'>               <span class="p">},</span>
</span><span class='line'>               <span class="s2">&quot;Action&quot;</span><span class="o">:</span> <span class="s2">&quot;s3:GetObject&quot;</span><span class="p">,</span>
</span><span class='line'>               <span class="s2">&quot;Resource&quot;</span><span class="o">:</span> <span class="s2">&quot;arn:aws:s3:::example.com/*&quot;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>     <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个policy其实是给所有匿名用户访问该bucket里面文件的权限。</p>

<p><img src="http://www.huangbowen.net/images/bucketpolicy.png" width="780"></p>

<p>第七步，还是在’Permissions‘标签里，点击’Add CORS configuration‘按钮，加入如下的配置：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;CORSConfiguration</span> <span class="na">xmlns=</span><span class="s">&quot;http://s3.amazonaws.com/doc/2006-03-01/&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;CORSRule&gt;</span>
</span><span class='line'>        <span class="nt">&lt;AllowedOrigin&gt;</span>*<span class="nt">&lt;/AllowedOrigin&gt;</span>
</span><span class='line'>        <span class="nt">&lt;AllowedMethod&gt;</span>GET<span class="nt">&lt;/AllowedMethod&gt;</span>
</span><span class='line'>        <span class="nt">&lt;MaxAgeSeconds&gt;</span>3000<span class="nt">&lt;/MaxAgeSeconds&gt;</span>
</span><span class='line'>        <span class="nt">&lt;AllowedHeader&gt;</span>Authorization<span class="nt">&lt;/AllowedHeader&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/CORSRule&gt;</span>
</span><span class='line'><span class="nt">&lt;/CORSConfiguration&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个是用来配置跨域访问的权限，即是否允许其他网站访问这个bucket上的资源。由于Octopress博客集成了很多插件，比如google analiycis, github等，都需要跨域加载JavaScript文件，执行JavaScript文件，所以要加入这些配置。</p>

<p><img src="http://www.huangbowen.net/images/corsconfiguration.png" width="780"></p>

<p>第八步，下载安装<a href="http://s3tools.org/s3cmd">s3cmd</a>。<a href="http://s3tools.org/s3cmd">s3cmd</a>是一款操作AWS S3的命令行工具。通过它可以创建或删除bucket，上传或下载object，我们在部署octopress博客时，主要就是通过它来将博客上传到S3上去。如果是mac系统化可以通过HomeBrew直接安装。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># brew install s3cmd</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果是windows系统可以从<a href="http://s3tools.org/s3cmd">官网</a>下载安装包进行安装。</p>

<p>第九步，配置<a href="http://s3tools.org/s3cmd">s3cmd</a>与你的S3的连接。在命令行下输入<code>s3cmd --configure</code>，按照向导来配置与S3的连接。这时候在前面保存的Access key就派上用场了。所有的配置信息其实都存在当前用户名下的.s3cfg文件中。你也可以随后修改这些信息。运行<code>s3cmd ls</code>来检测是否配置成功。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>s3cmd ls <span class="c">#列出所有的bucket</span>
</span><span class='line'>2013-09-27 05:05  s3://huangbowen.net
</span><span class='line'>2013-09-28 03:24  s3://www.huangbowen.net
</span></code></pre></td></tr></table></div></figure>


<p>第十步，配置Octopress支持向S3的部署。在Octopress目录下找到Rakefile文件，修改或添加下述配置。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>deploy_default = &quot;s3&quot;   #部署task
</span><span class='line'>s3_bucket = &quot;example.com&quot; # bucket名称
</span><span class='line'>
</span><span class='line'>s3_cache_secs = 3600  # header中的cache controll属性，即缓存时间，后面CloudFront要用到
</span></code></pre></td></tr></table></div></figure>


<p>然后添加一个新的task。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">desc</span> <span class="s2">&quot;Deploy website via s3cmd&quot;</span>
</span><span class='line'><span class="n">task</span> <span class="ss">:s3</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;## Deploying website via s3cmd&quot;</span>
</span><span class='line'>  <span class="n">ok_failed</span> <span class="nb">system</span><span class="p">(</span><span class="s2">&quot;s3cmd sync --acl-public --reduced-redundancy --add-header </span><span class="se">\&quot;</span><span class="s2">Cache-Control: max-age=</span><span class="si">#{</span><span class="n">s3_cache_secs</span><span class="si">}</span><span class="se">\&quot;</span><span class="s2">  public/* s3://</span><span class="si">#{</span><span class="n">s3_bucket</span><span class="si">}</span><span class="s2">/&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>OK，大功告成，运行<code>rake generate</code>
及<code>&amp;&amp; rake deploy</code>就可以将生成的静态站点上传到S3中区。然后就可以通过S3的EndPoint来访问新站点了。（EndPoint可以在Amazon management console的S3 dashboard的
‘Static Website Hosting’ 标签中找到）</p>

<p>当然现在还不能使用自己的域名来访问，你可以通过配置CNAME来启用自己的域名。</p>

<p>下篇文章会讲如何将CloudFront作为内容分发，并且如何将自己的域名与CloudFront绑定。</p>

<p>现在我的博客已经在云端了，地址是<a href="http://www.huangbowen.net">http://www.huangbowen.net</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[升级ruby版本那"不堪回首的经历"]]></title>
    <link href="http://www.huangbowen.net/blog/2013/09/23/not-easy-to-install-ruby/"/>
    <updated>2013-09-23T13:53:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/09/23/not-easy-to-install-ruby</id>
    <content type="html"><![CDATA[<p>前段时间在玩Chef-一个IT基础设施自动化工具。由于Chef是由Ruby写的一个gem，那么就需要安装Ruby。当然Ruby我早就安装了，并且使用rvm来管理Ruby及Gem。本来一切看似正常，但是不会预料后面会遇到那么多的坑。</p>

<!-- more -->


<p>Chef本地的repo包中有一个vagrant虚拟机的模板文件，通过它可以setup一个虚拟机，然后使用Chef来操作这个节点。那么就使用vagrant命令来setup这个虚拟机把。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vagrant up --no-color
</span><span class='line'>Vagrant failed to initialize at a very early stage:
</span><span class='line'>
</span><span class='line'>It appears that you<span class="s1">&#39;ve ran a newer version of Vagrant on this</span>
</span><span class='line'><span class="s1">computer. Unfortunately, newer versions of Vagrant change internal</span>
</span><span class='line'><span class="s1">directory layouts that cause older versions to break. This version</span>
</span><span class='line'><span class="s1">of Vagrant cannot properly run.</span>
</span><span class='line'>
</span><span class='line'><span class="s1">If you&#39;</span>d like to start from a clean state, please remove the
</span><span class='line'>Vagrant state directory: /Users/twer/.vagrant.d
</span><span class='line'>
</span><span class='line'>Warning that this will remove all your boxes and potentially corrupt
</span><span class='line'>existing Vagrant environments that were running based on the future
</span><span class='line'>version.
</span></code></pre></td></tr></table></div></figure>


<p>console中说Vagrant版本有问题，那么就按说明删除.vagrant.d文件夹把。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rm -rf ~/.vagrant.d/
</span><span class='line'><span class="nv">$ </span>vagrant up --no-color
</span><span class='line'>/Users/twer/sourcecode/chef-repo/Vagrantfile:8:in <span class="sb">`</span>&lt;top <span class="o">(</span>required<span class="o">)</span>&gt;<span class="s1">&#39;: undefined method `configure&#39;</span> <span class="k">for </span>Vagrant:Module <span class="o">(</span>NoMethodError<span class="o">)</span>
</span><span class='line'>     from /usr/local/rvm/gems/ruby-1.9.3-p194/gems/vagrant-1.0.7/lib/vagrant/config/loader.rb:115:in <span class="sb">`</span>load<span class="s1">&#39;</span>
</span><span class='line'><span class="s1">     from /usr/local/rvm/gems/ruby-1.9.3-p194/gems/vagrant-1.0.7/lib/vagrant/config/loader.rb:115:in `block in procs_for_source&#39;</span>
</span><span class='line'>     from /usr/local/rvm/gems/ruby-1.9.3-p194/gems/vagrant-1.0.7/lib/vagrant/config.rb:41:in <span class="sb">`</span>block in capture_configures<span class="err">&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>窝里个去，又出新问题了。那好吧，看看当前ruby的版本。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rvm list
</span><span class='line'>
</span><span class='line'>rvm rubies
</span><span class='line'>
</span><span class='line'>   ruby-1.9.2-p320 <span class="o">[</span> x86_64 <span class="o">]</span>
</span><span class='line'><span class="o">=</span>* ruby-1.9.3-p194 <span class="o">[</span> x86_64 <span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="c"># =&gt; - current</span>
</span><span class='line'><span class="c"># =* - current &amp;&amp; default</span>
</span><span class='line'><span class="c">#  * - default</span>
</span></code></pre></td></tr></table></div></figure>


<p>试着将Ruby的版本切换到1.9.2-p320再试试。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rvm use ruby-1.9.2-p320
</span><span class='line'>Using /usr/local/rvm/gems/ruby-1.9.2-p320
</span><span class='line'><span class="nv">$ </span>vagrant up
</span><span class='line'>Bringing machine <span class="s1">&#39;default&#39;</span> up with <span class="s1">&#39;virtualbox&#39;</span> provider...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Setting the name of the VM...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Clearing any previously <span class="nb">set </span>forwarded ports...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Creating shared folders metadata...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Clearing any previously <span class="nb">set </span>network interfaces...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Preparing network interfaces based on configuration...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Forwarding ports...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> -- <span class="nv">22</span> <span class="o">=</span>&gt; 2222 <span class="o">(</span>adapter 1<span class="o">)</span>
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Booting VM...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Waiting <span class="k">for </span>VM to boot. This can take a few minutes.
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> VM booted and ready <span class="k">for </span>use!
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Setting hostname...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Mounting shared folders...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> -- /vagrant
</span></code></pre></td></tr></table></div></figure>


<p>搞定。看来问题是当前使用的ruby的版本有问题。</p>

<p>老是使用旧版本也不是个事，把Ruby升级到最新版本看还有这个问题不。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rvm list known
</span><span class='line'><span class="c"># MRI Rubies</span>
</span><span class='line'><span class="o">[</span>ruby-<span class="o">]</span>1.8.6<span class="o">[</span>-p420<span class="o">]</span>
</span><span class='line'><span class="o">[</span>ruby-<span class="o">]</span>1.8.7<span class="o">[</span>-p374<span class="o">]</span>
</span><span class='line'><span class="o">[</span>ruby-<span class="o">]</span>1.9.1<span class="o">[</span>-p431<span class="o">]</span>
</span><span class='line'><span class="o">[</span>ruby-<span class="o">]</span>1.9.2<span class="o">[</span>-p320<span class="o">]</span>
</span><span class='line'><span class="o">[</span>ruby-<span class="o">]</span>1.9.3<span class="o">[</span>-p448<span class="o">]</span>
</span><span class='line'><span class="o">[</span>ruby-<span class="o">]</span>2.0.0-p195
</span><span class='line'><span class="o">[</span>ruby-<span class="o">]</span>2.0.0<span class="o">[</span>-p247<span class="o">]</span>
</span><span class='line'><span class="o">[</span>ruby-<span class="o">]</span>2.0.0-head
</span><span class='line'>ruby-head
</span></code></pre></td></tr></table></div></figure>


<p>看来ruby的1.9.3已经有p448了，那么就升级到p448。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rvm install 1.9.3
</span><span class='line'>Checking requirements <span class="k">for </span>osx.
</span><span class='line'>Installing requirements <span class="k">for </span>osx.
</span><span class='line'>Updating system.
</span><span class='line'>Installing required packages: libksba, openssl..........
</span><span class='line'>Error running <span class="s1">&#39;requirements_osx_brew_libs_install gcc libksba openssl&#39;</span>,
</span><span class='line'>please <span class="nb">read</span> /usr/local/rvm/log/1379843991_ruby-1.9.3-p448/package_install_gcc_libksba_openssl.log
</span><span class='line'>Requirements installation failed with status: 1.
</span></code></pre></td></tr></table></div></figure>


<p>升级失败，那么看看log。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">==</span>&gt; make bootstrap
</span><span class='line'>configure: error: cannot compute suffix of object files: cannot compile
</span><span class='line'>See <span class="sb">`</span>config.log<span class="err">&#39;</span> <span class="k">for </span>more details.
</span><span class='line'>make<span class="o">[</span>2<span class="o">]</span>: *** <span class="o">[</span>configure-stage1-target-libgcc<span class="o">]</span> Error 1
</span><span class='line'>make<span class="o">[</span>1<span class="o">]</span>: *** <span class="o">[</span>stage1-bubble<span class="o">]</span> Error 2
</span><span class='line'>make: *** <span class="o">[</span>bootstrap<span class="o">]</span> Error 2
</span><span class='line'>
</span><span class='line'>READ THIS: https://github.com/mxcl/homebrew/wiki/troubleshooting
</span><span class='line'>
</span><span class='line'>There were package installation errors, make sure to <span class="nb">read </span>the log.
</span><span class='line'>
</span><span class='line'>Try <span class="sb">`</span>brew tap --repair<span class="sb">`</span> and make sure <span class="sb">`</span>brew doctor<span class="sb">`</span> looks reasonable.
</span></code></pre></td></tr></table></div></figure>


<p>通过看log是gcc编译失败，并且通过log可以看出rvm是通过homebrew来安装必备文件的。</p>

<p>通过一番查资料后，找到了解决办法。那就是将Xcode升级到最新版本，然后在Preference里选择Downloads标签，然后安装Command Line Tools。</p>

<p><img src="http://www.huangbowen.net/images/developerTools.png" width="600"></p>

<p>安装完毕后再用Homebrew安装gcc49。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew install <span class="nv">gcc49</span>
</span><span class='line'><span class="o">==</span>&gt; Downloading ftp://gcc.gnu.org/pub/gcc/snapshots/4.9-20130915/gcc-4.9-20130915.tar.bz2
</span><span class='line'>Already downloaded: /Library/Caches/Homebrew/gcc49-4.9-20130915.tar.bz2
</span><span class='line'><span class="o">==</span>&gt; ../configure --build<span class="o">=</span>x86_64-apple-darwin12.5.0 --prefix<span class="o">=</span>/usr/local/Cellar/gcc49/4.9-20130915/gcc
</span><span class='line'><span class="o">==</span>&gt; make <span class="nv">bootstrap</span>
</span><span class='line'><span class="o">==</span>&gt; make <span class="nv">install</span>
</span><span class='line'><span class="o">==</span>&gt; Caveats
</span><span class='line'>This is a snapshot of GCC trunk, which is in active development and
</span><span class='line'>supposed to have bugs and should not be used in production
</span><span class='line'>environment.
</span><span class='line'><span class="o">==</span>&gt; Summary
</span><span class='line'>🍺  /usr/local/Cellar/gcc49/4.9-20130915: 977 files, 93M, built in 21.6 minutes
</span></code></pre></td></tr></table></div></figure>


<p>成功安装GCC。</p>

<p>继续回到安装Ruby的任务上来。由于在安装Ruby前会先安装必备文件，那么干脆直接先安装必备文件的了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rvm requirements
</span><span class='line'>Checking requirements <span class="k">for </span>osx.
</span><span class='line'>Installing requirements <span class="k">for </span>osx.
</span><span class='line'>mkdir: /usr/local/rvm/log/1379829979_ruby-1.9.3-p448: Permission denied
</span><span class='line'>tee: /usr/local/rvm/log/1379829979_ruby-1.9.3-p448/update_system.log: No such file or directory
</span><span class='line'>tee: /usr/local/rvm/log/1379829979_ruby-1.9.3-p448/update_system.log: No such file or directory
</span></code></pre></td></tr></table></div></figure>


<p>我勒个去，貌似是权限问题，那么用sudo解决。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo rvm requirements
</span><span class='line'>
</span><span class='line'>Checking requirements <span class="k">for </span>osx.
</span><span class='line'>Installing requirements <span class="k">for </span>osx.
</span><span class='line'>Updating system.
</span><span class='line'>Installing required packages: libksba, openssl..........
</span><span class='line'>Error running <span class="s1">&#39;requirements_osx_brew_libs_install libksba openssl&#39;</span>,
</span><span class='line'>please <span class="nb">read</span> /usr/local/rvm/log/1379843991_ruby-1.9.3-p448/package_install_libksba_openssl.log
</span><span class='line'>Requirements installation failed with status: 1.
</span></code></pre></td></tr></table></div></figure>


<p>又失败，看看错误日志吧。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>current path: /Users/twer
</span><span class='line'><span class="nb">command</span><span class="o">(</span>3<span class="o">)</span>: requirements_osx_brew_libs_install libksba openssl
</span><span class='line'>Error: No such keg: /usr/local/Cellar/libksba
</span><span class='line'>Error: Cowardly refusing to <span class="sb">`</span>sudo brew install<span class="sb">`</span>
</span><span class='line'>You can use brew with sudo, but only <span class="k">if </span>the brew executable is owned by root.
</span><span class='line'>However, this is both not recommended and completely unsupported so <span class="k">do </span>so at
</span><span class='line'>your own risk.
</span><span class='line'>There were package installation errors, make sure to <span class="nb">read </span>the log.
</span><span class='line'>
</span><span class='line'>Try <span class="sb">`</span>brew tap --repair<span class="sb">`</span> and make sure <span class="sb">`</span>brew doctor<span class="sb">`</span> looks reasonable.
</span></code></pre></td></tr></table></div></figure>


<p>看了日志貌似明白了，使用brew安装libksba由于加了sudo所以出问题了。那么直接在命令行使用sudo试试。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo brew install libksba
</span><span class='line'>Error: Cowardly refusing to <span class="sb">`</span>sudo brew install<span class="sb">`</span>
</span><span class='line'>You can use brew with sudo, but only <span class="k">if </span>the brew executable is owned by root.
</span><span class='line'>However, this is both not recommended and completely unsupported so <span class="k">do </span>so at
</span><span class='line'>your own risk.
</span></code></pre></td></tr></table></div></figure>


<p>窝里个去，不使用sudo吧rvm requirements执行不成功。加上sudo吧rvm requirements调用的brew install又不行。好吧，就按上面说的将brew转换到root模式。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ls -al /usr/local/bin/brew
</span><span class='line'>-rwxr-xr-x  1 twer  admin  703 Mar 14  2013 /usr/local/bin/brew
</span><span class='line'><span class="nv">$ </span>sudo chown root:admin /usr/local/bin/brew
</span><span class='line'>Password:
</span><span class='line'><span class="nv">$ </span>ls -al /usr/local/bin/brew
</span><span class='line'>-rwxr-xr-x  1 root  admin  703 Mar 14  2013 /usr/local/bin/brew
</span></code></pre></td></tr></table></div></figure>


<p>OK。再执行吧。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo rvm requirements
</span><span class='line'>Password:
</span><span class='line'>Checking requirements <span class="k">for </span>osx.
</span><span class='line'>Certificates in <span class="s1">&#39;/usr/local/etc/openssl/cert.pem&#39;</span> already are up to date.
</span><span class='line'>Requirements installation successful.
</span></code></pre></td></tr></table></div></figure>


<p>搞定。把brew再切换到原来的用户和组。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo chown twer:admin /usr/local/bin/brew
</span></code></pre></td></tr></table></div></figure>


<p>绕了一大圈了终于可以安装Ruby了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rvm install 1.9.3
</span><span class='line'>Searching <span class="k">for </span>binary rubies, this might take some time.
</span><span class='line'>No binary rubies available <span class="k">for</span>: osx/10.8/x86_64/ruby-1.9.3-p448.
</span><span class='line'>Continuing with compilation. Please <span class="nb">read</span> <span class="s1">&#39;rvm help mount&#39;</span> to get more information on binary rubies.
</span><span class='line'>Checking requirements <span class="k">for </span>osx.
</span><span class='line'>Certificates in <span class="s1">&#39;/usr/local/etc/openssl/cert.pem&#39;</span> already are up to date.
</span><span class='line'>Requirements installation successful.
</span><span class='line'>Installing Ruby from <span class="nb">source </span>to: /usr/local/rvm/rubies/ruby-1.9.3-p448, this may take a <span class="k">while </span>depending on your cpu<span class="o">(</span>s<span class="o">)</span>...
</span><span class='line'>ruby-1.9.3-p448 - <span class="c">#downloading ruby-1.9.3-p448, this may take a while depending on your connection...</span>
</span><span class='line'>  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
</span><span class='line'>                                 Dload  Upload   Total   Spent    Left  Speed
</span><span class='line'>  0     0    0     0    0     0      0      0 --:--:--  0:00:02 --:--:--     0Warning: Failed to create the file ruby-1.9.3-p448.tar.bz2: Permission denied
</span><span class='line'>  0 9816k    0   745    0     0    320      0  8:43:34  0:00:02  8:43:32  2623
</span><span class='line'>curl: <span class="o">(</span>23<span class="o">)</span> Failed writing body <span class="o">(</span>0 !<span class="o">=</span> 745<span class="o">)</span>
</span><span class='line'>There was an error<span class="o">(</span>23<span class="o">)</span>.
</span><span class='line'>Checking fallback: http://ftp.ruby-lang.org/pub/ruby/1.9/ruby-1.9.3-p448.tar.bz2
</span><span class='line'>  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
</span><span class='line'>                                 Dload  Upload   Total   Spent    Left  Speed
</span><span class='line'>  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0Warning: Failed to create the file ruby-1.9.3-p448.tar.bz2: Permission denied
</span><span class='line'>  0 9816k    0  3329    0     0   4578      0  0:36:35 --:--:--  0:36:35  8853
</span><span class='line'>curl: <span class="o">(</span>23<span class="o">)</span> Failed writing body <span class="o">(</span>0 !<span class="o">=</span> 3329<span class="o">)</span>
</span><span class='line'>There was an error<span class="o">(</span>23<span class="o">)</span>.
</span><span class='line'>Failed download
</span><span class='line'>There has been an error fetching the ruby interpreter. Halting the installation.
</span></code></pre></td></tr></table></div></figure>


<p>又有错。走到这步上了，继续解决吧。经过分析貌似是下载文件有问题，可能又是权限问题。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo rvm install 1.9.3
</span><span class='line'>Password:
</span><span class='line'>Searching <span class="k">for </span>binary rubies, this might take some time.
</span><span class='line'>No binary rubies available <span class="k">for</span>: osx/10.8/x86_64/ruby-1.9.3-p448.
</span><span class='line'>Continuing with compilation. Please <span class="nb">read</span> <span class="s1">&#39;rvm help mount&#39;</span> to get more information on binary rubies.
</span><span class='line'>Checking requirements <span class="k">for </span>osx.
</span><span class='line'>Certificates in <span class="s1">&#39;/usr/local/etc/openssl/cert.pem&#39;</span> already are up to date.
</span><span class='line'>Requirements installation successful.
</span><span class='line'>Installing Ruby from <span class="nb">source </span>to: /usr/local/rvm/rubies/ruby-1.9.3-p448, this may take a <span class="k">while </span>depending on your cpu<span class="o">(</span>s<span class="o">)</span>...
</span><span class='line'>ruby-1.9.3-p448 - <span class="c">#downloading ruby-1.9.3-p448, this may take a while depending on your connection...</span>
</span><span class='line'>  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
</span><span class='line'>                                 Dload  Upload   Total   Spent    Left  Speed
</span><span class='line'>100 9816k  100 9816k    0     0   422k      0  0:00:23  0:00:23 --:--:--  154k
</span><span class='line'>ruby-1.9.3-p448 - <span class="c">#extracting ruby-1.9.3-p448 to /usr/local/rvm/src/ruby-1.9.3-p448</span>
</span><span class='line'>ruby-1.9.3-p448 - <span class="c">#extracted to /usr/local/rvm/src/ruby-1.9.3-p448</span>
</span><span class='line'>ruby-1.9.3-p448 - <span class="c">#configuring...............................................................................................................................................................................................................................................................................................................................................................................................................................................................................</span>
</span><span class='line'>ruby-1.9.3-p448 - <span class="c">#post-configuration</span>
</span><span class='line'>ruby-1.9.3-p448 - <span class="c">#compilingspan>
</span><span class='line'>ruby-1.9.3-p448 - <span class="c">#installing.........................................................................................................</span>
</span><span class='line'>curl: <span class="o">(</span>35<span class="o">)</span> Unknown SSL protocol error in connection to rubygems.org:443
</span><span class='line'>There was an error <span class="k">while </span>trying to resolve rubygems version <span class="k">for</span> <span class="s1">&#39;latest&#39;</span>.
</span><span class='line'>Halting the installation.
</span></code></pre></td></tr></table></div></figure>


<p>前面那个错没了，但是新来了一个错。貌似是ssh到rubygems.org网站有问题，突然想起在rvm requirements时安装了openssl，应该是ssl设置的问题。从网上查了下，貌似要重置macport。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo rm -rf /opt/local
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>sudo rm -rf <span class="nv">$rvm_path</span>/usr
</span><span class='line'><span class="nv">$ </span>sudo rm -rf <span class="nv">$rvm_path</span>/bin/port
</span><span class='line'>sudo: cannot get working directory
</span><span class='line'><span class="nv">$ </span>sudo rvm autolibs homebrew
</span></code></pre></td></tr></table></div></figure>


<p>最后，再重新安装Ruby。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo rvm reinstall 1.9.3
</span><span class='line'>Removing /usr/local/rvm/src/ruby-1.9.3-p448...
</span><span class='line'>Removing /usr/local/rvm/rubies/ruby-1.9.3-p448...
</span><span class='line'>Searching <span class="k">for </span>binary rubies, this might take some time.
</span><span class='line'>No binary rubies available <span class="k">for</span>: osx/10.8/x86_64/ruby-1.9.3-p448.
</span><span class='line'>Continuing with compilation. Please <span class="nb">read</span> <span class="s1">&#39;rvm help mount&#39;</span> to get more information on binary rubies.
</span><span class='line'>Checking requirements <span class="k">for </span>osx_brew.
</span><span class='line'>Certificates in <span class="s1">&#39;/usr/local/etc/openssl/cert.pem&#39;</span> already are up to date.
</span><span class='line'>Requirements installation successful.
</span><span class='line'>Installing Ruby from <span class="nb">source </span>to: /usr/local/rvm/rubies/ruby-1.9.3-p448, this may take a <span class="k">while </span>depending on your cpu<span class="o">(</span>s<span class="o">)</span>...
</span><span class='line'>ruby-1.9.3-p448 - <span class="c">#downloading ruby-1.9.3-p448, this may take a while depending on your connection...</span>
</span><span class='line'>ruby-1.9.3-p448 - <span class="c">#extracting ruby-1.9.3-p448 to /usr/local/rvm/src/ruby-1.9.3-p448</span>
</span><span class='line'>ruby-1.9.3-p448 - <span class="c">#extracted to /usr/local/rvm/src/ruby-1.9.3-p448</span>
</span><span class='line'>ruby-1.9.3-p448 - <span class="c">#configuring...............................................................................................................................................................................................................................................................................................................................................................................................................................................................................</span>
</span><span class='line'>ruby-1.9.3-p448 - <span class="c">#post-configuration</span>
</span><span class='line'>ruby-1.9.3-p448 - <span class="c">#compilingspan>
</span><span class='line'>ruby-1.9.3-p448 - <span class="c">#installing.........................................................................................................</span>
</span><span class='line'>Retrieving rubygems-2.1.4
</span><span class='line'>  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
</span><span class='line'>                                 Dload  Upload   Total   Spent    Left  Speed
</span><span class='line'>100  356k  100  356k    0     0  11672      0  0:00:31  0:00:31 --:--:-- 20611
</span><span class='line'>Extracting rubygems-2.1.4 ...
</span><span class='line'>Removing old Rubygems files...
</span><span class='line'><span class="nv">$LANG</span> was empty, setting up <span class="nv">LANG</span><span class="o">=</span>en_US, <span class="k">if </span>it fails again try setting LANG to something sane and try again.
</span><span class='line'>Installing rubygems-2.1.4 <span class="k">for </span>ruby-1.9.3-p448............................................................................................................................................
</span><span class='line'>Installation of rubygems completed successfully.
</span><span class='line'>Saving wrappers to <span class="s1">&#39;/usr/local/rvm/wrappers/ruby-1.9.3-p448&#39;</span>........
</span><span class='line'>
</span><span class='line'>ruby-1.9.3-p448 - <span class="c">#adjusting #shebangs for (gem irb erb ri rdoc testrb rake).</span>
</span><span class='line'>ruby-1.9.3-p448 - <span class="c">#importing default gemsets, this may take time.......................</span>
</span><span class='line'>Install of ruby-1.9.3-p448 - <span class="c">#complete</span>
</span><span class='line'>Making gemset ruby-1.9.3-p448 pristine....
</span><span class='line'>Making gemset ruby-1.9.3-p448@global pristine....
</span></code></pre></td></tr></table></div></figure>


<p>终于安装上了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rvm list
</span><span class='line'>
</span><span class='line'>rvm rubies
</span><span class='line'>
</span><span class='line'>   ruby-1.9.2-p320 <span class="o">[</span> x86_64 <span class="o">]</span>
</span><span class='line'> * ruby-1.9.3-p194 <span class="o">[</span> x86_64 <span class="o">]</span>
</span><span class='line'><span class="o">=</span>&gt; ruby-1.9.3-p448 <span class="o">[</span> x86_64 <span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="c"># =&gt; - current</span>
</span><span class='line'><span class="c"># =* - current &amp;&amp; default</span>
</span><span class='line'><span class="c">#  * - default</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>rvm use ruby-1.9.3-p448
</span><span class='line'><span class="nv">$ </span>rvm list
</span><span class='line'>
</span><span class='line'>rvm rubies
</span><span class='line'>
</span><span class='line'>   ruby-1.9.2-p320 <span class="o">[</span> x86_64 <span class="o">]</span>
</span><span class='line'> * ruby-1.9.3-p194 <span class="o">[</span> x86_64 <span class="o">]</span>
</span><span class='line'><span class="o">=</span>&gt; ruby-1.9.3-p448 <span class="o">[</span> x86_64 <span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="c"># =&gt; - current</span>
</span><span class='line'><span class="c"># =* - current &amp;&amp; default</span>
</span><span class='line'><span class="c">#  * - default</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>vagrant up
</span><span class='line'>Bringing machine <span class="s1">&#39;default&#39;</span> up with <span class="s1">&#39;virtualbox&#39;</span> provider...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> VirtualBox VM is already running.
</span></code></pre></td></tr></table></div></figure>


<p>终于将Ruby升级到1.9.3-p448了。回顾这整个过程，都是泪啊。本来是想装个虚拟机玩玩，哪想到惹出这么多事情来。不过好歹问题是解决了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[让你的CI跑起来-《持续集成》读书总结]]></title>
    <link href="http://www.huangbowen.net/blog/2013/09/22/continous-integration/"/>
    <updated>2013-09-22T16:49:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/09/22/continous-integration</id>
    <content type="html"><![CDATA[<p>持续集成已经被公认为极具价值的一项工程实践。在初始化一个项目时一个重要的任务就是搭建持续集成服务器，编写构建脚本。在我工作的所有项目中都引入了持续集成机制。它已经像氧气一样成为软件开发过程中的一项工程活动。</p>

<!-- more -->


<p>《持续集成》站在理论的角度阐述了持续集成能够解决什么样的问题，如何解决，需要遵循那些原则等。这本书的副标题是-软件质量改进和风险降低之道（Improving Software Quality and Reducing Risk）。副标题直指持续集成的两个好处：提高软件质量及降低项目风险。</p>

<h2>当前面临的问题</h2>

<p>当前软件开发一直存在两大难题：<strong>一是确定软件的需求，即确定目标。</strong>究竟软件要做成什么样子，在客户的头脑里可能是个三角形，在业务分析员的头脑中可能是个正方形，在开发者的头脑中可能是个圆形，而最终出来的产品或多或少都会给客户带来“惊喜”。</p>

<p><strong>二是确定目前离目标还有好远，即确定剩余的工作量。</strong>这个问题就是项目缺少可见性的问题。当一个程序员告诉他的经理说这个功能只剩下20%的工作量时，具体指什么那？这个20%的比例是怎么得到的？是还要再花20%的时间？&#8230;&#8230;</p>

<p>持续集成虽然解决不了第一个问题，但是关于第二个问题，持续集成向我们介绍了一种增加项目可见性，提高开发效率，降低项目失败风险的有效实践经验。</p>

<p>其实持续集成蕴含有哲学思想：分而治之。即我们通常说的 “滴水穿石，跬步千里”。</p>

<p>传统瀑布方法一般将系统集成放置到开发完成后，这样会导致一系列的问题。</p>

<ul>
<li><p><strong>没有一致的、可部署的软件。</strong>只有等到集成完成之后，我们才能够拿到一个可以使用的软件。</p></li>
<li><p><strong>很晚才发现缺陷。</strong>接口不一致、接口不满足实际需求、开发人员对功能理解有偏差….这些问题在集成测试时统统暴露出来。由于软件根基已经建立，这时候修改容易伤筋动骨。</p></li>
<li><p><strong>低品质的软件。</strong>正如上条所说，缺陷发现的越晚，修改的代价越大。在交付的压力下，各种猴子补丁散落在系统的各个地方，软件的品质自然也很难提高。</p></li>
<li><p><strong>缺少项目可见性。</strong>直到系统集成之前，你都拿不出可用的软件。而且系统集成之时，往往是项目中最棘手、最紧张的时刻，你很难预估集成什么时候能够彻底完成。这样的项目自然谈不上什么可见性了。</p></li>
</ul>


<h2>CI的价值</h2>

<p>引入了CI（Continuos Integration，即持续集成）以后，每个开发人员在提交代码的时候都会自动进行构建，包括代码审查、编译、单元测试、打包、功能测试等。这样保证了开发人员的每次提交都是安全的。打包生成的文件随时可以被测试人员拿去测试。如果需要给客户演示功能，也只需从CI服务器上直接获取指定的打包完成的文件即可。</p>

<p>CI的好处多多。</p>

<ul>
<li><strong>减少风险</strong></li>
</ul>


<p>缺陷的检测和修复变得更快，让寻找和修改bug的工作变简单（只修改系统一小部分，无需看太多代码。由于提交后就可以得到反馈，记忆很新鲜，可以进行差异调试。）同时过早的引入集成，使我们能更好的审视各个模块的接口是否满足要求，减少项目中的假定。</p>

<ul>
<li><strong>减少重复过程</strong></li>
</ul>


<p>由于CI将大量的工作给自动化了，那么可以让人们有时间做更多的需要动脑筋的、更高价值的工作。而且通过对重要过程自动化，克服了项目中某些成员对实现改进的抵制，有利于持续集成的推进。这样就形成了一个良性循环。</p>

<ul>
<li><strong>在任何时间、任何地点生成可部署的软件</strong></li>
</ul>


<p>对于客户来说，可以部署的软件是最实际的资产。而CI则可以轻松做到这一点。</p>

<ul>
<li><strong>增强项目的可见性</strong></li>
</ul>


<p>通过对CI服务器的监控，可以随时了解项目的趋势。CI上的红色或绿色表示了当前项目的健康程度。每一个功能的交付都经历了单元测试或集成测试的考验。</p>

<ul>
<li><strong>对开发团队的软件产品建立起更强大的产品信心</strong></li>
</ul>


<p>CI可以防止破窗综合症，让开发团队一点点积累起对产品的信息。</p>

<h2>CI的特征</h2>

<p><img src="http://www.huangbowen.net/images/CIOverView.png"></p>

<p>从上述图中可以看出CI有四个特征：</p>

<ul>
<li><strong>与版本控制系统的连接</strong></li>
</ul>


<p>当开发者提交代码时，就会触发CI系统的运行。</p>

<ul>
<li><strong>构建脚本</strong></li>
</ul>


<p>构建脚本继承了审查、编译、测试、打包、功能测试等环节，保证了产品的质量与可用性。</p>

<ul>
<li><strong>某种类型的反馈机制</strong></li>
</ul>


<p>集成的结果要能很容易的获取到。可以通过一个web页面来呈现，也可以给团队人员发Email。我们公司有些团队做了一些有意思的插件，比如将build的结果映射到一个灯上，或者当构建失败时播放一段音乐等，随时提醒团队成员对build的关注。</p>

<ul>
<li><strong>集成源代码变更的过程</strong></li>
</ul>


<p>代码变更会触发构建,保证了CI能够经常性的运行。</p>

<h2>CI对团队的要求</h2>

<p>很多团队说我们引入了持续集成，但是收到的效果并不好。比如遇到了CI持续失败、没人关注构建结果、没有及时修复build等。那是因为开发团队没有遵循一定的原则。</p>

<ul>
<li><p><strong>经常提交代码</strong></p></li>
<li><p><strong>不要提交无法构建的代码</strong></p></li>
<li><p><strong>立即修复无法集成的构建</strong></p></li>
<li><p><strong>编写自动化的开发者测试</strong></p></li>
<li><p><strong>必须通过所有测试和审查</strong></p></li>
<li><p><strong>执行私有构建</strong></p></li>
<li><p><strong>避免迁出无法构建的代码</strong></p></li>
</ul>


<hr />

<p>持续集成是一个实践性很强的工程活动，其实发展到现在也遇到了一些新的挑战。比如如何减少构建时间、怎样实现分阶段分布式构建、如何应用在有Branch的代码库中、从持续集成进阶到持续交付等。这本书基本没怎么涉及这些话题，毕竟它出版有些年头了，但这仍不失为一本好书。</p>

<p>如果你理解了持续集成的好处，那么在应用过程中就不会有抵触心理，而且也更容易理解持续交付。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[翻译-page对象]]></title>
    <link href="http://www.huangbowen.net/blog/2013/09/17/page-object/"/>
    <updated>2013-09-17T02:14:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/09/17/page-object</id>
    <content type="html"><![CDATA[<p>译者注：这篇文章翻译自马丁·福勒（Martin Flower，对，没错，就是软件教父）官网的一篇文章，原文出处在文底。如果你正在做WEB自动化测试，那么我强烈推荐你看这篇文章。另外透露Martin Flower将于10月份左右来成都ThoughtWorks办公室，大家有机会一睹他的风采。</p>

<!-- more -->


<p>当你在为web页面编写测试时，你需要操作该web页面上的元素来点击链接或验证显示的内容。然而，如果你在测试代码中直接操作html元素,那么你的代码是及其脆弱的，因为UI会经常变动。一个page对象可以封装一个html页面或部分页面，你可以通过提供的应用程序特定的API来操作页面元素，而不需要在HTML中四处搜寻。</p>

<p><img src="http://www.huangbowen.net/images/page_object.png" width="700"></p>

<p>page对象的一个基本经验法则是凡是人类能做的事page对象通过软件客户端都能够做到。它也应当提供一个易于编程的接口并隐藏窗口中低层的部件。所以访问一个文本框应该通过一个访问方法（accessor method）来实现字符串的获取与返回，复选框应当使用布尔值，按钮应当被表示为行为导向的方法名。page对象应当将在GUI控件上所有查询和操作数据的行为封装为方法。一个好的经验法则是，即使改变具体的控制，page对象的接口也不应当发生变化。</p>

<p>尽管该术语是”页面“对象，并不意味着针对每个页面建立一个这样的对象，比如页面有重要意义的元素可以独立为一个page对象[1]。所以,一个显示多个相册的页面可以有一个相册列表的page对象，该对象包含了几个相册page对象。也有可能会有一个页眉page对象及一个页脚page对象。也就是说，如果某些复杂UI的层次结构只是用来组织UI，那么它就不应当与page对象扯上关系。经验法则的目的在于通过给页面建模，从而对应用程序的使用者变得有意义。</p>

<p>同样，如果你导航到另一个页面，初始page对象应当返回另一个page对象作为新页面[2]。一般而言，page对象的操作应当返回基本类型（字符串，日期）或另一个page对象。</p>

<p>一个有意见分歧的地方是page对象是否应自身包含断言，或者仅仅提供数据给测试脚本来设置断言。在page对象中包含断言的倡导者认为，这有助于避免在测试脚本中出现重复的断言，可以更容易的提供更好的错误信息，并且提供更接近<a href="http://martinfowler.com/bliki/TellDontAsk.html">只做不问</a>风格的API。不在page对象中包含断言的倡导者则认为,包含断言会混合访问页面数据和实现断言逻辑的职责，并且导致page对象过于臃肿。</p>

<p>我赞成在page对象中不包含断言。我认为你可以通过为常用的断言提供断言库的方式来消除重复，这还可以提供更好的诊断。[3]</p>

<p>page对象通常用于测试中，但自身不应包含断言。它们的职责是提供对基本页面状态的访问，实现断言逻辑则是测试客户端的职责。</p>

<p>我所描述的这个模式针对HTML，但同样的模式也同样适用于任何UI技术。我见过这种模式有效的隐藏了Java swing UI的细节，并且我深信它已经被广泛的应用于几乎所有其他的UI框架。</p>

<p>并行问题是另一个page对象可以封装的话题。这可能涉及异步操作中隐藏不作为异步呈现给用户的异步性，也有可能涉及封装UI框架中你不得不担心的UI和工作线程之间分配行为的线程问题。</p>

<p>page对象在测试中的使用非常常见，但是也被用于在应用程序上层提供一个脚本接口。一般而言，我们最好将脚本接口置于UI下层，这样做的复杂底，执行速度快。然而，对于在UI层有太多行为ide应用程序而言，使用page对象可能是在槽糕的工作中最好的选择。（但是尽量将UI操作逻辑移入到page对象中，长期来看会导致更好的脚本以及更健康的UI。）</p>

<p>使用一些<a href="http://martinfowler.com/bliki/DomainSpecificLanguage.html">领域特定语言</a>来书写测试非常普遍，比如Cucumber或一门内部DSL。如果你尽量在page对象层级之上编写测试DSL，那么你可以通过一个解析器将DSL声明转换为调用page对象。</p>

<blockquote><p>如果你在测试方法中使用了WebDriver API，那么你做错了 &#8211; <a href="http://blog.rocketpoweredjetpants.com/">Simon Stewart</a>.</p></blockquote>

<p>对于那些将逻辑从页面元素中剥离的模式（例如 <a href="http://martinfowler.com/eaaDev/PresentationModel.html">Presentation Model</a>, <a href="http://martinfowler.com/eaaDev/SupervisingPresenter.html">Supervising Controller</a>, 及<a href="http://martinfowler.com/eaaDev/PassiveScreen.html">Passive View</a>)而言,在UI层面做测试用处不大，所以也不太需要page对象了。</p>

<p>page对象是封装的一个典型示例。它们从其它组件（如测试）部件中隐藏了UI结构的细节。如果你自问“我如何能从软件测试中隐藏细节？”，当你做开发时在这样的情况采用page对象不失于一个好的设计原则。封装体现了两方面的好处。我已经强调，通过将操作UI的逻辑限制到单个地方有助于你修改逻辑而不影响系统的其他组件。一个间接的好处是使测试端代码更容易理解，因为逻辑是关于测试的意图，而不会被UI细节搞乱。</p>

<h2>延伸阅读</h2>

<p>我刚开始将这种模式命名为<a href="http://martinfowler.com/eaaDev/WindowDriver.html">窗口驱动</a>(Window Driver)。然而自从Selenium web测试框架使用“page object”这个名称，page对象变成了常用的名称。</p>

<p><a href="https://code.google.com/p/selenium/wiki/PageObjects">Selenium的维基</a>强烈推荐使用page对象，并提供了如何使用它们的建议。它也赞成page对象不包含断言。</p>

<h2>致谢</h2>

<p>Perryn Fowler, Pete Hodgson及Simon Stewart为这篇博客的草稿提供了非常有用的意见。同样像往常一样我非常感激ThoughtWorks软件开发列表中的形形色色的参与者提供的建议和修正意见。</p>

<h2>脚注</h2>

<ol>
<li><p>有观点认为”page对象“名称是一个误导。因为它让你认为一个页面只能有一个page对象。类似面板对象可能会更好，但是page对象已经被广泛接受。Page对象再次验证了命名是计算机科学中唯二的<a href="http://martinfowler.com/bliki/TwoHardThings.html">两件困难事</a>之一.</p></li>
<li><p>page对象负责创建其他的page对象（比如导航）是共同的建议。然而，一些从业者更喜欢page对象返回一些通用的浏览器上下文，并且测试来居于测试流程（特别是条件流）中的上下文来控制page对象的创建。
他们的偏好是基于测试脚本知道期望的下个页面是哪个这一事实，所以page对象自身并需要这些逻辑。使用静态类型语言的从业者更偏好这样，因为静态类型语言通常以类型标记来表示页面导航。</p></li>
<li><p>page对象中包含断言也行，尽管大多数人（比如我）更青睐无断言风格。这些断言应该检查页面或应用程序在此时此刻的不变量，而不是测试探索的具体东西。</p></li>
</ol>


<p>本文出处: <a href="http://martinfowler.com/bliki/PageObject.html">http://martinfowler.com/bliki/PageObject.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[云时代基础设置自动化管理利器： Chef]]></title>
    <link href="http://www.huangbowen.net/blog/2013/09/16/introduction-of-chef/"/>
    <updated>2013-09-16T23:29:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/09/16/introduction-of-chef</id>
    <content type="html"><![CDATA[<p><img src="http://www.huangbowen.net/images/migrate_to_cloud.png"></p>

<p>云时代的到来势不可挡。尤其作为程序员，我们每天或多或少的直接或间接的使用者各种云服务。云平台有很多种，如云软件（SaaS， Software as a service）、云平台（PaaS, Platform as a service）、云设备(IaaS, Infrastructure as a service)。云计算由于其价格低廉、按需提高、使用方便等特点，越来越受到人们的欢迎。</p>

<!-- more -->


<h2>Chef是什么？</h2>

<p>Chef的出现正是顺应了云潮流。如果你是一个公司的devops成员，每天配置服务器上的软件和服务，为了给服务器新加一个节点而通宵作业，为了解决服务器上的一个奇诡问题而想破脑袋。
这时候，你应该考虑使用Chef。</p>

<blockquote><p>Chef is built to address the hardest infrastructure challenges on the planet. By modeling IT infrastructure and application delivery as code, Chef provides the power and flexibility to compete in the digital economy.</p></blockquote>

<p>通过这段话，可以总结出Chef的几个特点。</p>

<ol>
<li><p>Chef是为了解决基础设施难题。</p></li>
<li><p>Chef通过建模将基础设施及应用程序交付抽象为代码。</p></li>
<li><p>Chef具有强大的能力及灵活性.</p></li>
<li>由于配置即代码，基础设施即代码，Chef自动具有了版本控制功能，同时添加复制服务器也变得更容易。</li>
</ol>


<p>Chef主要包括三大块：Workstation、Chef Server、Chef Client。（另外还有个chef-solo，是个简化版的Chef-Client，不在本文讨论范围。）</p>

<p>以下是Chef的架构图。</p>

<p><img src="http://www.huangbowen.net/images/chef_overview.png" width="600"></p>

<h2>Workstation</h2>

<p>Workstation可以简单地认为是自己的工作电脑，在上面需要建立一个chef-repo。chef-repo管理了cookbooks、recipes、roles、environment等数据。cookbooks、recipes、roles是Chef对infrastructure做的一层抽象。可以打个这样的比喻，cookbooks可以理解为一个菜系，recipes就是这个菜系里面的一道道菜，比如宫保鸡丁，roles则是一桌丰富的宴席，比如满汉全席。而nodes则是一个个盛菜的桌子。我们可以来一个满汉全席（直接给这个node设置一个role），也可以从菜系里抽一些菜品来做一到家常小菜（给指定node设置一个run list，里面包括指定的recipe）。recipe就是一系列的资源，比如在node上需要安装jvm，那么安装jvm的包就是一个recipe。</p>

<p>在Workstation上主要通过knife这个命令行工具来创建和管理这些资源。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>knife <span class="nb">help </span>list
</span><span class='line'>Available <span class="nb">help </span>topics are:
</span><span class='line'>  bootstrap
</span><span class='line'>  chef-shell
</span><span class='line'>  client
</span><span class='line'>  configure
</span><span class='line'>  cookbook
</span><span class='line'>  cookbook-site
</span><span class='line'>  data-bag
</span><span class='line'>  environment
</span><span class='line'>  <span class="nb">exec</span>
</span><span class='line'><span class="nb">  </span>index
</span><span class='line'>  knife
</span><span class='line'>  node
</span><span class='line'>  role
</span><span class='line'>  search
</span><span class='line'>  shef
</span><span class='line'>  ssh
</span><span class='line'>  status
</span><span class='line'>  tag
</span></code></pre></td></tr></table></div></figure>


<p>knife是由ruby写的一个gem。它的API很有表现力。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># 创建一个recipe</span>
</span><span class='line'><span class="nv">$ </span>knife cookbook create myRecipe
</span><span class='line'>** Creating cookbook myRecipe
</span><span class='line'>** Creating README <span class="k">for </span>cookbook: myRecipe
</span><span class='line'>** Creating CHANGELOG <span class="k">for </span>cookbook: myRecipe
</span><span class='line'>** Creating metadata <span class="k">for </span>cookbook: myRecipe
</span><span class='line'>
</span><span class='line'><span class="c">#从cookbook server上下载recipe</span>
</span><span class='line'><span class="nv">$ </span>knife cookbook site install apache2
</span><span class='line'>
</span><span class='line'><span class="c">#将本地的recipe上传到服务器上</span>
</span><span class='line'><span class="nv">$ </span>knife cookbook upload myRecipe
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c">#查看服务上当前注册的所有的node</span>
</span><span class='line'><span class="nv">$ </span>knife node list
</span><span class='line'>bowenhuang-starter
</span><span class='line'>
</span><span class='line'><span class="c">#查看bowenhuang-starter node的详细信息</span>
</span><span class='line'><span class="nv">$ </span>knife node show bowenhuang-starter
</span><span class='line'>Node Name:   bowenhuang-starter
</span><span class='line'>Environment: _default
</span><span class='line'>FQDN:        bowenhuang-starter
</span><span class='line'>IP:          10.0.2.15
</span><span class='line'>Run List:    recipe<span class="o">[</span>apt<span class="o">]</span>, recipe<span class="o">[</span>apache2<span class="o">]</span>
</span><span class='line'>Roles:
</span><span class='line'>Recipes:     apt, apache2
</span><span class='line'>Platform:    ubuntu 12.04
</span><span class='line'>Tags:
</span><span class='line'>
</span><span class='line'><span class="c">#将指定IP或主机名的机器注册到服务器上</span>
</span><span class='line'><span class="nv">$ </span>knife bootstrap IP <span class="se">\</span>
</span><span class='line'>  --ssh-user USERNAME <span class="se">\</span>
</span><span class='line'>  --ssh-password PASSWORD <span class="se">\</span>
</span><span class='line'>  --ssh-port PORT <span class="se">\</span>
</span><span class='line'>  --sudo
</span></code></pre></td></tr></table></div></figure>


<p>在cehf-repo下需要建立一个隐藏的文件夹.chef，该文件夹中包含三个重要的文件：USER.pem, ORGANIZATION-validator.pem, knife.rb。USER.pem是一个私钥，用于workstation与chef server通讯。ORGANIZATION-validator.pem是另一个私钥，用于bootstrap一个新node时该node第一次与服务器通讯。knife.rb则是knife的配置的文件，比如客户端key文件路径，chef server的api地址，cookbook的路径等。</p>

<h2>Chef Server</h2>

<p>Chef Server用来存储workstaton上传的各种资源，包括cookbooks，roles，environments，nodes等。我们可以使用公有的Server，如opscode,也可以通过开源软件架设自己的私服。Chef server提供了一系列的api，用于与workstation和nodes传输资源和数据。opscode上的server需要注册，注册以后需要建立一个organisation, 并从server上下载生成的USER.pem私钥和ORGANISATION-validitor.pem私钥。Chef server也提供了一个search的API，可以通过workstation根据attributes检索注册在服务器上的node。</p>

<p>Chef Server本来是使用ruby写的，后来为了保持高并发和稳定性，能够同时服务一定数量级的node，Chef Server内核采用了支持高并发的Erlang程序，而前端则仍然使用ruby on rails。</p>

<h2>Nodes</h2>

<p>在bootstrap一个node时候，首先需要在该node上安装chef-client包，并将workstation上的ORGANIZATION-validator.pem文件拷贝到node节点上，供node与chef server建立连接。chef server通过验证后会发给node一个新的私钥，以后node就可以通过这个新的私钥与chef server交互。在node的<code>etc\chef</code>的目录下会生成四个文件：client.pem, client.rb, first-boot.json, validation.pem。vlidation.pem就是从workstation拷贝过来的秘钥，client.pem则是服务器为该node新生成的秘钥，client.rb则定义了服务器的API地址，秘钥文件路径等信息，first-boot.json则存放了bootstrap该node节点时的配置信息，如run list信息，role信息等。</p>

<p>chef-client是一个可定期的后台运行的命令行程序。chef-client会收集当前node的各种信息，如操作信息型号版本等，和chef server建立连接，获取chef server上对该节点的配置信息，并安装指定的recipe，运行指定的服务。</p>

<hr />

<p>通过Chef，可以一键更新所有的服务器，在指定的服务器上安装指定的软件。如果有新同事入职，可以很轻松的setup一台开发机；如果服务器节点需要扩展，也只需要几个命令就可搞定。运筹帷幄，一切皆在掌控之中。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gradle的属性设置大全]]></title>
    <link href="http://www.huangbowen.net/blog/2013/09/12/setup-properties-in-gradle/"/>
    <updated>2013-09-12T22:41:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/09/12/setup-properties-in-gradle</id>
    <content type="html"><![CDATA[<p>Gradle作为一款项目构建工具，由于其强大、灵活、快速、完全兼容Ant等特性，越来越受到人们欢迎。Gradle的灵活有时候也会引起人们的困惑。比如在Gradle中设置变量和属性就有N种办法。由于Gradle的理念是Convention over configruation(约定优于配置),所以如果了解了这些约定，那么在使用Gradle的属性配置时一定会如鱼得水。</p>

<!-- more -->


<hr />

<p><strong>在项目根目录下建立名为gradle.properties文件，在该文件中定义需要的属性。这些属性在Gradle构建Gradle领域对象（即project对象实例）时会被自动加到project对象实例中作为其属性被直接调用。</strong></p>

<figure class='code'><figcaption><span>gradle.properties</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>guestName= Bowen
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>build.gradle</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">task</span> <span class="n">hello</span> <span class="o">&lt;&lt;</span> <span class="o">{</span>
</span><span class='line'>     <span class="n">println</span> <span class="n">$guestName</span>
</span><span class='line'>     <span class="n">println</span> <span class="s2">&quot;hello, $guestName&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>gradle hello -q
</span><span class='line'>Bowen
</span><span class='line'>hello, Bowen
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>gradle properties | grep guestName
</span><span class='line'>guestName: Bowen
</span></code></pre></td></tr></table></div></figure>


<hr />

<p><strong>定义在build.gradle中的ext块中。ext准确的说是Gradle领域对象的一个属性，我们可以将自定义的属性添加到ext对象上，Build.gradle中的其它代码片段可以使用。</strong></p>

<figure class='code'><figcaption><span>build.gradle</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">ext</span> <span class="o">{</span>
</span><span class='line'>     <span class="n">guestName</span><span class="o">=</span><span class="s1">&#39;Bowen&#39;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">task</span> <span class="n">hello</span> <span class="o">&lt;&lt;</span> <span class="o">{</span>
</span><span class='line'>     <span class="n">println</span> <span class="n">guestName</span>
</span><span class='line'>     <span class="n">println</span> <span class="s2">&quot;hello, $guestName&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>gradle hello -q
</span><span class='line'>Bowen
</span><span class='line'>hello, Bowen
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>gradle properties | grep guestName
</span><span class='line'>guestName: Bowen
</span><span class='line'><span class="nv">$ </span>gradle properties | grep ext
</span><span class='line'>ext: org.gradle.api.internal.plugins.DefaultExtraPropertiesExtension@10ef5fa0
</span></code></pre></td></tr></table></div></figure>


<p>从上述可以看到ext对象其实是DefaultExtraPropertiesExtension对象的一个实例。</p>

<hr />

<p><strong>在命令行中通过<code>-D</code>或者<code>-P</code>给Gradle实时创建属性。</strong>
<code>-D</code>属性会被传送给启动Gradle的jvm，作为一个系统属性被jvm使用。</p>

<figure class='code'><figcaption><span>build.gradle</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">task</span> <span class="n">hello</span> <span class="o">&lt;&lt;</span> <span class="o">{</span>
</span><span class='line'>     <span class="n">println</span> <span class="n">System</span><span class="o">.</span><span class="na">properties</span><span class="o">[</span><span class="s1">&#39;guestName&#39;</span><span class="o">]</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>gradle hello -DguestName<span class="o">=</span><span class="s1">&#39;Bowen&#39;</span> -q
</span><span class='line'>Bowen
</span></code></pre></td></tr></table></div></figure>


<p><code>-P</code>属性则会被直接加载到Gradle领域对象上。</p>

<figure class='code'><figcaption><span>build.gradle</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">task</span> <span class="n">hello</span> <span class="o">&lt;&lt;</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">println</span> <span class="s2">&quot;hello, $guestName&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>gradle hello -PguestName<span class="o">=</span><span class="s1">&#39;Bowen&#39;</span> -q
</span><span class='line'>hello, Bowen
</span></code></pre></td></tr></table></div></figure>


<hr />

<p><strong>在Gradle配置文件中创建系统属性。刚讲过在gradle.properties文件可以创建属性，同时我们也可以创建系统属性。如果有<code>systemProp.</code>前缀的属性会被识别为系统属性。</strong></p>

<figure class='code'><figcaption><span>gradle.properties</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>systemProp.guestName = &#39;Bowen&#39;
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>build.gradle</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">task</span> <span class="n">hello</span> <span class="o">&lt;&lt;</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">println</span> <span class="s2">&quot;hello, &quot;</span> <span class="o">+</span> <span class="n">System</span><span class="o">.</span><span class="na">properties</span><span class="o">[</span><span class="s1">&#39;guestName&#39;</span><span class="o">]</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>gradle hello -q
</span><span class='line'>hello, Bowen
</span></code></pre></td></tr></table></div></figure>


<hr />

<p><strong>将特殊前缀的系统属性或环境变量自动加入到Gradle领域对象中。</strong></p>

<p>如果有环境变量以<code>ORG_GRADLE_PROJECT.</code>为前缀，那么该变量会被自动添加到Gradle领域对象中。同样，如果有系统属性以<code>org.gradle.project.</code>为前缀，那么也会被自动加入到Gradl领域对象中。这一特性的目的之一是为了隐藏一些敏感的信息。比如在执行Gradle脚本时需要传入密码信息，如果以<code>-P</code>的方式传送会被别人看到。而把该属性保存为环境变量，只有系统管理员才有权访问和修改。在运行Gralde的时候该环境变量会被自动加入到Gradle对象中被使用，隔离了明暗数据，又不行影响其他用户使用。（其他用户可以通过<code>-P</code>方式是设置该属性）。</p>

<figure class='code'><figcaption><span>build.gradle</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">task</span> <span class="n">hello</span> <span class="o">&lt;&lt;</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">println</span> <span class="s2">&quot;hello, &quot;</span> <span class="o">+</span> <span class="n">guestName</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>gradle hello -Dorg.gradle.project.guestName<span class="o">=</span>Bowen -q
</span><span class='line'>hello, Bowen
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span><span class="nb">export </span><span class="nv">ORG_GRADLE_PROJECT_guestName</span><span class="o">=</span>Bob
</span><span class='line'><span class="nv">$ </span>gradle hello -q
</span><span class='line'>hello, Bob
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gradle里配置jetty实现静态资源的热部署]]></title>
    <link href="http://www.huangbowen.net/blog/2013/09/04/hot-deploy-for-jetty-gradle-plugin/"/>
    <updated>2013-09-04T22:32:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/09/04/hot-deploy-for-jetty-gradle-plugin</id>
    <content type="html"><![CDATA[<p>通过Gradle我们可以很方便的使用内置jetty启动我们的web程序，在本地进行调试。但是在使用的过程中，我发现了几个问题，导致本地调试的效率大受影响。</p>

<!-- more -->


<ol>
<li><p>如果使用<code>gradle jettyRun</code>启动jetty服务器后，项目里的静态资源（jsp，html，JavaScript文件）都被锁定了，导致无法实时修改这些静态资源。</p></li>
<li><p>既然无法实时修改这些静态资源，那意味着我们做一个很小的改动都需要先停止jetty server，然后修改，再重新启动jetty server，这样来回浪费很多时间，尤其是涉及前台页面改动时，每调整一个参数都需要重启jetty。</p></li>
</ol>


<p>由于我以前使用过Maven，在Maven里jetty是可以显示热部署的。也就是说如果有静态文件被改动，那么jetty可以实时load并展现。那么在Gradle里面实现这个应该也不是难事，花了一些时间搞定了。</p>

<ul>
<li><strong>首先要解决文件被锁定的问题。</strong></li>
</ul>


<p>文件被锁定是由于在使用windows系统时，jetty默认在内存中映射了这些文件，而windows会锁定内存映射的文件。解决的办法就是修改jetty的配置，让其在启动server时将useFileMappedBuffer标志位设置为false。</p>

<p>设置方法有两种，一种是修改webdefault.xml文件中的useFileMappdBuffer标志位。webdefault.xml文件是jetty启动服务的配置文件，其先于项目中的WEB-INF/web.xml文件被加载。
jetty包中默认有这个文件，可以将其提取出来，保存在项目根目录下，并修改useFileMappedBuffer节点。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;param-name&gt;</span>useFileMappedBuffer<span class="nt">&lt;/param-name&gt;</span>
</span><span class='line'><span class="nt">&lt;param-value&gt;</span>false<span class="nt">&lt;/param-value&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后在build.gradle加入对此文件的引用。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="o">[</span><span class="n">jettyRun</span><span class="o">,</span> <span class="n">jettyRunWar</span><span class="o">,</span><span class="n">jettyStop</span><span class="o">]*.</span><span class="na">with</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">webDefaultXml</span> <span class="o">=</span> <span class="n">file</span><span class="o">(</span><span class="s2">&quot;${rootDir}/webdefault.xml&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>第二种方法是修改项目中的<code>WEB-INF/web.xml</code>文件，在其中加入这个节点。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;servlet&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- Override init parameter to avoid nasty --&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- file locking issue on windows.         --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;servlet-name&gt;</span>default<span class="nt">&lt;/servlet-name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;init-param&gt;</span>
</span><span class='line'>            <span class="nt">&lt;param-name&gt;</span>useFileMappedBuffer<span class="nt">&lt;/param-name&gt;</span>
</span><span class='line'>            <span class="nt">&lt;param-value&gt;</span>false<span class="nt">&lt;/param-value&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/init-param&gt;</span>
</span><span class='line'><span class="nt">&lt;/servlet&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>解决jetty的hot deploy的问题。</strong></li>
</ul>


<p>这个就比较简单了，Gradle的jetty插件有两个属性，一个是reload属性，需要设置为automatic。另一个属性是
scanIntervalSeconds，这是指定jetty扫描文件改变的时间间隔，默认为0，单位是秒。
在build.gradle中加入设置。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">jettyRun</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">reload</span> <span class="o">=</span><span class="s2">&quot;automatic&quot;</span>
</span><span class='line'>  <span class="n">scanIntervalSeconds</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>齐活。接下来运行<code>gradle jettyRun</code>，待服务启动起来以后，如果修改了静态资源，只需要按<code>Ctrl</code>+<code>R</code>刷新页面即可重新加载资源。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gradle命令行黑魔法]]></title>
    <link href="http://www.huangbowen.net/blog/2013/09/01/command-line-of-gradle/"/>
    <updated>2013-09-01T22:25:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/09/01/command-line-of-gradle</id>
    <content type="html"><![CDATA[<p><img src="http://www.huangbowen.net/images/building.jpg"></p>

<p>毫无疑问，现在Gradle已经成为java世界最火的构建工具，风头已经盖过了冗余的ant，落后的maven。Gradle是以Groovy语言编写的一套构建脚本的DSL，由于Groovy语法的优雅，所以导致Gradle天生就有简洁、可读性强、灵活等特性。</p>

<p>Gradle的命令行功能也非常强大。本人从maven转到Gradle，深深被gradle强大的命令行功能折服。通过命令行来实现Gradle的各种特性，就像魔法师在表演魔法一样。</p>

<!-- more -->


<ul>
<li><strong>日志输出。</strong> Gradle中的日志有6个层级。从高到低分别是 ERROR（错误信息）、QUIET（重要信息）、WARNGING（警告信息）、LIFECYCLE（进程信息）、INFO（一般信息）、DEBUG（调试信息）。在执行gradle task时可以适时的调整信息输出等级，以便更方便的观看执行结果。</li>
</ul>


<p><code>-q</code>(或<code>--quiet</code>)是启用重要信息级别，该级别下只会输出自己在命令行下打印的信息及错误信息。</p>

<p><code>-i</code>(或<code>--info</code>)则会输出除debug以外的所有信息。</p>

<p><code>-d</code>（或<code>--debug</code>)会输出所有日志信息。</p>

<p>比如一个build.gradle有这样一个task。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">task</span> <span class="n">hello</span> <span class="o">&lt;&lt;</span> <span class="o">{</span>
</span><span class='line'>     <span class="n">println</span> <span class="s1">&#39;hello world!&#39;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>加入<code>-q</code>与不加<code>-q</code>的输出结果不同。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>gradle hello
</span><span class='line'>:hello
</span><span class='line'>hello world!
</span><span class='line'>
</span><span class='line'>BUILD SUCCESSFUL
</span><span class='line'>
</span><span class='line'>Total <span class="nb">time</span>: 3.546 secs
</span><span class='line'><span class="nv">$ </span>gradle -q hello
</span><span class='line'>hello world!
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p><strong>堆栈跟踪。</strong>如果执行gradle task失败时，如果想得到更详细的错误信息，那么就可以使用<code>-s</code>(或<code>--stacktrace</code>)来输出详细的错误堆栈。你还可以使用<code>-S</code>(或<code>--full-stacktrace</code>)来输出全部堆栈信息，不过一般不推荐这样做，因为gradle是基于groovy语言，而groovy作为一门动态语言可能会输出与你的错误代码毫不相关的信息。</p></li>
<li><p><strong>跳过指定的测试。</strong>如果你在执行build的时候想跳过test task，那么可以使用<code>-x</code>命令。</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>gradle build -x <span class="nb">test</span>
</span><span class='line'>:compileJava UP-TO-DATE
</span><span class='line'>:processResources UP-TO-DATE
</span><span class='line'>:classes UP-TO-DATE
</span><span class='line'>:jar UP-TO-DATE
</span><span class='line'>:assemble UP-TO-DATE
</span><span class='line'>:check
</span><span class='line'>:build
</span><span class='line'>
</span><span class='line'>BUILD SUCCESSFUL
</span><span class='line'>
</span><span class='line'>Total <span class="nb">time</span>: 3.529 secs
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p><strong>继续执行task而忽略前面失败的task。</strong>默认情况下，如果有某个task失败，后续的task就不会继续执行。但是有时候我们想运行所有的task来一次性得到所有的构建错误，那么我们可以使用<code>--continue</code>命令。使用<code>--continue</code>命令后即使遇到某些task失败也不会停止后续task的执行。但是需要注意的是如果某个task失败了，那么依赖于这个task的其他task依旧不会执行，因为这会带来不安全的因素。</p></li>
<li><p><strong>调用task时使用短名或缩写。</strong>如果一个task的名称过长，那么调用时可以只输入部分名称即可调用，无需输入全名。</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">task</span> <span class="n">helloWorld</span> <span class="o">&lt;&lt;</span> <span class="o">{</span>
</span><span class='line'>     <span class="n">println</span> <span class="s1">&#39;hello world!&#39;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>比如调用helloWorld可以通过全名调用、前缀调用或首字母调用。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>gradle -q helloWorld
</span><span class='line'>hello world!
</span><span class='line'><span class="nv">$ </span>gradle -q hell
</span><span class='line'>hello world!
</span><span class='line'><span class="nv">$ </span>gradle -q hW
</span><span class='line'>hello world!
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>使用指定的gradle文件调用task。</strong>默认情况下，如果你调用gradle task，那么首先会寻找当前目录下的build.gradle文件,以及根据settings.gradle中的配置寻找子项目的build.gradle。但是有时候我们想指定使用某个gradle文件，那么可以使用<code>-b</code>命令。
比如当前目录有个子目录subproject1,里面有个叫hello.gradle。</li>
</ul>


<figure class='code'><figcaption><span>subproject1/hello.gradle</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">task</span> <span class="n">helloWorld</span> <span class="o">&lt;&lt;</span> <span class="o">{</span>
</span><span class='line'>     <span class="n">println</span> <span class="s1">&#39;hello world!&#39;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>那么在当前目录可以使用以下命令调用这个task。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>gradle -b subproject1/hello.gradle  helloWorld
</span><span class='line'>:helloWorld
</span><span class='line'>hello world!
</span><span class='line'>
</span><span class='line'>BUILD SUCCESSFUL
</span><span class='line'>
</span><span class='line'>Total <span class="nb">time</span>: 3.752 secs
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>使用指定的项目目录调用task。</strong>前面已经说过，执行gradle的task默认会在当前目录寻找build.gradle及settings.gradle文件。如果我们想在任何地方执行某个项目的task，那么可以使用<code>-p</code>来指定使用的项目。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">gradle</span> <span class="o">-</span><span class="n">q</span> <span class="o">-</span><span class="n">p</span> <span class="n">learnGradle</span> <span class="n">helloWorld</span>
</span></code></pre></td></tr></table></div></figure>


<p>这条命令是调用learnGradle这个项目下的helloWorld task。</p>

<ul>
<li><strong>显示task之间的依赖关系。</strong>众所周知，使用<code>gradle tasks</code>可以列出当前所有可被使用的task，但是并没有显示task之间的依赖关系。我们可以加上<code>--all</code>来显示
task的依赖关系。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>gradle tasks --all
</span><span class='line'>………………
</span><span class='line'>
</span><span class='line'>Other tasks
</span><span class='line'>-----------
</span><span class='line'>task0
</span><span class='line'>    task1
</span><span class='line'>    task2
</span><span class='line'>    task3
</span><span class='line'>
</span><span class='line'>…………
</span></code></pre></td></tr></table></div></figure>


<pre><code>从上面可以看出task0依赖task1、task2及task3。
</code></pre>

<ul>
<li><strong>查看指定阶段的依赖关系。</strong>使用<code>gradle dependencies</code> 可以查看项目中包的依赖关系。不过是列出了所有阶段的依赖，如果项目中依赖复杂的话看起来有点头痛。那么可以使用<code>--configuration</code>来查看指定阶段的依赖情况。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">$</span> <span class="n">gradle</span> <span class="o">-</span><span class="n">q</span> <span class="n">dependencies</span>
</span><span class='line'>
</span><span class='line'><span class="o">------------------------------------------------------------</span>
</span><span class='line'><span class="n">Root</span> <span class="n">project</span>
</span><span class='line'><span class="o">------------------------------------------------------------</span>
</span><span class='line'>
</span><span class='line'><span class="n">archives</span> <span class="o">-</span> <span class="n">Configuration</span> <span class="k">for</span> <span class="n">archive</span> <span class="n">artifacts</span><span class="o">.</span>
</span><span class='line'><span class="n">No</span> <span class="n">dependencies</span>
</span><span class='line'>
</span><span class='line'><span class="n">compile</span> <span class="o">-</span> <span class="n">Compile</span> <span class="n">classpath</span> <span class="k">for</span> <span class="n">source</span> <span class="n">set</span> <span class="s1">&#39;main&#39;</span><span class="o">.</span>
</span><span class='line'><span class="n">No</span> <span class="n">dependencies</span>
</span><span class='line'>
</span><span class='line'><span class="k">default</span> <span class="o">-</span> <span class="n">Configuration</span> <span class="k">for</span> <span class="k">default</span> <span class="n">artifacts</span><span class="o">.</span>
</span><span class='line'><span class="n">No</span> <span class="n">dependencies</span>
</span><span class='line'>
</span><span class='line'><span class="n">runtime</span> <span class="o">-</span> <span class="n">Runtime</span> <span class="n">classpath</span> <span class="k">for</span> <span class="n">source</span> <span class="n">set</span> <span class="s1">&#39;main&#39;</span><span class="o">.</span>
</span><span class='line'><span class="n">No</span> <span class="n">dependencies</span>
</span><span class='line'>
</span><span class='line'><span class="n">testCompile</span> <span class="o">-</span> <span class="n">Compile</span> <span class="n">classpath</span> <span class="k">for</span> <span class="n">source</span> <span class="n">set</span> <span class="s1">&#39;test&#39;</span><span class="o">.</span>
</span><span class='line'><span class="err">\</span><span class="o">---</span> <span class="nl">junit:junit:</span><span class="mf">4.11</span>
</span><span class='line'>     <span class="err">\</span><span class="o">---</span> <span class="n">org</span><span class="o">.</span><span class="na">hamcrest</span><span class="o">:</span><span class="n">hamcrest</span><span class="o">-</span><span class="nl">core:</span><span class="mf">1.3</span>
</span><span class='line'>
</span><span class='line'><span class="n">testRuntime</span> <span class="o">-</span> <span class="n">Runtime</span> <span class="n">classpath</span> <span class="k">for</span> <span class="n">source</span> <span class="n">set</span> <span class="s1">&#39;test&#39;</span><span class="o">.</span>
</span><span class='line'><span class="err">\</span><span class="o">---</span> <span class="nl">junit:junit:</span><span class="mf">4.11</span>
</span><span class='line'>     <span class="err">\</span><span class="o">---</span> <span class="n">org</span><span class="o">.</span><span class="na">hamcrest</span><span class="o">:</span><span class="n">hamcrest</span><span class="o">-</span><span class="nl">core:</span><span class="mf">1.3</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用<code>gradle -q dependencies --configuration testCompile</code>可以只查看testComiple的依赖。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">$</span> <span class="n">gradle</span> <span class="o">-</span><span class="n">q</span> <span class="n">dependencies</span> <span class="o">--</span><span class="n">configuration</span> <span class="n">testCompile</span>
</span><span class='line'>
</span><span class='line'><span class="o">------------------------------------------------------------</span>
</span><span class='line'><span class="n">Root</span> <span class="n">project</span>
</span><span class='line'><span class="o">------------------------------------------------------------</span>
</span><span class='line'>
</span><span class='line'><span class="n">testCompile</span> <span class="o">-</span> <span class="n">Compile</span> <span class="n">classpath</span> <span class="k">for</span> <span class="n">source</span> <span class="n">set</span> <span class="s1">&#39;test&#39;</span><span class="o">.</span>
</span><span class='line'><span class="err">\</span><span class="o">---</span> <span class="nl">junit:junit:</span><span class="mf">4.11</span>
</span><span class='line'>     <span class="err">\</span><span class="o">---</span> <span class="n">org</span><span class="o">.</span><span class="na">hamcrest</span><span class="o">:</span><span class="n">hamcrest</span><span class="o">-</span><span class="nl">core:</span><span class="mf">1.3</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>查看指定dependency的依赖情况。</strong>
假如我想查看项目中有没有引入junit，那些阶段引入了junit，那么可以使用<code>dependecyInsight</code>来查看。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>gradle dependencyInsight --dependency junit --configuration testCompile
</span><span class='line'>:dependencyInsight
</span><span class='line'>junit:junit:4.11
</span><span class='line'><span class="se">\-</span>-- testCompile
</span></code></pre></td></tr></table></div></figure>


<p>注意<code>dependencyInsight</code>默认只会查看compile阶段的依赖，如果要查看其他阶段可以使用<code>--configuration</code>来指定。</p>

<ul>
<li><strong>使用<code>--profile</code>命令行可以产生build运行时间的报告。</strong>该报告存储在build/report/profile目录，名称为build运行的时间。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>gradle build --profile
</span><span class='line'>:compileJava UP-TO-DATE
</span><span class='line'>:processResources UP-TO-DATE
</span><span class='line'>:classes UP-TO-DATE
</span><span class='line'>:jar UP-TO-DATE
</span><span class='line'>:assemble UP-TO-DATE
</span><span class='line'>:compileTestJava UP-TO-DATE
</span><span class='line'>:processTestResources UP-TO-DATE
</span><span class='line'>:testClasses UP-TO-DATE
</span><span class='line'>:test UP-TO-DATE
</span><span class='line'>:check UP-TO-DATE
</span><span class='line'>:build UP-TO-DATE
</span><span class='line'>
</span><span class='line'>BUILD SUCCESSFUL
</span><span class='line'>
</span><span class='line'>Total <span class="nb">time</span>: 3.726 secs
</span></code></pre></td></tr></table></div></figure>


<p>然后在build/report/profile目录下可以看到build的report。</p>

<p><img src="http://www.huangbowen.net/images/gradle_profile.png" width="600"></p>

<p>这个报表非常有用，尤其是在在缩短build时间时可以快速定位那些耗时长的task。</p>

<ul>
<li><strong>试运行build。</strong>如果你想知道某个task执行时那些task会被一起执行，但是你又不想真正的执行这些task，可以使用<code>-m</code>来试运行。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>gradle -m build
</span><span class='line'>:compileJava SKIPPED
</span><span class='line'>:processResources SKIPPED
</span><span class='line'>:classes SKIPPED
</span><span class='line'>:jar SKIPPED
</span><span class='line'>:assemble SKIPPED
</span><span class='line'>:compileTestJava SKIPPED
</span><span class='line'>:processTestResources SKIPPED
</span><span class='line'>:testClasses SKIPPED
</span><span class='line'>:test SKIPPED
</span><span class='line'>:check SKIPPED
</span><span class='line'>:build SKIPPED
</span><span class='line'>
</span><span class='line'>BUILD SUCCESSFUL
</span><span class='line'>
</span><span class='line'>Total <span class="nb">time</span>: 3.53 secs
</span></code></pre></td></tr></table></div></figure>


<p>这样我们可以一目了然的看到那些task被执行了，又不需要花太多的时间。</p>

<ul>
<li><strong>Gradle的图形界面。</strong></li>
</ul>


<p>其实Gradle自带一个图形界面来让习惯gui操作的人来操作Gradle。打开方式很简单。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>gradle --gui
</span></code></pre></td></tr></table></div></figure>


<p>这样就会弹出一个gui界面。</p>

<p><img src="http://www.huangbowen.net/images/gradle_gui.png" width="600"></p>

<p>通过这个gui界面可以很方面的执行gradle的各种命令，还可以将常用的命令保存为favorites。该gui的配置信息默认被存储在当前项目的gradle-app.setting文件中。</p>

<p>注意使用<code>gradle --gui</code>会阻塞当前终端，可以使用<code>gradle --gui&amp;</code>来实现后台运行。</p>

<ul>
<li><strong>重新编译Gradle脚本。</strong>第一次运行Gradle命令，会在项目更目录下生成一个.gradle目录来存放编译后的脚本。只有当构建脚本发生修改时采用重新编译。我们可以使用<code>--recompile-scripts</code>来强行重新编译。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2013年上半年我读过的那些书]]></title>
    <link href="http://www.huangbowen.net/blog/2013/08/25/the-books-i-read-in-the-half-past-2013/"/>
    <updated>2013-08-25T13:10:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/08/25/the-books-i-read-in-the-half-past-2013</id>
    <content type="html"><![CDATA[<p>2013年过的很快，一不留神8个月就过去了。在今年年初的时候我给自己定下了2013全年阅读30本书的计划。这段时间总共算了下自己读完的加上在读的有10多本。</p>

<p>这些书中既有实体书，也有电子书。实体书有的是公司买的，有的是自己自掏腰包，但是年底可以报账。电子书的话主要是在亚马逊和豆瓣上买的正版书，阅读工具是自己的电脑或者手机。</p>

<!-- more -->


<p>现在我看书越来越倾向于电子书。因为携带方便，购买方便，阅读更方便。看电子书的神器莫过于kindle了。在kindle还没进入中国之前，我们公司的很多人都已经通过各种途径入手了。当时自己想买个日版的（全球最便宜），奈何信用卡有问题，通过不了日本亚马逊的验证。虽然自己有ipad，但总感觉太笨重，并且ipad上娱乐功能太多，容易分心。以后一定要入手一个kindle。</p>

<h2>高效程序员的45个习惯：敏捷开发修炼之道</h2>

<p><a href="http://book.douban.com/subject/4164024/"><img src="http://img5.douban.com/lpic/s4073509.jpg" width="200"></a></p>

<p>又是一本讲敏捷的书。如今这年头技术书不套上敏捷两字都不好意思给别人打招呼。很多人对敏捷有偏见，认为是个嘘头。其实这是个舶来品，被念歪也不可避免。这本书里面的习惯都是很有借鉴意义的。作为一个程序员要有专业素养。而专业素养都有哪些那？请看这本书。</p>

<p>这是我写的一篇读书笔记。<a href="http://www.cnblogs.com/huang0925/archive/2013/05/24/3096581.html">传送门</a></p>

<h2>打造Facebook:亲历Facebook爆发的5年</h2>

<p><a href="http://book.douban.com/subject/20471120/"><img src="http://img3.douban.com/lpic/s24581301.jpg" width="200"></a></p>

<p>一个创业公司的典范，一个硅谷的传奇，一个年轻又低调的CEO……Facebook从来不缺乏神秘。而这本书则是从工程师的视角展示Facebook的方方面面。虽然是金子总会发光的，但现在绝大多数人的首要目标恐怕是如何让自己成为金子。从《打造Facebook》这本书中可以了解这家公司的工程师文化，学习到那些“金子”为什么能成为“金子”，并借鉴到自己身上。</p>

<p>这是我的读书笔记。<a href="http://www.cnblogs.com/huang0925/p/3251040.html">传送门</a></p>

<h2>图灵的秘密:他的生平思想及论文解读</h2>

<p><a href="http://book.douban.com/subject/10779604/"><img src="http://img3.douban.com/lpic/s23127964.jpg" width="200"></a></p>

<p>诚然，我没有完全看懂这本书。当看到哪些大堆大堆的数学符号时，我就懵了。这本书以图灵的那篇惊世骇俗的论文（&lt;论可计算数及其在判定性问题中的应用>（On Computable Numbers, with an Application to the Entscheidungsproblem））为主线，穿插了图灵的一生。大名鼎鼎的图灵机就是出自这篇论文。</p>

<p>这是我的读书笔记。<a href="http://www.cnblogs.com/huang0925/archive/2013/03/31/2992489.html">传送门</a></p>

<h2>Shell脚本学习指南</h2>

<p><a href="http://book.douban.com/subject/3519360/"><img src="http://img4.douban.com/lpic/s3801638.jpg" width="200"></a></p>

<p>坦白说，这本书的质量并不怎么高，一是翻译质量较差劲，而是内容编排有问题。读这本书也是因为想深入了解一下Shell的一些核心概念，能够做到灵活运用。程序员在终端敲出各种字符来完成各种各样的任务，就像是黑魔法师在施展魔法。大多数情况下，终端操作比在UI操作的效率快的不是一点半点。</p>

<p>这是我读了此书后写的一个Shell脚本，现在自己还一直在使用。<a href="http://www.cnblogs.com/huang0925/archive/2013/05/31/3109893.html">传送门</a></p>

<h2>正则表达式必知必会</h2>

<p><a href="http://book.douban.com/subject/2269648/"><img src="http://img3.douban.com/lpic/s2794811.jpg" width="200"></a></p>

<p>这本书不厚，只有100来页，只需要花一个下午就可以翻完。但是它是一本好书，结合实例讲解了正则表达式的全部概念。保证你看完后面对正则表达式再也不胆怯了，也知道在适合的时候使用正则表达式了。
如果你不了解回溯引用、前后查找、嵌入条件等概念，那么说明你还未掌握正则表达式最power的地方。</p>

<p>这是我读完此书后画的一个脑图。<a href="http://huangbowen.net/blog/2013/02/14/zheng-ze-biao-da-shi-bi-zhi-bi-hui/">传送门</a></p>

<h2>持续集成:软件质量改进和风险降低之道</h2>

<p><a href="http://book.douban.com/subject/2580604/"><img src="http://img5.douban.com/lpic/s2975159.jpg" width="200"></a></p>

<p>这本书从理论角度阐述了持续集成的重要性与可行性。如今持续集成已经成为了软件开发过程中的一项必不可少的实践。如果你的项目中还未引入持续集成，那么赶紧行动起来吧。我工作的项目中持续集成已经成为标配。</p>

<p>这是我写的一篇将云端CI traivs-CI引用到个人项目中的简介。<a href="http://www.cnblogs.com/huang0925/archive/2013/05/30/3108370.html">传送门</a></p>

<h2>Effective JavaScript: 68 Specific Ways to Harness the Power of JavaScript</h2>

<p><a href="http://book.douban.com/subject/10494340/"><img src="http://img3.douban.com/lpic/s24868715.jpg" width="200"></a></p>

<p>这是一本英文书。由于自己是这本书的译者，所以肯定要首先读完这本书。JavaScript是一门与C#、Java等大众语言风格相差甚远的语言。它本身就是借鉴了很多语言的特性，语法借鉴自java，函数借鉴自Scheme,原型继承借鉴自Self，而JavaScript的正则表达式特性则借鉴自Perl。但是由于规范的缺失，JavaScript使用过程中又有很多陷阱。这本书作为Effective development program系列中的一员，是你成为JavaScript专家的捷径。里面有大量的来自一线的开发经验，一定让你大有收获。</p>

<p>这本书目前编辑还在校审，过几个月中文版就会面世。
这是我写的译者序初稿。<a href="http://huangbowen.net/blog/2013/08/25/preface-of-effective-javascript/">传送门</a></p>

<h2>程序员的思维修炼：开发认知潜能的九堂课</h2>

<p><a href="http://book.douban.com/subject/5372651/"><img src="http://img5.douban.com/lpic/s4548399.jpg" width="200"></a></p>

<p>这本书很精彩。有人说编程需要缜密的思维，严密的逻辑，一个小数点的错误都有可能导致航天飞机的坠毁。而有人说编程需要灵感，一个功能有千万种实现，我们要找出最优雅的那种。这两种观点貌似完全冲突，但是都对。如果你想知道为什么，那就读这本书吧。你会明白为什么专家解决问题总是那么高效，而自己的成长却是那么缓慢。</p>

<p>这是我写的一篇文章，里面有些思想借鉴于它。<a href="http://www.cnblogs.com/huang0925/archive/2013/03/24/2978181.html">传送门</a></p>

<p>此外，还有几本书正在读，有《黑客与画家》、《写给大家看的设计书》、《Rework》、《实例化需求》….还有一本《SICP》尝试读了几次都没读完。这本书确实比较难读懂。
之后我还会计划多读几本英文书。因为我发现很多原版的技术书都很浅显易懂，而翻译成中文往往会难以理解。</p>

<p>如果一个人一生有70年寿命，除去头20年，那么还有50年。如果半个月看完一本书，那么全年可以看24本。50年就是1200多本。而世界上每个月出本的书籍都远远超过这些。</p>

<p>而作为程序员本来时间就很宝贵，所以看书一定要尽量选精品。最后给大家附上我司的Developer读书路线图，里面不乏经典的书籍。<a href="http://www.cnblogs.com/huang0925/archive/2013/03/26/2983529.html">传送门</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Effective JavaScript译者序]]></title>
    <link href="http://www.huangbowen.net/blog/2013/08/25/preface-of-effective-javascript/"/>
    <updated>2013-08-25T12:17:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/08/25/preface-of-effective-javascript</id>
    <content type="html"><![CDATA[<p><img src="http://img3.douban.com/lpic/s24868715.jpg"></p>

<p>虽然JavaScript在诞生之初由于商业原因及规范的缺少，一直饱受人们的诟病。但是随着时间的推移，
人们已经逐渐走出了对这门语言的偏见和误解，开始领略它那强大的语言特性。当下JavaScript语言大红大紫，研究讨论JavaScript的相关书籍也早已汗牛充屋，但是这本书作为Effective软件开发系列中的一员，却是不可或缺。</p>

<!-- more -->


<p>学会写JavaScript容易，但要成为专家则要难上许多。这一方面是由于JavaScript语言的设计思想与Java、c#等大众语言相差甚大，另一方面是由于其设计时的仓促性导致JavaScript语言本身精华与糟粕并存。本书的作者David Herman作为JavaScript标准化的参与者，在书中自然对JavaScript的精华和糟粕都进行了深入的阐述，并且给出了很多实用的建议。这些建议都来自于第一线的实践经验，无论是初学者还是高级程序员，都可以从中吸收到养分，得到快速成长。</p>

<p>本书深入阐述了JavaScript语言，通过它可以了解到如何有效的写出高移植性、健壮的程序和库。本书传承了Effective软件开发系列的简明的场景驱动风格，通过提示、技术及实用的示例代码解释了JavaScript中的重要概念。</p>

<p>全书共涉及了68条关于JavaScript程序设计的建议。第一章可以让初学者快速熟悉JavaScript,了解JavaScript中的原始类型、隐式强制转换、编码类型等基本概念;第二章着重讲解了有关JavaScript的变量作用域的建议，不仅介绍了怎么做，还着重介绍了为什么，加深理解；第三章和第四章的主题涵盖了函数、对象及原型三大方面，这可是JavaScript区别于其他语言的核心，读者也不必紧张，在David Herman大叔的指引下，你可以轻松掌握这些核心，了解到最佳实践；第五章则阐述了数组和字典这两种常用类型具体使用时的建议，避免陷入一些陷阱；第六章讲述了库和API设计，第七章讲述了并行编程，这是晋升为JavaScript专家的必由之路。</p>

<p>想要深入了解JavaScript并获取一线专家的宝贵经验吗？那么，这本书正好适合你。</p>

<p>我和同事喻杨在翻译这本书的过程中投入了不少精力，生怕给这本经典留下一些遗憾。感谢编辑高婧雅对我们的支持，谅解我们截稿时间的多次拖延。</p>

<p>最后，感谢这本书的购买者，希望能给你们带来一次超凡的阅读体验。</p>

<p>黄博文 2013年8月11日于布里斯班</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SVN中Branch的创建与合并]]></title>
    <link href="http://www.huangbowen.net/blog/2013/08/13/branchs-in-svn/"/>
    <updated>2013-08-13T00:59:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/08/13/branchs-in-svn</id>
    <content type="html"><![CDATA[<p><img src="http://www.huangbowen.net/images/branch_trunk.jpg"></p>

<p>在使用源代码版本控制工具时，最佳实践是一直保持一个主干版本。但是为了应付实际开发中的各种情况，适时的开辟一些分支也是很有必要的。比如在持续开发新功能的同时，需要发布一个新版本，那么就需要从开发主干中建立一个用于发布的分支，在分支上进行bug fix，维护版本的稳定，并适时的将一些改动合并回主干。目前大红大紫的源代码版本控制工具git很受大家推崇，原因之一就是其在这方面的功能相当强大。其实老牌的SVN也是有这样的功能的，接下来就给大家讲解下。</p>

<!-- more -->


<h1>Branch的创建</h1>

<p>在SVN中主干代码一般是放置在Trunk目录下的，如果要新建Branch的话则放置在Branchs目录下。(注意这是一种约定，SVN并不强制你这样做)注意Branhs和Trunk目录要平级，不能有嵌套，要不会引起混乱。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>  myproject/
</span><span class='line'>      trunk/
</span><span class='line'>      branches/
</span><span class='line'>      tags/
</span></code></pre></td></tr></table></div></figure>


<p>创建一个Branch也相当简单，只需要一条命令即可。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>svn copy http://example.com/repos/myproject/trunk http://example.com/repos/myproject/branches/releaseForAug -m <span class="s1">&#39;create branch for release on August&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这条命令是指给myproject这个repo创建一个名为releaseForAug的branch，使用-m来加入描述。</p>

<p>之后你就可以通过 <code>svn checkout http://example.com/repos/myproject/branches/releaseForAug</code>来迁出你的Branch源文件，在上面进行修改和提交了。</p>

<p>其实SVN并没有Branch的内部概念。我们只是创建了一个repo的副本，并自己赋予这个副本作为Branch的意义，所以这与git中的Branch有很大不同。</p>

<p>需要注意的是Branch和Trunk使用同一套版本号，也就是说无论在Branch还是Trunk的提交都会引起主版本号的增加。这是因为<code>svn copy</code>只支持同一个repository内的文件copy，并不支持跨repository的copy，所以新创建的Branch和Trunk都属于同一个repository。</p>

<h1>合并</h1>

<p>既然要创建分支也需要合并分支。基本的合并也是蛮简单的。</p>

<p>假设现在Branch上fix了一系列的bug，现在我们想把针对Branch的改变同步到Trunk上，那么应该怎么做那？</p>

<ol>
<li><p>保证当前Branch分支是clean的，也就是说使用svn status看不到任何的本地修改。</p></li>
<li><p>命令行下切换到Trunk目录中，使用 <code>svn merge  http://example.com/repos/myproject/branches/releaseForAug</code> 来将Branch分支上的改动merge回Trunk下。</p></li>
<li><p>如果出现merge冲突则进行解决，然后执行<code>svn ci -m 'description'</code>来提交变动。</p></li>
</ol>


<p>当然在merge你也可以指定Branch上那些版本变更可以合并到Trunk中。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>svn merge  http://example.com/repos/myproject/branches/releaseForAug -r150:HEAD
</span></code></pre></td></tr></table></div></figure>


<p>示例中是将Branch的从版本150到当前版本的所有改动都合并到Trunk中。</p>

<p>你也可以将Trunk中的某些更新合并到Branch中，还是同样的方法。</p>

<h1>查看当前Branch和Trunk的合并情况</h1>

<p>可以使用<code>svn mergeinfo</code>来查看merge情况。</p>

<p>查看当前Branch中已经有那些改动已经被合并到Trunk中:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># cd to trunk directory</span>
</span><span class='line'>svn mergeinfo http://example.com/repos/myproject/branches/releaseForAug
</span></code></pre></td></tr></table></div></figure>


<p>查看Branch中那些改动还未合并。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#cd to trunk directory</span>
</span><span class='line'>
</span><span class='line'>svn merginfo http://example.com/repos/myproject/branches/releaseForAug --show-revs eligible
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[只有好的棋手才会走运-《打造Facebook》读后感]]></title>
    <link href="http://www.huangbowen.net/blog/2013/08/11/only-good-player-has-good-luck/"/>
    <updated>2013-08-11T12:01:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/08/11/only-good-player-has-good-luck</id>
    <content type="html"><![CDATA[<p><img src="http://www.huangbowen.net/images/facebook.jpg" width="600"></p>

<p>王淮的《打造Facebook》一书不厚，花半天时间轻松读完。书中没有大段的说教，只有近乎流水的陈述。正如作者所说，打造Facebook这本书由巴克伯格来写再合适不过。可惜他至少在近几年内没有这个打算。而王淮作为加入Facebook最早的员工之一，以工程师角度描述的视角恐怕更适合我们。</p>

<!-- more -->


<ul>
<li><p><strong>战略眼光很重要。</strong>在Facebook聚合了大量的用户以后，马克伯格在最早的时间决定将Facebook打造成为一个对外开放的开发平台，可以由第三方开发者基于Facebook的API来开发应用。这样极大的激发了开发者的热情，平台上的优秀应用层出不穷，又反过来吸引了更多的用户。环顾今日，淘宝、腾讯等国内大公司基本都是这样的套路。硅谷不愧是科技公司的标杆。</p></li>
<li><p><strong>学习能力体现在你的坚持上，而不是你的聪明上。</strong>马克伯格每年都会给自己制定挑战目标。这些挑战目标有的是加强自己某一方面技能，有的则是纯粹的磨练自己。比如09年坚持每天打领带，10年坚持学中文，11年坚持支持自己宰杀的动物，12年坚持每天写代码&#8230;&#8230;马克伯格的学习能力强，不是由于他聪明，而是由于他能够坚持。</p></li>
<li><p><strong>招人只招优秀的，宁缺毋滥。</strong>这句话每个公司的HR都懂，但是能得到彻底贯彻的公司少之又少。优秀的人才本来就少，每个公司都抢着要，总有一些公司是抢不到的。Facebook作为创业公司一开始就坚持这样的策略，无疑是它能够持续壮大的重要原因之一。因为巴克伯格深切的知道优秀的工程师意味着什么。优秀的工程师更容易被委以重任;完成任务后可以相互标榜；一流人才喜欢互相挑战，并且互相学习。古往今来，几乎每个杰出的人才身边都有优秀的人相伴，爱迪生身边有特斯拉，图灵有秋奇作为对手&#8230;&#8230;</p></li>
<li><p><strong>留人靠的不是忠诚度忽悠，而是公司能够给予员工切实的利益。</strong>硅谷公司通常不会单方面的强调员工对公司的忠诚度，而是更多的考虑公司有什么东西值得员工留下来。国内很多公司特别喜欢强调爱国主义式的忠诚，公司给了你这碗饭，你就要时时刻刻想着报答公司。这种忠诚如果不是发自内心对公司文化的认同，那么根本起不了什么作用。公司如果能够在产品、理念、思想、薪酬、福利等方面着想，无疑才是标本兼治的好方法。</p></li>
<li><p><strong>跳出你的舒适区。</strong>Get out of your comfort zone已经成了IT界的一句行话。IT界不仅发展迅猛，而且涉及技术众多。靠一门语言打天下的时代已经一去不复返。勇敢的跳出自己的舒适区，主动学习新知识，才能增强核心竞争力。以前做c++，现在想搞web开发，那就要学习。以前做开发，现在想搞管理，那也要学。学习->工作出色->得到成就感->获取更多机会->激发学习,很容易形成一个良性循环。</p></li>
<li><p><strong>良好的沟通能力是优秀程序员的必备素质。</strong>在一个团队中工作，如果不注重沟通，会导致很多问题。不和BA沟通，无法保证功能契合客户要求;不和其他程序员沟通，技术无法得到共享;不主动和别人沟通，只能被动接受结果。</p></li>
</ul>


<p>虽然是金子总会发光的，但现在绝大多数人的首要目标是如何让自己成为金子。从《打造Facebook》这本书中了解了这家公司的工程师文化，学习到了那些“金子”为什么能成为“金子”，并借鉴到自己身上。</p>

<p>最后，给大家一些建议，如果在简历中能有这些东西，那么肯定会从HR眼中脱颖而出。注意这些事情需要平时的积累，不是临时抱佛脚可以搞定的。</p>

<ol>
<li><p>维护自己的一个原创技术博客。</p></li>
<li><p>豆瓣读书上的读书记录及读书笔记。</p></li>
<li><p>成为github重度患者。在github上分享自己的代码，甚至参与开源项目的开发。</p></li>
<li><p>良好的英语技能。尽量阅读英文资料，访问英文网站，如stackoverflow等。自己可以尝试翻译一些技术文章或书籍。</p></li>
</ol>


<p>Only the good players are luckly. 这是国际象棋界的一句名言，即只有好的棋手才会走运。在羡慕别人有好运的同时，把自己变为一个good player吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何让站会变得高效]]></title>
    <link href="http://www.huangbowen.net/blog/2013/08/06/effective-standup-meetings/"/>
    <updated>2013-08-06T06:38:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/08/06/effective-standup-meetings</id>
    <content type="html"><![CDATA[<p><img src="http://www.huangbowen.net/images/standup.jpeg"></p>

<p>Stand up meeting作为敏捷项目开发中的一个重要实践不可或缺。站立会议每天都要发生，在会议上大家可以了解到每个人的工作进展、项目遇到的concern和issue，从而做出适应的资源调整和措施，保证项目交付的顺利进行。如何让站会变得高效，本人总结了一些tips，希望对大家有用。</p>

<!-- more -->


<h2>站会的形式</h2>

<p>一般站会分为两个形式。一种是在站会上每人轮流进行各自的状态更新，另一种是以story wall上的user story为主进行更新。
第一种好处是每人都有更新机会，但是更新的内容稍显混乱，第二种好处是通过卡片追踪能更清晰的了解到当前的状态，不好的地方是如果有人的工作任务没体现在卡片上，可能就没机会得到更新。</p>

<p>我个人比较倾向于第二种更新方式。一个典型的story wall有这些列: BACKLOG->BA->DEV->TEST->UAT->DONE。站会开始的时候，由一个facilitator按照从DONE->UAT->TEST->DEV->BA的顺序依次念出这些故事卡，被点到的故事卡则由工作在这张卡上的人进行相应的更新。之所以采用倒序是出于精益的思想。我 们敏捷的迭代式开发就是要将story card尽量的往done column里挪，采用倒序过卡的方式就是要突出这一点。当将墙上所有的卡都过完后，facilitator可以再问下有没有其他人有update，这样可以防止有些人由于工作不能体现在卡片上而漏掉更新。比如迭代经理可以此时做出自己的更新。最后facilitator再问还有什么问题或风险没，此时可以把自己的一些想法表露给团队,好借团队之力拿出应对方案。</p>

<h2>个人的更新</h2>

<p>个人的更新注重言简意赅，突出重点。一般更新需要包括下面三点。</p>

<ol>
<li><p>昨天做了什么。这个只需2句话带过，切忌陷入细节。</p></li>
<li><p>有没有遇到问题，需不需要资源或帮助。如果遇到什么困难，可以大概描述下，并指出需要什么样的帮助。</p></li>
<li><p>今天打算做什么。</p></li>
</ol>


<h2>一些tips</h2>

<ol>
<li><p>站会一定要站着开。凡是坐着的会议都短不了。</p></li>
<li><p>one conversation. 站会上的时候一定要保证同一时刻只有一个人说话，切忌变成了群体讨论。做法可以是将一个小玩具作为token，只有拿着这个token的人才可以说话。</p></li>
<li><p>限制每个人更新的时间。有些人在更新自己工作状态的时候喜欢讲的很细节，无形中浪费了很多时间。这时候facilitator就需要适时的打断他，可以告诉他只要给出大概的内容进行，细节部分可以会后再讨论。</p></li>
<li><p>团队中成员轮流当facilitator。一般团队中喜欢固定一个人当facilitator，一当就当到了项目结束。其实更好的做法是每天站会时都要更换facilitator，这样保证每个人都能充分参与到团队中。</p></li>
<li><p>站会不能迟到，也不要定在刚上班时。刚踩着点进办公室就迎来站会略显紧张，很多人还没调整好状态。
一般可以将站会定为早上上班15分钟后。</p></li>
<li><p>凡是可能花时间的讨论都不要发生在站会上。站会只是专注状态更新，暴露问题，而不是解决问题。针对会上暴露的问题可以再组织相关的人商讨解决方案。</p></li>
<li><p>切忌将站会流于形式，失去原有的意义。站会注重的是team间横向的沟通，并且每天都会发生，如果不能坚持就说明了团队间配合出现了问题，失去了快速反馈的意义。</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[布里斯班两周感受]]></title>
    <link href="http://www.huangbowen.net/blog/2013/08/03/impression-of-brisbane-in-two-weeks/"/>
    <updated>2013-08-03T23:56:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/08/03/impression-of-brisbane-in-two-weeks</id>
    <content type="html"><![CDATA[<p><img src="http://www.huangbowen.net/images/brisbane2.jpg"></p>

<p>不知不觉，到达布里斯班已经两周了，感觉还不错。再谈谈自己的感受。</p>

<!-- more -->


<p>虽然现在布里斯班是冬季，但是一点都不冷，白天大多数时候就穿个长袖Tshirt就行，晚上顶多套个外套。如果白天出太阳的话长袖Tshirt甚至还好些热。每天都是蓝天白云，有时候来片乌云下点雨，持续时间不长。站在高楼上可以望到很远，看不到一点污染的迹象，不像成都经常是看对面的大厦都是雾蒙蒙的。布里斯班河穿城而过，河水谈不上很清澈。河里有公共交通船来回穿梭，也有一些旅游船。我坐了一个叫RiverTour的船，1个半小时25刀，沿着布里斯班河走到快进海的地方又折返回来。途中可以看到不少旧建筑，也有很多私人游艇。很多别墅沿河而建，家家有自己的私人码头。布里斯班的古建筑与现代建筑相得益彰，经常在某个高大威猛的现代建筑旁就能发现一些经典的欧式建筑。今天在回公寓的途中就发现了一个大教堂，很宏伟壮观，进去参观了下，真是有气势。听介绍女王曾经来过这个教堂，教堂里还展出了一套当时女王来时牧师穿的衣服。</p>

<p>布里斯班河旁的巨大摩天轮15刀一个人，我在底下想了想没坐。主要是我的公寓就在摩天轮河对面，40楼，看布里斯班景色早看够了。南岸公园里有个露天的人工沙滩和游泳池，有很多人在里面游泳晒太阳，这可是布里斯班冬天啊，可见布里斯班的天气多好。河边还有一处几百米的峭壁，很多人在那里攀岩，真是刺激。草坪随处可见，也有不少的专门供BBQ的台子，一大伙人围着烧烤，香味到处都是。有个叫riverLife的地方可以租小艇和自行车、攀岩设备等。泛舟在布里斯班河也别有一番风味。只不过自己是个旱鸭子，另外听说还要license，所以没有尝试。</p>

<p>这里的物价来说还是有些贵，当然如果你拿得是澳洲的工资的话就觉得比中国相对来说便宜。我中午一般是去foud court吃快餐。一些盖浇饭、炒饭之类的，总体是6到9刀间，可以吃饱。晚上则自己做。煮点意大利面浇点面酱，或者去超市买腌好的牛排，拿回来煎了就可以吃了。一盒8刀左右，有350克，量还是较多的。牛奶品牌非常多，2升的大概4刀左右，绝对不含三聚氰胺。鸡蛋稍贵，一打12个4刀多点。周末的时候会和同事一起下馆子。找个河边的餐馆，边吃饭边欣赏风景边聊天，很是惬意。一餐下来每人平均25刀左右，还算不贵。在外面吃饭一定注意不能浪费。有一次盘子剩了2块肉，服务员说如果不吃完就会double the price。ThoughtWorks在澳洲有Friday Lunch的传统，就是所有的ThoughtWorkers都会在周五中午回到办公室一起吃午餐，顺便聊聊天，交流下感情。ThoughtWorks布里斯班办公室平时都是没人的，大家都跑客户现场上班去了。我们的客户现场离办公室很近，所以中午我们都习惯买了午餐后去办公室吃。还是在自家的办公室好，各种饮料、零食、水果随便吃。</p>

<p>刚来的时候我住在Oaks酒店，后来搬到了River Place的一套公寓。不得不感叹帝国主义的腐朽。公寓虽然面积不大，但是所有设施一应俱全。厨房什么电器都齐备了，烤箱、洗碗机都有。这才是真正的拎包入住。听后这边的公寓大概500刀一周，还是蛮贵的，这价格应该能够付郊区的一栋独栋别墅的月供，所以如果打算定居的话就不是很划算。不过毕竟是城中心，上班、购物什么的都方便。由于住得地方距上班的地方只有不到10分钟路程，所以基本没坐过公交车。布里斯班的公共交通还是蛮贵的，虽然可以办go card，但是打折也不是很多。布里斯班的路不是很宽，行人和车辆都比较遵守交通规则。如果闯红灯被警察抓的话会罚款，44刀。听同事说墨尔本创红灯被抓要被罚200刀。如果车辆从车库里出来时，会主动的避让行人。我有好几次看到车辆要驶入街道，就想等他们先过，但是车主都会停下来招手示意我先过去，这点感觉很好。</p>

<p>暂且就这么多把。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQL语法的重要知识点总结]]></title>
    <link href="http://www.huangbowen.net/blog/2013/07/30/concepts-of-sql-statement/"/>
    <updated>2013-07-30T22:31:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/07/30/concepts-of-sql-statement</id>
    <content type="html"><![CDATA[<p><img src="http://www.huangbowen.net/images/sql_rebel.jpg"></p>

<p>好几年没写SQL语句了。现在到了新的team，需要用到数据库。作为QA的话时常需要使用客户端工具连接到数据库中找寻或修改数据。这么长时间没使用，一些SQL的使用技巧都忘得差不多了。晚上看了一些资料，花了1个多小时又捡起了曾经的知识。现在总结一下以方便以后查阅。</p>

<!-- more -->


<ol>
<li><p>SQL不是大小写敏感的。</p></li>
<li><p>分号是分割多条SQL语句的标准的分隔符，所以在单条SQL语句后面总加上分隔符是不会出错的。</p></li>
<li><p><code>DISTINCT</code>关键字用于剔除重复的结果数据。<code>SELECT DISTINCT City FROM Customers;</code>意味着从Customers表中返回不重复的City值。</p></li>
<li><p><code>ORDER BY</code>用于对查询结果排序。 <code>ORDER BY column_name ASC</code>表示递增排序，也是默认顺序，可以省略<code>ASC</code>。 <code>ORDER BY column_name DESC</code>表示递减排序; <code>ORDER BY</code>后面可跟多个列名进行排序。</p></li>
<li><p>返回指定数目的记录。在<code>SQL Server/MS Access</code>中可以使用 <code>SELECT TOP number|percent column_name(s)
FROM table_name;</code> MySQl中语法是 <code>SELECT column_name(s)
FROM table_name
LIMIT number;</code>Oracle中语法是<code>SELECT column_name(s)
FROM table_name
WHERE ROWNUM &lt;= number;</code>.  <code>SELECT TOP number PERCENT * FROM table</code>可以返回指定指定百分数的数据。</p></li>
<li><p>使用<code>LIKE</code>可以匹配字符串值，同时可以使用通配符。<code>%</code>匹配0或多个字符，<code>_</code>匹配一个字符，<code>[charlist]</code>匹配一组字符，<code>[^charlist]</code>或<code>[!charlist]</code>表示匹配不在此列表中的字符。</p></li>
<li><p>使用<code>AS</code>关键字可以给列或表起别名。也可以给组合后的列起别名，如 <code>SELECT CustomerName, Address+', '+City+', '+PostalCode+', '+Country AS Address
FROM Customers;</code></p></li>
<li><p>使用<code>JOIN</code>关键字可以合并两个或连个以上的表的数据行，要基于所有表中的某一列建立一个连接条件。Join有四种：</p>

<ul>
<li>INNER JOIN返回两个表中满足条件的行数据。</li>
<li>LEFT JOIN返回左表所有行数据及满足条件的右表行数据。</li>
<li>RIGHT JOIN返回右表的所有行数据及满足条件的左表行数据。</li>
<li>FULL JOIN返回左表和右表所有行数据行。</li>
</ul>
</li>
<li><p><code>UNION</code>用于合并两个或多个查询结果。要求查询结果的列数及数据类型要一样。</p></li>
<li><p><code>SELECT INTO</code>可以将一个表中数据插入到另一个新表中。如 <code>SELECT *
INTO CustomersBackup2013
FROM Customers;</code>它还有个巧妙的用法是创建一个空的新表格，其schema与后者一致,方法是<code>SELECT *
INTO newtable
FROM table1
WHERE 1=0;</code></p></li>
<li><p><code>INSERT INTO SELECT</code>与<code>SELECT INTO</code>使用较相似，不同的是<code>SELECT INTO</code>会创建新表,而<code>INSERT INTO SELECT</code>是插入到已存在的表中。</p></li>
<li><p>一些常用的SQL函数。（注意这些函数并一定都是通用的，但所有数据库基本上都有类似的功能）</p>

<p><strong>聚合函数</strong></p>

<ul>
<li>AVG() - 求平均值</li>
<li>COUNT() - 返回行数</li>
<li>FIRST() - 返回第一个值</li>
<li>LAST() - 返回最后一个值</li>
<li>MAX() - 返回最大值</li>
<li>MIN() - 返回最小值</li>
<li>SUM() - 求和</li>
</ul>


<p><strong>其他常用函数</strong></p>

<ul>
<li>UCASE() - 转换为大写</li>
<li>LCASE() - 转换为小写</li>
<li>MID() - 提取字符串</li>
<li>LEN() - 获取字符串长度</li>
<li>ROUND() - 对数据进行舍入</li>
<li>NOW() - 返回当前系统时间</li>
<li>FORMAT() - 格式化field的显示</li>
</ul>
</li>
<li><p><code>GROUP BY</code>用于对使用了聚合函数的查询结果进行分组。这是一个很强大的语法。</p></li>
<li><p><code>HAVING</code>用于对使用了聚合函数的字段进行条件筛选。</p></li>
</ol>


<p>如果要详细了解SQL的这些使用的话，我推荐<a href="http://www.w3schools.com/sql/default.asp">http://www.w3schools.com/sql/default.asp</a>。你不仅可以看到说明和示例，也可以随时实时练习。实在是不可不得的好网站。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[项目交付为什么失败？-记我在某个项目中的迷思]]></title>
    <link href="http://www.huangbowen.net/blog/2013/07/28/how-to-deliver-product-successfully/"/>
    <updated>2013-07-28T23:45:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/07/28/how-to-deliver-product-successfully</id>
    <content type="html"><![CDATA[<p><img src="http://www.huangbowen.net/images/success_failure.jpeg" title="" ></p>

<p>上个项目接近尾声，我以developer的身份加入了现在的项目，姑且叫做项目A吧。说实话A项目蛮神奇的，干了一年多了只有一次release，8月初要进行第二次release了，但是测试环境还未搭建好。</p>

<p>该项目是个分布式团队，分布在成都和澳洲两个地方。由于成都这边团队都是清一色的developer，没有qa，严重阻碍了交付的进度。所以我跑到澳洲出差1个月来了解一下整个项目的context，并争取能找出一种解决方案来实现让成都团队中有人能够担任QA职责。目前已经在项目中呆了3周了，2周在成都，1周在澳洲。通过这三周的观察，我总结出了项目中目前存在的一些问题。</p>

<!-- more -->


<ol>
<li><p>此项目是一个一个遗留系统，里面使用到的各种技术很多，有些技术很冷、很偏，维护起来较难。</p></li>
<li><p>此项目相关的依赖也比较严重，大大小小有将近10个依赖项目。</p></li>
<li><p>集成及系统测试环境搭建太晚，严重缺乏及时的端到端测试，导致大量卡被堆积在ready for test中，却没有足够的测试人员来测试。</p></li>
<li><p>由于data security的原因，成都团队无法触及集成测试环境及系统测试环境。（公司是一个保险公司，不允许客户数据被在澳洲以外的人看到）</p></li>
<li><p>成都团队对业务了解不深入（至少在客户这边看来），每张故事卡做完都需要澳洲团队review代码。</p></li>
<li><p>每个人看似都在认真工作，但交付完全跑偏，压力堆积在team leader, Iteration manager等人身上。</p></li>
</ol>


<p>虽然我们称为敏捷团队，但这个团队怎么看也不像是敏捷团队。为什么会导致这么多的问题那？我分析了一下，觉得大致有两方面的原因。</p>

<ol>
<li><p>由于特殊的data security问题，导致了项目不能满足敏捷团队中起码的开放原则。在一个敏捷项目中，首要的就是开放。无论是程序中的每一行代码，还是数据库中的每条数据，都不能是某人或某些人的私有财产，团队中的每个人都能有所触及，这样才不会引起项目中的盲点，导致一个对团队大多数人来说的黑区。而成都团队无法触及项目中的真实客户数据，直接导致了成都团队无法做真正的端到端测试，即使开发者也难对自己开发出的功能进行验证，只能mock掉大部分的集成点。</p></li>
<li><p>团队中的成员没有完全做到以交付为目标。敏捷项目中的最终目标就是以交付产品为目的。如果BA只管给墙上添加story，developer只顾埋头开发story，虽然每个人都在尽力做自己的本职工作，但story并没有很好的进入done column。这是因为由于多种原因，测试环境并没有尽早的搭建起来，大量story堆积到了测试环节，使得一个敏捷项目愣是变成了瀑布型。在这种情况的早期阶段大家就应该要有所觉察，developer应该停止开发story，而是协助QA尽早建立起测试环境，协助QA一起来做测试。大家应该一起关心当前项目的delivery的状况，找出其中的block并商讨出一定的解决方案。</p></li>
</ol>


<p>既然存在这么多的问题，接下来应该怎么做那？我想应该从以下几个方面着手。</p>

<ol>
<li>尽快建立起集成测试及系统测试环境，准备好测试数据，保证测试的正常进行。</li>
<li>和团队人员讨论出一种测试策略，比如采用给集成环境灌输fake data的方式使成都团队能避免或部分避免data security的干扰，能够开展测试。</li>
<li>基于上面几点，建立起端到端的自动化测试，使得QA脱离手工测试的苦海，完善我们的质量保护网。</li>
</ol>


<p>希望自己能在剩余的3周onshore中能够有所进展。其实我比较鼓励大家在做自己手头工作的同时能够多多思考，不能将自己局限在某一个角色之中，这样子才不会日复一日重复昨天的工作，而是在工作中能够有所提高，提升自己的专业能力和职业素养。这些都是日后前进的宝贵财富。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[布里斯班初体验]]></title>
    <link href="http://www.huangbowen.net/blog/2013/07/22/life-in-brisbane/"/>
    <updated>2013-07-22T21:58:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/07/22/life-in-brisbane</id>
    <content type="html"><![CDATA[<p><img src="http://www.huangbowen.net/images/brisbane.jpg"></p>

<p>周一接到通知需要到布里斯班出差一个月，周五就踏上飞机。第一次出国，终于有机会近距离接触“万恶的资本主义”了。虽然在ThoughtWorks出差、出国是家常便饭，但是这是自己第一次出国，还跑这么远，难免有些兴奋。</p>

<!-- more -->


<p>成都没有直飞布里斯班的航班，我是先飞到泰国曼谷，再转机到布里斯班。成都到曼谷只有2个半小时，感觉还是蛮近的。到了曼谷是晚上6点，而转机则是12点起飞，中间有6个小时的时间。自己没有泰国的签证出不了机场，就在机场里面瞎晃悠。曼谷的机场蛮大的，逛了几个小时都没逛完，感觉还有很大一部分没逛。曼谷机场免费wifi，只不过需要去一些airport counter领账号和密码，每个账号密码只有1小时的免费使用时间，好在可以重复领取。12点坐上转机航班后，需要8个半小时到布里斯班。我在飞机上吃了一顿晚餐，一顿早餐。说实话，饭一点也不好吃。</p>

<p>由于时差的关系，到了布里斯班已经是11点多了。找到了接我的司机，一起坐车去酒店。半路上下起了小雨。布里斯班的空气真的很好，秒杀成都啊。市里大部分都是两车道的路，行人、车辆都很遵守交通规则。
到了入住的Oaks hotel,自行check in。我的房间是在40楼，布里斯班的美景尽收眼底，从窗口可以看到布里斯班河，目测离酒店只有10分钟路程。</p>

<p>不得不说酒店房间的设施相当齐备。面积虽然不大，但是一切应有尽有。最让我感叹的是厨房，一小块地方有冰箱、微波炉、烤炉、抽油烟机、燃气灶、刀叉碗碟玻璃杯…….看来自己可以煎牛排和做意大利面了。但是房间所有的插头都是八字三角的那种，问前台要了个万能转换器才让自己的电脑供上电。</p>

<p>一切收拾妥当，下楼逛逛。没走多远就到了CBD步行街。人来人往还是蛮热闹的。说实话这里中国人也不少，时不时就听到身边有人用中文讲话。我还碰到了**功在拉横幅讲话，不过理的人并不多。本来打算去河对岸的摩天轮那边看看，奈何又下起雨来，只得退回来了。</p>

<p>晚上去了同事xn家蹭饭，然后和他老婆三人去ThoughtWorks布里斯班办公室玩。布里斯班办公室很小，但是很温馨，我挺喜欢的。冰箱里有各种软饮，比中国office的要多不少，水果也是蛮多的。还是在ThoughtWorks的办公室有自己地盘的感觉。</p>

<p>第二天和公司两位美女kk和yy一起去吃午饭。坐在布里斯班河边，品着美味佳肴，享受着sunshine，这种感觉太好了。尤其发现我竟然和kk都是来自一个县上的，真是有缘。下午去逛了下超市，买了一些牛奶和零食。这里的超市可以自助结账。自己刷条目，自己付款，非常方便。由于自己只带了一双鞋，还不太合脚，就去bigW买了一双运动鞋，才花了20刀，比在中国还划算。这里的牛奶也比较便宜，2升2刀多的样子，不过味道有点怪，难道是喝习惯了中国的毒奶、合成奶，还不适应外国的纯牛奶了？这里的鸡蛋不太便宜，12个要将近5刀，鸡蛋上都说明了是来自那个farm的，看来品牌意识都蛮强的。周一下班后又去超市买了一大块生牛排，有350克，花了8刀多。这块牛排已经被腌制好了，回到家煎了20分钟就可以吃了。真是便宜又实惠，而且肉的质量又有保证。</p>

<p>布里斯班天黑得比较早，下午5点过点就黑了，所以下班了也没出去逛。等到周末再好好的逛逛。</p>
]]></content>
  </entry>
  
</feed>
