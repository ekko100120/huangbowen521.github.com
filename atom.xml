<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[黄博文的地盘]]></title>
  <link href="http://www.huangbowen.net/atom.xml" rel="self"/>
  <link href="http://www.huangbowen.net/"/>
  <updated>2013-06-28T01:45:25+08:00</updated>
  <id>http://www.huangbowen.net/</id>
  <author>
    <name><![CDATA[黄博文]]></name>
    <email><![CDATA[huangbowen521@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Java经典类库-Guava中的函数式编程讲解]]></title>
    <link href="http://www.huangbowen.net/blog/2013/06/28/functional-programming-in-guava/"/>
    <updated>2013-06-28T01:31:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/06/28/functional-programming-in-guava</id>
    <content type="html"><![CDATA[<p><img src="http://www.huangbowen.net/images/FP.jpg"></p>

<p>如果我要新建一个java的项目，那么有两个类库是必备的，一个是junit，另一个是<a href="https://code.google.com/p/guava-libraries/">Guava</a>。选择junit，因为我喜欢TDD，喜欢自动化测试。而是用<a href="https://code.google.com/p/guava-libraries/">Guava</a>，是因为我喜欢简洁的API。<a href="https://code.google.com/p/guava-libraries/">Guava</a>提供了很多的实用工具函数来弥补java标准库的不足，另外<a href="https://code.google.com/p/guava-libraries/">Guava</a>还引入了函数式编程的概念，在一定程度上缓解了java在JDK1.8之前没有lambda的缺陷，使使用java书写简洁易读的函数式风格的代码成为可能。</p>

<!-- more -->


<p>下面就简单的介绍下<a href="https://code.google.com/p/guava-libraries/">Guava</a>中的一些体现了函数式编程的API。</p>

<h2>Filter</h2>

<p>我们先创建一个简单的Person类。</p>

<figure class='code'><figcaption><span>Person.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getAge</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">age</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setAge</span><span class="o">(</span><span class="kt">int</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">age</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">Person</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">age</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果要产生一个Person类的List，通常的写法可能是这样子。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="n">people</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;();</span>
</span><span class='line'>        <span class="n">people</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Person</span><span class="o">(</span><span class="s">&quot;bowen&quot;</span><span class="o">,</span><span class="mi">27</span><span class="o">));</span>
</span><span class='line'>        <span class="n">people</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Person</span><span class="o">(</span><span class="s">&quot;bob&quot;</span><span class="o">,</span> <span class="mi">20</span><span class="o">));</span>
</span><span class='line'>        <span class="n">people</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Person</span><span class="o">(</span><span class="s">&quot;Katy&quot;</span><span class="o">,</span> <span class="mi">18</span><span class="o">));</span>
</span><span class='line'>        <span class="n">people</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Person</span><span class="o">(</span><span class="s">&quot;Logon&quot;</span><span class="o">,</span> <span class="mi">24</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>而<a href="https://code.google.com/p/guava-libraries/">Guava</a>提供了一个newArrayList的方法，其自带类型推演，并可以方便的生成一个List,并且通过参数传递初始化值。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="n">people</span> <span class="o">=</span> <span class="n">newArrayList</span><span class="o">(</span><span class="k">new</span> <span class="n">Person</span><span class="o">(</span><span class="s">&quot;bowen&quot;</span><span class="o">,</span> <span class="mi">27</span><span class="o">),</span>
</span><span class='line'>                <span class="k">new</span> <span class="nf">Person</span><span class="o">(</span><span class="s">&quot;bob&quot;</span><span class="o">,</span> <span class="mi">20</span><span class="o">),</span>
</span><span class='line'>                <span class="k">new</span> <span class="nf">Person</span><span class="o">(</span><span class="s">&quot;Katy&quot;</span><span class="o">,</span> <span class="mi">18</span><span class="o">),</span>
</span><span class='line'>                <span class="k">new</span> <span class="nf">Person</span><span class="o">(</span><span class="s">&quot;Logon&quot;</span><span class="o">,</span> <span class="mi">24</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>当然，这不算函数式编程的范畴，这是<a href="https://code.google.com/p/guava-libraries/">Guava</a>给我们提供的一个实用的函数。</p>

<p>如果我们选取其中年龄大于20的人，通常的写法可能是这样子。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="n">oldPeople</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;();</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">Person</span> <span class="n">person</span> <span class="o">:</span> <span class="n">people</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">person</span><span class="o">.</span><span class="na">getAge</span><span class="o">()</span> <span class="o">&gt;=</span> <span class="mi">20</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">oldPeople</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">person</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这就是典型的filter模式。filter即从一个集合中根据一个条件筛选元素。其中person.getAge() >=20就是这个条件。<a href="https://code.google.com/p/guava-libraries/">Guava</a>为这种模式提供了一个filter的方法。所以我们可以这样写。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="n">oldPeople</span> <span class="o">=</span> <span class="n">newArrayList</span><span class="o">(</span><span class="n">filter</span><span class="o">(</span><span class="n">people</span><span class="o">,</span> <span class="k">new</span> <span class="n">Predicate</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">apply</span><span class="o">(</span><span class="n">Person</span> <span class="n">person</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">person</span><span class="o">.</span><span class="na">getAge</span><span class="o">()</span> <span class="o">&gt;=</span> <span class="mi">20</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}));</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里的Predicate是<a href="https://code.google.com/p/guava-libraries/">Guava</a>中的一个接口，我们来看看它的定义。</p>

<figure class='code'><figcaption><span>Predicate.java </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@GwtCompatible</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Predicate</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Returns the result of applying this predicate to {@code input}. This method is &lt;i&gt;generally</span>
</span><span class='line'><span class="cm">   * expected&lt;/i&gt;, but not absolutely required, to have the following properties:</span>
</span><span class='line'><span class="cm">   *</span>
</span><span class='line'><span class="cm">   * &lt;ul&gt;</span>
</span><span class='line'><span class="cm">   * &lt;li&gt;Its execution does not cause any observable side effects.</span>
</span><span class='line'><span class="cm">   * &lt;li&gt;The computation is &lt;i&gt;consistent with equals&lt;/i&gt;; that is, {@link Objects#equal</span>
</span><span class='line'><span class="cm">   *     Objects.equal}{@code (a, b)} implies that {@code predicate.apply(a) ==</span>
</span><span class='line'><span class="cm">   *     predicate.apply(b))}.</span>
</span><span class='line'><span class="cm">   * &lt;/ul&gt;</span>
</span><span class='line'><span class="cm">   *</span>
</span><span class='line'><span class="cm">   * @throws NullPointerException if {@code input} is null and this predicate does not accept null</span>
</span><span class='line'><span class="cm">   *     arguments</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="kt">boolean</span> <span class="nf">apply</span><span class="o">(</span><span class="nd">@Nullable</span> <span class="n">T</span> <span class="n">input</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Indicates whether another object is equal to this predicate.</span>
</span><span class='line'><span class="cm">   *</span>
</span><span class='line'><span class="cm">   * &lt;p&gt;Most implementations will have no reason to override the behavior of {@link Object#equals}.</span>
</span><span class='line'><span class="cm">   * However, an implementation may also choose to return {@code true} whenever {@code object} is a</span>
</span><span class='line'><span class="cm">   * {@link Predicate} that it considers &lt;i&gt;interchangeable&lt;/i&gt; with this one. &quot;Interchangeable&quot;</span>
</span><span class='line'><span class="cm">   * &lt;i&gt;typically&lt;/i&gt; means that {@code this.apply(t) == that.apply(t)} for all {@code t} of type</span>
</span><span class='line'><span class="cm">   * {@code T}). Note that a {@code false} result from this method does not imply that the</span>
</span><span class='line'><span class="cm">   * predicates are known &lt;i&gt;not&lt;/i&gt; to be interchangeable.</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="nd">@Nullable</span> <span class="n">Object</span> <span class="n">object</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>里面只有一个apply方法，接收一个泛型的实参，返回一个boolean值。由于java世界中函数并不是一等公民，所以我们无法直接传递一个条件函数，只能通过Predicate这个类包装一下。</p>

<h2>And Predicate</h2>

<p>如果要再实现一个方法来查找People列表中所有名字中包含b字母的列表，我们可以用<a href="https://code.google.com/p/guava-libraries/">Guava</a>简单的实现。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="n">namedPeople</span> <span class="o">=</span> <span class="n">newArrayList</span><span class="o">(</span><span class="n">filter</span><span class="o">(</span><span class="n">people</span><span class="o">,</span> <span class="k">new</span> <span class="n">Predicate</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">apply</span><span class="o">(</span><span class="n">Person</span> <span class="n">person</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">person</span><span class="o">.</span><span class="na">getName</span><span class="o">().</span><span class="na">contains</span><span class="o">(</span><span class="s">&quot;b&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}));</span>
</span></code></pre></td></tr></table></div></figure>


<p>一切是这么的简单。
那么新需求来了，如果现在需要找年龄>=20并且名称包含b的人，该如何实现那？
可能你会这样写。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="n">filteredPeople</span> <span class="o">=</span> <span class="n">newArrayList</span><span class="o">(</span><span class="n">filter</span><span class="o">(</span><span class="n">people</span><span class="o">,</span> <span class="k">new</span> <span class="n">Predicate</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">apply</span><span class="o">(</span><span class="n">Person</span> <span class="n">person</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">person</span><span class="o">.</span><span class="na">getName</span><span class="o">().</span><span class="na">contains</span><span class="o">(</span><span class="s">&quot;b&quot;</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">person</span><span class="o">.</span><span class="na">getAge</span><span class="o">()</span> <span class="o">&gt;=</span> <span class="mi">20</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}));</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样写的话就有一定的代码重复，因为之前我们已经写了两个Predicate来分别实现这两个条件判断，能不能重用之前的Predicate那？答案是能。
我们首先将之前生成年龄判断和名称判断的两个Predicate抽成方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">private</span> <span class="n">Predicate</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="nf">ageBiggerThan</span><span class="o">(</span><span class="kd">final</span> <span class="kt">int</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="n">Predicate</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">apply</span><span class="o">(</span><span class="n">Person</span> <span class="n">person</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">person</span><span class="o">.</span><span class="na">getAge</span><span class="o">()</span> <span class="o">&gt;=</span> <span class="n">age</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">};</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="n">Predicate</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="nf">nameContains</span><span class="o">(</span><span class="kd">final</span> <span class="n">String</span> <span class="n">str</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="n">Predicate</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">apply</span><span class="o">(</span><span class="n">Person</span> <span class="n">person</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">person</span><span class="o">.</span><span class="na">getName</span><span class="o">().</span><span class="na">contains</span><span class="o">(</span><span class="n">str</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">};</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>而我们的结果其实就是这两个Predicate相与。<a href="https://code.google.com/p/guava-libraries/">Guava</a>给我们提供了and方法，用于对一组Predicate求与。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>      <span class="n">List</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="n">filteredPeople</span> <span class="o">=</span> <span class="n">newArrayList</span><span class="o">(</span><span class="n">filter</span><span class="o">(</span><span class="n">people</span><span class="o">,</span> <span class="n">and</span><span class="o">(</span><span class="n">ageBiggerThan</span><span class="o">(</span><span class="mi">20</span><span class="o">),</span> <span class="n">nameContains</span><span class="o">(</span><span class="s">&quot;b&quot;</span><span class="o">))));</span>
</span></code></pre></td></tr></table></div></figure>


<p>由于and接收一组Predicate，返回也是一个Predicate，所以可以直接作为filter的第二个参数。如果不熟悉函数式编程的人可能感觉有点怪异，但是习惯了就会觉得它的强大与简洁。
当然除了and，<a href="https://code.google.com/p/guava-libraries/">Guava</a>还为我们提供了or，用于对一组Predicate求或。这里就不多讲了，大家可以自己练习下。</p>

<h2>Map(transform)</h2>

<p>列表操作还有另一个常见的模式，就是将数组中的所有元素映射为另一种元素的列表，这就是map pattern。举个例子，求People列表中的所有人名。程序员十有八九都会这样写。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">names</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;();</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">Person</span> <span class="n">person</span> <span class="o">:</span> <span class="n">people</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">names</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">person</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>        <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://code.google.com/p/guava-libraries/">Guava</a>已经给我们提供了这种Pattern的结果办法，那就是使用transform方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">names</span> <span class="o">=</span> <span class="n">newArrayList</span><span class="o">(</span><span class="n">transform</span><span class="o">(</span><span class="n">people</span><span class="o">,</span> <span class="k">new</span> <span class="n">Function</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">public</span> <span class="n">String</span> <span class="nf">apply</span><span class="o">(</span> <span class="n">Person</span> <span class="n">person</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">person</span><span class="o">.</span><span class="na">getName</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}));</span>
</span></code></pre></td></tr></table></div></figure>


<p>Function是另外一种用于封装函数的接口对象。它的定义如下:</p>

<figure class='code'><figcaption><span>Function.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@GwtCompatible</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Function</span><span class="o">&lt;</span><span class="n">F</span><span class="o">,</span> <span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Returns the result of applying this function to {@code input}. This method is &lt;i&gt;generally</span>
</span><span class='line'><span class="cm">   * expected&lt;/i&gt;, but not absolutely required, to have the following properties:</span>
</span><span class='line'><span class="cm">   *</span>
</span><span class='line'><span class="cm">   * &lt;ul&gt;</span>
</span><span class='line'><span class="cm">   * &lt;li&gt;Its execution does not cause any observable side effects.</span>
</span><span class='line'><span class="cm">   * &lt;li&gt;The computation is &lt;i&gt;consistent with equals&lt;/i&gt;; that is, {@link Objects#equal</span>
</span><span class='line'><span class="cm">   *     Objects.equal}{@code (a, b)} implies that {@code Objects.equal(function.apply(a),</span>
</span><span class='line'><span class="cm">   *     function.apply(b))}.</span>
</span><span class='line'><span class="cm">   * &lt;/ul&gt;</span>
</span><span class='line'><span class="cm">   *</span>
</span><span class='line'><span class="cm">   * @throws NullPointerException if {@code input} is null and this function does not accept null</span>
</span><span class='line'><span class="cm">   *     arguments</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="nd">@Nullable</span> <span class="n">T</span> <span class="n">apply</span><span class="o">(</span><span class="nd">@Nullable</span> <span class="n">F</span> <span class="n">input</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Indicates whether another object is equal to this function.</span>
</span><span class='line'><span class="cm">   *</span>
</span><span class='line'><span class="cm">   * &lt;p&gt;Most implementations will have no reason to override the behavior of {@link Object#equals}.</span>
</span><span class='line'><span class="cm">   * However, an implementation may also choose to return {@code true} whenever {@code object} is a</span>
</span><span class='line'><span class="cm">   * {@link Function} that it considers &lt;i&gt;interchangeable&lt;/i&gt; with this one. &quot;Interchangeable&quot;</span>
</span><span class='line'><span class="cm">   * &lt;i&gt;typically&lt;/i&gt; means that {@code Objects.equal(this.apply(f), that.apply(f))} is true for all</span>
</span><span class='line'><span class="cm">   * {@code f} of type {@code F}. Note that a {@code false} result from this method does not imply</span>
</span><span class='line'><span class="cm">   * that the functions are known &lt;i&gt;not&lt;/i&gt; to be interchangeable.</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="nd">@Nullable</span> <span class="n">Object</span> <span class="n">object</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>它与Predicate非常相似，但不同的是它接收两个泛型，apply方法接收一种泛型实参，返回值是另一种泛型值。正是这个apply方法定义了数组间元素一对一的map规则。</p>

<h2>reduce</h2>

<p>除了filter与map模式外，列表操作还有一种reduce操作。比如求people列表中所有人年龄的和。<a href="https://code.google.com/p/guava-libraries/">Guava</a>并未提供reduce方法。具体原因我们并不清楚。但是我们可以自己简单的实现一个reduce pattern。
先定义一个Func的接口。</p>

<figure class='code'><figcaption><span>Func.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>     <span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Func</span><span class="o">&lt;</span><span class="n">F</span><span class="o">,</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>         <span class="n">T</span> <span class="nf">apply</span><span class="o">(</span><span class="n">F</span> <span class="n">currentElement</span><span class="o">,</span> <span class="n">T</span> <span class="n">origin</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>     <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>apply方法的第一个参数为列表中的当前元素，第二个参数为默认值，返回值类型为默认值类型。
然后我们定义个reduce的静态方法。</p>

<figure class='code'><figcaption><span>Reduce.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Reduce</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="nf">Reduce</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="n">F</span><span class="o">,</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">T</span> <span class="n">reduce</span><span class="o">(</span><span class="kd">final</span> <span class="n">Iterable</span><span class="o">&lt;</span><span class="n">F</span><span class="o">&gt;</span> <span class="n">iterable</span><span class="o">,</span> <span class="kd">final</span> <span class="n">Func</span><span class="o">&lt;</span><span class="n">F</span><span class="o">,</span> <span class="n">T</span><span class="o">&gt;</span> <span class="n">func</span><span class="o">,</span> <span class="n">T</span> <span class="n">origin</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">Iterator</span> <span class="n">iterator</span> <span class="o">=</span> <span class="n">iterable</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span> <span class="n">iterator</span><span class="o">.</span><span class="na">hasNext</span><span class="o">();</span> <span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">origin</span> <span class="o">=</span> <span class="n">func</span><span class="o">.</span><span class="na">apply</span><span class="o">((</span><span class="n">F</span><span class="o">)(</span><span class="n">iterator</span><span class="o">.</span><span class="na">next</span><span class="o">()),</span> <span class="n">origin</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">origin</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>reduce方法接收三个参数，第一个是需要进行reduce操作的列表，第二个是封装reduce操作的Func，第三个参数是初始值。</p>

<p>我们可以使用这个reduce来实现求people列表中所有人的年龄之和。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>        <span class="n">Integer</span> <span class="n">ages</span> <span class="o">=</span> <span class="n">Reduce</span><span class="o">.</span><span class="na">reduce</span><span class="o">(</span><span class="n">people</span><span class="o">,</span> <span class="k">new</span> <span class="n">Func</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="kd">public</span> <span class="n">Integer</span> <span class="nf">apply</span><span class="o">(</span><span class="n">Person</span> <span class="n">person</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">origin</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">person</span><span class="o">.</span><span class="na">getAge</span><span class="o">()</span> <span class="o">+</span> <span class="n">origin</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">},</span> <span class="mi">0</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们也可以轻松的写一个方法来得到年龄的最大值。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>        <span class="n">Integer</span> <span class="n">maxAge</span> <span class="o">=</span> <span class="n">Reduce</span><span class="o">.</span><span class="na">reduce</span><span class="o">(</span><span class="n">people</span><span class="o">,</span> <span class="k">new</span> <span class="n">Func</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="kd">public</span> <span class="n">Integer</span> <span class="nf">apply</span><span class="o">(</span><span class="n">Person</span> <span class="n">person</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">origin</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">person</span><span class="o">.</span><span class="na">getAge</span><span class="o">()</span> <span class="o">&gt;</span> <span class="n">origin</span> <span class="o">?</span> <span class="n">person</span><span class="o">.</span><span class="na">getAge</span><span class="o">()</span> <span class="o">:</span> <span class="n">origin</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">},</span> <span class="mi">0</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Fluent pattern</h2>

<p>现在新需求来了，需要找出年龄>=20岁的人的所有名称。该如何操作那？我们可以使用filter过滤出年龄>=20的人，然后使用transform得到剩下的所有人的人名。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">private</span> <span class="n">Function</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">getName</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="n">Function</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">public</span> <span class="n">String</span> <span class="nf">apply</span><span class="o">(</span> <span class="n">Person</span> <span class="n">person</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">person</span><span class="o">.</span><span class="na">getName</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">};</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">getPeopleNamesByAge</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">names</span> <span class="o">=</span> <span class="n">newArrayList</span><span class="o">(</span><span class="n">transform</span><span class="o">(</span><span class="n">filter</span><span class="o">(</span><span class="n">people</span><span class="o">,</span> <span class="n">ageBiggerThan</span><span class="o">(</span><span class="mi">20</span><span class="o">)),</span> <span class="n">getName</span><span class="o">()));</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样括号套括号的着实不好看。能不能改进一下那？<a href="https://code.google.com/p/guava-libraries/">Guava</a>为我们提供了fluent模式的API,我们可以这样来写。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>      <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">names</span> <span class="o">=</span> <span class="n">from</span><span class="o">(</span><span class="n">people</span><span class="o">).</span><span class="na">filter</span><span class="o">(</span><span class="n">ageBiggerThan</span><span class="o">(</span><span class="mi">20</span><span class="o">)).</span><span class="na">transform</span><span class="o">(</span><span class="n">getName</span><span class="o">()).</span><span class="na">toList</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://code.google.com/p/guava-libraries/">Guava</a>中还有很多好玩的东西，大家时间可以多发掘发掘。这篇文章的源码已经被我放置到<a href="https://github.com/huangbowen521/SpringMessageSpike">github</a>中，感兴趣的可以自行查看。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用WebDriver遇到的那些坑]]></title>
    <link href="http://www.huangbowen.net/blog/2013/06/25/practice-of-webdriver/"/>
    <updated>2013-06-25T22:00:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/06/25/practice-of-webdriver</id>
    <content type="html"><![CDATA[<p><img src="http://www.huangbowen.net/images/automatedRobot.png"></p>

<p>在做web项目的自动化端到端测试时主要使用的是<a href="http://docs.seleniumhq.org/projects/webdriver/">Selenium WebDriver</a>来驱动浏览器。<a href="http://docs.seleniumhq.org/projects/webdriver/">Selenium WebDriver</a>的优点是支持的语言多，支持的浏览器多。主流的浏览器Chrome、Firefox、IE等都支持，手机上的浏览器Android、IPhone等也支持，甚至还支持<a href="http://phantomjs.org/">PhantomJS</a>（由于PhantomJS跑测试时并不需要渲染元素，所以执行速度快）。</p>

<!-- more -->


<p>但是我在使用<a href="http://docs.seleniumhq.org/projects/webdriver/">Selenium WebDriver</a>时，遇到了很多坑。这些问题，有的是因为<a href="http://docs.seleniumhq.org/projects/webdriver/">Selenium WebDriver</a>与浏览器不同版本之间兼容性的问题，有的是<a href="http://docs.seleniumhq.org/projects/webdriver/">Selenium WebDriver</a>本身的bug，当然也不乏自己对<a href="http://docs.seleniumhq.org/projects/webdriver/">Selenium WebDriver</a>某些功能理解不透彻。我花时间总结了一下，分享给大家，希望大家以后遇到问题可以避过这些坑，少走弯路。另外也总结了一些使用WebDriver的比较好的实践，也一并分享给大家。</p>

<ul>
<li><strong>WebDriver每次启动一个Firefox的实例时，会生成一个匿名的profile，并不会使用当前Firefox的profile。这点一定要注意。比如如果访问被测试的web服务需要通过代理，你想直接设置Firefox的代理是行不通的，因为WebDriver启动的Firefox实例并不会使用你这个profile，正确的做法是通过FirefoxProfile来设置。</strong></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">WebDriver</span> <span class="nf">create</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">FirefoxProfile</span> <span class="n">firefoxProfile</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FirefoxProfile</span><span class="o">();</span>
</span><span class='line'>  <span class="n">firefoxProfile</span><span class="o">.</span><span class="na">setPreference</span><span class="o">(</span><span class="s">&quot;network.proxy.type&quot;</span><span class="o">,</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>  <span class="n">firefoxProfile</span><span class="o">.</span><span class="na">setPreference</span><span class="o">(</span><span class="s">&quot;network.proxy.http&quot;</span><span class="o">,</span><span class="n">yourProxy</span><span class="o">);</span>
</span><span class='line'>  <span class="n">firefoxProfile</span><span class="o">.</span><span class="na">setPreference</span><span class="o">(</span><span class="s">&quot;network.proxy.http_port&quot;</span><span class="o">,</span><span class="n">yourPort</span><span class="o">);</span>
</span><span class='line'>  <span class="n">firefoxProfile</span><span class="o">.</span><span class="na">setPreference</span><span class="o">(</span><span class="s">&quot;network.proxy.no_proxies_on&quot;</span><span class="o">,</span><span class="s">&quot;&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="k">new</span> <span class="nf">FirefoxDriver</span><span class="o">(</span><span class="n">firefoxProfile</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过FirefoProfile也可以设置Firefox其它各种配置。如果要默认给Firefox安装插件的话，可以将插件放置到Firefox安装目录下的默认的plugin文件夹中，这样即使是使用一个全新的profile也可以应用此plugin。</p>

<ul>
<li><strong>使用WebDriver点击界面上Button元素时，如果当前Button元素被界面上其他元素遮住了，或没出现在界面中（比如Button在页面底部，但是屏幕只能显示页面上半部分），使用默认的WebElement.Click()可能会触发不了Click事件。</strong></li>
</ul>


<p>修正方案是找到该页面元素后直接发送一条Click的JavaScript指令。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">((</span><span class="n">JavascriptExecutor</span><span class="o">)</span><span class="n">webDriver</span><span class="o">).</span><span class="na">executeScript</span><span class="o">(</span><span class="s">&quot;arguments[0].click();&quot;</span><span class="o">,</span> <span class="n">webElement</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>当进行了一些操作发生页面跳转时，最好加一个Wait方法等待page load完成再进行后续操作。方法是在某个时间段内判断document.readyState是不是complete。</strong></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">protected</span> <span class="n">Function</span><span class="o">&lt;</span><span class="n">WebDriver</span><span class="o">,</span> <span class="n">Boolean</span><span class="o">&gt;</span> <span class="n">isPageLoaded</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="n">Function</span><span class="o">&lt;</span><span class="n">WebDriver</span><span class="o">,</span> <span class="n">Boolean</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="n">Boolean</span> <span class="nf">apply</span><span class="o">(</span><span class="n">WebDriver</span> <span class="n">driver</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="o">((</span><span class="n">JavascriptExecutor</span><span class="o">)</span> <span class="n">driver</span><span class="o">).</span><span class="na">executeScript</span><span class="o">(</span><span class="s">&quot;return document.readyState&quot;</span><span class="o">).</span><span class="na">equals</span><span class="o">(</span><span class="s">&quot;complete&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">};</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">waitForPageLoad</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">WebDriverWait</span> <span class="n">wait</span> <span class="o">=</span> <span class="k">new</span> <span class="n">WebDriverWait</span><span class="o">(</span><span class="n">webDriver</span><span class="o">,</span> <span class="mi">30</span><span class="o">);</span>
</span><span class='line'>        <span class="n">wait</span><span class="o">.</span><span class="na">until</span><span class="o">(</span><span class="n">isPageLoaded</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>如果页面有Ajax操作，需要写一个Wait方法等待Ajax操作完成。方式与上一条中的基本相同。比如一个Ajax操作是用于向DropDownList中填充数据，则写一个方法判断该DropDownList中元素是否多余0个。</strong></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">private</span> <span class="n">Function</span><span class="o">&lt;</span><span class="n">WebDriver</span><span class="o">,</span> <span class="n">Boolean</span><span class="o">&gt;</span> <span class="n">haveMoreThanOneOption</span><span class="o">(</span><span class="kd">final</span> <span class="n">By</span> <span class="n">element</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="n">Function</span><span class="o">&lt;</span><span class="n">WebDriver</span><span class="o">,</span> <span class="n">Boolean</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="n">Boolean</span> <span class="nf">apply</span><span class="o">(</span><span class="n">WebDriver</span> <span class="n">driver</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">WebElement</span> <span class="n">webElement</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="na">findElement</span><span class="o">(</span><span class="n">element</span><span class="o">);</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">webElement</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                    <span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="n">webElement</span><span class="o">.</span><span class="na">findElements</span><span class="o">(</span><span class="n">By</span><span class="o">.</span><span class="na">tagName</span><span class="o">(</span><span class="s">&quot;option&quot;</span><span class="o">)).</span><span class="na">size</span><span class="o">();</span>
</span><span class='line'>                    <span class="k">return</span> <span class="n">size</span> <span class="o">&gt;=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">};</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">waitForDropDownListLoaded</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">WebDriverWait</span> <span class="n">wait</span> <span class="o">=</span> <span class="k">new</span> <span class="n">WebDriverWait</span><span class="o">(</span><span class="n">webDriver</span><span class="o">,</span> <span class="mi">30</span><span class="o">);</span>
</span><span class='line'>        <span class="n">wait</span><span class="o">.</span><span class="na">until</span><span class="o">(</span><span class="n">isPageLoaded</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>以此类推，我们可以判断某个元素是否呈现、某个class是否append成功等一系列方法来判断ajax是否执行完成。</p>

<ul>
<li><strong>如果网站使用了JQuery的动画效果，我们在运行测试的时候其实可以disable JQuery的animation，一方面可以加快测试的速度，另一方面可以加强测试的稳定性（如果启用了Animation，使用WebDriver驱动浏览器时可能会出现一些无法预料的异常）。</strong></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">((</span><span class="n">JavascriptExecutor</span><span class="o">)</span><span class="n">driver</span><span class="o">).</span><span class="na">executeScript</span><span class="o">(</span><span class="s">&quot;jQuery.fx.off=true&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>由于WebDriver要驱动浏览器，所以测试运行的时间比较长，我们可以并行跑测试以节省时间。如果你使用的是maven构建工具，可以配置surefire plugin时，在configruation节点加入以下配置。</strong></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;parallel&gt;</span>classes<span class="nt">&lt;/parallel&gt;</span>
</span><span class='line'><span class="nt">&lt;threadCount&gt;</span>3<span class="nt">&lt;/threadCount&gt;</span>
</span><span class='line'><span class="nt">&lt;perCoreThreadCount&gt;</span>false<span class="nt">&lt;/perCoreThreadCount&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>当测试fail的时候，如果当前使用的WebDriver实现了TakesScreenshot接口，我们就可以调用相应的方法截下当前浏览器呈现的web页面，这样有利于快速定位出错的原因。</strong></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">getScreenShot</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">webDriver</span> <span class="k">instanceof</span> <span class="n">TakesScreenshot</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">TakesScreenshot</span> <span class="n">screenshotTaker</span> <span class="o">=</span> <span class="o">(</span><span class="n">TakesScreenshot</span><span class="o">)</span> <span class="n">webDriver</span><span class="o">;</span>
</span><span class='line'>            <span class="n">File</span> <span class="n">file</span> <span class="o">=</span> <span class="n">screenshotTaker</span><span class="o">.</span><span class="na">getScreenshotAs</span><span class="o">(</span><span class="n">savePath</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p><strong>如果页面弹出了浏览器自带的警告框（使用JavaScript的Alert方法），<a href="http://docs.seleniumhq.org/projects/webdriver/">Selenium WebDriver</a>在点选次警告框时会偶发性失败。具体原因还未查明。解决方案是尽量不使用Alert方法的警告框，而是自己实现模式窗口（比如Jquery UI的模式窗口）来实现警告框效果。这样即保证了测试的稳定性，另外我们自己可以控制警告框的样式，给用户带来更好的体验。</strong></p></li>
<li><p><strong>经常更新Selenium的版本。注意经常上Selenium的<a href="http://docs.seleniumhq.org/">官网</a>看是否发布了新的版本，新的版本都修复了那些bug，如果包含你遇到的bug，就可以升级到目前的版本。</strong></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CheckStyle, 强制你遵循编码规范]]></title>
    <link href="http://www.huangbowen.net/blog/2013/06/21/introduce-checkstyle/"/>
    <updated>2013-06-21T13:53:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/06/21/introduce-checkstyle</id>
    <content type="html"><![CDATA[<p><img src="http://www.huangbowen.net/images/CheckStyle.png"></p>

<p>如今代码静态检查越来越重要，已经成为构建高质量软件的不可或缺的一个验证步骤。如果你使用的是java语言，那么<a href="http://checkstyle.sourceforge.net/">CheckStyle</a>则是一个利器。
<a href="http://checkstyle.sourceforge.net/">CheckStyle</a>能够帮助程序员检查代码是否符合制定的规范。通过将<a href="http://checkstyle.sourceforge.net/">CheckStyle</a>的检查引入到项目构建中，可以强制让项目中的所有的开发者遵循制定规范，而不是仅仅停留在纸面上。如果发现代码违反了标准，比如类名未以大写开头、单个方法超过了指定行数、甚至单个方法抛出了3个以上的异常等。这些检查由于是基于源码的，所以不需要编译，执行速度快。</p>

<!-- more -->


<p><a href="http://checkstyle.sourceforge.net/">CheckStyle</a>有针对不同IDE和构建工具的各种插件，方便开发者随时随地对代码进行静态检查。下面就讲解下如何将<a href="http://checkstyle.sourceforge.net/">CheckStyle</a>引入到maven构建中。</p>

<h2>配置CheckStyle插件</h2>

<p>在maven中一个名为<code>maven-checkstyle-plugin</code>的插件，用于执行<a href="http://checkstyle.sourceforge.net/">CheckStyle</a> task。下面是一个简单的配置。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>org.apache.maven.plugins<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>maven-checkstyle-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version&gt;</span>2.10<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>    <span class="nt">&lt;executions&gt;</span>
</span><span class='line'>        <span class="nt">&lt;execution&gt;</span>
</span><span class='line'>            <span class="nt">&lt;id&gt;</span>checkstyle<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>            <span class="nt">&lt;phase&gt;</span>validate<span class="nt">&lt;/phase&gt;</span>
</span><span class='line'>            <span class="nt">&lt;goals&gt;</span>
</span><span class='line'>                <span class="nt">&lt;goal&gt;</span>check<span class="nt">&lt;/goal&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/goals&gt;</span>
</span><span class='line'>            <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>                <span class="nt">&lt;failOnViolation&gt;</span>true<span class="nt">&lt;/failOnViolation&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/execution&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/executions&gt;</span>
</span><span class='line'><span class="nt">&lt;/plugin&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们定义了在maven lifecycle的validate阶段执行check task，并且如果发现有违反标准的情况就会fail当前的build。</p>

<p>maven-checkstyle-plugin内置了4种规范.</p>

<ul>
<li>config/sun_checks.xml</li>
<li>config/maven_checks.xml</li>
<li>config/turbine_checks.xml</li>
<li>config/avalon_checks.xml</li>
</ul>


<p>其中sun_checks.xml为默认值。如果想要使用其他三种规范，则只需配置configuration。下面是使用maven_checks.xml的示例。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>org.apache.maven.plugins<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>maven-checkstyle-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version&gt;</span>2.10<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>    <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>        <span class="nt">&lt;configLocation&gt;</span>config/maven_checks.xml<span class="nt">&lt;/configLocation&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>    <span class="nt">&lt;executions&gt;</span>
</span><span class='line'>        <span class="nt">&lt;execution&gt;</span>
</span><span class='line'>            <span class="nt">&lt;id&gt;</span>checkstyle<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>            <span class="nt">&lt;phase&gt;</span>validate<span class="nt">&lt;/phase&gt;</span>
</span><span class='line'>            <span class="nt">&lt;goals&gt;</span>
</span><span class='line'>                <span class="nt">&lt;goal&gt;</span>check<span class="nt">&lt;/goal&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/goals&gt;</span>
</span><span class='line'>            <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>                <span class="nt">&lt;failOnViolation&gt;</span>true<span class="nt">&lt;/failOnViolation&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/execution&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/executions&gt;</span>
</span><span class='line'><span class="nt">&lt;/plugin&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>自定义规范文件</h2>

<p>我们可以使用默认的规范未见，当然也支持自定义。下面是google的一个checkstyle规范文件。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
<span class='line-number'>327</span>
<span class='line-number'>328</span>
<span class='line-number'>329</span>
<span class='line-number'>330</span>
<span class='line-number'>331</span>
<span class='line-number'>332</span>
<span class='line-number'>333</span>
<span class='line-number'>334</span>
<span class='line-number'>335</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="cp">&lt;!DOCTYPE module PUBLIC</span>
</span><span class='line'><span class="cp">        &quot;-//Puppy Crawl//DTD Check Configuration 1.3//EN&quot;</span>
</span><span class='line'><span class="cp">        &quot;http://www.puppycrawl.com/dtds/configuration_1_3.dtd&quot;&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c">&lt;!-- This is a checkstyle configuration file. For descriptions of</span>
</span><span class='line'><span class="c">what the following rules do, please see the checkstyle configuration</span>
</span><span class='line'><span class="c">page at http://checkstyle.sourceforge.net/config.html --&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;module</span> <span class="na">name=</span><span class="s">&quot;Checker&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;module</span> <span class="na">name=</span><span class="s">&quot;RegexpSingleline&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="c">&lt;!-- Requires a Google copyright notice in each file.</span>
</span><span class='line'><span class="c">          Code intended to be open-sourced may have a multi-line copyright</span>
</span><span class='line'><span class="c">          notice, so that this required text appears on the second line:</span>
</span><span class='line'><span class="c">          &lt;pre&gt;</span>
</span><span class='line'><span class="c">            /*</span>
</span><span class='line'><span class="c">             * Copyright 2008 Google Inc.</span>
</span><span class='line'><span class="c">             *</span>
</span><span class='line'><span class="c">             * (details of open-source license...)</span>
</span><span class='line'><span class="c">          &lt;/pre&gt;</span>
</span><span class='line'><span class="c">        --&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;format&quot;</span>
</span><span class='line'>                  <span class="na">value=</span><span class="s">&quot;^(//| \*) Copyright (\([cC]\) )?[\d]{4}(\-[\d]{4})? (Google Inc\.).*$&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;minimum&quot;</span> <span class="na">value=</span><span class="s">&quot;1&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;maximum&quot;</span> <span class="na">value=</span><span class="s">&quot;10&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;message&quot;</span> <span class="na">value=</span><span class="s">&quot;Google copyright is missing or malformed.&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;severity&quot;</span> <span class="na">value=</span><span class="s">&quot;error&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/module&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;module</span> <span class="na">name=</span><span class="s">&quot;FileTabCharacter&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="c">&lt;!-- Checks that there are no tab characters in the file.</span>
</span><span class='line'><span class="c">        --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/module&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;module</span> <span class="na">name=</span><span class="s">&quot;NewlineAtEndOfFile&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;module</span> <span class="na">name=</span><span class="s">&quot;RegexpSingleline&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="c">&lt;!-- Checks that FIXME is not used in comments.  TODO is preferred.</span>
</span><span class='line'><span class="c">        --&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;format&quot;</span> <span class="na">value=</span><span class="s">&quot;((//.*)|(\*.*))FIXME&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;message&quot;</span> <span class="na">value=</span><span class="s">&#39;TODO is preferred to FIXME.  e.g. &quot;TODO(johndoe): Refactor when v2 is released.&quot;&#39;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/module&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;module</span> <span class="na">name=</span><span class="s">&quot;RegexpSingleline&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="c">&lt;!-- Checks that TODOs are named.  (Actually, just that they are followed</span>
</span><span class='line'><span class="c">             by an open paren.)</span>
</span><span class='line'><span class="c">        --&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;format&quot;</span> <span class="na">value=</span><span class="s">&quot;((//.*)|(\*.*))TODO[^(]&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;message&quot;</span> <span class="na">value=</span><span class="s">&#39;All TODOs should be named.  e.g. &quot;TODO(johndoe): Refactor when v2 is released.&quot;&#39;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/module&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- All Java AST specific tests live under TreeWalker module. --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;module</span> <span class="na">name=</span><span class="s">&quot;TreeWalker&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c">&lt;!--</span>
</span><span class='line'>
</span><span class='line'><span class="c">        IMPORT CHECKS</span>
</span><span class='line'>
</span><span class='line'><span class="c">        --&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;module</span> <span class="na">name=</span><span class="s">&quot;RedundantImport&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="c">&lt;!-- Checks for redundant import statements. --&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;severity&quot;</span> <span class="na">value=</span><span class="s">&quot;error&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/module&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;module</span> <span class="na">name=</span><span class="s">&quot;ImportOrder&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="c">&lt;!-- Checks for out of order import statements. --&gt;</span>
</span><span class='line'>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;severity&quot;</span> <span class="na">value=</span><span class="s">&quot;warning&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;groups&quot;</span> <span class="na">value=</span><span class="s">&quot;com.google,android,junit,net,org,java,javax&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="c">&lt;!-- This ensures that static imports go first. --&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;option&quot;</span> <span class="na">value=</span><span class="s">&quot;top&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;tokens&quot;</span> <span class="na">value=</span><span class="s">&quot;STATIC_IMPORT, IMPORT&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/module&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c">&lt;!--</span>
</span><span class='line'>
</span><span class='line'><span class="c">        JAVADOC CHECKS</span>
</span><span class='line'>
</span><span class='line'><span class="c">        --&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c">&lt;!-- Checks for Javadoc comments.                     --&gt;</span>
</span><span class='line'>        <span class="c">&lt;!-- See http://checkstyle.sf.net/config_javadoc.html --&gt;</span>
</span><span class='line'>        <span class="nt">&lt;module</span> <span class="na">name=</span><span class="s">&quot;JavadocMethod&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;scope&quot;</span> <span class="na">value=</span><span class="s">&quot;protected&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;severity&quot;</span> <span class="na">value=</span><span class="s">&quot;warning&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;allowMissingJavadoc&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;allowMissingParamTags&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;allowMissingReturnTag&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;allowMissingThrowsTags&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;allowThrowsTagsForSubclasses&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;allowUndeclaredRTE&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/module&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;module</span> <span class="na">name=</span><span class="s">&quot;JavadocType&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;scope&quot;</span> <span class="na">value=</span><span class="s">&quot;protected&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;severity&quot;</span> <span class="na">value=</span><span class="s">&quot;error&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/module&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;module</span> <span class="na">name=</span><span class="s">&quot;JavadocStyle&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;severity&quot;</span> <span class="na">value=</span><span class="s">&quot;warning&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/module&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c">&lt;!--</span>
</span><span class='line'>
</span><span class='line'><span class="c">        NAMING CHECKS</span>
</span><span class='line'>
</span><span class='line'><span class="c">        --&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c">&lt;!-- Item 38 - Adhere to generally accepted naming conventions --&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;module</span> <span class="na">name=</span><span class="s">&quot;PackageName&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="c">&lt;!-- Validates identifiers for package names against the</span>
</span><span class='line'><span class="c">              supplied expression. --&gt;</span>
</span><span class='line'>            <span class="c">&lt;!-- Here the default checkstyle rule restricts package name parts to</span>
</span><span class='line'><span class="c">              seven characters, this is not in line with common practice at Google.</span>
</span><span class='line'><span class="c">            --&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;format&quot;</span> <span class="na">value=</span><span class="s">&quot;^[a-z]+(\.[a-z][a-z0-9]{1,})*$&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;severity&quot;</span> <span class="na">value=</span><span class="s">&quot;warning&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/module&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;module</span> <span class="na">name=</span><span class="s">&quot;TypeNameCheck&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="c">&lt;!-- Validates static, final fields against the</span>
</span><span class='line'><span class="c">            expression &quot;^[A-Z][a-zA-Z0-9]*$&quot;. --&gt;</span>
</span><span class='line'>            <span class="nt">&lt;metadata</span> <span class="na">name=</span><span class="s">&quot;altname&quot;</span> <span class="na">value=</span><span class="s">&quot;TypeName&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;severity&quot;</span> <span class="na">value=</span><span class="s">&quot;warning&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/module&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;module</span> <span class="na">name=</span><span class="s">&quot;ConstantNameCheck&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="c">&lt;!-- Validates non-private, static, final fields against the supplied</span>
</span><span class='line'><span class="c">            public/package final fields &quot;^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$&quot;. --&gt;</span>
</span><span class='line'>            <span class="nt">&lt;metadata</span> <span class="na">name=</span><span class="s">&quot;altname&quot;</span> <span class="na">value=</span><span class="s">&quot;ConstantName&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;applyToPublic&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;applyToProtected&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;applyToPackage&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;applyToPrivate&quot;</span> <span class="na">value=</span><span class="s">&quot;false&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;format&quot;</span> <span class="na">value=</span><span class="s">&quot;^([A-Z][A-Z0-9]*(_[A-Z0-9]+)*|FLAG_.*)$&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;message</span> <span class="na">key=</span><span class="s">&quot;name.invalidPattern&quot;</span>
</span><span class='line'>                     <span class="na">value=</span><span class="s">&quot;Variable &#39;&#39;{0}&#39;&#39; should be in ALL_CAPS (if it is a constant) or be private (otherwise).&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;severity&quot;</span> <span class="na">value=</span><span class="s">&quot;warning&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/module&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;module</span> <span class="na">name=</span><span class="s">&quot;StaticVariableNameCheck&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="c">&lt;!-- Validates static, non-final fields against the supplied</span>
</span><span class='line'><span class="c">            expression &quot;^[a-z][a-zA-Z0-9]*_?$&quot;. --&gt;</span>
</span><span class='line'>            <span class="nt">&lt;metadata</span> <span class="na">name=</span><span class="s">&quot;altname&quot;</span> <span class="na">value=</span><span class="s">&quot;StaticVariableName&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;applyToPublic&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;applyToProtected&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;applyToPackage&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;applyToPrivate&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;format&quot;</span> <span class="na">value=</span><span class="s">&quot;^[a-z][a-zA-Z0-9]*_?$&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;severity&quot;</span> <span class="na">value=</span><span class="s">&quot;warning&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/module&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;module</span> <span class="na">name=</span><span class="s">&quot;MemberNameCheck&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="c">&lt;!-- Validates non-static members against the supplied expression. --&gt;</span>
</span><span class='line'>            <span class="nt">&lt;metadata</span> <span class="na">name=</span><span class="s">&quot;altname&quot;</span> <span class="na">value=</span><span class="s">&quot;MemberName&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;applyToPublic&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;applyToProtected&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;applyToPackage&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;applyToPrivate&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;format&quot;</span> <span class="na">value=</span><span class="s">&quot;^[a-z][a-zA-Z0-9]*$&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;severity&quot;</span> <span class="na">value=</span><span class="s">&quot;warning&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/module&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;module</span> <span class="na">name=</span><span class="s">&quot;MethodNameCheck&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="c">&lt;!-- Validates identifiers for method names. --&gt;</span>
</span><span class='line'>            <span class="nt">&lt;metadata</span> <span class="na">name=</span><span class="s">&quot;altname&quot;</span> <span class="na">value=</span><span class="s">&quot;MethodName&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;format&quot;</span> <span class="na">value=</span><span class="s">&quot;^[a-z][a-zA-Z0-9]*(_[a-zA-Z0-9]+)*$&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;severity&quot;</span> <span class="na">value=</span><span class="s">&quot;warning&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/module&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;module</span> <span class="na">name=</span><span class="s">&quot;ParameterName&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="c">&lt;!-- Validates identifiers for method parameters against the</span>
</span><span class='line'><span class="c">              expression &quot;^[a-z][a-zA-Z0-9]*$&quot;. --&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;severity&quot;</span> <span class="na">value=</span><span class="s">&quot;warning&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/module&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;module</span> <span class="na">name=</span><span class="s">&quot;LocalFinalVariableName&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="c">&lt;!-- Validates identifiers for local final variables against the</span>
</span><span class='line'><span class="c">              expression &quot;^[a-z][a-zA-Z0-9]*$&quot;. --&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;severity&quot;</span> <span class="na">value=</span><span class="s">&quot;warning&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/module&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;module</span> <span class="na">name=</span><span class="s">&quot;LocalVariableName&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="c">&lt;!-- Validates identifiers for local variables against the</span>
</span><span class='line'><span class="c">              expression &quot;^[a-z][a-zA-Z0-9]*$&quot;. --&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;severity&quot;</span> <span class="na">value=</span><span class="s">&quot;warning&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/module&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        <span class="c">&lt;!--</span>
</span><span class='line'>
</span><span class='line'><span class="c">        LENGTH and CODING CHECKS</span>
</span><span class='line'>
</span><span class='line'><span class="c">        --&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;module</span> <span class="na">name=</span><span class="s">&quot;LineLength&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="c">&lt;!-- Checks if a line is too long. --&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;max&quot;</span> <span class="na">value=</span><span class="s">&quot;${com.puppycrawl.tools.checkstyle.checks.sizes.LineLength.max}&quot;</span> <span class="na">default=</span><span class="s">&quot;100&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;severity&quot;</span> <span class="na">value=</span><span class="s">&quot;error&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>            <span class="c">&lt;!--</span>
</span><span class='line'><span class="c">              The default ignore pattern exempts the following elements:</span>
</span><span class='line'><span class="c">                - import statements</span>
</span><span class='line'><span class="c">                - long URLs inside comments</span>
</span><span class='line'><span class="c">            --&gt;</span>
</span><span class='line'>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;ignorePattern&quot;</span>
</span><span class='line'>                      <span class="na">value=</span><span class="s">&quot;${com.puppycrawl.tools.checkstyle.checks.sizes.LineLength.ignorePattern}&quot;</span>
</span><span class='line'>                      <span class="na">default=</span><span class="s">&quot;^(package .*;\s*)|(import .*;\s*)|( *\* *https?://.*)$&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/module&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;module</span> <span class="na">name=</span><span class="s">&quot;LeftCurly&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="c">&lt;!-- Checks for placement of the left curly brace (&#39;{&#39;). --&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;severity&quot;</span> <span class="na">value=</span><span class="s">&quot;warning&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/module&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;module</span> <span class="na">name=</span><span class="s">&quot;RightCurly&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="c">&lt;!-- Checks right curlies on CATCH, ELSE, and TRY blocks are on</span>
</span><span class='line'><span class="c">            the same line. e.g., the following example is fine:</span>
</span><span class='line'><span class="c">            &lt;pre&gt;</span>
</span><span class='line'><span class="c">              if {</span>
</span><span class='line'><span class="c">                ...</span>
</span><span class='line'><span class="c">              } else</span>
</span><span class='line'><span class="c">            &lt;/pre&gt;</span>
</span><span class='line'><span class="c">            --&gt;</span>
</span><span class='line'>            <span class="c">&lt;!-- This next example is not fine:</span>
</span><span class='line'><span class="c">            &lt;pre&gt;</span>
</span><span class='line'><span class="c">              if {</span>
</span><span class='line'><span class="c">                ...</span>
</span><span class='line'><span class="c">              }</span>
</span><span class='line'><span class="c">              else</span>
</span><span class='line'><span class="c">            &lt;/pre&gt;</span>
</span><span class='line'><span class="c">            --&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;option&quot;</span> <span class="na">value=</span><span class="s">&quot;same&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;severity&quot;</span> <span class="na">value=</span><span class="s">&quot;warning&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/module&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c">&lt;!-- Checks for braces around if and else blocks --&gt;</span>
</span><span class='line'>        <span class="nt">&lt;module</span> <span class="na">name=</span><span class="s">&quot;NeedBraces&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;severity&quot;</span> <span class="na">value=</span><span class="s">&quot;warning&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;tokens&quot;</span> <span class="na">value=</span><span class="s">&quot;LITERAL_IF, LITERAL_ELSE, LITERAL_FOR, LITERAL_WHILE, LITERAL_DO&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/module&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;module</span> <span class="na">name=</span><span class="s">&quot;UpperEll&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="c">&lt;!-- Checks that long constants are defined with an upper ell.--&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;severity&quot;</span> <span class="na">value=</span><span class="s">&quot;error&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/module&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;module</span> <span class="na">name=</span><span class="s">&quot;FallThrough&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="c">&lt;!-- Warn about falling through to the next case statement.  Similar to</span>
</span><span class='line'><span class="c">            javac -Xlint:fallthrough, but the check is suppressed if a single-line comment</span>
</span><span class='line'><span class="c">            on the last non-blank line preceding the fallen-into case contains &#39;fall through&#39; (or</span>
</span><span class='line'><span class="c">            some other variants which we don&#39;t publicized to promote consistency).</span>
</span><span class='line'><span class="c">            --&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;reliefPattern&quot;</span>
</span><span class='line'>                      <span class="na">value=</span><span class="s">&quot;fall through|Fall through|fallthru|Fallthru|falls through|Falls through|fallthrough|Fallthrough|No break|NO break|no break|continue on&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;severity&quot;</span> <span class="na">value=</span><span class="s">&quot;error&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/module&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        <span class="c">&lt;!--</span>
</span><span class='line'>
</span><span class='line'><span class="c">        MODIFIERS CHECKS</span>
</span><span class='line'>
</span><span class='line'><span class="c">        --&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;module</span> <span class="na">name=</span><span class="s">&quot;ModifierOrder&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="c">&lt;!-- Warn if modifier order is inconsistent with JLS3 8.1.1, 8.3.1, and</span>
</span><span class='line'><span class="c">                 8.4.3.  The prescribed order is:</span>
</span><span class='line'><span class="c">                 public, protected, private, abstract, static, final, transient, volatile,</span>
</span><span class='line'><span class="c">                 synchronized, native, strictfp</span>
</span><span class='line'><span class="c">              --&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/module&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        <span class="c">&lt;!--</span>
</span><span class='line'>
</span><span class='line'><span class="c">        WHITESPACE CHECKS</span>
</span><span class='line'>
</span><span class='line'><span class="c">        --&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;module</span> <span class="na">name=</span><span class="s">&quot;WhitespaceAround&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="c">&lt;!-- Checks that various tokens are surrounded by whitespace.</span>
</span><span class='line'><span class="c">                 This includes most binary operators and keywords followed</span>
</span><span class='line'><span class="c">                 by regular or curly braces.</span>
</span><span class='line'><span class="c">            --&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;tokens&quot;</span> <span class="na">value=</span><span class="s">&quot;ASSIGN, BAND, BAND_ASSIGN, BOR,</span>
</span><span class='line'><span class="s">        BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN,</span>
</span><span class='line'><span class="s">        EQUAL, GE, GT, LAND, LE, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE,</span>
</span><span class='line'><span class="s">        LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN,</span>
</span><span class='line'><span class="s">        LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS,</span>
</span><span class='line'><span class="s">        MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION,</span>
</span><span class='line'><span class="s">        SL, SL_ASSIGN, SR_ASSIGN, STAR, STAR_ASSIGN&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;severity&quot;</span> <span class="na">value=</span><span class="s">&quot;error&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/module&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;module</span> <span class="na">name=</span><span class="s">&quot;WhitespaceAfter&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="c">&lt;!-- Checks that commas, semicolons and typecasts are followed by</span>
</span><span class='line'><span class="c">                 whitespace.</span>
</span><span class='line'><span class="c">            --&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;tokens&quot;</span> <span class="na">value=</span><span class="s">&quot;COMMA, SEMI, TYPECAST&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/module&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;module</span> <span class="na">name=</span><span class="s">&quot;NoWhitespaceAfter&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="c">&lt;!-- Checks that there is no whitespace after various unary operators.</span>
</span><span class='line'><span class="c">                 Linebreaks are allowed.</span>
</span><span class='line'><span class="c">            --&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;tokens&quot;</span> <span class="na">value=</span><span class="s">&quot;BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS,</span>
</span><span class='line'><span class="s">        UNARY_PLUS&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;allowLineBreaks&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;severity&quot;</span> <span class="na">value=</span><span class="s">&quot;error&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/module&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;module</span> <span class="na">name=</span><span class="s">&quot;NoWhitespaceBefore&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="c">&lt;!-- Checks that there is no whitespace before various unary operators.</span>
</span><span class='line'><span class="c">                 Linebreaks are allowed.</span>
</span><span class='line'><span class="c">            --&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;tokens&quot;</span> <span class="na">value=</span><span class="s">&quot;SEMI, DOT, POST_DEC, POST_INC&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;allowLineBreaks&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;severity&quot;</span> <span class="na">value=</span><span class="s">&quot;error&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/module&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;module</span> <span class="na">name=</span><span class="s">&quot;ParenPad&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="c">&lt;!-- Checks that there is no whitespace before close parens or after</span>
</span><span class='line'><span class="c">                 open parens.</span>
</span><span class='line'><span class="c">            --&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;severity&quot;</span> <span class="na">value=</span><span class="s">&quot;warning&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/module&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;/module&gt;</span>
</span><span class='line'><span class="nt">&lt;/module&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果想启用自定义的规范文件，则依旧是修改configuration，指向你的文件地址。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>        <span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>            <span class="nt">&lt;groupId&gt;</span>org.apache.maven.plugins<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;artifactId&gt;</span>maven-checkstyle-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;version&gt;</span>2.10<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>            <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>                <span class="nt">&lt;configLocation&gt;</span>${basedir}/src/config/custom_checkstyle.xml<span class="nt">&lt;/configLocation&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>            <span class="nt">&lt;executions&gt;</span>
</span><span class='line'>                <span class="nt">&lt;execution&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;id&gt;</span>checkstyle<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;phase&gt;</span>validate<span class="nt">&lt;/phase&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;goals&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;goal&gt;</span>check<span class="nt">&lt;/goal&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;/goals&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;failOnViolation&gt;</span>true<span class="nt">&lt;/failOnViolation&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/execution&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/executions&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/plugin&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>运行checkstyle检查</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mvn checkstyle:checkstyle
</span></code></pre></td></tr></table></div></figure>


<h2>查看checkstyle结果</h2>

<p>运行maven命令后可以在console里查看checkstyle运行结果。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>INFO<span class="o">]</span>
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> There are 11 checkstyle errors.
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> ------------------------------------------------------------------------
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> BUILD FAILURE
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> ------------------------------------------------------------------------
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> Total <span class="nb">time</span>: 2.135s
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> Finished at: Fri Jun 21 13:39:24 CST 2013
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> Final Memory: 6M/81M
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> ------------------------------------------------------------------------
</span><span class='line'><span class="o">[</span>ERROR<span class="o">]</span> Failed to execute goal org.apache.maven.plugins:maven-checkstyle-plugin:2.10:check <span class="o">(</span>checkstyle<span class="o">)</span> on project SpringMessageSpike: You have 11 Checkstyle violations. -&gt; <span class="o">[</span>Help 1<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>checkstye的详细结果信息被存放在target/checkstyle-result.xml中。下面是一个示例。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;checkstyle</span> <span class="na">version=</span><span class="s">&quot;5.6&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;file</span> <span class="na">name=</span><span class="s">&quot;/Users/twer/sourcecode/SpringMessageSpike/src/main/java/com/thoughtworks/config/SessionMessageSource.java&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;error</span> <span class="na">line=</span><span class="s">&quot;0&quot;</span> <span class="na">severity=</span><span class="s">&quot;error&quot;</span> <span class="na">message=</span><span class="s">&quot;Google copyright is missing or malformed.&quot;</span> <span class="na">source=</span><span class="s">&quot;com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;error</span> <span class="na">line=</span><span class="s">&quot;21&quot;</span> <span class="na">severity=</span><span class="s">&quot;warning&quot;</span> <span class="na">message=</span><span class="s">&quot;Wrong order for &amp;apos;org.slf4j.LoggerFactory.getLogger&amp;apos; import.&quot;</span> <span class="na">source=</span><span class="s">&quot;com.puppycrawl.tools.checkstyle.checks.imports.ImportOrderCheck&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;error</span> <span class="na">line=</span><span class="s">&quot;27&quot;</span> <span class="na">severity=</span><span class="s">&quot;error&quot;</span> <span class="na">message=</span><span class="s">&quot;Missing a Javadoc comment.&quot;</span> <span class="na">source=</span><span class="s">&quot;com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocTypeCheck&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;error</span> <span class="na">line=</span><span class="s">&quot;35&quot;</span> <span class="na">severity=</span><span class="s">&quot;error&quot;</span> <span class="na">message=</span><span class="s">&quot;Line is longer than 100 characters (found 115).&quot;</span> <span class="na">source=</span><span class="s">&quot;com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/file&gt;</span>
</span><span class='line'><span class="nt">&lt;/checkstyle&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>跳过对指定文件的某些检查</h2>

<p>如果对于指定文件检查出了一些问题，但是你想忽略它，则可以使用suppression。</p>

<p>例如在上述例子中有一个checkstyle error是说某行超过了100字符。如果我们不想修复这个错误怎么办那？可以将其suppress掉。</p>

<p>方法是建立一个checkstyle-suppressions.xml文件。其中加入下述内容</p>

<figure class='code'><figcaption><span>checkstyle-suppressions.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot;?&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">&lt;!DOCTYPE suppressions PUBLIC</span>
</span><span class='line'><span class="cp">        &quot;-//Puppy Crawl//DTD Suppressions 1.0//EN&quot;</span>
</span><span class='line'><span class="cp">        &quot;http://www.puppycrawl.com/dtds/suppressions_1_0.dtd&quot;&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;suppressions&gt;</span>
</span><span class='line'>    <span class="nt">&lt;suppress</span> <span class="na">checks=</span><span class="s">&quot;LineLengthCheck&quot;</span>
</span><span class='line'>              <span class="na">files=</span><span class="s">&quot;SessionMessageSource.java&quot;</span>
</span><span class='line'>              <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/suppressions&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后配置<code>maven-checkstyel-plugin</code>设置<code>suppressionsLocation</code>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>org.apache.maven.plugins<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>maven-checkstyle-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version&gt;</span>2.10<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>    <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>        <span class="nt">&lt;configLocation&gt;</span>${basedir}/src/config/custom_checkstyle.xml<span class="nt">&lt;/configLocation&gt;</span>
</span><span class='line'>        <span class="nt">&lt;suppressionsLocation&gt;</span>${basedir}/src/config/checkstyle-suppressions.xml<span class="nt">&lt;/suppressionsLocation&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>    <span class="nt">&lt;executions&gt;</span>
</span><span class='line'>        <span class="nt">&lt;execution&gt;</span>
</span><span class='line'>            <span class="nt">&lt;id&gt;</span>checkstyle<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>            <span class="nt">&lt;phase&gt;</span>validate<span class="nt">&lt;/phase&gt;</span>
</span><span class='line'>            <span class="nt">&lt;goals&gt;</span>
</span><span class='line'>                <span class="nt">&lt;goal&gt;</span>check<span class="nt">&lt;/goal&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/goals&gt;</span>
</span><span class='line'>            <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>                <span class="nt">&lt;failOnViolation&gt;</span>true<span class="nt">&lt;/failOnViolation&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/execution&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/executions&gt;</span>
</span><span class='line'><span class="nt">&lt;/plugin&gt;</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ThoughtWorks知识分享体系]]></title>
    <link href="http://www.huangbowen.net/blog/2013/06/13/thoughtworks-knowledge-sharing-system/"/>
    <updated>2013-06-13T13:44:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/06/13/thoughtworks-knowledge-sharing-system</id>
    <content type="html"><![CDATA[<p><img src="http://www.huangbowen.net/images/KS.jpg"></p>

<p>本来这篇文章的名称为&#8221;ThoughtWorks的培训体系&#8221;。但是培训这个词总给人一种正襟危坐的感觉，而在ThoughtWorks中的培训则是非常轻松自在的。而且培训有种老手教新手的味道，而在ThoughtWorks不管资历高低，只要你敢秀，都随时欢迎。所以我将培训改为了知识分享。&#8221;Knowledge sharing&#8221;可以说是ThoughtWorks的标志性文化之一。在ThoughtWorks大家庭，大家都很乐于把自己的所学、所想通过各种方式分享出来。正因为ThoughtWorks建立了立体化、全方位的知识分享体系，每一个新加入ThoughtWorks大家提的人都能得到快速的成长，而经验丰富的老员工也能不断的突破自身。这个体系有力的保证了公司员工的技术水平。下面我简略的讲解下这个体系。希望大家都能有所借鉴。</p>

<!-- more -->


<h2>公司层面</h2>

<p><strong>TWU</strong></p>

<p>TWU是由ThoughtWorks为全球应届毕业生量身打造的培训营，全称为ThoughtWorks University。每个刚加入的毕业生都会被送到印度的办公室接受为期六周的培训。在这六周的培训中大家可以感受到公司的文化，了解整个agile开发流程。每个讲师都是由ThoughtWorks global抽取的技术高手。在这六周里，不仅有课上，还有游戏玩，又可以欣赏异国风光，真正做到了寓教于乐。</p>

<p><strong>TWI</strong></p>

<p>TWI是ThoughtWorks为中国区的社招员工打造的培训营，全称为ThoughtWorks Immersion。每个新入职的社招员工将在中国的三个office（北京、西安、成都轮流举行）之一参加为期3天的培训。在这三天的培训中，有中国区CTO徐昊亲自给你讲敏捷，有各种好玩的游戏带你深入了解敏捷，还有各种软技能的培训。即使是senior的人也能有从中有所收获。</p>

<p><strong>Conference</strong></p>

<p>中国区不但自己举行一些会议，如Agile China,QConf等，尽力推行敏捷在中国的实施，还积极的参加国内外的各种大会。这些大会上你能听到各个公司的顶尖技术人才带来的各种演讲，开拓视野。</p>

<h2>Office层面</h2>

<p><strong>Open Party</strong></p>

<p>Open Party是一个非会议形式的聚会，每个月一次，地点不定。OpenParty是由多个技术社区（ThoughtWorks只是其中之一）共同举办的社交活动。本着自由、开放、分享、互动的宗旨，采用“非会议（Unconference）”的形式， 为参与人员创建一个表达和交流的平台。活动话题不仅仅局限于技术，还包括生活、旅游、艺术、创业、商务、投资、营销等各方面的话题。在这上面你很容易交到志同道合的朋友。</p>

<p><strong>Session</strong></p>

<p>形形色色的Session可是ThoughtWorks中很重要的一个活动。无论是中国区甚至是global的技术专家，还是刚参加工作不久的毕业生，都可以随意book一个会议室，给大家带来一场精彩的演讲。Session的时间一般是每天中午的12点半到1点半，以及下午的5点到6点，所以经常看到大家捧着盒饭来参加session。Session的内容也五花八门，有老成都讲成都历史的，也有军迷讲中国航母发展史的，也有Geek达人教你如何写博客。当然更多的还是技术session。从JavaScript到敏捷实践、从正则表达式到大数据应用&#8230;&#8230;总有一款适合你的。</p>

<p><strong>Code Kata</strong></p>

<p>Session注重于听，而Code Kata则注重培养大家的动手能力。时间一般是晚上6点以后，主持人扮演business owner，抛出一个问题由参与者结对编程实现。既有创建一个出租车计价器的常规问题，也有给大杀器超市建立结账系统的刁钻问题。参与者先针对问题建立task列表，然后每对pair简单讲述建立这样的task列表的原因。大家选择其中较好的一个task列表，每5分钟为限，采用tdd的方式依次实现每个task。五分钟后每组pair都需要show一下自己的代码，并讲解设计思路。这种在极短的时间内练习编程的方式很能锻炼人。如果你快捷键不行、你的task思路不清晰，OO设计不到位，就很容易很不上节奏。而每个task间的show case（展示）又能让你观察到与对手的差距，领悟揣摩别人解决问题的思路。</p>

<p><strong>郑大夜校</strong></p>

<p>郑大夜校是ThoughtWorks知识分享体系中的一个重要标志。在ThoughtWorks中有悠久的历史和广泛的知名度。</p>

<p>郑大夜校有两个版本。一个是专门针对还未入职的毕业生的。每两周举行一次。</p>

<p>另一个版本是针对所有在职员工的，为每周四晚的6点到7点。郑大夜校上的课程更有针对性和连续性，通过一些列的课程能够强化你对某一方面知识的深入了解。比如LiYan同学以haskell语言为依托，给大家讲了函数式编程，9堂课涵盖了函数式编程大部分要点。还有XiaoPeng同学的重构手法课程，实战演练如何结合IDE快捷键对代码展开重构…&#8230;这样的系列课程数不胜数，已经成为培训新人技术能力的不可或缺的手段之一。</p>

<p><strong>Reading Club</strong></p>

<p>读书会是成都office一个独特的活动。每两周举办一次。每次会推荐大家读一本书，两周以后大家针对这本书进行热烈的讨论。会议形式也多张多样，有每人5分钟的即兴演讲，有角色扮演，也有辩论会。刚开始主要是些技术书籍，基本围绕着ThoughtWorks的DEV读书路线图。后来也扩展到了其他方面，比如文艺、科幻及一些你懂的类型。</p>

<h2>团队层面</h2>

<p><strong>内部session</strong></p>

<p>内部session和office的session有两个区别：</p>

<ol>
<li><p>内部session比较随意，做不做ppt无所谓，直接找块白板边讲边画也行，或者直接show代码。</p></li>
<li><p>演讲者一般是新手，讲给团队中其他新手或老手。目的是考察新手是否真的掌握了知识点，老手顺便给些意见建议。</p></li>
</ol>


<p>Session主题可以结合项目的技术栈，给新人一个施展的空间。由于内部session比较轻松，比较容易培养新人的自信心，使其能够勇敢的表达自己，在团队中发出自己的声音。</p>

<p><strong>内部Code Jam</strong></p>

<p>Code Jam针对项目中的一些新技术或大家都懂得不多的领域，大家在一定时间内进行专门的强化，一般每周举行一次。其实与上面讲的Code Kata类似。比如在我们项目刚启动时大家对于JavaScript都不太熟悉，针对这一弱项就可以采用Code Kata的方式来强化。所有的developer找一个不忙的下午，由主持人抛出一个与JavaScript有关的挑战，大家一起实现。比如对Jquery不熟，就练习做一个使用JQuery的动态页面；对JavaScript的TDD不熟，就着重练习下Jasmine（JavaScript的单元测试库）的使用。</p>

<p><strong>Tech hudle</strong></p>

<p>时间：每天固定的某个工作时间。
参加人员：全体开发者。
这相当于一个小型的站会。在会上大家分别讲述自己目前在做什么、遇到了什么问题、需要哪方面的帮助，或者识别了项目的什么风险，是否需要规避等。通过tech hundle将所有开发者每天的工作情况串联起来，实现知识的最大共享，避免出现某人闷在一个task很长时间的情况。同时也能拉近与客户方的合作，建立良好的合作关系。</p>

<p><strong>Code review</strong></p>

<p>每天的某个固定时间所有的developer一起利用工具查看当天的所有提交的代码。自己的代码能够得到他人的直接点评，这样的机会恐怕不多。而在ThoughtWorks这样的事情天天在上演。通过Code review能够直观的感受到代码的坏味道，从而避免以后重蹈覆辙。</p>

<p><strong>pair programming</strong></p>

<p>结对编程的确是一个非常棒的知识分享的方式。即便是新手和老手pair，大家都能学到东西。无论是解决问题的思路、方式，甚至是对快捷键、IDE的使用，双方都能有所借鉴。我个人非常喜欢这种工作方式，这种知识传递可以贯穿整个工作时间，很是高效。</p>

<h2>个人层面</h2>

<p><strong>buddy &amp; sponsor</strong></p>

<p>每一个新入职的员工都会被分配一个buddy，一直帮助他通过六个月的试用期。试用期满后也可以选择一个senior的人作为sponsor，继续对自己进行指导。Buddy和Sponsor是你工作和学习中的好伙伴。他像导师，其实更愿意和你做朋友。由于buddy和Sponsor的人生阅历相对比较丰富，在工作上及学习上的问题和困惑都能与其探讨。</p>

<p><strong>写博客、翻译书、写书</strong></p>

<p>这也是总结知识、传递知识、自我提高的有效手段。我们在享受前人的经验成果之余，也应该肩负起将知识往后传递的责任。而文字则是知识传递的有力途径。</p>

<p>在ThoughtWorks不进步就意味着退步。保持持续的学习是不断前进的动力。而这一切的前提又是你要有足够的热情。ThoughtWorks欢迎对技术有追求的程序员加入我们的舞台。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[调用API设置安卓手机的Access Point]]></title>
    <link href="http://www.huangbowen.net/blog/2013/06/05/programmatically-set-android-phone-ap/"/>
    <updated>2013-06-05T12:04:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/06/05/programmatically-set-android-phone-ap</id>
    <content type="html"><![CDATA[<p><img src="http://www.huangbowen.net/images/android.jpeg"></p>

<p>最近在做一个小的应用，需要通过程序设置安卓手机的AP（Access point, 即将手机变为一个移动热点，其他机器能够通过wifi连接到此手机）。原以为很简单的一个东西，还是花费了一番周折，最终还是搞定了。</p>

<!-- more -->


<p>配置AP的选项是属于配置wifi的一部分，所以他们都在WifiManager这个类中。
获取当前系统的WifiManager实例的方法是:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">WifiManager</span> <span class="n">wifi</span> <span class="o">=</span> <span class="o">(</span><span class="n">WifiManager</span><span class="o">)</span> <span class="n">getSystemService</span><span class="o">(</span><span class="n">Context</span><span class="o">.</span><span class="na">WIFI_SERVICE</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>此类中有几个关键方法用来设置AP，但是它们都是被隐藏的，我们无法直接调用，所以只有通过反射的方式来调用。</p>

<p>获取AP当前状态的方法是:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="n">Boolean</span> <span class="nf">getApState</span><span class="o">(</span><span class="n">WifiManager</span> <span class="n">wifi</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">NoSuchMethodException</span><span class="o">,</span> <span class="n">IllegalAccessException</span><span class="o">,</span> <span class="n">InvocationTargetException</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Method</span> <span class="n">method</span> <span class="o">=</span> <span class="n">wifi</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getMethod</span><span class="o">(</span><span class="s">&quot;isWifiApEnabled&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">(</span><span class="n">Boolean</span><span class="o">)</span> <span class="n">method</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">wifi</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>配置AP要使用到WifiConfiguration这个类，以下是设置的一个AP。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="n">WifiConfiguration</span> <span class="nf">getApConfiguration</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">WifiConfiguration</span> <span class="n">apConfig</span> <span class="o">=</span> <span class="k">new</span> <span class="n">WifiConfiguration</span><span class="o">();</span>
</span><span class='line'>        <span class="c1">//配置热点的名称</span>
</span><span class='line'>        <span class="n">apConfig</span><span class="o">.</span><span class="na">SSID</span> <span class="o">=</span> <span class="s">&quot;yourId&quot;</span><span class="o">;</span>
</span><span class='line'>        <span class="n">apConfig</span><span class="o">.</span><span class="na">allowedAuthAlgorithms</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">WifiConfiguration</span><span class="o">.</span><span class="na">AuthAlgorithm</span><span class="o">.</span><span class="na">OPEN</span><span class="o">);</span>
</span><span class='line'>        <span class="n">apConfig</span><span class="o">.</span><span class="na">allowedKeyManagement</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">WifiConfiguration</span><span class="o">.</span><span class="na">KeyMgmt</span><span class="o">.</span><span class="na">WPA_PSK</span><span class="o">);</span>
</span><span class='line'>        <span class="n">apConfig</span><span class="o">.</span><span class="na">allowedProtocols</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">WifiConfiguration</span><span class="o">.</span><span class="na">Protocol</span><span class="o">.</span><span class="na">RSN</span><span class="o">);</span>
</span><span class='line'>        <span class="n">apConfig</span><span class="o">.</span><span class="na">allowedProtocols</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">WifiConfiguration</span><span class="o">.</span><span class="na">Protocol</span><span class="o">.</span><span class="na">WPA</span><span class="o">);</span>
</span><span class='line'>        <span class="c1">//配置热点的密码</span>
</span><span class='line'>        <span class="n">apConfig</span><span class="o">.</span><span class="na">preSharedKey</span> <span class="o">=</span> <span class="s">&quot;yourPassword&quot;</span><span class="o">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">apConfig</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>应用AP配置并启用AP要使用另一个被隐藏的方法<code>setWifiApEnabled</code>。<strong>需要注意的是启用AP前要将当前手机的wifi关闭，否则会启动失败。</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">setWifiAp</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        <span class="n">Method</span> <span class="n">method</span> <span class="o">=</span> <span class="n">wifi</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getMethod</span><span class="o">(</span>
</span><span class='line'>                <span class="s">&quot;setWifiApEnabled&quot;</span><span class="o">,</span> <span class="n">WifiConfiguration</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">Boolean</span><span class="o">.</span><span class="na">TYPE</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">wifi</span><span class="o">.</span><span class="na">setWifiEnabled</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class='line'>        <span class="n">method</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">wifi</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后，一定要注意要在AndroidManifest.xml文件中设置几个权限。否则在调用API时会产生<code>java.lang.SecurityException: Permission Denied</code>的异常。
需要加入的权限如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;uses-permission</span> <span class="na">android:name=</span><span class="s">&quot;android.permission.ACCESS_NETWORK_STATE&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;uses-permission</span> <span class="na">android:name=</span><span class="s">&quot;android.permission.ACCESS_WIFI_STATE&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;uses-permission</span> <span class="na">android:name=</span><span class="s">&quot;android.permission.CHANGE_WIFI_STATE&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;uses-permission</span> <span class="na">android:name=</span><span class="s">&quot;android.permission.CHANGE_NETWORK_STATE&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>源码我已经放置到github上了，需要的请自行checkout。地址是：<a href="https://github.com/huangbowen521/APSwitch">https://github.com/huangbowen521/APSwitch</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[持续集成之道：在你的开源项目中使用Travis CI]]></title>
    <link href="http://www.huangbowen.net/blog/2013/05/30/use-travis-ci-to-your-open-source-project/"/>
    <updated>2013-05-30T14:58:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/05/30/use-travis-ci-to-your-open-source-project</id>
    <content type="html"><![CDATA[<p>自从接触并践行了敏捷的一些实践之后，便深深的喜欢上了敏捷。尤其是测试自动化和持续集成这两个实践，可以显著的提高软件的质量和集成效率，实时检测项目健康度，使团队成员对项目保持充足的信心。</p>

<p>但是对于个人项目而言，虽然测试自动化好实现，但是要实现持续集成还是稍有难度。因为持续集成需要搭建一个集成服务器，并建立某种反馈机制。而大多数人来说并没有自己的独立服务器，并且配置也极为繁琐。</p>

<!-- more -->


<p>不过不用怕，现在已经进入了云时代。 <a href="(https://travis-ci.org/)">Travis CI</a>为我们提供了免费的集成服务器，让我们省却了自己搭建集成服务器的烦恼。</p>

<p><a href="(https://travis-ci.org/)">Travis CI</a>的官网介绍是: <strong>A hosted continuous integration service for the open source community.</strong> 表明它主要是给开源社区提供持续集成服务。其与github这个全球最火爆的代码托管网站高度集成，可以很方便的为github中的项目建立持续集成服务。</p>

<p>它不仅支持多种语言，而且支持同时在多个运行环境中运行build，能全方位的测试你的程序。</p>

<p>下面就介绍下如何将<a href="(https://travis-ci.org/)">Travis CI</a>与自己在github上的某个repository集成。（这里以我自己的repository <a href="https://github.com/huangbowen521/SpringMessageSpike">https://github.com/huangbowen521/SpringMessageSpike</a> 为例。 ）</p>

<ol>
<li><p>使Travis CI通过github OAuth认证。</p>

<p> 点击<a href="https://travis-ci.org/">https://travis-ci.org/</a>右上角的<code>Sign in with GitHub</code>按钮，输入自己的github账号和密码，并允许Travis CI的认证。</p></li>
<li><p>激活GitHub Service Hook。</p>

<p> GitHub给用户提供了一个Service Hook接口,只要用户对host在github上的repository作用了一些action(比如push，pull)，就会触发相应的Service Hook。而<a href="(https://travis-ci.org/)">Travis CI</a>正是基于这个原理来trigger你的build。当你发起一个push操作时，就会trigger <a href="(https://travis-ci.org/)">Travis CI</a>的服务。</p>

<p> 设置方法是访问<a href="(https://travis-ci.org/)">Travis CI</a>的<a href="https://travis-ci.org/profile">profile</a>，选择相应的repository打开Service Hook开关。</p>

<p> <img src="http://www.huangbowen.net/images/TravisProfile.png"></p>

<p> 然后登陆你的github，访问具体的repository的Service Hook页面，确保设置了Travis CI Hook的github name和travis token。</p>

<p> <img src="http://www.huangbowen.net/images/ServiceHook.png"></p></li>
<li><p>给repository配置.travis.yml文件。该文件需要放置在repository的根目录下。</p>

<p> .travis.yml文件是一个相当重要的文件，里面需要配置你所使用的语言、运行环境、构建工具、构建脚本、通知方式等。最重要的是设置语言，其它的都有相应的默认值。</p>

<p> 这是为我的<a href="(https://github.com/huangbowen521/SpringMessageSpike)">SpringMessageSpike</a>设置的.travis.yml文件。由于我的项目中使用了maven作为构建工具，而<a href="(https://travis-ci.org/)">Travis CI</a>对java语言设置的默认构建工具就是maven，所以无需在文件中显式指定。</p></li>
</ol>


<figure class='code'><figcaption><span>.travis.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">language</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">java</span>
</span><span class='line'><span class="l-Scalar-Plain">jdk</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">oraclejdk7</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">openjdk7</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">openjdk6</span>
</span></code></pre></td></tr></table></div></figure>


<p>你可以使用一个travis-lint来检查你的yml文件是否是有效的。他是ruby写的一个gem，需要ruby的运行环境。安装方式是在terminal下<code>gem install travis-lint</code>。你只需要在你的repository根目录下运行<code>travis-lint</code>即可进行检查。</p>

<p>想要更进一步的关于.travis.yml的配置请参见：<a href="http://about.travis-ci.org/docs/user/build-configuration/">http://about.travis-ci.org/docs/user/build-configuration/</a></p>

<p>只要这三步就完成了配置。现在发起一个push就可以trigger你在<a href="(https://travis-ci.org/)">Travis CI</a>的build。
这时候登陆<a href="(https://travis-ci.org/)">Travis CI</a>可以看到你的Build的状态和日志。</p>

<p><img src="http://www.huangbowen.net/images/BuildInfo.png"></p>

<p>你可以在respository的README.md文件中加入build状态图标。方法是在在该文件中加入
<code>[![Build Status](https://travis-ci.org/[YOUR_GITHUB_USERNAME]/[YOUR_PROJECT_NAME].png)](https://travis-ci.org/[YOUR_GITHUB_USERNAME]/[YOUR_PROJECT_NAME])</code>即可。</p>

<p><img src="http://www.huangbowen.net/images/BuildImage.png"></p>

<p>总体来说<a href="(https://travis-ci.org/)">Travis CI</a>是一个轻量级、可高度定制化的免费的持续集成服务。但我觉得还是有几个缺点:</p>

<ol>
<li><p>运行build需要大量的准备，耗时较长。</p></li>
<li><p>作为免费的服务，不支持build时间超过20分钟的项目。</p></li>
<li><p>主站访问速度略慢。</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用自定义的MessageSource实现对properties的复用]]></title>
    <link href="http://www.huangbowen.net/blog/2013/05/29/using-spring-message-source/"/>
    <updated>2013-05-29T14:48:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/05/29/using-spring-message-source</id>
    <content type="html"><![CDATA[<p>Spring框架的Web项目中可以使用properties文件来存储需要显示在jsp页面的一些值，比如label值或者error messages。然后通过Spring提供的ResourceBundleMessageSource将这些properties文件注入进来使用。一个简单的配置如下。</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;messageSource&quot;</span>
</span><span class='line'>          <span class="na">class=</span><span class="s">&quot;org.springframework.context.support.ResourceBundleMessageSource&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;basenames&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;list&gt;</span>
</span><span class='line'>                <span class="nt">&lt;value&gt;</span>labels<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>                <span class="nt">&lt;value&gt;</span>errors<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/list&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>而在我们的项目中有这样一个需求。假设现在项目中有三个properties文件。</p>

<p><img src="http://www.huangbowen.net/images/properties.png"></p>

<p>其中aami和apia是我们项目需要支持的两个品牌。当一个用户登陆我们的web项目时，会自动将其当前所使用的品牌信息存到session中。而如果是aami用户的话，前端jsp页面显示的message读取的顺序是这样的：如果在aami.properties文件中没找到的话，就在default.properties文件中找。对于apia用户，则先在apia.properties中找，然后查找default.properties。</p>

<p>举个例子，如果default.properties中有一个键值对<code>helloWorld.label = Welcome</code>。那么在jsp上使用时会显示Welcome。但是对于ammi来说需要用同样的键<code>hello.world.label</code>但是显示<code>Welcome to AAMI</code>。</p>

<p>这样可以最大程度的复用default.properties中的数据，同时又可以根据自身品牌定义一些自身的数据在自身品牌的properties文件中。</p>

<p>ResourceBundleMessageSource中有一个<code>parentMessageSource</code>属性，如果在当前MessageSource中找不到code的值，会在<code>parentMessageSource</code>中查找。一个简单的配置如下。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;messageSource&quot;</span>
</span><span class='line'>          <span class="na">class=</span><span class="s">&quot;org.springframework.context.support.ResourceBundleMessageSource&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;parentMessageSource&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">&quot;org.springframework.context.support.ResourceBundleMessageSource&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;basename&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;value&gt;</span>default<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;basenames&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;list&gt;</span>
</span><span class='line'>                <span class="nt">&lt;value&gt;</span>aami<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/list&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果给给定一个code，程序会先在aami.properties文件中查找，如果未找到，则会在default中查找。
这似乎能满足我们的要求。其实不行。假如我们现在将apia品牌也加入，如果想让程序根据当前用户的品牌来选择适合的properties做成首选,当前这个功能是不满足的。我们需要自定义一个继承自<code>ResourceBundleMessageSource</code>的类来实现。</p>

<figure class='code'><figcaption><span>SessionMessageSource.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SessionMessageSource</span> <span class="kd">extends</span> <span class="n">ResourceBundleMessageSource</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">static</span> <span class="kd">final</span> <span class="n">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">SessionMessageSource</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span><span class="o">[]</span> <span class="n">basenames</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="n">String</span> <span class="nf">resolveCodeWithoutArguments</span><span class="o">(</span><span class="n">String</span> <span class="n">code</span><span class="o">,</span> <span class="n">Locale</span> <span class="n">locale</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">ServletRequestAttributes</span> <span class="n">attr</span> <span class="o">=</span> <span class="o">(</span><span class="n">ServletRequestAttributes</span><span class="o">)</span> <span class="n">RequestContextHolder</span><span class="o">.</span><span class="na">currentRequestAttributes</span><span class="o">();</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">String</span> <span class="n">brand</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">attr</span><span class="o">.</span><span class="na">getAttribute</span><span class="o">(</span><span class="s">&quot;brand&quot;</span><span class="o">,</span> <span class="n">RequestAttributes</span><span class="o">.</span><span class="na">SCOPE_SESSION</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">logger</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="n">brand</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">basenameList</span> <span class="o">=</span> <span class="n">Lists</span><span class="o">.</span><span class="na">newArrayList</span><span class="o">(</span><span class="n">basenames</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span><span class="o">(</span><span class="n">String</span> <span class="n">basename</span> <span class="o">:</span> <span class="n">basenameList</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">StringUtils</span><span class="o">.</span><span class="na">endsWithIgnoreCase</span><span class="o">(</span><span class="n">basename</span><span class="o">,</span><span class="n">brand</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">ResourceBundle</span> <span class="n">bundle</span> <span class="o">=</span> <span class="n">getResourceBundle</span><span class="o">(</span><span class="n">basename</span><span class="o">,</span> <span class="n">locale</span><span class="o">);</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">bundle</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">return</span> <span class="nf">getStringOrNull</span><span class="o">(</span><span class="n">bundle</span><span class="o">,</span> <span class="n">code</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setBasenames</span><span class="o">(</span><span class="n">String</span><span class="o">...</span> <span class="n">basenames</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">basenames</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">this</span><span class="o">.</span><span class="na">basenames</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">[</span><span class="n">basenames</span><span class="o">.</span><span class="na">length</span><span class="o">];</span>
</span><span class='line'>            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">basenames</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">String</span> <span class="n">basename</span> <span class="o">=</span> <span class="n">basenames</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
</span><span class='line'>                <span class="n">Assert</span><span class="o">.</span><span class="na">hasText</span><span class="o">(</span><span class="n">basename</span><span class="o">,</span> <span class="s">&quot;Basename must not be empty&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="k">this</span><span class="o">.</span><span class="na">basenames</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">basename</span><span class="o">.</span><span class="na">trim</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">this</span><span class="o">.</span><span class="na">basenames</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">setBasenames</span><span class="o">(</span><span class="n">basenames</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="nf">getStringOrNull</span><span class="o">(</span><span class="n">ResourceBundle</span> <span class="n">bundle</span><span class="o">,</span> <span class="n">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">bundle</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">catch</span> <span class="o">(</span><span class="n">MissingResourceException</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Assume key not found</span>
</span><span class='line'>            <span class="c1">// -&gt; do NOT throw the exception to allow for checking parent message source.</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们首先重写了<code>setBeanNames</code>方法。该方法用于在配置文件中注入properties文件。之所以在这里拿到basenames是为了在<code>resolveCodeWithoutArguments</code>方法中使用。如果父类暴露了<code>basenames</code>属性我们就无需在自己的类中再记录这个属性。</p>

<p>此类重写了父类中的<code>resolveCodeWithoutArguments</code>方法。父类中该方法的职责是在查找自身的ResourceBundle中是否能找到对应code的值，如果找不到就返回null。由于<code>resolveCodeWithoutArguments</code>方法是被<code>getMessageInternal</code>方法调用的。而<code>getMessageInternal</code>方法的大概职责是查看自身的ResourceBundle能否找到code值，否则查找parentMessageSource。所以我们只需对<code>resolveCodeWithoutArguments</code>动手术即可。</p>

<p>在这个方法中，我们首先获取存储在session中的brand值，根据brand值找到对应的propeties文件，使用ResourceBundle来读取code值，如果未找到则返回null，以委托给getMessageInternal来找寻父MessageSource。这样可以有效地将不同的brand隔离开来。</p>

<p>那么在xml中的配置如下。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;messageSource&quot;</span>
</span><span class='line'>          <span class="na">class=</span><span class="s">&quot;com.thoughtworks.config.SessionMessageSource&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;parentMessageSource&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">&quot;org.springframework.context.support.ResourceBundleMessageSource&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;basename&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;value&gt;</span>default<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;basenames&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;list&gt;</span>
</span><span class='line'>                <span class="nt">&lt;value&gt;</span>aami<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>                <span class="nt">&lt;value&gt;</span>apia<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/list&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>此外还需要在适当的时候设置session。</p>

<figure class='code'><figcaption><span>StartFlowController.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Controller</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">StartFlowController</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span><span class="o">=</span> <span class="s">&quot;/aami&quot;</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="n">RequestMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">onAAMIPage</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">request</span><span class="o">.</span><span class="na">getSession</span><span class="o">().</span><span class="na">setAttribute</span><span class="o">(</span><span class="s">&quot;brand&quot;</span><span class="o">,</span> <span class="s">&quot;aami&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;redirect:aami/index&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span><span class="o">=</span> <span class="s">&quot;/apia&quot;</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="n">RequestMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">onAPIAPage</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">request</span><span class="o">.</span><span class="na">getSession</span><span class="o">().</span><span class="na">setAttribute</span><span class="o">(</span><span class="s">&quot;brand&quot;</span><span class="o">,</span> <span class="s">&quot;apia&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;redirect:apia/index&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这些代码可以在我的github中找到。地址是<a href="https://github.com/huangbowen521/SpringMessageSpike">https://github.com/huangbowen521/SpringMessageSpike</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[持续改进-《高效程序员的45个习惯》读后感]]></title>
    <link href="http://www.huangbowen.net/blog/2013/05/24/the-practices-of-an-agile-developer/"/>
    <updated>2013-05-24T11:23:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/05/24/the-practices-of-an-agile-developer</id>
    <content type="html"><![CDATA[<p>原书标题为<a href="http://www.amazon.cn/mn/detailApp/ref=asc_df_B0033WSFAO622894/?asin=B0033WSFAO&amp;tag=douban-23&amp;creative=2384&amp;creativeASIN=B0033WSFAO&amp;linkCode=asn">《Practices of An Agile Developer》</a>。中文名为<a href="http://book.douban.com/subject/4164024/">《高效程序员的45个习惯-敏捷开发修炼之道》</a>。敏捷这个词已经烂大街了，关于敏捷的书籍俯拾皆是。很多人是敏捷的狂热粉丝，而另一些人却讨厌敏捷，认为只是个噱头。我觉得很可能的原因之一是敏捷这个名字没起好。它的原名为“轻量型软件开发过程”（&#8221;lightweight process&#8221;），但后来阴差阳错成了agile(敏捷)。</p>

<!-- more -->


<p>既然书名是敏捷开发者的实践，那么就必须认识敏捷。只有深入的理解了这些实践的来源和目的，才能更好的践行甚至改进实践。</p>

<p><strong>敏捷可以用一句话来概括：敏捷开发就是在一个高度协作的环境中，不断的使用反馈进行自我调整和完善，最终交付用户想要的软件。</strong></p>

<p>从这句话中可以得出很多东西。</p>

<h2>首先，项目适不适合敏捷有两个先决条件：</h2>

<ol>
<li><p><strong>项目是以价值为导向的。</strong>也就是整个团队有一个总体一致的目标，那就是产出高质量、高价值、符合用户需求的软件。以价值为导向，看似简单，实则很难，甚至某些时候要要求公司的组织架构做出一定的调整。试想在一个等级森严、官僚化严重、各种无谓的考评泛滥的公司，有多少人能静下心来好好的搞开发，搞产品？只有打造一个相对扁平的组织，给予充分的信任和自由度，才有利于敏捷的实施。这反过来又要求团队中的每个人有高度的自律性。</p></li>
<li><p><strong>团队能够达到高度协作。</strong>必须能够保证团队中的成员能够流畅的交流。如果在团队中大搞一言堂，信息不透明，很容易打击团队人员工作的积极性，致使团队分崩离析。另外，客户也属于团队中的一员。我们做出的产品最终是给客户看的，如果客户不能保证与团队紧密的合作，那么很容易使产品偏离客户的期望，最终交付失败。</p></li>
</ol>


<h2>再次，可以看到敏捷的基础：反馈。</h2>

<p>一旦你意识到走错了路方向，就要立即做出决策。举个例子，办公室另个团队给我们分享了这样一个故事。在项目刚开始时他们设计了叫做CoreService的类来封装所有的服务。随着项目的进行，CoreService类由于需要处理的服务越来越多，导致类越来越庞大。每个人在修改这个类时，写单元测试要建立对N个服务的mock，苦不堪言。问题在于，没人及时的提出这个bad smell，导致了人们花费了大量的时间来维护它。</p>

<p>这说明了及时反馈的重要性。<strong>反馈包含提出反馈和接受反馈。</strong></p>

<p><strong>提出反馈需要勇气和时机。</strong>要勇敢的提出自己的想法，这既需要自身具有对项目负责的精神，还要团队提供安全的环境。要及时的指出项目中不好的地方，千里之堤，毁于蚁穴。大灾难是逐步演化而来的，项目中切忌温水煮青蛙。</p>

<p><strong>接受反馈需要气度和行动。</strong>这就要求团队成员做事要有专业的态度，对事不对人，重结果轻过程。同时要拿出具体的行动，否则很容易打击积极性。</p>

<h2>其次，可以看到敏捷的精髓：拥抱变化。</h2>

<p>软件开发行业是一个不停发展和永远变化的领域。现在没有将来也不会有一个人能够了解你的项目的方方面面。</p>

<p>变化无处不在，这就要求我们不断的学习。而迭代和增量式的学习则不失为一个好办法。一个学习型的团队才是较好的团队。当然，在学习的同时，你也要懂得丢弃。打破旧习惯很难，更难的是自己还没意识到这个问题。丢弃的第一步，首先是意识到你还在使用过时的方法，这也是最难的部分。</p>

<p>同时，变化意味着我们要主动应对。德国陆军元帅Helmuth von Moltke说过一句话“没有任何计划在遇敌后还能继续执行。”在软件开发中，我们可以这样理解，任何设计在开发中只是一个起点，它如何你的代码一样，会不停地进一步发展和提炼。</p>

<h2>最后，敏捷的目的：交付用户想要的软件。</h2>

<p>试想客户将需求交付给你，要你几年后交付系统。然后，你基于这些需求构建了系统并按时交付。客户看了软件以后连声称赞。从此你多了一个忠实客户，接着开心的投入到下个项目中。请问这样的事情在你的项目中发生过吗？</p>

<p>通常情况是客户看到后暴跳如雷，这根本不是我想要的。这是因为用户的需要、技术和我们对需求的理解，都会随着时间的推移而变化。</p>

<p>那么，如何解决这个问题那？方法之一就是采用敏捷的迭代式开发。每个迭代至少有两个活动不可或缺。一个是展示会议（show case），向客户展示目前的项目进展，已完成的功能，从而收集客户的反馈，即时对产品的方向做出调整。另一个是回顾会议（retro)。回顾会议则是提出反馈的一个好时机。通过回顾会议分析出这个迭代中的做的好的地方和不好的地方，并提出具体的改进行动。</p>

<p>要将团队带入新的领域，必须首先要以身作则。我们需要的是领导者，而不是管理者。无论你目前的项目是否是敏捷项目，这本书中你都可以找到能够借鉴和提高的地方。敏捷中的持续改进不仅局限于项目开发，其实更适合于个人。通过持续改进自己的习惯、处事方法，保持一颗好奇心，勇敢的尝试未知领域，只要自己能力提高了，何惧其他？</p>

<p>改变从自身做起，不能自暴自弃，而要奋起直追。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[npm的配置管理及设置代理]]></title>
    <link href="http://www.huangbowen.net/blog/2013/05/17/setting-npm-configuration/"/>
    <updated>2013-05-17T00:17:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/05/17/setting-npm-configuration</id>
    <content type="html"><![CDATA[<p>npm全称为Node Packaged Modules。它是一个用于管理基于node.js编写的package的命令行工具。其本身就是基于node.js写的,这有点像gem与ruby的关系。</p>

<!-- more -->


<p>在我们的项目中，需要使用一些基于node.js的javascript库文件，就需要npm对这些依赖库进行方便的管理。由于我们的开发环境由于安全因素在访问一些网站时需要使用代理，其中就包括npm的repositories网站，所以就需要修改npm的配置来加入代理。</p>

<p>下面简要介绍下npm的配置以及如何设置代理。</p>

<h2>npm获取配置有6种方式，优先级由高到底。</h2>

<ol>
<li><p>命令行参数。 <code>--proxy http://server:port</code>即将proxy的值设为<code>http://server:port</code>。</p></li>
<li><p>环境变量。 以<code>npm_config_</code>为前缀的环境变量将会被认为是npm的配置属性。如设置proxy可以加入这样的环境变量<code>npm_config_proxy=http://server:port</code>。</p></li>
<li><p>用户配置文件。可以通过<code>npm config get userconfig</code>查看文件路径。如果是mac系统的话默认路径就是<code>$HOME/.npmrc</code>。</p></li>
<li><p>全局配置文件。可以通过<code>npm config get globalconfig</code>查看文件路径。mac系统的默认路径是<code>/usr/local/etc/npmrc</code>。</p></li>
<li><p>内置配置文件。安装npm的目录下的npmrc文件。</p></li>
<li><p>默认配置。 npm本身有默认配置参数，如果以上5条都没设置，则npm会使用默认配置参数。</p></li>
</ol>


<h2>针对npm配置的命令行操作</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>   npm config <span class="nb">set</span> &lt;key&gt; &lt;value&gt; <span class="o">[</span>--global<span class="o">]</span>
</span><span class='line'>   npm config get &lt;key&gt;
</span><span class='line'>   npm config delete &lt;key&gt;
</span><span class='line'>   npm config list
</span><span class='line'>   npm config edit
</span><span class='line'>   npm get &lt;key&gt;
</span><span class='line'>   npm <span class="nb">set</span> &lt;key&gt; &lt;value&gt; <span class="o">[</span>--global<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>在设置配置属性时属性值默认是被存储于用户配置文件中，如果加上<code>--global</code>，则被存储在全局配置文件中。</p>

<p>如果要查看npm的所有配置属性（包括默认配置），可以使用<code>npm config ls -l</code>。</p>

<p>如果要查看npm的各种配置的含义，可以使用<code>npm help config</code>。</p>

<h2>为npm设置代理</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>npm config <span class="nb">set </span>proxy http://server:port
</span><span class='line'><span class="nv">$ </span>npm config <span class="nb">set </span>https-proxy http://server:port
</span></code></pre></td></tr></table></div></figure>


<p>如果代理需要认证的话可以这样来设置。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>npm config <span class="nb">set </span>proxy http://username:password@server:port
</span><span class='line'><span class="nv">$ </span>npm config <span class="nb">set </span>https-proxy http://username:pawword@server:port
</span></code></pre></td></tr></table></div></figure>


<p>如果代理不支持https的话需要修改npm存放package的网站地址。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>npm config <span class="nb">set </span>registry <span class="s2">&quot;http://registry.npmjs.org/&quot;</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[将AngularJS的单元测试和端到端测试集成到gradle构建脚本中]]></title>
    <link href="http://www.huangbowen.net/blog/2013/05/07/integrate-javascript-tests-to-gradle/"/>
    <updated>2013-05-07T15:55:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/05/07/integrate-javascript-tests-to-gradle</id>
    <content type="html"><![CDATA[<p>我目前工作的一个项目后端使用java和spring建立了一个restful service,前端使用<a href="http://angularjs.org/">AngularJS</a>来渲染页面，提供用户接口。在前端的<a href="http://angularjs.org/">AngularJS</a>项目中，我们使用<a href="http://pivotal.github.io/jasmine/">Jasmine</a>来写单元测试，使用<a href="http://angularjs.org/">AngularJS</a>自带的Angular_scenario来写端到端测试。运行这些测试则使用的是<a href="http://karma-runner.github.io/">Karma</a>。</p>

<p>虽然使用<a href="http://karma-runner.github.io/">Karma</a>在命令行下可以很方便的运行所有的测试，但是我们想将这些集成到<a href="http://www.gradle.org/">gradle</a>的构建脚本中，从而将<a href="http://angularjs.org/">AngularJS</a>的所有测试加入到CI的构建中。同时为了保证运行测试的效率，我们决定使用<a href="http://phantomjs.org/">PhantomJS</a>作为运行测试的浏览器环境。</p>

<!-- more -->


<h2>环境搭建</h2>

<ul>
<li><p><strong>安装<a href="http://nodejs.org/">nodeJS</a>。</strong> 直接去官网&lt;http://nodejs.org/ >下载最新的安装包进行安装。</p></li>
<li><p><strong>安装<a href="http://karma-runner.github.io/">Karma</a>。</strong> 可以使用nodeJS提供的npm(node package manager)来安装。</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>npm install -g karma
</span></code></pre></td></tr></table></div></figure>


<p>如果想安装最新的开发者版本，则运行：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>npm install -g karma@canary
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>安装<a href="http://phantomjs.org/">PhantomJS</a>。</strong></li>
</ul>


<p>方式一：使用npm来安装:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>npm install -g phantomjs
</span></code></pre></td></tr></table></div></figure>


<p>方式二：从官网上下载最新的安装包自行安装。地址是<a href="http://phantomjs.org/">http://phantomjs.org/</a> 。</p>

<p>不过为了方便其它人的使用，我将<a href="http://phantomjs.org/">PhantomJS</a>的文件直接放置到了项目的codebase中，并加入了svn管理。这样当setup一个新的工作电脑时就不需要安装它了，直接checkout项目代码就行。最大的原因是当<a href="http://karma-runner.github.io/">Karma</a>运行测试时会根据环境变量寻找<a href="http://phantomjs.org/">PhantomJS</a>的执行文件，将<a href="http://phantomjs.org/">PhantomJS</a>的执行文件放置在统一的地方方便管理，减少环境变量依赖。</p>

<h2>配置<a href="http://karma-runner.github.io/">Karma</a>运行测试的配置文件</h2>

<p>方式一：在项目根目录下运行<code>Karma init</code>,根据提示一步步创建配置文件。</p>

<p>方式二：如果对<a href="http://karma-runner.github.io/">Karma</a>的配置文件较为熟悉的话，可以自行创建一个。</p>

<p>以下是我为unit test创建的配置文件。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
</pre></td><td class='code'><pre><code class='JavaScript'><span class='line'><span class="c1">// Sample Karma configuration file, that contain pretty much all the available options</span>
</span><span class='line'><span class="c1">// It&#39;s used for running client tests on Travis (http://travis-ci.org/#!/karma-runner/karma)</span>
</span><span class='line'><span class="c1">// Most of the options can be overriden by cli arguments (see karma --help)</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">// For all available config options and default values, see:</span>
</span><span class='line'><span class="c1">// https://github.com/karma-runner/karma/blob/stable/lib/config.js#L54</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// base path, that will be used to resolve files and exclude</span>
</span><span class='line'><span class="nx">basePath</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">frameworks</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;jasmine&#39;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// list of files / patterns to load in the browser</span>
</span><span class='line'><span class="nx">files</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="s1">&#39;spec/*.spec.js&#39;</span>
</span><span class='line'><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// list of files to exclude</span>
</span><span class='line'><span class="nx">exclude</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// web server port</span>
</span><span class='line'><span class="c1">// CLI --port 9876</span>
</span><span class='line'><span class="nx">port</span> <span class="o">=</span> <span class="mi">9876</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// cli runner port</span>
</span><span class='line'><span class="c1">// CLI --runner-port 9100</span>
</span><span class='line'><span class="nx">runnerPort</span> <span class="o">=</span> <span class="mi">9100</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// enable / disable colors in the output (reporters and logs)</span>
</span><span class='line'><span class="c1">// CLI --colors --no-colors</span>
</span><span class='line'><span class="nx">colors</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// level of logging</span>
</span><span class='line'><span class="c1">// possible values: LOG_DISABLE || LOG_ERROR || LOG_WARN || LOG_INFO || LOG_DEBUG</span>
</span><span class='line'><span class="c1">// CLI --log-level debug</span>
</span><span class='line'><span class="nx">logLevel</span> <span class="o">=</span> <span class="nx">LOG_INFO</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// enable / disable watching file and executing tests whenever any file changes</span>
</span><span class='line'><span class="c1">// CLI --auto-watch --no-auto-watch</span>
</span><span class='line'><span class="nx">autoWatch</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Start these browsers, currently available:</span>
</span><span class='line'><span class="c1">// - Chrome</span>
</span><span class='line'><span class="c1">// - ChromeCanary</span>
</span><span class='line'><span class="c1">// - Firefox</span>
</span><span class='line'><span class="c1">// - Opera</span>
</span><span class='line'><span class="c1">// - Safari (only Mac)</span>
</span><span class='line'><span class="c1">// - PhantomJS</span>
</span><span class='line'><span class="c1">// - IE (only Windows)</span>
</span><span class='line'><span class="c1">// CLI --browsers Chrome,Firefox,Safari</span>
</span><span class='line'><span class="nx">browsers</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;PhantomJS&#39;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// If browser does not capture in given timeout [ms], kill it</span>
</span><span class='line'><span class="c1">// CLI --capture-timeout 5000</span>
</span><span class='line'><span class="nx">captureTimeout</span> <span class="o">=</span> <span class="mi">10000</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Auto run tests on start (when browsers are captured) and exit</span>
</span><span class='line'><span class="c1">// CLI --single-run --no-single-run</span>
</span><span class='line'><span class="nx">singleRun</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// report which specs are slower than 500ms</span>
</span><span class='line'><span class="c1">// CLI --report-slower-than 500</span>
</span><span class='line'><span class="nx">reportSlowerThan</span> <span class="o">=</span> <span class="mi">500</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// compile coffee scripts</span>
</span><span class='line'><span class="nx">preprocessors</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="s1">&#39;**/*.coffee&#39;</span><span class="o">:</span> <span class="s1">&#39;coffee&#39;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">plugins</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="s1">&#39;karma-jasmine&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;karma-chrome-launcher&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;karma-firefox-launcher&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;karma-phantomjs-launcher&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;karma-junit-reporter&#39;</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>由于需要在CI中运行测试，所以应当将autoWatch设置为false,将singleRun设置为true。这样<a href="http://karma-runner.github.io/">Karma</a>只会运行一遍测试。</p>

<p>由于我们将<a href="http://phantomjs.org/">PhantomJS</a>放置在工程目录下，为了让<a href="http://karma-runner.github.io/">Karma</a>能找到<a href="http://phantomjs.org/">PhantomJS</a>的执行文件，需要设置环境变量PHANTOMJS_BIN。在Karma.conf.js中加入如下代码:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javaScript'><span class='line'><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PHANTOMJS</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;path&#39;</span><span class="p">).</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="s1">&#39;tools/PhantomJS/phantomjs.exe&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果Karma运行测试时找不到浏览器的执行文件，会报一个错误。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>INFO <span class="o">[</span>karma<span class="o">]</span>: Karma v0.9.2 server started at http://localhost:9876/
</span><span class='line'>INFO <span class="o">[</span>launcher<span class="o">]</span>: Starting browser PhantomJS
</span><span class='line'>ERROR <span class="o">[</span>karma<span class="o">]</span>: <span class="o">{</span> <span class="o">[</span>Error: spawn ENOENT<span class="o">]</span> code: <span class="s1">&#39;ENOENT&#39;</span>, errno: <span class="s1">&#39;ENOENT&#39;</span>, syscall: <span class="s1">&#39;spawn&#39;</span> <span class="o">}</span>
</span><span class='line'>Error: spawn ENOENT
</span><span class='line'>    at errnoException <span class="o">(</span>child_process.js:977:11<span class="o">)</span>
</span><span class='line'>    at Process.ChildProcess._handle.onexit <span class="o">(</span>child_process.js:768:34<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>当时我花了好长时间来寻找原因，最后使用<code>karma start karma.conf.js --log-level=debug</code>来查看运行日志。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>INFO <span class="o">[</span>launcher<span class="o">]</span>: Starting browser PhantomJS
</span><span class='line'>DEBUG <span class="o">[</span>launcher<span class="o">]</span>: Creating temp dir at C:<span class="se">\U</span>sers<span class="se">\b</span>owen<span class="se">\A</span>ppData<span class="se">\L</span>ocal<span class="se">\2\k</span>arma-28747846
</span><span class='line'>DEBUG <span class="o">[</span>launcher<span class="o">]</span>: C:<span class="se">\P</span>rogram Files<span class="se">\P</span>hantomJS<span class="se">\p</span>hamtomjs.exe  C:<span class="se">\U</span>sers<span class="se">\b</span>owen<span class="se">\A</span>ppData<span class="se">\L</span>ocal<span class="se">\2\k</span>arma-28747846capture.js
</span><span class='line'>INFO <span class="o">[</span>karma<span class="o">]</span>: To run via this server, use <span class="s2">&quot;karma run --runner-port 9101&quot;</span>
</span><span class='line'>ERROR <span class="o">[</span>karma<span class="o">]</span>: <span class="o">{</span> <span class="o">[</span>Error: spawn ENOENT<span class="o">]</span> code: <span class="s1">&#39;ENOENT&#39;</span>, errno: <span class="s1">&#39;ENOENT&#39;</span>, syscall: <span class="s1">&#39;spawn&#39;</span> <span class="o">}</span>
</span><span class='line'>Error: spawn ENOENT
</span></code></pre></td></tr></table></div></figure>


<p>通过DEBUG的log我发现<code>C:\Program Files\PhantomJS\phamtomjs.exe</code>下并未有该文件，最后使用上述的方法来设置<a href="http://phantomjs.org/">PhantomJS</a>的环境变量。（奇怪的是我已经在PowerShell里设置了该环境变量，并且Karma命令行也是在PowerShell运行的，但是<a href="http://nodejs.org/">nodeJS</a>并未获取正确的环境变量值）。</p>

<h2>在build.gradle中加入运行Karma的task</h2>

<p>由于我们的开发机以及CI服务器都是Windows环境，所以需要调用CMD来执行<a href="http://karma-runner.github.io/">Karma</a>命令。</p>

<p>配置如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">task</span> <span class="nf">jsUnit</span><span class="o">(</span><span class="nl">type:</span> <span class="n">Exec</span><span class="o">,</span> <span class="nl">description:</span> <span class="err">&#39;</span><span class="n">JS</span> <span class="n">unit</span> <span class="n">tests</span><span class="err">&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>     <span class="n">workingDir</span> <span class="err">&#39;</span><span class="o">./</span><span class="n">src</span><span class="o">/</span><span class="n">test</span><span class="o">/</span><span class="n">scripts</span><span class="err">&#39;</span>
</span><span class='line'>     <span class="n">commandLine</span> <span class="err">&#39;</span><span class="n">cmd</span><span class="err">&#39;</span><span class="o">,</span> <span class="err">&#39;</span><span class="o">/</span><span class="n">c</span><span class="err">&#39;</span><span class="o">,</span> <span class="err">&#39;</span><span class="n">karma</span> <span class="n">start</span> <span class="n">karma</span><span class="o">.</span><span class="na">conf</span><span class="o">.</span><span class="na">js</span><span class="err">&#39;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">task</span> <span class="nf">e2eTest</span><span class="o">(</span><span class="nl">type:</span> <span class="n">Exec</span><span class="o">,</span> <span class="nl">description:</span> <span class="err">&#39;</span> <span class="n">e2e</span> <span class="n">tests</span><span class="err">&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>     <span class="n">workingDir</span> <span class="err">&#39;</span><span class="o">./</span><span class="n">src</span><span class="o">/</span><span class="n">test</span><span class="o">/</span><span class="n">scripts</span><span class="err">&#39;</span>
</span><span class='line'>     <span class="n">commandLine</span> <span class="err">&#39;</span><span class="n">cmd</span><span class="err">&#39;</span><span class="o">,</span> <span class="err">&#39;</span><span class="o">/</span><span class="n">c</span><span class="err">&#39;</span><span class="o">,</span> <span class="err">&#39;</span><span class="n">karma</span> <span class="n">start</span> <span class="n">karma</span><span class="o">-</span><span class="n">e2e</span><span class="o">.</span><span class="na">conf</span><span class="o">.</span><span class="na">js</span><span class="err">&#39;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意运行端到端测试前要将restful服务器setup起来。</p>

<p>当时在Windows上配置<a href="http://karma-runner.github.io/">Karma</a>花了很多功夫，使用Firefox浏览器发现会同时打开3个tab页，并且将singRun改为true不能运行成功，使用Chrome浏览器则测试运行完毕后浏览器无法关闭，使用<a href="http://phantomjs.org/">PhantomJS</a>又由于环境变量的问题花了一些时间来找原因。但是在我自己的苹果笔记本上各个浏览器都工作良好，真想说Windows是个奇葩。</p>

<p>对于普通用户来说可能Windows系统更适合他们，但是对于程序员来说MAC系统真的非常棒，反应迅速，配置简单，能让你的开发效率提升一个档次。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用MANIFEST.MF文件来track war包做持续部署]]></title>
    <link href="http://www.huangbowen.net/blog/2013/04/18/use-manifest-dot-mf-to-track-war-file/"/>
    <updated>2013-04-18T12:40:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/04/18/use-manifest-dot-mf-to-track-war-file</id>
    <content type="html"><![CDATA[<p>在我工作的项目中有这样一个需求。当通过自动部署脚本将当前一个CI构建的WAR包部署到指定服务器后，需要验证该WAR包是否被部署成功。</p>

<p>在这个项目中，持续集成服务器使用的是<a href="http://jenkins-ci.org/">Jenkins</a>，构建脚本使用的是<a href="http://maven.apache.org/">maven</a>，向服务器的部署使用的是Groovy写的部署脚本，调用了<a href="http://www.incanica.com/tour/whytableaux">Tableuax</a> API。</p>

<p>在<a href="http://jenkins-ci.org/">Jenkins</a>上有两个job，一个CI job，一个dev job。
每次提交代码都会在<a href="http://jenkins-ci.org/">Jenkins</a>上trigger CI ob，这个job会执行配置的<a href="http://maven.apache.org/">maven</a>命令<code>mvn clean install</code>，如果构建成功，会自动trigger dev job。这个job会执行部署脚本，部署脚本负责调用<a href="http://www.incanica.com/tour/whytableaux">Tableuax</a> API将前一个job构建的war包部署到服务器上。</p>

<!-- more -->


<p>由于部署是调用<a href="http://www.incanica.com/tour/whytableaux">Tableuax</a> API来实现的，我们需要在部署完成以后验证此次部署是否成功。如何进行那？可以分为如下几个步骤。</p>

<p><strong>首先, 当<a href="http://jenkins-ci.org/">Jenkins</a>的第一个job构建war包时，将这次构建的一些信息写入到MANIFEST.MF文件中。</strong></p>

<p>MANIFEST.MF文件是Java平台下的Jar包或者war包中都普遍存在的一个文件。这个文件通常被放置在META-INF文件夹下，名称通常为MANIFEST.MF。它其实相当于一个properties文件，里面都是一些键值对，特殊之处是每个jar包或者war包至多只能有一个MANIFEST.MF文件。</p>

<p>那么如何在<a href="http://jenkins-ci.org/">Jenkins</a>运行build时将本次构建的相关信息写入到MANIFEST.MF文件那？那要借助于maven.war.plugin插件。</p>

<p>当一个<a href="http://jenkins-ci.org/">Jenkins</a> job被执行时，会自动设置一些环境变量，这些环境变量可以在shell script, batch command或者Maven POM中被访问。（查看所有的环境变量请看<a href="https://wiki.jenkins-ci.org/display/JENKINS/Building+a+software+project#Buildingasoftwareproject-JenkinsSetEnvironmentVariables">这里</a>）。
所以我们可以在项目的pom.xml加入以下的plugin来设置一些build信息到MANIFEST.MF文件中。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>    <span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>        <span class="nt">&lt;groupId&gt;</span>org.apache.maven.plugins<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>        <span class="nt">&lt;artifactId&gt;</span>maven-war-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>        <span class="nt">&lt;version&gt;</span>2.2<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>        <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>            <span class="nt">&lt;archive&gt;</span>
</span><span class='line'>                <span class="nt">&lt;manifest&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;addDefaultImplementationEntries&gt;</span>true<span class="nt">&lt;/addDefaultImplementationEntries&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/manifest&gt;</span>
</span><span class='line'>                <span class="nt">&lt;manifestEntries&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;Build-Number&gt;</span>${BUILD_NUMBER}<span class="nt">&lt;/Build-Number&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;Job-Name&gt;</span>${JOB_NAME}<span class="nt">&lt;/Job-Name&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;Build-Url&gt;</span>${BUILD_URL}<span class="nt">&lt;/Build-Url&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;Svn-Revision&gt;</span>${SVN_REVISION}<span class="nt">&lt;/Svn-Revision&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;Timestamp&gt;</span>${maven.build.timestamp}<span class="nt">&lt;/Timestamp&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/manifestEntries&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/archive&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/plugin&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://jenkins-ci.org/">Jenkins</a> job执行完毕后，在打包好的WAR包中就含有一个MANIFEST.MF文件了。以下是一个示例。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>Manifest-Version: 1.0
</span><span class='line'>Implementation-Title: myWebApp
</span><span class='line'>Implementation-Version: 1.1-SNAPSHOT
</span><span class='line'>Job-Name: myWebApp-CI
</span><span class='line'>Built-By: bowen
</span><span class='line'>Created-By: Apache Maven
</span><span class='line'>Timestamp: 20130417-1654
</span><span class='line'>Build-Number: 118
</span><span class='line'>Svn-Revision: 5606
</span><span class='line'>Implementation-Vendor-Id: myWebApp
</span><span class='line'>Build-Url: http://10.70.21.74:80/job/myWebApp/118/
</span><span class='line'>Build-Jdk: 1.6.0_18
</span><span class='line'>Implementation-Build: 2013-04-17 16:54:54
</span><span class='line'>Archiver-Version: Plexus Archiver
</span></code></pre></td></tr></table></div></figure>


<p><strong>然后，创建一个页面来显示这些build信息，以便能随时查看当前部署在服务器上的war包的build number是多少，是由谁构建的，构建时间等信息。第二个job的部署脚本也可以通过这个页面得到build number，以此来判别部署的是否是想要的版本。</strong></p>

<p>这就牵扯到对MANIFEST.MF文件的读取了。有一个现成的库用于读取jar包或者war包中的MANIFEST.MF文件信息。</p>

<p>在项目的pom.xml文件中加入对这个库的依赖。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>  <span class="nt">&lt;groupId&gt;</span>com.jcabi<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;artifactId&gt;</span>jcabi-manifests<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;version&gt;</span>0.7.17<span class="nt">&lt;/version&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>对于war包而言，需要通过SevletContext来获取当前的MANIFEST.MF文件。首先需要创建一个继承自<code>ServletContextListener</code>接口的类来将ServletContext设置给Manifests对象。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">thoughtworks</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ContextListener</span> <span class="kd">implements</span> <span class="n">ServletContextListener</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">contextInitialized</span><span class="o">(</span><span class="n">ServletContextEvent</span> <span class="n">event</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Manifests</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getServletContext</span><span class="o">());</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后需要在web.xml配置文件中将这个Listener加入到Listener列表中。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;listener&gt;</span>
</span><span class='line'><span class="nt">&lt;listener-class&gt;</span>com.thoughtworks.ContextListener<span class="nt">&lt;/listener-class&gt;</span>
</span><span class='line'><span class="nt">&lt;/listener&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样就可以在Controller里直接使用Manifests对象来获取MANIFEST.MF文件记录的各种值了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">String</span> <span class="n">buildNumber</span> <span class="o">=</span> <span class="n">Manifests</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="s">&quot;Build-Number&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">String</span> <span class="n">buildJdk</span> <span class="o">=</span> <span class="n">Manifests</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="s">&quot;Build-Jdk&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">String</span> <span class="n">BuiltBy</span> <span class="o">=</span> <span class="n">Manifests</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="s">&quot;Built-By&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">String</span> <span class="n">timestamp</span> <span class="o">=</span> <span class="n">Manifests</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="s">&quot;Timestamp&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>再建立一个jsp页面用于显示这些值即可。</p>

<p><strong>最后，部署脚本获取该页面的内容，判断页面内容中的build number是否为期望部署的build number。</strong></p>

<p>这只是判断部署的war包是不是期望的war包。如果想要验证其是完全可以工作的，就需要部署脚本调用smoke test来进行功能性测试了。这个留到下次再讲。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一款Octopress插件用于同步博客到其他站点]]></title>
    <link href="http://www.huangbowen.net/blog/2013/04/14/octopress-plugin-to-sync-post/"/>
    <updated>2013-04-14T22:05:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/04/14/octopress-plugin-to-sync-post</id>
    <content type="html"><![CDATA[<p>即使用octopress写博客又需要同步到其他站点的同学们有福了。本人写了一个octopress下的插件，用于将octopress中的最新的一篇博客同步到支持MetaWeblog API的博客站点中去。（wordpress、博客园、CSDN、51CTO、新浪、网易&#8230;&#8230;）</p>

<p>这款插件源码被host在github上，地址是<a href="https://github.com/huangbowen521/octopress-syncPost">https://github.com/huangbowen521/octopress-syncPost</a>。</p>

<!-- more -->


<p>下面介绍下如何配置和使用。</p>

<h2>配置</h2>

<ul>
<li><p>迁出源码，将源码里的_custom文件夹及其里面的文件拷贝到你的octopress根目录中。</p></li>
<li><p>在Gemfile中加入这两个依赖.</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;metaweblog&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 0.1.0&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;nokogiri&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 1.5.9&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>(The first gem is used to send post with MetaWeblog API.
The second gem is used to parse html.)</p>

<p>然后在终端下运行<code>bundle install</code> 安装这两个Gem.</p>

<ul>
<li>在_config.yml文件中加入MetaWeblog的配置。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="c1"># MetaWeblog</span>
</span><span class='line'><span class="l-Scalar-Plain">MetaWeblog_username</span><span class="p-Indicator">:</span> <span class="nv">*YOURUSERNAME</span><span class="err">*</span>
</span><span class='line'><span class="l-Scalar-Plain">MetaWeblog_password</span><span class="p-Indicator">:</span> <span class="nv">*YOURPASSWORD</span><span class="err">*</span>
</span><span class='line'><span class="l-Scalar-Plain">MetaWeblog_url</span><span class="p-Indicator">:</span> <span class="nv">*YOURBLOGMETAWEBLOGURL</span><span class="err">*</span>
</span><span class='line'><span class="l-Scalar-Plain">MetaWeblog_blogid</span><span class="p-Indicator">:</span> <span class="nv">*BlogID</span><span class="err">*</span>  <span class="l-Scalar-Plain">//can be any number</span>
</span></code></pre></td></tr></table></div></figure>


<p>下面是配置<a href="http://www.cnblogs.com/">cnblogs</a>的一个示例。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="c1"># MetaWeblog</span>
</span><span class='line'><span class="l-Scalar-Plain">MetaWeblog_username</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">huang0925</span>
</span><span class='line'><span class="l-Scalar-Plain">MetaWeblog_password</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">XXXXXXXXXX</span>
</span><span class='line'><span class="l-Scalar-Plain">MetaWeblog_url</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">http://www.cnblogs.com/huang0925/services/metaweblog.aspx</span>
</span><span class='line'><span class="l-Scalar-Plain">MetaWeblog_blogid</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">145005</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>在Rakefile加入这个task。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">desc</span> <span class="s2">&quot;sync post to MetaWeblog site&quot;</span>
</span><span class='line'><span class="n">task</span> <span class="ss">:sync_post</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Sync the latest post to MetaWeblog site&quot;</span>
</span><span class='line'>  <span class="nb">system</span> <span class="s2">&quot;ruby _custom/sync_post.rb&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>如何使用</h2>

<ol>
<li><p>运行 <code>rake generate</code> 生成最新的站点文件。</p></li>
<li><p>运行 <code>rake sync_post</code> 将最新的一篇博客同步到你的站点。</p></li>
</ol>


<p><strong>请注意:</strong></p>

<ol>
<li><p>发布完后请检查image的链接是否正确（如果原博客使用的image链接是相对路径则需要进行修正）。</p></li>
<li><p>一些站点需要你启用MetaWeblog功能。（如<a href="http://www.cnblogs.com/">cnblogs</a>的管理页面有这个设置选项。）</p></li>
</ol>


<h2>如何保持相应的样式。</h2>

<p>使用<a href="http://www.cnblogs.com/">cnblogs</a>作为一个例子.</p>

<ol>
<li><p>将你的octopress中的screen.css通过博客园提供的文件管理上传到博客园中.</p></li>
<li><p>在博客设置中的&#8217;页首html代码&#8217;中加入对screen.css文件的使用.</p></li>
</ol>


<h2>一些支持MetaWeblog API的站点.</h2>

<ul>
<li><p>Wordpress</p>

<p>  If your WordPress root is http://example.com/wordpress/, then you have:
  Server: http://example.com/ (some tools need just the &#8216;example.com&#8217; hostname part)
  Path: /wordpress/xmlrpc.php
  complete URL (just in case): http://example.com/wordpress/xmlrpc.php</p></li>
<li><p>51CTO.com</p>

<p>  URL：http://<yourBlogUrl>/xmlrpc.php（example: http://magong.blog.51cto.com/xmlrpc.php）</p></li>
<li><p>博客大巴</p>

<p>  URL：http://www.blogbus.com/<accountName>/app.php（example: http://www.blogbus.com/holly0801/app.php</p></li>
<li><p>CSDN</p>

<p>  URL：http://hi.csdn.net/<accountName>/services/metablogapi.aspx（example: http://hi.csdn.net/bvbook/services/metablogapi.aspx）</p></li>
<li><p>博客园</p>

<p>  URL：http://www.cnblogs.com/<accountName>/services/metaweblog.aspx（example: http://www.cnblogs.com/bvbook/services/metaweblog.aspx）</p></li>
<li><p>网易</p>

<p>  URL: http://<accountName>.blog.163.com/ (example: http://huang0925.blog.163.com/).</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Karma(原名Testacular)与WebStorm进行集成]]></title>
    <link href="http://www.huangbowen.net/blog/2013/04/09/integrate-karma-to-webstorm/"/>
    <updated>2013-04-09T01:59:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/04/09/integrate-karma-to-webstorm</id>
    <content type="html"><![CDATA[<p><a href="http://karma-runner.github.io/0.8/index.html">Karma</a>是一款运行JavaScript测试的工具。它支持大部分的JavaScript测试框架，并支持多浏览器跑测试、自动监听文件运行测试等功能，实在是JavaScript开发的必备测试利器。有了它，基本不用再一遍遍手动刷新页面来trigger测试了。它的原名是testacular，也不知道作者咋想的，突然之间把项目名称改了。</p>

<p>而<a href="http://www.jetbrains.com/webstorm/">WebStorm</a>则号称是世界上最聪明的JavaScript的IDE。（事实证明，确实如此）。JavaScript code自动提示、浏览器实时同步更新、支持HTML5, <a href="http://nodejs.org/">node.js</a>, TypeScript, CoffeeScript, ECMAScript Harmony, LESS…秉承了JetBrains这个牛逼公司的一贯传统。</p>

<!-- more -->


<p>那么，如何将<a href="http://karma-runner.github.io/0.8/index.html">Karma</a>集成到<a href="http://www.jetbrains.com/webstorm/">WebStorm</a>中来那？ 很简单。</p>

<h2>配置Karma Runner.</h2>

<ol>
<li><p>菜单栏Run里面选<code>Edit Configurations…</code>项，在弹出的对话框中点击左上角的<code>+</code>按钮,选择<code>Node.js</code>。</p></li>
<li><p>然后进行如下配置。</p>

<p> <img src="http://www.huangbowen.net/images/run.png"></p>

<p> 主要配置参数：</p>

<ul>
<li>Name : 名称标示，自己随便起一个就成。</li>
<li>Path to Node: node.js的运行路径。在Terminal下运行<code>which node</code>可以看到。</li>
<li>Working Directory: 项目的目录。</li>
<li>Path to Node App JS File: Karma的安装目录，同样在Terminal下运行<code>which karma</code>可以得到。</li>
<li>Application Parameters： start karma.conf.js。第一个参数start是运行karma server。第二个参数是karma的配置文件。</li>
</ul>
</li>
<li><p>点击ok按钮。大功告成。</p></li>
</ol>


<p>在<a href="http://www.jetbrains.com/webstorm/">WebStorm</a>中运行我们定义的Karma Runner，就能实时的看到测试结果。它能自动监听文件修改。一有风吹草动就会重新运行测试，而且速度奇快。</p>

<p><img src="http://www.huangbowen.net/images/running.png"></p>

<h2>配置Karma Debugger.</h2>

<p>如果想使用<a href="http://karma-runner.github.io/0.8/index.html">Karma</a>在IDE里面进行Debug，该怎么办？也简单，配置一个Remote Debugger就行。</p>

<ol>
<li><p>菜单栏Run里面选<code>Edit Configurations…</code>项，在弹出的对话框中点击左上角的<code>+</code>按钮,选择<code>JavaScript Debug</code>-><code>Remote</code>。</p></li>
<li><p>在配置框中输入以下参数。</p>

<p> <img src="http://www.huangbowen.net/images/debug.png"></p>

<p> 主要参数设置：</p>

<ul>
<li><p>Name: 名称标示符。</p></li>
<li><p>URL to open:  http://localhost:9876/debug.html。默认是这个，要根据你Karma server配置的真实地址而定。</p></li>
<li><p>Browser: 要运行的浏览器。</p></li>
<li><p>Remote URL； http://localhost:9876/base。</p></li>
</ul>
</li>
<li><p>点击确定，又搞定了。</p></li>
</ol>


<h2>如何进行Debug？</h2>

<ol>
<li><p>在源代码中设置断点。</p></li>
<li><p>在WebStorm中启动Karma server，就是运行我们定义的Karma Runner。</p></li>
<li><p>在WebStorm中运行我们定义的Karma Debug。</p></li>
</ol>


<p>注意第一次运行时WebStorm会提醒你在浏览器上安装相应的插件。</p>

<p><img src="http://www.huangbowen.net/images/debugging.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用快捷键，快到极致]]></title>
    <link href="http://www.huangbowen.net/blog/2013/04/06/use-shortcuts-extremely/"/>
    <updated>2013-04-06T15:21:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/04/06/use-shortcuts-extremely</id>
    <content type="html"><![CDATA[<p>前段时间曾经写过一篇文章，<a href="http://www.cnblogs.com/huang0925/archive/2013/03/24/2978181.html">《优秀程序员无他-善假于物也》</a>。其中谈到一点是优秀的程序员必须要能灵活的掌握常用软件的快捷键。对于程序员来说，每天使用时间最长的软件恐怕就是IDE（Integrated Development Environment）了。如果你是C#的程序员，那么就基本非Visual Studio莫属了。而如果你是Java的程序员，那么eclipse，myeclipse或者Intellij都有人用之。如果你是Ruby等动态语言的程序员，那么Vim、Emacs、RubyMIne…有太多的选择可以成为你的IDE。</p>

<!-- more -->


<p>下面我就用Intellij来给大家演示下使用快捷键是多么的强大，能提高多大的效率。（以下所使用的快捷键在eclipse中基本都有对应的快捷键。）</p>

<p>大家先看一个简单的类。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BeanConfig</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">className</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">BeanConfig</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="n">String</span> <span class="n">className</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">className</span> <span class="o">=</span> <span class="n">className</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getClassName</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">className</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setClassName</span><span class="o">(</span><span class="n">String</span> <span class="n">className</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">className</span> <span class="o">=</span> <span class="n">className</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这是一个很普通的Value Object。创建这个类并写完这些代码需要多长时间那？不同人会给出不同的答案。使用快捷键与不使用快捷键有天壤之别。</p>

<p>不使用快捷键，你需要手写全部的代码。而使用快捷键，最多你只需要敲半行代码。这半行代码就是构造函数里的那两个参数<code>String name, String className</code>。</p>

<p>下面我就一步步的演示如何使用Intellij的快捷键来创建这个Value Object。</p>

<ul>
<li><p>使用<code>Ctrl+1</code>切换到project列表项，使用使用上下箭头键选择放置这个Value Object的package。</p></li>
<li><p>使用<code>Alt+Insert</code>键调出创建对话框，选择new class并回车。</p>

<p>  <img src="http://www.huangbowen.net/images/INew.png"></p>

<p>  在弹出的<code>Create New Class</code>对话框中键入类名，并回车。</p>

<p>  <img src="http://www.huangbowen.net/images/ICNC.png"></p>

<p>  最后生成如下的代码。</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BeanConfig</span> <span class="o">{</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>按esc键将光标移动到editor中，按下<code>alt+Insert</code>键调出<code>Generate</code>对话框，选择<code>Constructor</code>项并回车。这样会生成一个无参数的构造函数。</li>
</ul>


<p><img src="http://www.huangbowen.net/images/IGenerate.png"></p>

<p>这是生成的代码。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BeanConfig</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">BeanConfig</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>光标移动到构造函数名后的小括号内，敲入这样的代码<code>String name, String className</code>。</li>
</ul>


<p>此时代码如下。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BeanConfig</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">BeanConfig</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="n">String</span> <span class="n">className</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>光标保持在构造函数的参数列表中，使用<code>alt+Enter</code>快捷键，选择<code>Create Fields For Constructor Parameters</code>条目，然后回车。</li>
</ul>


<p><img src="http://www.huangbowen.net/images/ICF.png"></p>

<p>在弹出的对快框中使用<code>shift+下箭头</code>选中这两个field并回车。</p>

<p><img src="http://www.huangbowen.net/images/ICCP.png"></p>

<p>生成的代码如下。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BeanConfig</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">className</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">BeanConfig</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="n">String</span> <span class="n">className</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">className</span> <span class="o">=</span> <span class="n">className</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>删除<code>name</code>和<code>className</code>的<code>final</code>修饰符。最快捷的方法是光标移动到<code>final</code>处，按<code>Ctrl+W</code>键选中整个字符，然后按<code>Delete</code>键。</li>
</ul>


<p>此时代码如下。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BeanConfig</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">className</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">BeanConfig</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="n">String</span> <span class="n">className</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">className</span> <span class="o">=</span> <span class="n">className</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>光标移动到任意一个field处，使用<code>alt+Insert</code>弹出Generate对话框，选择<code>Getter and Setter</code>条目按回车。</li>
</ul>


<p><img src="http://www.huangbowen.net/images/IGGAS.png"></p>

<p>在弹出的<code>Select Fields to Generate Getters and Setters</code>对话框中，使用<code>shift+下箭头</code>选中两个field，按回车。</p>

<p><img src="http://www.huangbowen.net/images/ISFGG.png"></p>

<p>最终代码生成。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BeanConfig</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getClassName</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">className</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setClassName</span><span class="o">(</span><span class="n">String</span> <span class="n">className</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">className</span> <span class="o">=</span> <span class="n">className</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">className</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">BeanConfig</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="n">String</span> <span class="n">className</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">className</span> <span class="o">=</span> <span class="n">className</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>整个过程中不需要动一下鼠标，这意味着你的双手根本不需要离开键盘。使用快捷键比不使用快捷键效率至少提高5倍，而且还不会出错。最重要的一点是它能让我们的大脑从这些繁琐的体力劳动中解脱出来，从而集中到更需要发挥脑力劳动的地方。</p>

<p>其实灵活使用IDE的快捷键是一门大学问，我在和同事pair的过程中经常能从他们身上学到一些使用IDE的快捷键的妙处。以后有时间会专门整理出来share给大家。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Haskell函数式编程之List操作]]></title>
    <link href="http://www.huangbowen.net/blog/2013/04/05/haskell-list-processing/"/>
    <updated>2013-04-05T01:20:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/04/05/haskell-list-processing</id>
    <content type="html"><![CDATA[<p>List在函数式语言中是一个重要的抽象，很多事情离了它就很难做到。函数式语言的鼻祖Lisp名称就来自List processing。</p>

<p>Haskell本身也给List操作提供了一系列的操作符以及库函数。</p>

<!-- more -->


<h2>对列表操作的运算符</h2>

<p><strong><code>:</code>将一个元素放置到列表的前端。</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Prelude&gt; 1 : <span class="o">[]</span>
</span><span class='line'><span class="o">[</span>1<span class="o">]</span>
</span><span class='line'>Prelude&gt; 2 : <span class="o">[</span>3,4,5<span class="o">]</span>
</span><span class='line'><span class="o">[</span>2,3,4,5<span class="o">]</span>
</span><span class='line'>Prelude&gt; <span class="s1">&#39;a&#39;</span> : <span class="o">[</span><span class="s1">&#39;g&#39;</span>,<span class="s1">&#39;h&#39;</span>,<span class="s1">&#39;d&#39;</span><span class="o">]</span>
</span><span class='line'><span class="s2">&quot;aghd&quot;</span>
</span><span class='line'>Prelude&gt; <span class="s1">&#39;a&#39;</span> : <span class="s2">&quot;ghd&quot;</span>
</span><span class='line'><span class="s2">&quot;aghd&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>从上面例子可以看出一个字符串其实就是Char型的列表。
我们可以这样验证。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Prelude&gt; <span class="s2">&quot;abc&quot;</span> <span class="o">==</span> <span class="o">[</span><span class="s1">&#39;a&#39;</span>,<span class="s1">&#39;b&#39;</span>,<span class="s1">&#39;c&#39;</span><span class="o">]</span>
</span><span class='line'>True
</span></code></pre></td></tr></table></div></figure>


<p><strong><code>++</code> 连接两个列表。</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Prelude&gt; <span class="o">[</span>1,2,3<span class="o">]</span> ++ <span class="o">[</span>4,5,6<span class="o">]</span>
</span><span class='line'><span class="o">[</span>1,2,3,4,5,6<span class="o">]</span>
</span><span class='line'>Prelude&gt; <span class="s2">&quot;abc&quot;</span> ++ <span class="s2">&quot;efg&quot;</span>
</span><span class='line'><span class="s2">&quot;abcefg&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>使用Range</h2>

<p>如果要声明一个1到20的数组，除了将这些数字一一列举出来，我们还可以使用Range来实现，操作符是<code>..</code>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Prelude&gt; <span class="o">[</span>1..10<span class="o">]</span>
</span><span class='line'><span class="o">[</span>1,2,3,4,5,6,7,8,9,10<span class="o">]</span>
</span><span class='line'>Prelude&gt; <span class="o">[</span><span class="s1">&#39;a&#39;</span>..<span class="s1">&#39;h&#39;</span><span class="o">]</span>
</span><span class='line'><span class="s2">&quot;abcdefgh&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Range的默认步长是1，我们可以指定其步长。方法就是给出前两个元素再加上结尾元素，Haskell会根据前两个元素推断出步长，并应用。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Prelude&gt; <span class="o">[</span>1,3..21<span class="o">]</span>
</span><span class='line'><span class="o">[</span>1,3,5,7,9,11,13,15,17,19,21<span class="o">]</span>
</span><span class='line'>Prelude&gt; <span class="o">[</span>1,3..20<span class="o">]</span>
</span><span class='line'><span class="o">[</span>1,3,5,7,9,11,13,15,17,19<span class="o">]</span>
</span><span class='line'>Prelude&gt; <span class="o">[</span><span class="s1">&#39;a&#39;</span>,<span class="s1">&#39;c&#39;</span>..<span class="s1">&#39;k&#39;</span><span class="o">]</span>
</span><span class='line'><span class="s2">&quot;acegik&quot;</span>
</span><span class='line'>Prelude&gt; <span class="o">[</span>20,18..0<span class="o">]</span>
</span><span class='line'><span class="o">[</span>20,18,16,14,12,10,8,6,4,2,0<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>使用集合生成新的列表</h2>

<p>Haskell对List的操作还有一种神奇的方式。下面是一个数学公式，我们在初中肯定学过。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">S = { x | x ∈ N, x &lt; 10}</span>
</span></code></pre></td></tr></table></div></figure>


<p>S是一个目标集合，N是源集合，S中的元素是属于集合N,并且小于10的元素。</p>

<p>而在Haskell中可以直接使用这种语法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Prelude&gt; <span class="nb">let </span><span class="nv">list</span> <span class="o">=</span> <span class="o">[</span>1,2,3,4,5,6<span class="o">]</span>
</span><span class='line'>Prelude&gt; <span class="o">[</span>x | x &lt;- list, x &lt; 3<span class="o">]</span>
</span><span class='line'><span class="o">[</span>1,2<span class="o">]</span>
</span><span class='line'>Prelude&gt; <span class="o">[</span>x | x &lt;- list, x &lt; 3, x &gt; 1<span class="o">]</span>
</span><span class='line'><span class="o">[</span>2<span class="o">]</span>
</span><span class='line'>Prelude&gt; <span class="o">[</span>x * 2 | x &lt;- list, x &lt; 3<span class="o">]</span>
</span><span class='line'><span class="o">[</span>2,4<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>常用的列表操作函数</h2>

<p>在<a href="http://huangbowen.net/blog/2013/03/17/haskell-functional-programming-feature/">《Haskell函数式编程之特性篇》</a>中我们定义了一个map函数。它就是对列表的每个元素进行一个函数元素生成另一个列表。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">map&#39;</span> <span class="ow">::</span> <span class="p">(</span><span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">b</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">b</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="nf">map&#39;</span> <span class="n">f</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="kt">[]</span>
</span><span class='line'><span class="nf">map&#39;</span> <span class="n">f</span> <span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="n">xs</span><span class="p">)</span> <span class="ow">=</span><span class="n">f</span> <span class="n">x</span> <span class="kt">:</span> <span class="n">map&#39;</span> <span class="n">f</span> <span class="n">xs</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们可以再定义一个filter函数，用于对列表进行过滤。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">filter&#39;</span> <span class="ow">::</span> <span class="p">(</span><span class="n">a</span> <span class="ow">-&gt;</span> <span class="kt">Bool</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="nf">filter&#39;</span> <span class="n">f</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="kt">[]</span>
</span><span class='line'><span class="nf">filter&#39;</span> <span class="n">f</span> <span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="n">xs</span><span class="p">)</span>
</span><span class='line'>     <span class="o">|</span> <span class="n">f</span> <span class="n">x</span>       <span class="ow">=</span> <span class="n">x</span> <span class="kt">:</span> <span class="n">filter&#39;</span> <span class="n">f</span> <span class="n">xs</span>
</span><span class='line'>     <span class="o">|</span> <span class="n">otherwise</span> <span class="ow">=</span> <span class="n">filter&#39;</span> <span class="n">f</span> <span class="n">xs</span>
</span></code></pre></td></tr></table></div></figure>


<p>除此之外，Haskell还有大量的库函数用于对list进行操作。我们可以自己一一实现它。</p>

<p>head函数用于获取列表的第一个元素。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">head&#39;</span> <span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="n">xs</span><span class="p">)</span> <span class="ow">=</span> <span class="n">x</span>
</span></code></pre></td></tr></table></div></figure>


<p>tail函数获取列表的除第一个元素外的所有元素。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">tail&#39;</span> <span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="n">xs</span><span class="p">)</span> <span class="ow">=</span> <span class="n">xs</span>
</span></code></pre></td></tr></table></div></figure>


<p>last函数是获取列表的最后一个元素。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">last&#39;</span> <span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="n">xs</span><span class="p">)</span>
</span><span class='line'>     <span class="o">|</span> <span class="n">null</span> <span class="n">xs</span> <span class="ow">=</span> <span class="n">x</span>
</span><span class='line'>     <span class="o">|</span> <span class="n">otherwise</span> <span class="ow">=</span> <span class="n">last&#39;</span> <span class="n">xs</span>
</span></code></pre></td></tr></table></div></figure>


<p>init函数返回列表中除最后一个的其他元素。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">init&#39;</span> <span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="n">xs</span><span class="p">)</span>
</span><span class='line'>     <span class="o">|</span> <span class="n">null</span> <span class="n">xs</span> <span class="ow">=</span> <span class="kt">[]</span>
</span><span class='line'>     <span class="o">|</span> <span class="n">otherwise</span> <span class="ow">=</span> <span class="n">x</span> <span class="kt">:</span> <span class="n">init&#39;</span> <span class="n">xs</span>
</span></code></pre></td></tr></table></div></figure>


<p>你看使用Haskell实现这样的函数是如此的简单。注意这些函数都没有做对空列表的处理。如果给这些函数传递一个空列表会抛出异常。使用Haskll提供的库函数也一样。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kt">Prelude</span><span class="o">&gt;</span> <span class="n">head</span> <span class="kt">[]</span>
</span><span class='line'><span class="o">***</span> <span class="kt">Exception:</span> <span class="kt">Prelude</span><span class="o">.</span><span class="n">head</span><span class="kt">:</span> <span class="n">empty</span> <span class="n">list</span>
</span></code></pre></td></tr></table></div></figure>


<h2>fold</h2>

<p>对list的操作中我们经常会有这样一个情况，就是给定一个初始值，对list的每个元素进行一个操作，最后得出一个结果,这就像将列表折叠起来一样。比如求数组的最大值、最小值、求和都是这样的模式。Haskell中有相应的函数来实现这种pattern。我们可以自己实现一下。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">foldl&#39;</span> <span class="ow">::</span> <span class="p">(</span><span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">b</span> <span class="ow">-&gt;</span> <span class="n">a</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">b</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="n">a</span>
</span><span class='line'>
</span><span class='line'><span class="nf">foldl&#39;</span> <span class="n">f</span> <span class="n">s</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="n">s</span>
</span><span class='line'><span class="nf">foldl&#39;</span> <span class="n">f</span> <span class="n">s</span> <span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="n">xs</span><span class="p">)</span> <span class="ow">=</span> <span class="n">foldl&#39;</span> <span class="n">f</span> <span class="p">(</span><span class="n">f</span> <span class="n">s</span> <span class="n">x</span><span class="p">)</span> <span class="n">xs</span>
</span></code></pre></td></tr></table></div></figure>


<p>foldl&#8217;函数接收一个函数（这个函数接收一个a类型的值，b类型的值，并返回一个a类型值），一个a类型的值，一个b类型的列表，返回值为a类型的值。 （注意其中的a，b类型并不是确定的类型，它只是代表某类型，这有点像其他编程语言中的泛型。a,b的具体类型是由调用fold&#8217;时传入的具体参数推断出来的。）</p>

<p>我们可以用它来计算一个数组的和。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>*Main&gt; foldl<span class="err">&#39;</span> <span class="o">(</span><span class="se">\ </span>s x -&gt; s + x<span class="o">)</span>  0 <span class="o">[</span>1,2,3<span class="o">]</span>
</span><span class='line'>6
</span></code></pre></td></tr></table></div></figure>


<p>它与我们在Haskell函数式编程之2中提到的sum&#8217; 函数是等价的。
注意这是一个左flod。即它是对列表的每个元素按照从左到右的顺序进行函数运算。</p>

<p>我们也可以实现一个右fold。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">foldr&#39;</span> <span class="ow">::</span> <span class="p">(</span><span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">b</span> <span class="ow">-&gt;</span> <span class="n">a</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">b</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="n">a</span>
</span><span class='line'><span class="nf">foldr&#39;</span> <span class="n">f</span> <span class="n">s</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="n">s</span>
</span><span class='line'><span class="nf">foldr&#39;</span> <span class="n">f</span> <span class="n">s</span> <span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="n">xs</span><span class="p">)</span> <span class="ow">=</span> <span class="n">f</span> <span class="p">(</span><span class="n">foldr&#39;</span> <span class="n">f</span> <span class="n">s</span> <span class="n">xs</span><span class="p">)</span> <span class="n">x</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>*Main&gt; foldr<span class="err">&#39;</span> <span class="o">(</span><span class="se">\ </span>s x -&gt; s + x<span class="o">)</span>  0 <span class="o">[</span>1,2,3<span class="o">]</span>
</span><span class='line'>6
</span></code></pre></td></tr></table></div></figure>


<p>在右fold中，对列表进行函数运算的顺序是从右到左。其实我们可以使用左fold来构造一个右fold。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">foldr2</span> <span class="n">f</span> <span class="n">s</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="n">s</span>
</span><span class='line'><span class="nf">foldr2</span> <span class="n">f</span> <span class="n">s</span> <span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="n">xs</span><span class="p">)</span> <span class="ow">=</span> <span class="n">f</span> <span class="n">s</span> <span class="p">(</span><span class="n">foldl&#39;</span> <span class="n">f</span> <span class="n">x</span> <span class="n">xs</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>*Main&gt; foldr2 <span class="o">(</span><span class="se">\ </span>s x -&gt; s + x<span class="o">)</span>  0 <span class="o">[</span>1,2,3<span class="o">]</span>
</span><span class='line'>6
</span></code></pre></td></tr></table></div></figure>


<p>只不过这个右fold有个局限性，那就是a，b两个必须是同一个类型。</p>

<p>我们甚至可以用fold来实现map及filter等函数。</p>

<p>使用左fold实现map和filter。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">map2</span> <span class="ow">::</span> <span class="p">(</span><span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">b</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">b</span><span class="p">]</span>
</span><span class='line'><span class="nf">map2</span> <span class="n">f</span> <span class="n">xs</span> <span class="ow">=</span><span class="n">foldl&#39;</span> <span class="p">(</span><span class="nf">\</span><span class="n">s</span> <span class="n">x</span> <span class="ow">-&gt;</span> <span class="n">s</span> <span class="o">++</span> <span class="p">[</span><span class="n">f</span> <span class="n">x</span><span class="p">])</span> <span class="kt">[]</span> <span class="n">xs</span>
</span><span class='line'>
</span><span class='line'><span class="nf">filter2</span> <span class="ow">::</span> <span class="p">(</span><span class="n">a</span> <span class="ow">-&gt;</span> <span class="kt">Bool</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span>
</span><span class='line'><span class="nf">filter2</span> <span class="n">f</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="kt">[]</span>
</span><span class='line'><span class="nf">filter2</span> <span class="n">f</span> <span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="n">xs</span><span class="p">)</span> <span class="ow">=</span> <span class="n">foldl&#39;</span> <span class="p">(</span><span class="nf">\</span><span class="n">s</span> <span class="n">x</span> <span class="ow">-&gt;</span> <span class="kr">if</span> <span class="n">f</span> <span class="n">x</span> <span class="kr">then</span> <span class="n">s</span> <span class="o">++</span> <span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="kr">else</span> <span class="n">s</span> <span class="p">)</span> <span class="kt">[]</span> <span class="n">xs</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用右fold来实现map和filter。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">map3</span> <span class="ow">::</span> <span class="p">(</span><span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">b</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">b</span>
</span><span class='line'><span class="nf">map3</span> <span class="n">f</span> <span class="n">xs</span> <span class="ow">=</span><span class="n">foldr&#39;</span> <span class="p">(</span><span class="nf">\</span><span class="n">s</span> <span class="n">x</span> <span class="ow">-&gt;</span> <span class="n">f</span> <span class="n">x</span> <span class="kt">:</span> <span class="n">s</span><span class="p">)</span> <span class="kt">[]</span> <span class="n">xs</span>
</span><span class='line'>
</span><span class='line'><span class="nf">filter3</span> <span class="ow">::</span> <span class="p">(</span><span class="n">a</span> <span class="ow">-&gt;</span> <span class="kt">Bool</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span>
</span><span class='line'><span class="nf">filter3</span> <span class="n">f</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="kt">[]</span>
</span><span class='line'><span class="nf">filter3</span> <span class="n">f</span> <span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="n">xs</span><span class="p">)</span> <span class="ow">=</span> <span class="n">foldr&#39;</span> <span class="p">(</span><span class="nf">\</span><span class="n">s</span> <span class="n">x</span> <span class="ow">-&gt;</span> <span class="kr">if</span> <span class="n">f</span> <span class="n">x</span> <span class="kr">then</span> <span class="n">x</span> <span class="kt">:</span> <span class="n">s</span> <span class="kr">else</span> <span class="n">s</span><span class="p">)</span> <span class="kt">[]</span> <span class="n">xs</span>
</span></code></pre></td></tr></table></div></figure>


<p>由于<code>++</code>效率没有<code>:</code>高，所以生成结果为list的时候最好使用右fold。</p>

<p>以上就是关于List操作的各种知识了。其实Haskell中的列表就是一个函数，一个包装了一系列元素的函数。我们甚至可以自己实现自己的List函数。等有空的时候一起实现下。</p>

<p>另外，本篇文章所有源码被我放置在github中，地址是<a href="https://github.com/huangbowen521/HaskellLearning">https://github.com/huangbowen521/HaskellLearning</a>,想要源码的可以自行下载。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[修改方法签名的重构手法]]></title>
    <link href="http://www.huangbowen.net/blog/2013/04/03/change-method-signature/"/>
    <updated>2013-04-03T00:19:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/04/03/change-method-signature</id>
    <content type="html"><![CDATA[<p>今天看到同事写的一篇博客<a href="http://xiaodao.github.com/2011/03/15/correct-refactoring/">《依赖快捷键做重构是不行的》</a>。里面讲了一个这样的案例：本来有一方法，假设叫methodA。</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">methodA</span><span class="o">(){</span>
</span><span class='line'>  <span class="c1">// blablabla... </span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>后来由于需求变动，需要增加一个参数,姑且看做这个样子。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">methodA</span><span class="o">(</span><span class="n">String</span> <span class="n">param</span><span class="o">){</span>
</span><span class='line'><span class="c1">//  blablabla... </span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>他本来想直接修改方法签名（<a href="http://www.jetbrains.com/idea/">Intellij</a>中快捷键是Ctrl+F6）。但这样会导致所有调用此方法的地方由于缺乏对新加参数的处理，会导致单元测试甚至编译失败。他得出结论说依赖快捷键做重构是不行的。</p>

<p>我想说的是并不是依赖快捷键做重构不行，而恰恰是没有快捷键做重构会异常痛苦。如果没有方便的快捷键的话，依靠手工做重构会大大增加重构的时间成本及出错成本。正是由于重构快捷键的越来越便利，才导致重构不再是奢侈品，而成了家常便饭。</p>

<p>其实针对这种情况是使用快捷键的思路不对。我们的目标是对methodA添加一个参数，看似直接采用修改方法签名的快捷键就可以直接搞定。但其实这种想法是大大错误的。
结合他在文中给出的另一个实现方式，修改方法签名的一个正确的顺序应该是这样的。</p>

<ol>
<li><p>新写一个methodA2,这个方法相当于重构后的methodA。如果实现需要调用methodA，可以直接调用。</p></li>
<li><p>使用查找所有用例的快捷键(Ctrl+Alt+F7)查找methodA的所有用例，并逐一修改为调用methodA2的实现。期间每改一处要运行一下测试，防止修改破坏了原有功能。</p></li>
<li><p>如果methodA2调用了methodA方法，使用inline method快捷键(Ctrl+Alt+N)将methodA inline到methodA2中。</p></li>
<li><p>使用safe delete快捷键(Alt+Delete)删除methodA方法。如果仍然有指向methodA的方法调用，IDE会进行提示。</p></li>
<li><p>使用rename的快捷键(Shift+F6)将methodA2方法重名为methodA。</p></li>
</ol>


<p>我们可以看到，这五步中有四步都需要IDE的快捷键支持。如果脱离了IDE的快捷键，你会发现连一个小小的rename都会花上大量的时间。</p>

<p>而这种方式与一上去就直接修改方法签名的方式好在那里？</p>

<ul>
<li><p>基本不会出现编译错误。直接修改方法签名会陷入修复编译错误的泥潭。</p></li>
<li><p>小步前进，随时可以停下而不担心程序构建失败。方式一会将程序带入一个漫长的不稳定的状态。</p></li>
</ul>


<p>学会重构手法固然重要，但是掌握IDE提供的重构快捷键也不能轻视。如果你是Java程序员，推荐使用<a href="http://www.jetbrains.com/idea/">Intellij</a>，里面的重构快捷键比<a href="http://www.eclipse.org/">eclipse</a>多出不少，而且效果更好。如果你是c#程序员，推荐给你的Visual Studio装上<a href="http://www.jetbrains.com/resharper/">ReShaper</a>。注意<a href="http://www.jetbrains.com/idea/">Intellij</a>和<a href="http://www.jetbrains.com/resharper/">ReShaper</a>都是<a href="http://www.jetbrains.com/">JetBrains</a>出品的。要知道程序员挑选IDE就跟女生使用化妆品一样挑剔，但是<a href="http://www.jetbrains.com/">JetBrains</a>赢得了广大程序员的心。</p>

<p>PS:我知道这两款产品都不是免费的，但是对于程序员来说，节省了时间就是节省了金钱，对于工具，当然要用最好的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[敏捷的写博客]]></title>
    <link href="http://www.huangbowen.net/blog/2013/04/01/min-jie-de-xie-bo-ke/"/>
    <updated>2013-04-01T12:49:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/04/01/min-jie-de-xie-bo-ke</id>
    <content type="html"><![CDATA[<h2>为什么写博客</h2>

<p>写技术博客对于程序员的提升是不可估量的。只要你坚持一段时间，你就会发现它给你带来的各种积极的变化。思考问题更加深入了，更容易关注细节了，表达能力也增强了&#8230;&#8230;</p>

<!-- more -->


<ol>
<li><p><strong>不断的总结自己。</strong>程序员面对的世界是非常复杂的，未知领域也很多，在解决问题时第一次的方式并不一定是最完美的，只有通过不断的总结，不断的反思，才更容易抓住事物的本质。随着程序员的水平提高，需要思考的问题就开始变的更深度，更抽象、更复杂。这个时候就会遇到瓶颈，而通过写博客的方式能将自己的经验整理成型，形成一个完善的体系。</p></li>
<li><p><strong>能够认识到自己的进步。</strong>编程是枯燥乏味的，持续学习更难坚持。而写博客能激励自己，让自己看到自己的进步，并逐步建立信心。</p></li>
<li><p><strong>加强记忆，方便回顾。</strong>对自己在平时的实践中的收获以博客的方式发表出来，本来就是一种记忆的强化。失败本身不能让人进步，而对失败的反思才能让人进步。使用博客记录下这些反思，才能保证不会在同一个地方跌倒两次。</p></li>
<li><p><strong>强化发散思维，跳出局部看问题。</strong>其实各种技术都有相似或想通的理论作支撑。这些如果只看别人博客，只从google上搜素一些得到一些只言片语是很难领悟出来的。而自己写作的过程中随着对自己思路的梳理，更容易提升看问题的高度，以观全貌。</p></li>
<li><p><strong>扩大个人影响力，获取更多机会。</strong>程序员从业有些年头以后，如果是喜欢技术的人，总会想与别人做些更深入、更高层次的交流，但毕竟水平越高，能进行这种交流的人就会越少、越分散。写作、演讲、著书立说，这都是让自己进入一个更高水平的交流圈的方式。进入了这个对话环境，你才发现：原来还有那么多可学、可发展的方向。很多人到了三十岁上下就开始惰怠、看不到发展方向，在我看来一个重要的原因就是眼界不开，没有进入一个更高水平的交流生态。（这一点感谢<a href="http://www.weibo.com/gigix">@JeffXiong</a>的总结）</p></li>
</ol>


<h2>写博客要端正心态</h2>

<p>很多人之所有不写博客，有各种各样的原因。有的说时间不够，有的说自己的积累不够，有的说没有文采…..</p>

<p>其实写博客就像一项业余爱好一样，看似不是工作中的分内事，但却更有助于自己的工作。</p>

<p>一个极端是怕写的幼稚，不敢下笔，不敢面对别人的评价。博客其实首先是写给自己看的，如果自己能有所收获，那就是值得的。</p>

<p>另一个极端是总想着不写则已，一写惊人。老想着自己的每篇博客都能博来大家的大量关注。其实再牛逼的作家总有几篇作品不尽如人意。但是没经历这些作品的历练，是无法揣摩出更深的意境。更何况我们是普通人，只要写出自己所感所想，虚心接收别人的意见、建议，就是巨大的进步。</p>

<h2>敏捷的写博客</h2>

<p>每个程序员都喜欢编码，但不是每个程序员都喜欢写博客。如果我们将写博客的过程与敏捷流程一一对应起来，使用编程的技法来写博客，那么能提起你的兴趣吗?</p>

<p>本人在写博客的过程中与敏捷手法结合起来，受益良多。</p>

<p>在一个敏捷团队中，一个典型的用户故事的声明周期是这样的。</p>

<p><img src="http://images.cnblogs.com/cnblogs_com/huang0925/462982/o_storyLifeCycle.png" alt="story lifecycle" /></p>

<p>其实我们可以将一篇博客看做一个用户故事。你既是IM(迭代经理),又是BA(业务分析师)，DEV（开发者）,QA(质量保证)，而阅读你博客的人就是你的产品的最终用户。你的目标是让你的产品大卖（有越来越多的人关注你的博客）。</p>

<ol>
<li><p><strong>扩充你的Backlog。</strong> 创建backlog的要点就是随时随地的记录你的idea。这有个一个很有趣的理论，大脑有两个工作模式，<a href="https://right-track-wrong-train.readthedocs.org/en/latest/thinking_and_learning/pragmatic_thinking_and_learning/chp3.html">线型模式(L型)和富模式（R型）</a>。L型在工作的时候经常被用到，其按部就班，抑制了发散思维。而工作之余大脑得到充分休息，更容易进入R型工作状态，更容易得到好的idea,这时候要赶快的记录下来。所以这就是我喜欢<a href="https://evernote.com/">evernote</a>原因之一:随时随地记录idea。比如我的backlog里面现在有很多打算完成的博客，其中有《重构手法解析》一篇。《重构手法解析》这篇是我在上班骑自行车的路上想到的idea，并在到办公室的第一件事就是把这个想法记下来，放到backlog中去。</p></li>
<li><p><strong>Analysis。</strong> 要点：先写大纲,再进行补充完善。对于某个idea，大概确定要写什么，想表达什么样的意思。无论是技术文章还是平时的一些反思总结文章，都要有一定的骨架。我们可以先将这些骨架确定，然后再填充内容，这就像软件的设计一样。比如《敏捷的写博客》这篇，我确定一个骨架就是：1，写博客的好处。 2，敏捷流程。 3，如何让写博客变得敏捷。有了这个大纲作为支撑，写的时候就不会漫无目的。</p></li>
<li><p><strong>Development。</strong> 要点：采用自由写技术。何为自由写？即针对当前的博客主题及大纲想到什么就写什么，而不用太纠结于用词造句。这就像你要修建一面墙壁，事先不需要计划收集特别的材料，只需要到处走走看看，捡一些好看的时候备用。直到准备造墙时，就从石头堆里面挑出匹配的石头安放。写一篇2000字的文章容易还是将4000字的草稿整理成为2000字的文章容易？相信大多数人会选择后者。</p></li>
<li><p><strong>Testing。</strong> 要点:斟酌语句，最后的检查，将草稿转化为定稿。</p></li>
<li><p><strong>Done。</strong>发表。</p></li>
</ol>


<p>是不是发表了以后就完了? NO。我们缺少了敏捷实践中最重要的一环，那就是retro（回顾会议）。我们需要吸收读者的评论，修正自己的观点，再对博客进行加工。</p>

<p>我的同事<a href="http://www.weibo.com/illusionking">@IM_ZhangYve</a>使用<a href="https://evernote.com/">evernote</a>来管理自己的文章。他将category建成了这个样子。</p>

<p><img src="http://images.cnblogs.com/cnblogs_com/huang0925/462982/o_evernote.jpg" alt="evernote category" /></p>

<p>这样<a href="https://evernote.com/">evernote</a>就成了一个故事墙，每个用户故事就是一篇博客，当前那些处于backlog，那些处于WIP,一目了然。你所需要做的就是尽量把用户故事往done里面挪。</p>

<h2>使用敏捷的博客工具</h2>

<p>以上只是用敏捷的方法来管理博客，那有没有相应的工具来支持像敲代码一样的写博客？
有，那就是<a href="http://octopress.org/">octopress</a>。使用<a href="http://octopress.org/">octopress</a>博客框架写博客与写代码没什么两样。
具体如何使用<a href="http://octopress.org/">octopress</a>，请自行google或者直接去其官网。
下面简单讲下如何使用<a href="http://octopress.org/">octopress</a>发表一篇博客。</p>

<ul>
<li>创建一篇博客。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>:~/sourcecode/octopress<span class="nv">$ </span>rake new_post<span class="o">[</span><span class="s1">&#39;敏捷的写博客&#39;</span><span class="o">]</span>
</span><span class='line'>mkdir -p <span class="nb">source</span>/_posts
</span><span class='line'>Creating new post: <span class="nb">source</span>/_posts/2013-04-01-min-jie-de-xie-bo-ke.markdown
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>编辑博客。</p>

<p>  使用任何你喜欢的编辑器打开<code>2013-04-01-min-jie-de-xie-bo-ke.markdown</code>文件，比如vim、emacs、sublime等。甚至编代码的ide都行。然后使用<a href="http://daringfireball.net/projects/markdown/">markdown</a>的语法来编辑你的博客。设置标题、设置列表、加粗、加下划线、代码高亮…一切根本无需借助html编辑器就可以轻松实现。</p></li>
<li><p>发布博客。</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>:~/sourcecode/octopress<span class="nv">$ </span>rake generate
</span><span class='line'>:~/sourcecode/octopress<span class="nv">$ </span>rake deploy
</span></code></pre></td></tr></table></div></figure>


<p>不过毕竟将博客host在<a href="https://github.com">github</a>或<a href="http://www.heroku.com/">heroku</a>人气没有<a href="www.cnblogs.com">博客园</a>这么旺。我们可以通过同步的方式将博客同步到<a href="www.cnblogs.com">博客园</a>中。只要将screen.css文件引入到博客园中，就可以共用生成的html元素。我最喜欢的是<a href="https://github.com">github</a>显示代码的效果。</p>

<p>最后再推荐我们公司部分大牛的博客。</p>

<ul>
<li><p><a href="http://xiaopeng.me">明确思考</a></p></li>
<li><p><a href="http://dreamhead.blogbus.com">梦想风暴</a></p></li>
<li><p><a href="http://gigix.thoughtworkers.org">透明思考</a></p></li>
<li><p><a href="http://agiledon.github.com/">捷道</a></p></li>
<li><p><a href="http://www.iamhukai.com">I am Hu Kai</a></p></li>
<li><p><a href="http://michael.nona.name/">Michel Chen&#8217;s Blog</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java基础知识之Annotation]]></title>
    <link href="http://www.huangbowen.net/blog/2013/03/28/java-annotation/"/>
    <updated>2013-03-28T01:01:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/03/28/java-annotation</id>
    <content type="html"><![CDATA[<h2>什么是Annotation?</h2>

<p><strong>Annotation翻译为中文即为注解，意思就是提供除了程序本身逻辑外的额外的数据信息。</strong>Annotation对于标注的代码没有直接的影响，它不可以直接与标注的代码产生交互，但其他组件可以使用这些信息。</p>

<p>Annotation信息可以被编译进class文件，也可以保留在Java 虚拟机中，从而在运行时可以获取。甚至对于Annotation本身也可以加Annotation。</p>

<!-- more -->


<h2>那些对象可以加Annotation</h2>

<p>类，方法，变量，参数，包都可以加Annotation。</p>

<h2>内置的Annotation</h2>

<p>@Override 重载父类中方法
@Deprecated 被标注的方法或类型已不再推荐使用</p>

<p>@SuppressWarnings  阻止编译时的警告信息。其需要接收一个String的数组作为参数。
可供使用的参数有：</p>

<ul>
<li>unchecked</li>
<li>path</li>
<li>serial</li>
<li>finally</li>
<li>fallthrough</li>
</ul>


<h2>可以用与其他annotation上的annotation</h2>

<ul>
<li>@Retention</li>
</ul>


<p>确定Annotation被保存的生命周期,
需要接收一个Enum对象RetentionPolicy作为参数。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">enum</span> <span class="n">RetentionPolicy</span> <span class="o">{</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Annotations are to be discarded by the compiler.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">SOURCE</span><span class="o">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Annotations are to be recorded in the class file by the compiler</span>
</span><span class='line'><span class="cm">     * but need not be retained by the VM at run time.  This is the default</span>
</span><span class='line'><span class="cm">     * behavior.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">CLASS</span><span class="o">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Annotations are to be recorded in the class file by the compiler and</span>
</span><span class='line'><span class="cm">     * retained by the VM at run time, so they may be read reflectively.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * @see java.lang.reflect.AnnotatedElement</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">RUNTIME</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>@Documented 文档化</p></li>
<li><p>@Target</p></li>
</ul>


<p>表示该Annotation可以修饰的范围,接收一个Enum对象EnumType的数组作为参数。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">enum</span> <span class="n">ElementType</span> <span class="o">{</span>
</span><span class='line'>    <span class="cm">/** Class, interface (including annotation type), or enum declaration */</span>
</span><span class='line'>    <span class="n">TYPE</span><span class="o">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/** Field declaration (includes enum constants) */</span>
</span><span class='line'>    <span class="n">FIELD</span><span class="o">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/** Method declaration */</span>
</span><span class='line'>    <span class="n">METHOD</span><span class="o">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/** Parameter declaration */</span>
</span><span class='line'>    <span class="n">PARAMETER</span><span class="o">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/** Constructor declaration */</span>
</span><span class='line'>    <span class="n">CONSTRUCTOR</span><span class="o">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/** Local variable declaration */</span>
</span><span class='line'>    <span class="n">LOCAL_VARIABLE</span><span class="o">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/** Annotation type declaration */</span>
</span><span class='line'>    <span class="n">ANNOTATION_TYPE</span><span class="o">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/** Package declaration */</span>
</span><span class='line'>    <span class="n">PACKAGE</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>@Inherited</li>
</ul>


<p>该Annotation可以影响到被标注的类的子类。</p>

<h2>自定义Annotation</h2>

<p>JSE5.0以后我们可以自定义Annotation。下面就是一个简单的例子。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Retention</span><span class="o">(</span><span class="n">RetentionPolicy</span><span class="o">.</span><span class="na">RUNTIME</span><span class="o">)</span>
</span><span class='line'><span class="nd">@Target</span><span class="o">(</span><span class="n">ElementType</span><span class="o">.</span><span class="na">METHOD</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="nd">@interface</span> <span class="n">MethodAnnotation</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>下面的Person对象使用了自定义的MethodAnnotation。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">eat</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;eating&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@MethodAnnotation</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">walk</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">&quot;walking&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们可以通过反射获取Annotation的信息。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>        <span class="n">Class</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="n">personClass</span> <span class="o">=</span> <span class="n">Person</span><span class="o">.</span><span class="na">class</span><span class="o">;</span>
</span><span class='line'>        <span class="n">Method</span><span class="o">[]</span> <span class="n">methods</span> <span class="o">=</span> <span class="n">personClass</span><span class="o">.</span><span class="na">getMethods</span><span class="o">();</span>
</span><span class='line'>        <span class="k">for</span><span class="o">(</span><span class="n">Method</span> <span class="n">method</span> <span class="o">:</span> <span class="n">methods</span><span class="o">){</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">method</span><span class="o">.</span><span class="na">isAnnotationPresent</span><span class="o">(</span><span class="n">MethodAnnotation</span><span class="o">.</span><span class="na">class</span><span class="o">)){</span>
</span><span class='line'>                <span class="n">method</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">personClass</span><span class="o">.</span><span class="na">newInstance</span><span class="o">());</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>输出：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">walking</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们也可以给自定义的Annotation加方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Target</span><span class="o">(</span><span class="n">ElementType</span><span class="o">.</span><span class="na">TYPE</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="nd">@interface</span> <span class="n">personAnnotation</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="nf">id</span><span class="o">()</span> <span class="k">default</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>    <span class="n">String</span> <span class="nf">name</span><span class="o">()</span> <span class="k">default</span> <span class="s">&quot;bowen&quot;</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>下面是对personAnnotation的使用。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@personAnnotation</span><span class="o">(</span><span class="n">id</span> <span class="o">=</span> <span class="mi">8</span><span class="o">,</span> <span class="n">name</span> <span class="o">=</span> <span class="s">&quot;john&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">eat</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;eating&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@MethodAnnotation</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">walk</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">&quot;walking&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Annotation是如何被处理的</h2>

<p>当Java源代码被编译时，编译器的一个插件annotation处理器则会处理这些annotation。处理器可以产生报告信息，或者创建附加的Java源文件或资源。如果annotation本身被加上了RententionPolicy的运行时类，则Java编译器则会将annotation的元数据存储到class文件中。然后，Java虚拟机或其他的程序可以查找这些元数据并做相应的处理。</p>

<p>当然除了annotation处理器可以处理annotation外，我们也可以使用反射自己来处理annotation。Java SE 5有一个名为AnnotatedElement的接口，Java的反射对象类Class,Constructor,Field,Method以及Package都实现了这个接口。这个接口用来表示当前运行在Java虚拟机中的被加上了annotation的程序元素。通过这个接口可以使用反射读取annotation。AnnotatedElement接口可以访问被加上RUNTIME标记的annotation，相应的方法有getAnnotation,getAnnotations,isAnnotationPresent。由于Annotation类型被编译和存储在二进制文件中就像class一样，所以可以像查询普通的Java对象一样查询这些方法返回的Annotation。</p>

<h2>Annotation的广泛使用</h2>

<p>Annotation被广泛用于各种框架和库中，下面就列举一些典型的应用.</p>

<h3>Junit</h3>

<p>Junit是非常著名的一款单元测试框架，使用Junit的时候需要接触大量的annotation。</p>

<ul>
<li><p>@Runwith 自定义测试类的Runner</p></li>
<li><p>@ContextConfiguration 设置Spring的ApplicationContext</p></li>
<li><p>@DirtiesContext 当执行下一个测试前重新加载ApplicationContext.</p></li>
<li><p>@Before 调用测试方法前初始化</p></li>
<li><p>@After 调用测试方法后处理</p></li>
<li><p>@Test 表明该方法是测试方法</p></li>
<li><p>@Ignore 可以加在测试类或测试方法上，忽略运行。</p></li>
<li><p>@BeforeClass：在该测试类中的所有测试方法执行前调用，只被调用一次（被标注的方法必须是static）</p></li>
<li><p>@AfterClass：在该测试类中的所有的测试方法执行完后调用，只被执行一次(被标注的方法必须是static)</p></li>
</ul>


<h3>Spring</h3>

<p>Spring 号称配置地狱，Annotation也不少。</p>

<ul>
<li><p>@Service 给service类加注解</p></li>
<li><p>@Repository 给DAO类加注解</p></li>
<li><p>@Component 给组件类加注解</p></li>
<li><p>@Autowired 让Spring自动装配bean</p></li>
<li><p>@Transactional 配置事物</p></li>
<li><p>@Scope 配置对象存活范围</p></li>
<li><p>@Controller 给控制器类加注解</p></li>
<li><p>@RequestMapping url路径映射</p></li>
<li><p>@PathVariable 将方法参数映射到路径</p></li>
<li><p>@RequestParam 将请求参数绑定到方法变量</p></li>
<li><p>@ModelAttribute 与model绑定</p></li>
<li><p>@SessionAttributes 设置到session属性</p></li>
</ul>


<h3>Hibernate</h3>

<ul>
<li><p>@Entity 修饰entity bean</p></li>
<li><p>@Table 将entity类与数据库中的table映射起来</p></li>
<li><p>@Column 映射列</p></li>
<li><p>@Id 映射id</p></li>
<li><p>@GeneratedValue 该字段是自增长的</p></li>
<li><p>@Version 版本控制或并发性控制</p></li>
<li><p>@OrderBy 排序规则</p></li>
<li><p>@Lob 大对象标注</p></li>
</ul>


<p>Hibernate还有大量的关于联合的annotation和继承的annotation，这里就不意义列举了。</p>

<h3>JSR 303 - Bean Validation</h3>

<p>JSR 303 - Bean Validation是一个数据验证的规范，其对Java bean的验证主要通过Java annotation来实现。</p>

<ul>
<li><p>@Null被注释的元素必须为 null</p></li>
<li><p>@NotNull被注释的元素必须不为 null</p></li>
<li><p>@AssertTrue被注释的元素必须为 true@AssertFalse被注释的元素必须为 false@Min(value)被注释的元素必须是一个数字，其值必须大于等于指定的最小值</p></li>
<li><p>@Max(value)被注释的元素必须是一个数字，其值必须小于等于指定的最大值</p></li>
<li><p>@DecimalMin(value)被注释的元素必须是一个数字，其值必须大于等于指定的最小值</p></li>
<li><p>@DecimalMax(value)被注释的元素必须是一个数字，其值必须小于等于指定的最大值</p></li>
<li><p>@Size(max, min)被注释的元素的大小必须在指定的范围内</p></li>
<li><p>@Digits (integer, fraction)被注释的元素必须是一个数字，其值必须在可接受的范围内</p></li>
<li><p>@Past被注释的元素必须是一个过去的日期</p></li>
<li><p>@Future被注释的元素必须是一个将来的日期</p></li>
<li><p>@Pattern(value)被注释的元素必须符合指定的正则表达式</p></li>
</ul>


<p>其实还有很多使用了annotaion的framework或library,这里就不一一列举了，希望大家能举一反三，深入了解Java中的annotation。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[优秀程序员无他-善假于物也]]></title>
    <link href="http://www.huangbowen.net/blog/2013/03/24/senior-programer-good-habits/"/>
    <updated>2013-03-24T02:31:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/03/24/senior-programer-good-habits</id>
    <content type="html"><![CDATA[<p>运用一门程序设计语言对大多数程序员来说是小菜一碟,但是更上一层楼成为一名专家级的软件开发者，恐怕目前还是大多数人的梦想。《程序员的思维修炼》一书中将程序员分为5个层级：新手，高级新手，胜任者，精通者，专家。根据作者的调查研究结果，在这5个层级中，大多数的程序员属于高级新手。而且居于这个层级的程序员从入行1、2年的到工作10来年都大有人在。</p>

<p>身为一个程序员，如何才能尽快的突破自身的瓶颈，得到快速的提升那？这可真不是三言两语可以说清楚。本人09年毕业投身软件行业，2012年初离开工作了三年的公司A，加入了现在的公司B。算到现在呆在B公司也即将满一年了。但是我敢说在B公司1年学到的东西，比在A公司3年加起来的总和还要多。
这么大的进步是源于我养成了较好的学习习惯，每天都保持汲取知识。这些习惯大都是同我身边的同事身上偷来的。现在，我就把这些东西分享给大家，一起共勉。</p>

<!-- more -->


<p>我们无需摸着石头过河，因为前人已经给我们总结了很多宝贵的经验。</p>

<ol>
<li><p><strong>请将google作为你的搜索引擎。</strong> 这点放在第一条表明了它绝对是重中之重。当你尝试使用google做一段时间的技术搜索后，你会发现百度是多么的低效和不靠谱。同样一个技术关键字，google结果的匹配程度会远高于百度。如果你说你英文能力差的话,那么请赶快补习英语。在我身边我还没发现一个很牛逼的程序员他的英文很差劲。外国人的技术文章大都很细腻，很有条理，并且注重由浅入深，覆盖面广。比如我前段时间想写一篇关于Java泛型的文章，就搜到了oracle有一篇对java 泛型的完整讲述,地址在<a href="https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;ved=0CDYQFjAA&amp;url=http%3A%2F%2Fdocs.oracle.com%2Fjavase%2Ftutorial%2Fjava%2Fgenerics%2F&amp;ei=1eVNUamWA6n5iwL2k4GwDA&amp;usg=AFQjCNE_MIRvBiqQZ_SkkhWZE1zbmugQ-g&amp;sig2=-xoQZ568IgYPIftOXFy_MA">这里</a>。可以说看完这篇文章后，你再也不担心你会遗漏泛型中的知识点了。</p></li>
<li><p><strong>学会对自己制定目标并执行。</strong> 有人说，我有目标，那就是1年精通xx语言。我说，这样的目标等于没有目标。制定目标必须要遵循SMART原则，那就是：</p>

<ul>
<li>目标必须是具体的（Specific）</li>
<li>目标必须是可以衡量的（Measurable）</li>
<li>目标必须是可以达到的（Attainable）</li>
<li>目标必须和其他目标具有相关性（Relevant）</li>
<li>目标必须具有明确的截止期限（Time-based）</li>
</ul>


<p> 不可被验证的目标只能说是口号，而喊口号又恰恰是中国人最擅长的。要建立起可验证的目标，还需要对目标进行追踪。在对目标进行追踪验证的过程中可以使用一些工具辅助，比如我使用的就是<a href="https://www.wunderlist.com/">wunderList</a>。</p></li>
<li><p><strong>使用代码托管网站管理你的代码。</strong> 作为程序员，学习新东西时少不了写一些代码，demo。而后随后就丢掉。这是一种不好的习惯。你应该学会管理你的代码，让它们成为你的宝贵财富。目前有很多免费的代码托管网站，首推<a href="https://github.com/">github</a>。<a href="https://github.com/">github</a>是全球最大的源代码托管网站，很多著名的开源框架都将其源代码托管在上面,如Jquery，Junit,Ruby,Clojure等。在这里，你可以上传你的源代码分享给他人。也可以方便的查看他人的优秀源码。如果你愿意，也可以成为一名志愿者，一起与他人开发一个开源项目。一切只需要一个git客户端和一个github账号就可以搞定。</p></li>
<li><p><strong>使用日志对知识进行总结。</strong>一个不善于总结的程序员绝不是一个优秀程序员。<a href="http://wiki.mbalib.com/wiki/SMART%E5%8E%9F%E5%88%99">SMART</a>管理中有很重要的一条，那就是目标必须是可衡量的。而我们在学习技术的过程中，除了产出的code本身，日志也是一个重要的可衡量的产出物。你可以记下所犯的错误，以避免重犯，也可以记下自己的所得，梳理思路。推荐一款日志工具<a href="http://evernote.com/">evernote</a>。它支持几乎所有的操作系统和mobile平台，并可以方便的将日志同步到云端。对于一些日志你可以再加工一下发表到博客上，接受大家的检阅，并扩大自己的影响力。另外，<a href="http://en.wikipedia.org/wiki/Mind_map">mind map</a>也是不错的梳理思路、回顾总结的好方式。比如我学习了正则表达式，就画了一张mind map来记录正则表达式的全部语法，以后如有遗忘只需看一下<a href="http://huangbowen.net/images/RegularExpression.png">该图表</a>即可。</p></li>
<li><p><strong>阅读成为你的日常习惯。</strong>软件工程是一种知识生产活动，前人的经验的载体就是文字。作为IT人士，知识更迭是很频繁的，不了解外面的世界很容易被遗弃。我们不仅要热爱阅读，还要读好书，读好文章。养成良好的阅读习惯是每个程序员应当具备的素质之一。这里推荐一个网站，<a href="http://www.douban.com/">豆瓣读书</a>。上面有很多技术书籍的信息，书评等，可以成为你阅读的一个参考。另外，鄙人也强烈推荐了一些好书，想看的可以访问<a href="http://huangbowen.net/blog/2013/02/18/thoughtworks-reading-book/">这里</a>。</p></li>
<li><p><strong>熟练使用各种快捷键。</strong>对于程序员来说，提高速度就意味着了生产率。提高了生产率，你就有了更多的时间去展开新的学习。熟练使用快捷键的好处不只是节省时间，而是将你的大脑从重复机械的劳动中解放出来，能够关注到更重要的部分。大到操作系统，小到浏览器，都有自己各种各样的快捷键。尤其对于程序员天天使用的IDE来说，掌握快捷键尤其重要。从现在开始，打印一份IDE的快捷键大全放在桌面上，每天都要熟悉其中的几个，用不了一星期你就会发现你的编程效率至少会提升30%以上。别质疑，因为我就是这样做的。</p></li>
</ol>


<p>不积跬步，无以至千里。要想成为优秀程序员，光有一腔热血是不够的，一定要持之以恒，坚持不懈的持续学习。以此来与大家共勉。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java基础知识之泛型]]></title>
    <link href="http://www.huangbowen.net/blog/2013/03/23/java-generic-type/"/>
    <updated>2013-03-23T00:26:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/03/23/java-generic-type</id>
    <content type="html"><![CDATA[<p><strong>当我们在定义类，接口和方法时，可以接收一个类型作为参数，这就叫做泛型</strong>。</p>

<p>函数可以传入普通的参数，也可以传入一个类型参数。不同之处是普通的参数就是值而已，但是类型参数却是个类型。</p>

<p>使用泛型的好处:</p>

<ul>
<li>强类型检查。在编译时就可以得到类型错误信息。</li>
<li>避免显式强制转换。</li>
<li>方便实现通用算法。</li>
</ul>


<!-- more -->


<h2>对类使用泛型</h2>

<p>我们可以创建一个简单的Class Box。它提供存取一个类型为Object的对象。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Box</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Object</span> <span class="nf">getObject</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">object</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setObject</span><span class="o">(</span><span class="n">Object</span> <span class="n">object</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">object</span> <span class="o">=</span> <span class="n">object</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Object</span> <span class="n">object</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>你可以传给它任何你想要的对象，比如对象String,Integer等，也可以传入自定义的一些对象。但是调用getObject方法返回的对象需要显式的强转为传入的类型，才能使用原来类型的一些方法。</p>

<p>我们可以使用泛型来构造这个对象。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Box</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">T</span> <span class="nf">getObject</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">object</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">T</span> <span class="n">object</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setObject</span><span class="o">(</span><span class="n">T</span> <span class="n">object</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">object</span> <span class="o">=</span> <span class="n">object</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们可以看到，所有的Object被替换成了T。T代表了某种类型，你在实例化Box对象时，必须要给其指定一种类型，String,Integer或者自定义的类，并且调用getObject方法并不需要进行强转就可以使用该类型的方法。</p>

<p>一般来说，类型参数名称越简单越好，并且需要是大写的。为了方便，我们约定了一些命名使用。</p>

<ul>
<li>E Element</li>
<li>K key</li>
<li>N Number</li>
<li>T type</li>
<li>V value</li>
<li>S,U,V 第2，3，4个类型</li>
</ul>


<p>我们可以这样实例化一个Box类。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Box</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">integerBox</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Box</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;();</span>
</span></code></pre></td></tr></table></div></figure>


<p>同样，我们也支持在一个类中传入多个类型参数。例如下面的Pair对象</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Pair</span><span class="o">&lt;</span><span class="n">T</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">T</span> <span class="n">key</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">V</span> <span class="n">value</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">Pair</span><span class="o">(</span><span class="n">T</span> <span class="n">key</span><span class="o">,</span> <span class="n">V</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">key</span> <span class="o">=</span> <span class="n">key</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">T</span> <span class="nf">getKey</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">key</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">V</span> <span class="nf">getValue</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">value</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用方法如下。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Pair</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">one</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Pair</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;(</span><span class="mi">1</span><span class="o">,</span> <span class="s">&quot;one&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">Pair</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">hello</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Pair</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;(</span><span class="s">&quot;hello&quot;</span><span class="o">,</span> <span class="s">&quot;world&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>对方法使用泛型</h2>

<p>泛型可以作用与方法上，此时泛型参数只能在方法体中使用。而泛型作用于类时，则在整个类中可以使用。</p>

<p>在静态方法、非静态方法及构造函数都可以使用泛型。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Util</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">,</span> <span class="n">U</span><span class="o">&gt;</span> <span class="kt">boolean</span> <span class="n">compare</span><span class="o">(</span><span class="n">Pair</span><span class="o">&lt;</span><span class="n">T</span><span class="o">,</span><span class="n">U</span><span class="o">&gt;</span> <span class="n">pair1</span><span class="o">,</span> <span class="n">Pair</span><span class="o">&lt;</span><span class="n">T</span><span class="o">,</span><span class="n">U</span><span class="o">&gt;</span> <span class="n">pair2</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">pair1</span><span class="o">.</span><span class="na">getKey</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="n">pair2</span><span class="o">.</span><span class="na">getKey</span><span class="o">())</span> <span class="o">&amp;&amp;</span> <span class="n">pair1</span><span class="o">.</span><span class="na">getValue</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="n">pair2</span><span class="o">.</span><span class="na">getValue</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>下面是对该静态方法的使用。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>       <span class="n">Pair</span> <span class="n">one</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Pair</span><span class="o">(</span><span class="s">&quot;one&quot;</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Pair</span> <span class="n">two</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Pair</span><span class="o">(</span><span class="s">&quot;two&quot;</span><span class="o">,</span> <span class="mi">2</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">assertThat</span><span class="o">(</span><span class="n">Util</span><span class="o">.</span><span class="na">compare</span><span class="o">(</span><span class="n">one</span><span class="o">,</span> <span class="n">two</span><span class="o">),</span> <span class="n">is</span><span class="o">(</span><span class="kc">false</span><span class="o">));</span>
</span><span class='line'><span class="c1">// pass</span>
</span></code></pre></td></tr></table></div></figure>


<h2>对泛型进行限定</h2>

<p>默认情况下如果直接使用<T>的话，我们可以给其传任何值。有时候我们想值允许传入某个类及它的子类。这时候在声明泛型时可以使用<strong>extends</strong>关键字。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Box</span><span class="o">&lt;</span><span class="n">T</span> <span class="kd">extends</span> <span class="n">Number</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">T</span> <span class="nf">getObject</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">object</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">T</span> <span class="n">object</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setObject</span><span class="o">(</span><span class="n">T</span> <span class="n">object</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">object</span> <span class="o">=</span> <span class="n">object</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>      <span class="n">Box</span> <span class="n">box</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Box</span><span class="o">();</span>
</span><span class='line'>        <span class="n">box</span><span class="o">.</span><span class="na">setObject</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>    <span class="c1">//ok</span>
</span><span class='line'>        <span class="n">box</span><span class="o">.</span><span class="na">setObject</span><span class="o">(</span><span class="s">&quot;hello&quot;</span><span class="o">);</span>  <span class="c1">//compile-time error</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们也可以给类型参数加多个限定。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;</span><span class="n">T</span> <span class="kd">extends</span> <span class="n">B1</span> <span class="o">&amp;</span> <span class="n">B2</span> <span class="o">&amp;</span> <span class="n">B3</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>加上限定类或接口以后，我们可以使用泛型参数变量调用该类或接口的方法。</p>

<h2>通配符的使用</h2>

<p>Java中的List<T>就是一个实现了泛型的类，假如我们写了一个方法，获取List<T>中元素的个数。只不过这个方法限定T类型为Number。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">getCount</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Number</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">)</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>      <span class="k">for</span><span class="o">(</span><span class="n">Number</span> <span class="n">n</span> <span class="o">:</span> <span class="n">list</span><span class="o">)</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="n">i</span><span class="o">++;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">i</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后我们这样试图调用它。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;(){</span>
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="n">add</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>            <span class="n">add</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
</span><span class='line'>            <span class="n">add</span><span class="o">(</span><span class="mi">3</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Util</span><span class="o">.</span><span class="na">getCount</span><span class="o">(</span><span class="n">list</span><span class="o">);</span> <span class="c1">//compile-time error</span>
</span></code></pre></td></tr></table></div></figure>


<p>为什么会产生错误那？因为我们要求方法的参数是List<Number>,而我们实际传入的是List<Integer>。虽然Integer是Number的子类，但是List<Integer>却不是List<Number>的子类，他们其实是平等的关系。这点一定要注意。我们在方法定义时已经明确表示T的类型是Number了，所以只能接收List<Number>，而不能接收其它类型的参数。
这时候<code>?</code>通配符就起作用了。我们可以使用<code>？</code>通配符重新定义这个方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Util</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">getCount</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">Number</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">)</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>      <span class="k">for</span><span class="o">(</span><span class="n">Number</span> <span class="n">n</span> <span class="o">:</span> <span class="n">list</span><span class="o">)</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="n">i</span><span class="o">++;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">i</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;(){</span>
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="n">add</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>            <span class="n">add</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
</span><span class='line'>            <span class="n">add</span><span class="o">(</span><span class="mi">3</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">assertThat</span><span class="o">(</span><span class="n">Util</span><span class="o">.</span><span class="na">getCount</span><span class="o">(</span><span class="n">list</span><span class="o">),</span> <span class="n">is</span><span class="o">(</span><span class="mi">3</span><span class="o">));</span>  <span class="c1">// pass</span>
</span></code></pre></td></tr></table></div></figure>


<p>既然能限定到一个类及其子类上，当然也能限定到一个类及其父类上。语法如下:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;?</span> <span class="n">supper</span> <span class="n">A</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>对泛型使用的总结</h2>

<ul>
<li><p><strong>类型参数不能是原始类型</strong>（int, char，double）,只能传入这些类型的封转类(Integer,Char,Double)。</p></li>
<li><p><strong>不能直接创建类型参数的实例。</strong></p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="kt">void</span> <span class="n">append</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">)</span> <span class="o">{</span>    <span class="n">E</span> <span class="n">elem</span> <span class="o">=</span> <span class="k">new</span> <span class="n">E</span><span class="o">();</span>  <span class="c1">// compile-time error    list.add(elem); </span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>但有通过反射可以实现。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="kt">void</span> <span class="n">append</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">,</span> <span class="n">Class</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="n">cls</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>    <span class="n">E</span> <span class="n">elem</span> <span class="o">=</span> <span class="n">cls</span><span class="o">.</span><span class="na">newInstance</span><span class="o">();</span>   <span class="c1">// OK    list.add(elem);}</span>
</span></code></pre></td></tr></table></div></figure>


<p>你可以这样调用它:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">ls</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span><span class='line'><span class="n">append</span><span class="o">(</span><span class="n">ls</span><span class="o">,</span> <span class="n">String</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>静态字段的类型不能为类型参数。</strong></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Box</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">T</span> <span class="n">object</span><span class="o">;</span> <span class="c1">// compile-time error</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>不能创建类型参数变量的数组。</strong></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;[]</span> <span class="n">arrayOfLists</span> <span class="o">=</span> <span class="k">new</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;[</span><span class="mi">2</span><span class="o">];</span>  <span class="c1">// compile-time error</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>不能重载一个方法，该方法的形参都来自于同一个类型参数对象。</strong></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Example</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">integers</span><span class="o">)</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Double</span><span class="o">&gt;</span> <span class="n">doubles</span><span class="o">)</span> <span class="o">{}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>参考文档：<a href="http://docs.oracle.com/javase/tutorial/java/generics/index.html">http://docs.oracle.com/javase/tutorial/java/generics/index.html</a></p>
]]></content>
  </entry>
  
</feed>
