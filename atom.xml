<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[黄博文的地盘]]></title>
  <link href="http://www.huangbowen.net/atom.xml" rel="self"/>
  <link href="http://www.huangbowen.net/"/>
  <updated>2014-09-05T19:59:35+10:00</updated>
  <id>http://www.huangbowen.net/</id>
  <author>
    <name><![CDATA[黄博文]]></name>
    <email><![CDATA[huangbowen521@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[翻译-使用Spring WebService生成SOAP Web Service]]></title>
    <link href="http://www.huangbowen.net/blog/2014/09/05/producing-web-service-using-spring/"/>
    <updated>2014-09-05T19:50:02+10:00</updated>
    <id>http://www.huangbowen.net/blog/2014/09/05/producing-web-service-using-spring</id>
    <content type="html"><![CDATA[<p>原文链接：<a href="http://spring.io/guides/gs/producing-web-service/">http://spring.io/guides/gs/producing-web-service/</a></p>

<h2>生成SOAP web service</h2>

<p>该指南将带领你使用Spring创建一个基于SOAP的web service的整个过程。</p>

<h3>指南内容</h3>

<p>你将创建一个服务，该服务通过一个基于WSDL的SOAP web service向外暴露欧洲国家的数据。</p>

<blockquote><p>　注意：为了简化该示例，你将使用硬编码方式嵌入英国，西班牙及波兰。</p></blockquote>

<h3>准备事项</h3>

<ul>
<li><p>15分钟</p></li>
<li><p>喜爱的编辑器或IDE</p></li>
<li><p>JDK1.6或更高版本</p></li>
<li><p>Gradle 1.11+或Maven 3.0+</p></li>
<li><p>你也可以直接通过该指南导入代码，或通过Spring工具集（Spring Tool Suite，简称STS)通过网页浏览代码，从而帮助你学习该章节内容。源码下载地址： <a href="https://github.com/spring-guides/gs-producing-web-service.git">https://github.com/spring-guides/gs-producing-web-service.git</a>。</p></li>
</ul>


<h3>如何完成该指南</h3>

<p>如同大多数的<a href="http://spring.io/guides">示例教程</a>一样，你可以从头开始并完成每个步骤，或者你也可以跳过已经熟悉的基础章节。无论怎样，最终你要得到可以工作的代码。</p>

<p>想<em>从头开始</em>，请移动到<a href="#scratch">使用Gradle构建</a>章节。</p>

<p>想<em>跳过基础部分</em>，请做以下事情：</p>

<ul>
<li><p><a href="https://github.com/spring-guides/gs-soap-service/archive/master.zip">下载</a>并解压该向导的源代码，或者使用<a href="http://spring.io/understanding/Git">Git</a>复制一份： <code>git clone https://github.com/spring-guides/gs-soap-service.git</code></p></li>
<li><p>切换到<code>gs-soap-service/initial</code></p></li>
<li><p>跳到<a href="#initial">添加Spring-WS依赖</a>章节。</p></li>
</ul>


<p>当完成后，你可以使用<code>gs-soap-service/complete</code>目录中的代码检查你的结果。</p>

<h3><a name="#scratch">使用Gradle构建</a></h3>

<p>首先你要设置一个基本的build脚本。当构建Spring应用程序时，你可以使用任何构建系统，但是这里只包括了使用<a href="https://maven.apache.org">Maven</a>和<a href="gradle.org">Gradle</a>的代码。如果你两者都不熟悉，请访问<a href="http://spring.io/guides/gs/gradle">使用Gradle构建Java项目</a>或<a href="http://spring.io/guides/gs/maven">使用Maven构建Java项目</a>。</p>

<h4>创建目录结构</h4>

<p>在你选择的存放项目的目录中，创建如下的子目录结构。例如，在*nix系统中使用<code>mkdir -p src/main/java/hello</code>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>└── src
</span><span class='line'>    └── main
</span><span class='line'>        └── java
</span><span class='line'>            └── hello
</span></code></pre></td></tr></table></div></figure>


<h4>创建Gradle 构建文件</h4>

<p>下面是一个<a href="https://github.com/spring-guides/gs-soap-service/blob/master/initial/build.gradle">初始的Gradle build文件</a>。</p>

<figure class='code'><figcaption><span>build.gradle</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">buildscript</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mavenLocal</span><span class="o">()</span>
</span><span class='line'>        <span class="n">mavenCentral</span><span class="o">()</span>
</span><span class='line'>        <span class="n">maven</span> <span class="o">{</span> <span class="n">url</span> <span class="s2">&quot;http://repo.spring.io/libs-release&quot;</span> <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">classpath</span><span class="o">(</span><span class="s2">&quot;org.springframework.boot:spring-boot-gradle-plugin:1.1.5.RELEASE&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;java&#39;</span>
</span><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;eclipse&#39;</span>
</span><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;idea&#39;</span>
</span><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;spring-boot&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">jar</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">baseName</span> <span class="o">=</span> <span class="s1">&#39;gs-producing-web-service&#39;</span>
</span><span class='line'>    <span class="n">version</span> <span class="o">=</span>  <span class="s1">&#39;0.1.0&#39;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mavenLocal</span><span class="o">()</span>
</span><span class='line'>    <span class="n">mavenCentral</span><span class="o">()</span>
</span><span class='line'>    <span class="n">maven</span> <span class="o">{</span> <span class="n">url</span> <span class="s2">&quot;http://repo.spring.io/libs-release&quot;</span> <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">compile</span><span class="o">(</span><span class="s2">&quot;org.springframework.boot:spring-boot-starter-web&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">task</span> <span class="nf">wrapper</span><span class="o">(</span><span class="nl">type:</span> <span class="n">Wrapper</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">gradleVersion</span> <span class="o">=</span> <span class="s1">&#39;1.11&#39;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-tools/spring-boot-gradle-plugin">Spring Boot gradle插件</a>提供了很多便利的特性：</p>

<ul>
<li><p>将classpath中的所有jar包构建单个可运行的jar包，从而更容易执行和传播服务。</p></li>
<li><p>搜索<code>public static void main（）</code>方法并标记为可运行的类。</p></li>
<li><p>提供了一个内置的依赖管理器，设置依赖版本以匹配<a href="https://github.com/spring-projects/spring-boot/blob/master/spring-boot-dependencies/pom.xml">Spring Boot依赖</a>。你可以覆盖为任何你希望的版本，但默认会使用Boot选择的版本。</p></li>
</ul>


<h3>使用Maven构建</h3>

<p>首先你需要设置一个基本的构建脚本。你可以使用任何构建系统来构建Spring应用程序，但这里包含了<a href="https://maven.apache.org/">Maven</a>的代码。如果你对Maven不熟，请访问<a href="http://spring.io/guides/gs/maven">使用Maven构建Java项目</a>。</p>

<h4>创建目录结构</h4>

<p>在你选择的存放项目的目录中，创建如下的子目录结构。例如，在*nix系统中使用<code>mkdir -p src/main/java/hello</code>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>└── src
</span><span class='line'>    └── main
</span><span class='line'>        └── java
</span><span class='line'>            └── hello
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>pom.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>gs-producting-web-service<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version&gt;</span>0.1.0<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;parent&gt;</span>
</span><span class='line'>        <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>        <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-parent<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>        <span class="nt">&lt;version&gt;</span>1.1.5.RELEASE<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/parent&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;dependencies&gt;</span>
</span><span class='line'>        <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>            <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-web<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/dependencies&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;properties&gt;</span>
</span><span class='line'>        <span class="c">&lt;!-- use UTF-8 for everything --&gt;</span>
</span><span class='line'>        <span class="nt">&lt;project.build.sourceEncoding&gt;</span>UTF-8<span class="nt">&lt;/project.build.sourceEncoding&gt;</span>
</span><span class='line'>        <span class="nt">&lt;project.reporting.outputEncoding&gt;</span>UTF-8<span class="nt">&lt;/project.reporting.outputEncoding&gt;</span>
</span><span class='line'>        <span class="nt">&lt;start-class&gt;</span>hello.Application<span class="nt">&lt;/start-class&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/properties&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;build&gt;</span>
</span><span class='line'>        <span class="nt">&lt;plugins&gt;</span>
</span><span class='line'>            <span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>                <span class="nt">&lt;artifactId&gt;</span>maven-compiler-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/plugin&gt;</span>
</span><span class='line'>            <span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>                <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>                <span class="nt">&lt;artifactId&gt;</span>spring-boot-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/plugin&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/plugins&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/build&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/project&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>注意：你可能注意到我们指定了<em>maven-complier-plugin</em>的版本。通常并<em>不推荐</em>这样做。这里主要是为了解决我们的CI系统默认运行在该插件的早期版本（java5之前）的一个问题。</p></blockquote>

<p><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-tools/spring-boot-maven-plugin">Spring Boot Maven插件</a>提供了很多便利的特性：</p>

<ul>
<li><p>将classpath中的所有jar包构建单个可运行的jar包，从而更容易执行和传播服务。</p></li>
<li><p>搜索<code>public static void main（）</code>方法并标记为可运行的类。</p></li>
<li><p>提供了一个内置的依赖管理器，设置依赖版本以匹配<a href="https://github.com/spring-projects/spring-boot/blob/master/spring-boot-dependencies/pom.xml">Spring Boot依赖</a>。你可以覆盖为任何你希望的版本，但默认会使用Boot选择的版本。</p></li>
</ul>


<h3>使用Spring工具集构建</h3>

<p>如果你拥有Spring工具集，只需简单的<a href="http://spring.io/guides/gs/sts/">直接导入该指南</a>。</p>

<h3><a name="#initial">添加Spring-ws依赖</a></h3>

<p>你创建的项目需要添加<code>spring-ws-core</code>和wsdl4j依赖到构建文件中。</p>

<p>maven代码:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-ws<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>wsdl4j<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>wsdl4j<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version&gt;</span>1.6.1<span class="nt">&lt;/version&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>gradle代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">compile</span><span class="o">(</span><span class="s2">&quot;org.springframework.boot:spring-boot-starter-ws&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="n">compile</span><span class="o">(</span><span class="s2">&quot;wsdl4j:wsdl4j:1.6.1&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="n">jaxb</span><span class="o">(</span><span class="s2">&quot;com.sun.xml.bind:jaxb-xjc:2.2.4-1&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="n">compile</span><span class="o">(</span><span class="n">files</span><span class="o">(</span><span class="n">genJaxb</span><span class="o">.</span><span class="na">classesDir</span><span class="o">).</span><span class="na">builtBy</span><span class="o">(</span><span class="n">genJaxb</span><span class="o">))</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>创建XML格式来定义领域对象</h3>

<p>该web service领域对象被定义在一个XML格式文件中（XSD），Spring-WS将自动导出为一个WSDL文件。</p>

<p>创建一个XSD文件，包含一个操作来返回一个国家的<em>名称</em>，<em>人口</em>，<em>首都</em>和<em>货币</em>。</p>

<figure class='code'><figcaption><span>src/main/resources/countries.xsd</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;xs:schema</span> <span class="na">xmlns:xs=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class="na">xmlns:tns=</span><span class="s">&quot;http://spring.io/guides/gs-producing-web-service&quot;</span>
</span><span class='line'>           <span class="na">targetNamespace=</span><span class="s">&quot;http://spring.io/guides/gs-producing-web-service&quot;</span> <span class="na">elementFormDefault=</span><span class="s">&quot;qualified&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;xs:element</span> <span class="na">name=</span><span class="s">&quot;getCountryRequest&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;xs:complexType&gt;</span>
</span><span class='line'>            <span class="nt">&lt;xs:sequence&gt;</span>
</span><span class='line'>                <span class="nt">&lt;xs:element</span> <span class="na">name=</span><span class="s">&quot;name&quot;</span> <span class="na">type=</span><span class="s">&quot;xs:string&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/xs:sequence&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/xs:complexType&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/xs:element&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;xs:element</span> <span class="na">name=</span><span class="s">&quot;getCountryResponse&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;xs:complexType&gt;</span>
</span><span class='line'>            <span class="nt">&lt;xs:sequence&gt;</span>
</span><span class='line'>                <span class="nt">&lt;xs:element</span> <span class="na">name=</span><span class="s">&quot;country&quot;</span> <span class="na">type=</span><span class="s">&quot;tns:country&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/xs:sequence&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/xs:complexType&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/xs:element&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;xs:complexType</span> <span class="na">name=</span><span class="s">&quot;country&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;xs:sequence&gt;</span>
</span><span class='line'>            <span class="nt">&lt;xs:element</span> <span class="na">name=</span><span class="s">&quot;name&quot;</span> <span class="na">type=</span><span class="s">&quot;xs:string&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;xs:element</span> <span class="na">name=</span><span class="s">&quot;population&quot;</span> <span class="na">type=</span><span class="s">&quot;xs:int&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;xs:element</span> <span class="na">name=</span><span class="s">&quot;capital&quot;</span> <span class="na">type=</span><span class="s">&quot;xs:string&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;xs:element</span> <span class="na">name=</span><span class="s">&quot;currency&quot;</span> <span class="na">type=</span><span class="s">&quot;tns:currency&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/xs:sequence&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/xs:complexType&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;xs:simpleType</span> <span class="na">name=</span><span class="s">&quot;currency&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;xs:restriction</span> <span class="na">base=</span><span class="s">&quot;xs:string&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;xs:enumeration</span> <span class="na">value=</span><span class="s">&quot;GBP&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;xs:enumeration</span> <span class="na">value=</span><span class="s">&quot;EUR&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;xs:enumeration</span> <span class="na">value=</span><span class="s">&quot;PLN&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/xs:restriction&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/xs:simpleType&gt;</span>
</span><span class='line'><span class="nt">&lt;/xs:schema&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>　基于XML格式创建领域类</h3>

<p>接下来的步骤是根据XSD文件来创建java类。正确的方式是使用maven或gradle插件在构建时间自动创建。</p>

<p>maven插件配置;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>org.codehaus.mojo<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>jaxb2-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version&gt;</span>1.6<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>    <span class="nt">&lt;executions&gt;</span>
</span><span class='line'>        <span class="nt">&lt;execution&gt;</span>
</span><span class='line'>            <span class="nt">&lt;id&gt;</span>xjc<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>            <span class="nt">&lt;goals&gt;</span>
</span><span class='line'>                <span class="nt">&lt;goal&gt;</span>xjc<span class="nt">&lt;/goal&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/goals&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/execution&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/executions&gt;</span>
</span><span class='line'>    <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>        <span class="nt">&lt;schemaDirectory&gt;</span>${project.basedir}/src/main/resources/<span class="nt">&lt;/schemaDirectory&gt;</span>
</span><span class='line'>        <span class="nt">&lt;outputDirectory&gt;</span>${project.basedir}/src/main/java<span class="nt">&lt;/outputDirectory&gt;</span>
</span><span class='line'>        <span class="nt">&lt;clearOutputDir&gt;</span>false<span class="nt">&lt;/clearOutputDir&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'><span class="nt">&lt;/plugin&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>生成的类放置在<code>target/generated-sources/jaxb</code>目录。</p>

<p>gradle插件配置如下，首先需要在构建文件中配置JAXB：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">configurations</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">jaxb</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">jar</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">baseName</span> <span class="o">=</span> <span class="s1">&#39;gs-producing-web-service&#39;</span>
</span><span class='line'>    <span class="n">version</span> <span class="o">=</span>  <span class="s1">&#39;0.1.0&#39;</span>
</span><span class='line'>    <span class="n">from</span> <span class="n">genJaxb</span><span class="o">.</span><span class="na">classesDir</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// tag::dependencies[]</span>
</span><span class='line'><span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">compile</span><span class="o">(</span><span class="s2">&quot;org.springframework.boot:spring-boot-starter-ws&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="n">compile</span><span class="o">(</span><span class="s2">&quot;wsdl4j:wsdl4j:1.6.1&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="n">jaxb</span><span class="o">(</span><span class="s2">&quot;com.sun.xml.bind:jaxb-xjc:2.2.4-1&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="n">compile</span><span class="o">(</span><span class="n">files</span><span class="o">(</span><span class="n">genJaxb</span><span class="o">.</span><span class="na">classesDir</span><span class="o">).</span><span class="na">builtBy</span><span class="o">(</span><span class="n">genJaxb</span><span class="o">))</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="c1">// end::dependencies[]</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>注意：上面的构建文件拥有tag及end注释。目的是为了能够在本指南中更容易抽取出来并做进一步解释。在你的构建文件中无需这些注释。</p></blockquote>

<p>接下来的步骤是添加任务<code>genJaxb</code>,该任务会生成java类：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">task</span> <span class="n">genJaxb</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">ext</span><span class="o">.</span><span class="na">sourcesDir</span> <span class="o">=</span> <span class="s2">&quot;${buildDir}/generated-sources/jaxb&quot;</span>
</span><span class='line'>    <span class="n">ext</span><span class="o">.</span><span class="na">classesDir</span> <span class="o">=</span> <span class="s2">&quot;${buildDir}/classes/jaxb&quot;</span>
</span><span class='line'>    <span class="n">ext</span><span class="o">.</span><span class="na">schema</span> <span class="o">=</span> <span class="s2">&quot;src/main/resources/countries.xsd&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">outputs</span><span class="o">.</span><span class="na">dir</span> <span class="n">classesDir</span>
</span><span class='line'>
</span><span class='line'>    <span class="nf">doLast</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">project</span><span class="o">.</span><span class="na">ant</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">taskdef</span> <span class="nl">name:</span> <span class="s2">&quot;xjc&quot;</span><span class="o">,</span> <span class="nl">classname:</span> <span class="s2">&quot;com.sun.tools.xjc.XJCTask&quot;</span><span class="o">,</span>
</span><span class='line'>                    <span class="nl">classpath:</span> <span class="n">configurations</span><span class="o">.</span><span class="na">jaxb</span><span class="o">.</span><span class="na">asPath</span>
</span><span class='line'>            <span class="n">mkdir</span><span class="o">(</span><span class="nl">dir:</span> <span class="n">sourcesDir</span><span class="o">)</span>
</span><span class='line'>            <span class="n">mkdir</span><span class="o">(</span><span class="nl">dir:</span> <span class="n">classesDir</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">xjc</span><span class="o">(</span><span class="nl">destdir:</span> <span class="n">sourcesDir</span><span class="o">,</span> <span class="nl">schema:</span> <span class="n">schema</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">arg</span><span class="o">(</span><span class="nl">value:</span> <span class="s2">&quot;-wsdl&quot;</span><span class="o">)</span>
</span><span class='line'>                <span class="n">produces</span><span class="o">(</span><span class="nl">dir:</span> <span class="n">sourcesDir</span><span class="o">,</span> <span class="nl">includes:</span> <span class="s2">&quot;**/*.java&quot;</span><span class="o">)</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">javac</span><span class="o">(</span><span class="nl">destdir:</span> <span class="n">classesDir</span><span class="o">,</span> <span class="nl">source:</span> <span class="mf">1.6</span><span class="o">,</span> <span class="nl">target:</span> <span class="mf">1.6</span><span class="o">,</span> <span class="nl">debug:</span> <span class="kc">true</span><span class="o">,</span>
</span><span class='line'>                    <span class="nl">debugLevel:</span> <span class="s2">&quot;lines,vars,source&quot;</span><span class="o">,</span>
</span><span class='line'>                    <span class="nl">classpath:</span> <span class="n">configurations</span><span class="o">.</span><span class="na">jaxb</span><span class="o">.</span><span class="na">asPath</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">src</span><span class="o">(</span><span class="nl">path:</span> <span class="n">sourcesDir</span><span class="o">)</span>
</span><span class='line'>                <span class="n">include</span><span class="o">(</span><span class="nl">name:</span> <span class="s2">&quot;**/*.java&quot;</span><span class="o">)</span>
</span><span class='line'>                <span class="n">include</span><span class="o">(</span><span class="nl">name:</span> <span class="s2">&quot;*.java&quot;</span><span class="o">)</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">copy</span><span class="o">(</span><span class="nl">todir:</span> <span class="n">classesDir</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">fileset</span><span class="o">(</span><span class="nl">dir:</span> <span class="n">sourcesDir</span><span class="o">,</span> <span class="nl">erroronmissingdir:</span> <span class="kc">false</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">exclude</span><span class="o">(</span><span class="nl">name:</span> <span class="s2">&quot;**/*.java&quot;</span><span class="o">)</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>由于gradle还没有jaxb插件，所以它调用了一个ant任务，代码看起来比maven稍显复杂。</p>

<p>在maven和gradle两个示例中，JAXB领域对象生成过程被包括在构建工具的生命周期中，所以无需额外步骤来运行。</p>

<h3>创建国家仓库</h3>

<p>为了给web service提供数据，需要创建一个国家仓库，在本指南中创建了一个硬编码的伪造的国家仓库实现。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">hello</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.annotation.PostConstruct</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">io.spring.guides.gs_producing_web_service.Country</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">io.spring.guides.gs_producing_web_service.Currency</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.stereotype.Component</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.util.Assert</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Component</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CountryRepository</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Country</span><span class="o">&gt;</span> <span class="n">countries</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Country</span><span class="o">&gt;();</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@PostConstruct</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">initData</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Country</span> <span class="n">spain</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Country</span><span class="o">();</span>
</span><span class='line'>        <span class="n">spain</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&quot;Spain&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">spain</span><span class="o">.</span><span class="na">setCapital</span><span class="o">(</span><span class="s">&quot;Madrid&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">spain</span><span class="o">.</span><span class="na">setCurrency</span><span class="o">(</span><span class="n">Currency</span><span class="o">.</span><span class="na">EUR</span><span class="o">);</span>
</span><span class='line'>        <span class="n">spain</span><span class="o">.</span><span class="na">setPopulation</span><span class="o">(</span><span class="mi">46704314</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">countries</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">spain</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Country</span> <span class="n">poland</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Country</span><span class="o">();</span>
</span><span class='line'>        <span class="n">poland</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&quot;Poland&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">poland</span><span class="o">.</span><span class="na">setCapital</span><span class="o">(</span><span class="s">&quot;Warsaw&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">poland</span><span class="o">.</span><span class="na">setCurrency</span><span class="o">(</span><span class="n">Currency</span><span class="o">.</span><span class="na">PLN</span><span class="o">);</span>
</span><span class='line'>        <span class="n">poland</span><span class="o">.</span><span class="na">setPopulation</span><span class="o">(</span><span class="mi">38186860</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">countries</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">poland</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Country</span> <span class="n">uk</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Country</span><span class="o">();</span>
</span><span class='line'>        <span class="n">uk</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&quot;United Kingdom&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">uk</span><span class="o">.</span><span class="na">setCapital</span><span class="o">(</span><span class="s">&quot;London&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">uk</span><span class="o">.</span><span class="na">setCurrency</span><span class="o">(</span><span class="n">Currency</span><span class="o">.</span><span class="na">GBP</span><span class="o">);</span>
</span><span class='line'>        <span class="n">uk</span><span class="o">.</span><span class="na">setPopulation</span><span class="o">(</span><span class="mi">63705000</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">countries</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">uk</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Country</span> <span class="nf">findCountry</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Assert</span><span class="o">.</span><span class="na">notNull</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Country</span> <span class="n">result</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">Country</span> <span class="n">country</span> <span class="o">:</span> <span class="n">countries</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">name</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">country</span><span class="o">.</span><span class="na">getName</span><span class="o">()))</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">result</span> <span class="o">=</span> <span class="n">country</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>创建国家服务终端</h3>

<p>为了创建一个service endpoint，x需要一个pojo对象，以及一些Spring WS注解来处理SOAP请求：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">hello</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.ws.server.endpoint.annotation.Endpoint</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.ws.server.endpoint.annotation.PayloadRoot</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.ws.server.endpoint.annotation.RequestPayload</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.ws.server.endpoint.annotation.ResponsePayload</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">io.spring.guides.gs_producing_web_service.GetCountryRequest</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">io.spring.guides.gs_producing_web_service.GetCountryResponse</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Endpoint</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CountryEndpoint</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">NAMESPACE_URI</span> <span class="o">=</span> <span class="s">&quot;http://spring.io/guides/gs-producing-web-service&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">CountryRepository</span> <span class="n">countryRepository</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Autowired</span>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">CountryEndpoint</span><span class="o">(</span><span class="n">CountryRepository</span> <span class="n">countryRepository</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">countryRepository</span> <span class="o">=</span> <span class="n">countryRepository</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@PayloadRoot</span><span class="o">(</span><span class="n">namespace</span> <span class="o">=</span> <span class="n">NAMESPACE_URI</span><span class="o">,</span> <span class="n">localPart</span> <span class="o">=</span> <span class="s">&quot;getCountryRequest&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="nd">@ResponsePayload</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">GetCountryResponse</span> <span class="nf">getCountry</span><span class="o">(</span><span class="nd">@RequestPayload</span> <span class="n">GetCountryRequest</span> <span class="n">request</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">GetCountryResponse</span> <span class="n">response</span> <span class="o">=</span> <span class="k">new</span> <span class="n">GetCountryResponse</span><span class="o">();</span>
</span><span class='line'>        <span class="n">response</span><span class="o">.</span><span class="na">setCountry</span><span class="o">(</span><span class="n">countryRepository</span><span class="o">.</span><span class="na">findCountry</span><span class="o">(</span><span class="n">request</span><span class="o">.</span><span class="na">getName</span><span class="o">()));</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">response</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>@Endpoint</code>向Spring WS注册了该类为一个处理来临的SOAP消息的潜在对象。</p>

<p><code>@PayloadRoot</code> 被Spring WS用来根据消息的<em>命名空间</em>及<em>localPart</em>来选择处理该请求的方法。</p>

<p><code>@RequestPayload</code> 指明来临的消息将被映射到该方法的request参数。</p>

<p><code>@ResponsePayload</code>注解将使得Spring WS将返回值与响应负载映射起来。</p>

<blockquote><p>注意：在以上代码中，如果你没有运行任务来根据WSDL生成领域对象，那么在你的IDE中io.spring.guides类将会报告编译时错误。</p></blockquote>

<h3>配置web service bean</h3>

<p>使用Spring WS相关的bean配置选项创建一个新的类：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">hello</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.boot.context.embedded.ServletRegistrationBean</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.context.ApplicationContext</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.core.io.ClassPathResource</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.ws.config.annotation.EnableWs</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.ws.config.annotation.WsConfigurerAdapter</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.ws.transport.http.MessageDispatcherServlet</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.ws.wsdl.wsdl11.DefaultWsdl11Definition</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.xml.xsd.SimpleXsdSchema</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.xml.xsd.XsdSchema</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@EnableWs</span>
</span><span class='line'><span class="nd">@Configuration</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">WebServiceConfig</span> <span class="kd">extends</span> <span class="n">WsConfigurerAdapter</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Bean</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">ServletRegistrationBean</span> <span class="nf">dispatcherServlet</span><span class="o">(</span><span class="n">ApplicationContext</span> <span class="n">applicationContext</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">MessageDispatcherServlet</span> <span class="n">servlet</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MessageDispatcherServlet</span><span class="o">();</span>
</span><span class='line'>        <span class="n">servlet</span><span class="o">.</span><span class="na">setApplicationContext</span><span class="o">(</span><span class="n">applicationContext</span><span class="o">);</span>
</span><span class='line'>        <span class="n">servlet</span><span class="o">.</span><span class="na">setTransformWsdlLocations</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">ServletRegistrationBean</span><span class="o">(</span><span class="n">servlet</span><span class="o">,</span> <span class="s">&quot;/ws/*&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Bean</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;countries&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">DefaultWsdl11Definition</span> <span class="nf">defaultWsdl11Definition</span><span class="o">(</span><span class="n">XsdSchema</span> <span class="n">countriesSchema</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">DefaultWsdl11Definition</span> <span class="n">wsdl11Definition</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DefaultWsdl11Definition</span><span class="o">();</span>
</span><span class='line'>        <span class="n">wsdl11Definition</span><span class="o">.</span><span class="na">setPortTypeName</span><span class="o">(</span><span class="s">&quot;CountriesPort&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">wsdl11Definition</span><span class="o">.</span><span class="na">setLocationUri</span><span class="o">(</span><span class="s">&quot;/ws&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">wsdl11Definition</span><span class="o">.</span><span class="na">setTargetNamespace</span><span class="o">(</span><span class="s">&quot;http://spring.io/guides/gs-producing-web-service&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">wsdl11Definition</span><span class="o">.</span><span class="na">setSchema</span><span class="o">(</span><span class="n">countriesSchema</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">wsdl11Definition</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Bean</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">XsdSchema</span> <span class="nf">countriesSchema</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">SimpleXsdSchema</span><span class="o">(</span><span class="k">new</span> <span class="n">ClassPathResource</span><span class="o">(</span><span class="s">&quot;countries.xsd&quot;</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>这里Spring WS使用了不同的servlet类型来处理SOAP消息：<code>MessageDispatcherServlet</code>。注入及设置<code>MessageDispatcherServlet</code>给<code>ApplicationContext</code>是非常重要的。如果不这样做，Spring WS无法自动检测到Spring bean。</p></li>
<li><p>通过给<code>dispatcherServlet</code> bean命名，<a href="http://docs.spring.io/spring-boot/docs/1.1.5.RELEASE/reference/htmlsingle/#howto-switch-off-the-spring-mvc-dispatcherservlet">替代</a>了Spring Boot中默认的<code>DispatcherServlet bean</code>。</p></li>
<li><p><code>DefaultMethodEndpointAdapter</code>配置了注解驱动的Spring WS编程模型。这使得使用前面提过的诸如<code>@Endpoint</code>等各种各样的注解成为可能。</p></li>
<li><p><code>DefaultWsdl11Defination</code>使用<code>XsdSchema</code>暴露了一个标准的WSDL 1.1。</p></li>
</ul>


<p>请注意你需要为<code>MessageDispatcherServlet</code>及<code>DefaultWsdl11Definition</code>制定bean名称，这是非常重要的。Bean名称决定了生成的WSDL文件在哪个web service是可用的。在本例中，WSDL可通过<code>http://&lt;host&gt;:&lt;port&gt;/ws/countries.wsdl</code>来访问。</p>

<p>该配置也使用了WSDL位置servlet转化<code>servlet.setTransformWsdlLocations(true)</code>。如果你访问<a href="http://localhost:8080/ws/countries.wsdl">http://localhost:8080/ws/countries.wsdl</a>，<code>soap：address</code>将拥有正确的值。如果你使用本机的公共IP来访问该WSDL，你将看到的是IP。</p>

<h3>创建该程序的可执行文件</h3>

<p>尽管我们可以将该程序打包成一个传统的<a href="http://spring.io/understanding/WAR">war包</a>并部署到一个外部的应用程序服务器中，但是最简单的方式还是下面所演示的，创建一个能独立运行的应用程序。你可以通过老但好用的java <code>main()</code>方法，将所有文件打包到单个可执行的jar包中。同时，可以借助于Spring的支持内置<a href="http://spring.io/understanding/Tomcat">Tomcat</a> servlet容器作为HTTP运行时，从而无需部署到外部的实例中。</p>

<figure class='code'><figcaption><span>src/main/java/hello/Application.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">hello</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.boot.SpringApplication</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.ComponentScan</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@ComponentScan</span>
</span><span class='line'><span class="nd">@EnableAutoConfiguration</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Application</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">Application</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>main()</code>方法使用了<code>SpringApplication</code>辅助方法，将<code>Application.class</code>作为参数传递给其自身的<code>run（）</code>方法。这告诉Spring读取<code>Application</code>中的注解元数据，并将其作为<a href="http://spring.io/understanding/application-context">Spring 应用程序上下文</a>的组件。</p>

<p><code>@ComponentScan</code>注解告诉Spring递归搜索<code>hello</code>包及其子包中找到被直接或者间接使用了Spring的<code>@Component</code>注解的类。该指令确保了Spring发现并注册<code>CountryRepository</code>及<code>CountriesEndpoint</code>，因为他们被标记为<code>@Component</code>及<code>@Endpoint</code>，这是一种<code>@Component</code>注解。</p>

<p><code>@EnableAutoConfiguration</code>注解会基于classpath内容切换到默认的合理的行为。例如，由于应用程序依赖Tomcat的内置版本（tomcat-embed-core.jar），Spring会替你设置并配置一个默认的合理的Tomcat服务器。并且该程序还依赖Spring MVC（spring-webmvc.jar），Spring会配置并注册以恶搞Spring MVC <code>DispatcherServlet</code>，根本无需<code>web.xml</code>文件！自动配置是强大的，弹性的机制。请查看<a href="http://docs.spring.io/spring-boot/docs/1.1.5.RELEASE/api/org/springframework/boot/autoconfigure/EnableAutoConfiguration.html">API文档</a>获取更多细节。</p>

<h4>构建可执行的jar包</h4>

<p>你可以创建一个包含所有必须的依赖，类，及资源的可执行的JAR文件。这很方便传输，版本管理以及独立于部署生命周期来部署服务，跨不同的环境，诸如此类。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>./gradlew build
</span></code></pre></td></tr></table></div></figure>


<p>然后你可以运行WAR文件：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>java -jar build/libs/gs-soap-service-0.1.0.jar
</span></code></pre></td></tr></table></div></figure>


<p>如果你使用的是maven，你可以使用<code>mvn spring-boot:run</code>来运行程序，或者你可以使用<code>mvn clean package</code>构建JAR文件，并使用下面命令来运行：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>java -jar target/gs-soap-service-0.1.0.jar
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>注意：上面的产出物是以恶搞可运行JAR文件。你也可以<a href="http://spring.io/guides/gs/convert-jar-to-war/">创建一个经典的WAR文件</a>。</p></blockquote>

<h3>　运行服务</h3>

<p>如果使用的是Gradle，可以使用以下命令来运行服务：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>./gradlew clean build <span class="o">&amp;&amp;</span> java -jar build/libs/gs-soap-service-0.1.0.jar
</span></code></pre></td></tr></table></div></figure>


<p>注意：如果你使用的是Maven，可以使用以下命令来运行服务：<code>mvn clean package &amp;&amp; java -jar target/gs-soap-service-0.1.0.jar</code>。</p>

<p>你也可以通过Gradle直接运行该程序：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>./gradlew bootRun
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>注意：使用mvn的话，命令是<code>mvn spring-boot:run</code>。</p></blockquote>

<p>可以看到日志输出。该服务应该在几秒钟内启动并运行起来。</p>

<h3>　测试该程序</h3>

<p>现在该程序正在运行，你可以测试它。创建一个名为<code>request.xml</code>文件，包含以下的SOAP请求；</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;soapenv:Envelope</span> <span class="na">xmlns:soapenv=</span><span class="s">&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;</span>
</span><span class='line'>                  <span class="na">xmlns:gs=</span><span class="s">&quot;http://spring.io/guides/gs-producing-web-service&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>   <span class="nt">&lt;soapenv:Header/&gt;</span>
</span><span class='line'>   <span class="nt">&lt;soapenv:Body&gt;</span>
</span><span class='line'>      <span class="nt">&lt;gs:getCountryRequest&gt;</span>
</span><span class='line'>         <span class="nt">&lt;gs:name&gt;</span>Spain<span class="nt">&lt;/gs:name&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/gs:getCountryRequest&gt;</span>
</span><span class='line'>   <span class="nt">&lt;/soapenv:Body&gt;</span>
</span><span class='line'><span class="nt">&lt;/soapenv:Envelope&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>有很多方式来测试该SOAP接口。你可以使用<a href="http://www.soapui.org/">SoapUI</a>等工具，或者如果你使用的是*nix/Mac系统的话，直接可以使用命令行，如下所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl --header <span class="s2">&quot;content-type: text/xml&quot;</span> -d @request.xml http://localhost:8080/ws
</span></code></pre></td></tr></table></div></figure>


<p>你将看到如下的响应结果：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;SOAP-ENV:Envelope</span> <span class="na">xmlns:SOAP-ENV=</span><span class="s">&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;SOAP-ENV:Header/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;SOAP-ENV:Body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ns2:getCountryResponse</span> <span class="na">xmlns:ns2=</span><span class="s">&quot;http://spring.io/guides/gs-producing-web-service&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;ns2:country&gt;</span>
</span><span class='line'>        <span class="nt">&lt;ns2:name&gt;</span>Spain<span class="nt">&lt;/ns2:name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;ns2:population&gt;</span>46704314<span class="nt">&lt;/ns2:population&gt;</span>
</span><span class='line'>        <span class="nt">&lt;ns2:capital&gt;</span>Madrid<span class="nt">&lt;/ns2:capital&gt;</span>
</span><span class='line'>        <span class="nt">&lt;ns2:currency&gt;</span>EUR<span class="nt">&lt;/ns2:currency&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/ns2:country&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/ns2:getCountryResponse&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/SOAP-ENV:Body&gt;</span>
</span><span class='line'><span class="nt">&lt;/SOAP-ENV:Envelope&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>注意：输出可能是一个紧凑的XML文档，而不是上面显示的格式友好的文档。如果系统中安装了xmllib2，可以使用<code>curl &lt;args above&gt; &gt; output.xml | xmllint --format output.xml</code>来查看格式友好的结果。</p></blockquote>

<h3>　总结</h3>

<p>恭喜你！你使用Spring Web Service开发完成了一个基于SOAP的服务。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Gradle中使用jaxb的xjc插件]]></title>
    <link href="http://www.huangbowen.net/blog/2014/08/30/use-jaxb-in-gradle/"/>
    <updated>2014-08-30T22:25:45+10:00</updated>
    <id>http://www.huangbowen.net/blog/2014/08/30/use-jaxb-in-gradle</id>
    <content type="html"><![CDATA[<p>jaxb，全称为Java Architecture for Xml Binding,是一种将java对象与xml建立起映射的技术。其主要提供两个功能，一是将java对象映射为xml，二是将xml映射为java对象。JAXB有1.0版和2.0版。2.0版对应的JSR（Java specification request, java规格要求）是JSR 222。jaxb中的xjc工具能够将XML Schema转换为对应的java类。支持的XML类型包括XML DTD，XSD以及WSDL。而schemagen工具则可以将具有相应annotation标记的java类转换为XML结构。</p>

<!-- more -->


<p>ant脚本有xjc插件来实现对xml schema文件转换为java类的工作。而由于ant任务是gradle中的一等公民，所以我们可以直接在gradle脚本中使用ant的xjc插件来实现对xml schema和java类的映射。以下代码演示了如何将xsd格式和wsdl格式的xml转换为具体的java类。</p>

<figure class='code'><figcaption><span>build.gradle</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">configurations</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">jaxb</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">jaxb</span> <span class="s1">&#39;com.sun.xml.bind:jaxb-impl:2.2.7&#39;</span>
</span><span class='line'>    <span class="n">jaxb</span> <span class="s1">&#39;com.sun.xml.bind:jaxb-xjc:2.2.7&#39;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">ext</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">generatedSourceDir</span> <span class="o">=</span> <span class="s1">&#39;src/main/generated&#39;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">task</span> <span class="n">jaxb</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">doLast</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">file</span><span class="o">(</span><span class="n">generatedSourceDir</span><span class="o">).</span><span class="na">mkdirs</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">ant</span><span class="o">.</span><span class="na">taskdef</span><span class="o">(</span><span class="nl">name:</span> <span class="s1">&#39;xjc&#39;</span><span class="o">,</span> <span class="nl">classname:</span> <span class="s1">&#39;com.sun.tools.xjc.XJCTask&#39;</span><span class="o">,</span> <span class="nl">classpath:</span> <span class="n">configurations</span><span class="o">.</span><span class="na">jaxb</span><span class="o">.</span><span class="na">asPath</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">ant</span><span class="o">.</span><span class="na">xjc</span><span class="o">(</span><span class="nl">destdir:</span> <span class="n">generatedSourceDir</span><span class="o">,</span>
</span><span class='line'>                <span class="nl">package:</span> <span class="s1">&#39;jaxb.ws.ship&#39;</span><span class="o">,</span>
</span><span class='line'>                <span class="nl">schema:</span> <span class="s1">&#39;schema/shiporder.xsd&#39;</span>
</span><span class='line'>        <span class="o">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">ant</span><span class="o">.</span><span class="na">xjc</span><span class="o">(</span><span class="nl">destdir:</span> <span class="n">generatedSourceDir</span><span class="o">,</span>
</span><span class='line'>                <span class="nl">package:</span> <span class="s1">&#39;jaxb.ws.hello&#39;</span><span class="o">,</span>
</span><span class='line'>                <span class="nl">schema:</span> <span class="s1">&#39;schema/weather.wsdl&#39;</span>
</span><span class='line'>        <span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">arg</span><span class="o">(</span><span class="nl">value:</span> <span class="s1">&#39;-wsdl&#39;</span><span class="o">)</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">clean</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">ant</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="nl">dir:</span> <span class="n">generatedSourceDir</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里实现了将xsd和wsdl格式的xml文档转换为具体的java类。注意一点是如果wsdl中的schema过于简单，可能不会有具体的类生成。另外附上使用的示例文件。</p>

<p>shiporder.xsd文件如下：</p>

<figure class='code'><figcaption><span>shiporder.xsd</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
</span><span class='line'><span class="nt">&lt;xs:schema</span> <span class="na">xmlns:xs=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;xs:element</span> <span class="na">name=</span><span class="s">&quot;shiporder&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;xs:complexType&gt;</span>
</span><span class='line'>            <span class="nt">&lt;xs:sequence&gt;</span>
</span><span class='line'>                <span class="nt">&lt;xs:element</span> <span class="na">name=</span><span class="s">&quot;orderperson&quot;</span> <span class="na">type=</span><span class="s">&quot;xs:string&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>                <span class="nt">&lt;xs:element</span> <span class="na">name=</span><span class="s">&quot;shipto&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;xs:complexType&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;xs:sequence&gt;</span>
</span><span class='line'>                            <span class="nt">&lt;xs:element</span> <span class="na">name=</span><span class="s">&quot;name&quot;</span> <span class="na">type=</span><span class="s">&quot;xs:string&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>                            <span class="nt">&lt;xs:element</span> <span class="na">name=</span><span class="s">&quot;address&quot;</span> <span class="na">type=</span><span class="s">&quot;xs:string&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>                            <span class="nt">&lt;xs:element</span> <span class="na">name=</span><span class="s">&quot;city&quot;</span> <span class="na">type=</span><span class="s">&quot;xs:string&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>                            <span class="nt">&lt;xs:element</span> <span class="na">name=</span><span class="s">&quot;country&quot;</span> <span class="na">type=</span><span class="s">&quot;xs:string&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;/xs:sequence&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;/xs:complexType&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/xs:element&gt;</span>
</span><span class='line'>                <span class="nt">&lt;xs:element</span> <span class="na">name=</span><span class="s">&quot;item&quot;</span> <span class="na">maxOccurs=</span><span class="s">&quot;unbounded&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;xs:complexType&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;xs:sequence&gt;</span>
</span><span class='line'>                            <span class="nt">&lt;xs:element</span> <span class="na">name=</span><span class="s">&quot;title&quot;</span> <span class="na">type=</span><span class="s">&quot;xs:string&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>                            <span class="nt">&lt;xs:element</span> <span class="na">name=</span><span class="s">&quot;note&quot;</span> <span class="na">type=</span><span class="s">&quot;xs:string&quot;</span> <span class="na">minOccurs=</span><span class="s">&quot;0&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>                            <span class="nt">&lt;xs:element</span> <span class="na">name=</span><span class="s">&quot;quantity&quot;</span> <span class="na">type=</span><span class="s">&quot;xs:positiveInteger&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>                            <span class="nt">&lt;xs:element</span> <span class="na">name=</span><span class="s">&quot;price&quot;</span> <span class="na">type=</span><span class="s">&quot;xs:decimal&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;/xs:sequence&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;/xs:complexType&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/xs:element&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/xs:sequence&gt;</span>
</span><span class='line'>            <span class="nt">&lt;xs:attribute</span> <span class="na">name=</span><span class="s">&quot;orderid&quot;</span> <span class="na">type=</span><span class="s">&quot;xs:string&quot;</span> <span class="na">use=</span><span class="s">&quot;required&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/xs:complexType&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/xs:element&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/xs:schema&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>weather.wsdl文件内容如下：</p>

<figure class='code'><figcaption><span>weather.wsdl</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;wsdl:definitions</span> <span class="na">xmlns:tm=</span><span class="s">&quot;http://microsoft.com/wsdl/mime/textMatching/&quot;</span> <span class="na">xmlns:soapenc=</span><span class="s">&quot;http://schemas.xmlsoap.org/soap/encoding/&quot;</span> <span class="na">xmlns:mime=</span><span class="s">&quot;http://schemas.xmlsoap.org/wsdl/mime/&quot;</span> <span class="na">xmlns:tns=</span><span class="s">&quot;http://www.webserviceX.NET&quot;</span> <span class="na">xmlns:soap=</span><span class="s">&quot;http://schemas.xmlsoap.org/wsdl/soap/&quot;</span> <span class="na">xmlns:s=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class="na">xmlns:soap12=</span><span class="s">&quot;http://schemas.xmlsoap.org/wsdl/soap12/&quot;</span> <span class="na">xmlns:http=</span><span class="s">&quot;http://schemas.xmlsoap.org/wsdl/http/&quot;</span> <span class="na">targetNamespace=</span><span class="s">&quot;http://www.webserviceX.NET&quot;</span> <span class="na">xmlns:wsdl=</span><span class="s">&quot;http://schemas.xmlsoap.org/wsdl/&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;wsdl:types&gt;</span>
</span><span class='line'>        <span class="nt">&lt;s:schema</span> <span class="na">elementFormDefault=</span><span class="s">&quot;qualified&quot;</span> <span class="na">targetNamespace=</span><span class="s">&quot;http://www.webserviceX.NET&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;s:element</span> <span class="na">name=</span><span class="s">&quot;GetWeather&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;s:complexType&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;s:sequence&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;s:element</span> <span class="na">minOccurs=</span><span class="s">&quot;0&quot;</span> <span class="na">maxOccurs=</span><span class="s">&quot;1&quot;</span> <span class="na">name=</span><span class="s">&quot;CityName&quot;</span> <span class="na">type=</span><span class="s">&quot;s:string&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;s:element</span> <span class="na">minOccurs=</span><span class="s">&quot;0&quot;</span> <span class="na">maxOccurs=</span><span class="s">&quot;1&quot;</span> <span class="na">name=</span><span class="s">&quot;CountryName&quot;</span> <span class="na">type=</span><span class="s">&quot;s:string&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;/s:sequence&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/s:complexType&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/s:element&gt;</span>
</span><span class='line'>            <span class="nt">&lt;s:element</span> <span class="na">name=</span><span class="s">&quot;GetWeatherResponse&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;s:complexType&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;s:sequence&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;s:element</span> <span class="na">minOccurs=</span><span class="s">&quot;0&quot;</span> <span class="na">maxOccurs=</span><span class="s">&quot;1&quot;</span> <span class="na">name=</span><span class="s">&quot;GetWeatherResult&quot;</span> <span class="na">type=</span><span class="s">&quot;s:string&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;/s:sequence&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/s:complexType&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/s:element&gt;</span>
</span><span class='line'>            <span class="nt">&lt;s:element</span> <span class="na">name=</span><span class="s">&quot;GetCitiesByCountry&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;s:complexType&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;s:sequence&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;s:element</span> <span class="na">minOccurs=</span><span class="s">&quot;0&quot;</span> <span class="na">maxOccurs=</span><span class="s">&quot;1&quot;</span> <span class="na">name=</span><span class="s">&quot;CountryName&quot;</span> <span class="na">type=</span><span class="s">&quot;s:string&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;/s:sequence&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/s:complexType&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/s:element&gt;</span>
</span><span class='line'>            <span class="nt">&lt;s:element</span> <span class="na">name=</span><span class="s">&quot;GetCitiesByCountryResponse&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;s:complexType&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;s:sequence&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;s:element</span> <span class="na">minOccurs=</span><span class="s">&quot;0&quot;</span> <span class="na">maxOccurs=</span><span class="s">&quot;1&quot;</span> <span class="na">name=</span><span class="s">&quot;GetCitiesByCountryResult&quot;</span> <span class="na">type=</span><span class="s">&quot;s:string&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;/s:sequence&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/s:complexType&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/s:element&gt;</span>
</span><span class='line'>            <span class="nt">&lt;s:element</span> <span class="na">name=</span><span class="s">&quot;string&quot;</span> <span class="na">nillable=</span><span class="s">&quot;true&quot;</span> <span class="na">type=</span><span class="s">&quot;s:string&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/s:schema&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/wsdl:types&gt;</span>
</span><span class='line'>    <span class="nt">&lt;wsdl:message</span> <span class="na">name=</span><span class="s">&quot;GetWeatherSoapIn&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;wsdl:part</span> <span class="na">name=</span><span class="s">&quot;parameters&quot;</span> <span class="na">element=</span><span class="s">&quot;tns:GetWeather&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/wsdl:message&gt;</span>
</span><span class='line'>    <span class="nt">&lt;wsdl:message</span> <span class="na">name=</span><span class="s">&quot;GetWeatherSoapOut&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;wsdl:part</span> <span class="na">name=</span><span class="s">&quot;parameters&quot;</span> <span class="na">element=</span><span class="s">&quot;tns:GetWeatherResponse&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/wsdl:message&gt;</span>
</span><span class='line'>    <span class="nt">&lt;wsdl:message</span> <span class="na">name=</span><span class="s">&quot;GetCitiesByCountrySoapIn&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;wsdl:part</span> <span class="na">name=</span><span class="s">&quot;parameters&quot;</span> <span class="na">element=</span><span class="s">&quot;tns:GetCitiesByCountry&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/wsdl:message&gt;</span>
</span><span class='line'>    <span class="nt">&lt;wsdl:message</span> <span class="na">name=</span><span class="s">&quot;GetCitiesByCountrySoapOut&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;wsdl:part</span> <span class="na">name=</span><span class="s">&quot;parameters&quot;</span> <span class="na">element=</span><span class="s">&quot;tns:GetCitiesByCountryResponse&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/wsdl:message&gt;</span>
</span><span class='line'>    <span class="nt">&lt;wsdl:message</span> <span class="na">name=</span><span class="s">&quot;GetWeatherHttpGetIn&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;wsdl:part</span> <span class="na">name=</span><span class="s">&quot;CityName&quot;</span> <span class="na">type=</span><span class="s">&quot;s:string&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;wsdl:part</span> <span class="na">name=</span><span class="s">&quot;CountryName&quot;</span> <span class="na">type=</span><span class="s">&quot;s:string&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/wsdl:message&gt;</span>
</span><span class='line'>    <span class="nt">&lt;wsdl:message</span> <span class="na">name=</span><span class="s">&quot;GetWeatherHttpGetOut&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;wsdl:part</span> <span class="na">name=</span><span class="s">&quot;Body&quot;</span> <span class="na">element=</span><span class="s">&quot;tns:string&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/wsdl:message&gt;</span>
</span><span class='line'>    <span class="nt">&lt;wsdl:message</span> <span class="na">name=</span><span class="s">&quot;GetCitiesByCountryHttpGetIn&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;wsdl:part</span> <span class="na">name=</span><span class="s">&quot;CountryName&quot;</span> <span class="na">type=</span><span class="s">&quot;s:string&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/wsdl:message&gt;</span>
</span><span class='line'>    <span class="nt">&lt;wsdl:message</span> <span class="na">name=</span><span class="s">&quot;GetCitiesByCountryHttpGetOut&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;wsdl:part</span> <span class="na">name=</span><span class="s">&quot;Body&quot;</span> <span class="na">element=</span><span class="s">&quot;tns:string&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/wsdl:message&gt;</span>
</span><span class='line'>    <span class="nt">&lt;wsdl:message</span> <span class="na">name=</span><span class="s">&quot;GetWeatherHttpPostIn&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;wsdl:part</span> <span class="na">name=</span><span class="s">&quot;CityName&quot;</span> <span class="na">type=</span><span class="s">&quot;s:string&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;wsdl:part</span> <span class="na">name=</span><span class="s">&quot;CountryName&quot;</span> <span class="na">type=</span><span class="s">&quot;s:string&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/wsdl:message&gt;</span>
</span><span class='line'>    <span class="nt">&lt;wsdl:message</span> <span class="na">name=</span><span class="s">&quot;GetWeatherHttpPostOut&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;wsdl:part</span> <span class="na">name=</span><span class="s">&quot;Body&quot;</span> <span class="na">element=</span><span class="s">&quot;tns:string&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/wsdl:message&gt;</span>
</span><span class='line'>    <span class="nt">&lt;wsdl:message</span> <span class="na">name=</span><span class="s">&quot;GetCitiesByCountryHttpPostIn&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;wsdl:part</span> <span class="na">name=</span><span class="s">&quot;CountryName&quot;</span> <span class="na">type=</span><span class="s">&quot;s:string&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/wsdl:message&gt;</span>
</span><span class='line'>    <span class="nt">&lt;wsdl:message</span> <span class="na">name=</span><span class="s">&quot;GetCitiesByCountryHttpPostOut&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;wsdl:part</span> <span class="na">name=</span><span class="s">&quot;Body&quot;</span> <span class="na">element=</span><span class="s">&quot;tns:string&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/wsdl:message&gt;</span>
</span><span class='line'>    <span class="nt">&lt;wsdl:portType</span> <span class="na">name=</span><span class="s">&quot;GlobalWeatherSoap&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;wsdl:operation</span> <span class="na">name=</span><span class="s">&quot;GetWeather&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;wsdl:documentation</span> <span class="na">xmlns:wsdl=</span><span class="s">&quot;http://schemas.xmlsoap.org/wsdl/&quot;</span><span class="nt">&gt;</span>Get weather report for all major cities around the world.<span class="nt">&lt;/wsdl:documentation&gt;</span>
</span><span class='line'>            <span class="nt">&lt;wsdl:input</span> <span class="na">message=</span><span class="s">&quot;tns:GetWeatherSoapIn&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;wsdl:output</span> <span class="na">message=</span><span class="s">&quot;tns:GetWeatherSoapOut&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/wsdl:operation&gt;</span>
</span><span class='line'>        <span class="nt">&lt;wsdl:operation</span> <span class="na">name=</span><span class="s">&quot;GetCitiesByCountry&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;wsdl:documentation</span> <span class="na">xmlns:wsdl=</span><span class="s">&quot;http://schemas.xmlsoap.org/wsdl/&quot;</span><span class="nt">&gt;</span>Get all major cities by country name(full / part).<span class="nt">&lt;/wsdl:documentation&gt;</span>
</span><span class='line'>            <span class="nt">&lt;wsdl:input</span> <span class="na">message=</span><span class="s">&quot;tns:GetCitiesByCountrySoapIn&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;wsdl:output</span> <span class="na">message=</span><span class="s">&quot;tns:GetCitiesByCountrySoapOut&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/wsdl:operation&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/wsdl:portType&gt;</span>
</span><span class='line'>    <span class="nt">&lt;wsdl:portType</span> <span class="na">name=</span><span class="s">&quot;GlobalWeatherHttpGet&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;wsdl:operation</span> <span class="na">name=</span><span class="s">&quot;GetWeather&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;wsdl:documentation</span> <span class="na">xmlns:wsdl=</span><span class="s">&quot;http://schemas.xmlsoap.org/wsdl/&quot;</span><span class="nt">&gt;</span>Get weather report for all major cities around the world.<span class="nt">&lt;/wsdl:documentation&gt;</span>
</span><span class='line'>            <span class="nt">&lt;wsdl:input</span> <span class="na">message=</span><span class="s">&quot;tns:GetWeatherHttpGetIn&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;wsdl:output</span> <span class="na">message=</span><span class="s">&quot;tns:GetWeatherHttpGetOut&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/wsdl:operation&gt;</span>
</span><span class='line'>        <span class="nt">&lt;wsdl:operation</span> <span class="na">name=</span><span class="s">&quot;GetCitiesByCountry&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;wsdl:documentation</span> <span class="na">xmlns:wsdl=</span><span class="s">&quot;http://schemas.xmlsoap.org/wsdl/&quot;</span><span class="nt">&gt;</span>Get all major cities by country name(full / part).<span class="nt">&lt;/wsdl:documentation&gt;</span>
</span><span class='line'>            <span class="nt">&lt;wsdl:input</span> <span class="na">message=</span><span class="s">&quot;tns:GetCitiesByCountryHttpGetIn&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;wsdl:output</span> <span class="na">message=</span><span class="s">&quot;tns:GetCitiesByCountryHttpGetOut&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/wsdl:operation&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/wsdl:portType&gt;</span>
</span><span class='line'>    <span class="nt">&lt;wsdl:portType</span> <span class="na">name=</span><span class="s">&quot;GlobalWeatherHttpPost&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;wsdl:operation</span> <span class="na">name=</span><span class="s">&quot;GetWeather&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;wsdl:documentation</span> <span class="na">xmlns:wsdl=</span><span class="s">&quot;http://schemas.xmlsoap.org/wsdl/&quot;</span><span class="nt">&gt;</span>Get weather report for all major cities around the world.<span class="nt">&lt;/wsdl:documentation&gt;</span>
</span><span class='line'>            <span class="nt">&lt;wsdl:input</span> <span class="na">message=</span><span class="s">&quot;tns:GetWeatherHttpPostIn&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;wsdl:output</span> <span class="na">message=</span><span class="s">&quot;tns:GetWeatherHttpPostOut&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/wsdl:operation&gt;</span>
</span><span class='line'>        <span class="nt">&lt;wsdl:operation</span> <span class="na">name=</span><span class="s">&quot;GetCitiesByCountry&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;wsdl:documentation</span> <span class="na">xmlns:wsdl=</span><span class="s">&quot;http://schemas.xmlsoap.org/wsdl/&quot;</span><span class="nt">&gt;</span>Get all major cities by country name(full / part).<span class="nt">&lt;/wsdl:documentation&gt;</span>
</span><span class='line'>            <span class="nt">&lt;wsdl:input</span> <span class="na">message=</span><span class="s">&quot;tns:GetCitiesByCountryHttpPostIn&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;wsdl:output</span> <span class="na">message=</span><span class="s">&quot;tns:GetCitiesByCountryHttpPostOut&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/wsdl:operation&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/wsdl:portType&gt;</span>
</span><span class='line'>    <span class="nt">&lt;wsdl:binding</span> <span class="na">name=</span><span class="s">&quot;GlobalWeatherSoap&quot;</span> <span class="na">type=</span><span class="s">&quot;tns:GlobalWeatherSoap&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;soap:binding</span> <span class="na">transport=</span><span class="s">&quot;http://schemas.xmlsoap.org/soap/http&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;wsdl:operation</span> <span class="na">name=</span><span class="s">&quot;GetWeather&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;soap:operation</span> <span class="na">soapAction=</span><span class="s">&quot;http://www.webserviceX.NET/GetWeather&quot;</span> <span class="na">style=</span><span class="s">&quot;document&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;wsdl:input&gt;</span>
</span><span class='line'>                <span class="nt">&lt;soap:body</span> <span class="na">use=</span><span class="s">&quot;literal&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/wsdl:input&gt;</span>
</span><span class='line'>            <span class="nt">&lt;wsdl:output&gt;</span>
</span><span class='line'>                <span class="nt">&lt;soap:body</span> <span class="na">use=</span><span class="s">&quot;literal&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/wsdl:output&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/wsdl:operation&gt;</span>
</span><span class='line'>        <span class="nt">&lt;wsdl:operation</span> <span class="na">name=</span><span class="s">&quot;GetCitiesByCountry&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;soap:operation</span> <span class="na">soapAction=</span><span class="s">&quot;http://www.webserviceX.NET/GetCitiesByCountry&quot;</span> <span class="na">style=</span><span class="s">&quot;document&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;wsdl:input&gt;</span>
</span><span class='line'>                <span class="nt">&lt;soap:body</span> <span class="na">use=</span><span class="s">&quot;literal&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/wsdl:input&gt;</span>
</span><span class='line'>            <span class="nt">&lt;wsdl:output&gt;</span>
</span><span class='line'>                <span class="nt">&lt;soap:body</span> <span class="na">use=</span><span class="s">&quot;literal&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/wsdl:output&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/wsdl:operation&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/wsdl:binding&gt;</span>
</span><span class='line'>    <span class="nt">&lt;wsdl:binding</span> <span class="na">name=</span><span class="s">&quot;GlobalWeatherSoap12&quot;</span> <span class="na">type=</span><span class="s">&quot;tns:GlobalWeatherSoap&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;soap12:binding</span> <span class="na">transport=</span><span class="s">&quot;http://schemas.xmlsoap.org/soap/http&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;wsdl:operation</span> <span class="na">name=</span><span class="s">&quot;GetWeather&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;soap12:operation</span> <span class="na">soapAction=</span><span class="s">&quot;http://www.webserviceX.NET/GetWeather&quot;</span> <span class="na">style=</span><span class="s">&quot;document&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;wsdl:input&gt;</span>
</span><span class='line'>                <span class="nt">&lt;soap12:body</span> <span class="na">use=</span><span class="s">&quot;literal&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/wsdl:input&gt;</span>
</span><span class='line'>            <span class="nt">&lt;wsdl:output&gt;</span>
</span><span class='line'>                <span class="nt">&lt;soap12:body</span> <span class="na">use=</span><span class="s">&quot;literal&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/wsdl:output&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/wsdl:operation&gt;</span>
</span><span class='line'>        <span class="nt">&lt;wsdl:operation</span> <span class="na">name=</span><span class="s">&quot;GetCitiesByCountry&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;soap12:operation</span> <span class="na">soapAction=</span><span class="s">&quot;http://www.webserviceX.NET/GetCitiesByCountry&quot;</span> <span class="na">style=</span><span class="s">&quot;document&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;wsdl:input&gt;</span>
</span><span class='line'>                <span class="nt">&lt;soap12:body</span> <span class="na">use=</span><span class="s">&quot;literal&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/wsdl:input&gt;</span>
</span><span class='line'>            <span class="nt">&lt;wsdl:output&gt;</span>
</span><span class='line'>                <span class="nt">&lt;soap12:body</span> <span class="na">use=</span><span class="s">&quot;literal&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/wsdl:output&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/wsdl:operation&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/wsdl:binding&gt;</span>
</span><span class='line'>    <span class="nt">&lt;wsdl:binding</span> <span class="na">name=</span><span class="s">&quot;GlobalWeatherHttpGet&quot;</span> <span class="na">type=</span><span class="s">&quot;tns:GlobalWeatherHttpGet&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;http:binding</span> <span class="na">verb=</span><span class="s">&quot;GET&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;wsdl:operation</span> <span class="na">name=</span><span class="s">&quot;GetWeather&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;http:operation</span> <span class="na">location=</span><span class="s">&quot;/GetWeather&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;wsdl:input&gt;</span>
</span><span class='line'>                <span class="nt">&lt;http:urlEncoded</span> <span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/wsdl:input&gt;</span>
</span><span class='line'>            <span class="nt">&lt;wsdl:output&gt;</span>
</span><span class='line'>                <span class="nt">&lt;mime:mimeXml</span> <span class="na">part=</span><span class="s">&quot;Body&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/wsdl:output&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/wsdl:operation&gt;</span>
</span><span class='line'>        <span class="nt">&lt;wsdl:operation</span> <span class="na">name=</span><span class="s">&quot;GetCitiesByCountry&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;http:operation</span> <span class="na">location=</span><span class="s">&quot;/GetCitiesByCountry&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;wsdl:input&gt;</span>
</span><span class='line'>                <span class="nt">&lt;http:urlEncoded</span> <span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/wsdl:input&gt;</span>
</span><span class='line'>            <span class="nt">&lt;wsdl:output&gt;</span>
</span><span class='line'>                <span class="nt">&lt;mime:mimeXml</span> <span class="na">part=</span><span class="s">&quot;Body&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/wsdl:output&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/wsdl:operation&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/wsdl:binding&gt;</span>
</span><span class='line'>    <span class="nt">&lt;wsdl:binding</span> <span class="na">name=</span><span class="s">&quot;GlobalWeatherHttpPost&quot;</span> <span class="na">type=</span><span class="s">&quot;tns:GlobalWeatherHttpPost&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;http:binding</span> <span class="na">verb=</span><span class="s">&quot;POST&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;wsdl:operation</span> <span class="na">name=</span><span class="s">&quot;GetWeather&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;http:operation</span> <span class="na">location=</span><span class="s">&quot;/GetWeather&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;wsdl:input&gt;</span>
</span><span class='line'>                <span class="nt">&lt;mime:content</span> <span class="na">type=</span><span class="s">&quot;application/x-www-form-urlencoded&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/wsdl:input&gt;</span>
</span><span class='line'>            <span class="nt">&lt;wsdl:output&gt;</span>
</span><span class='line'>                <span class="nt">&lt;mime:mimeXml</span> <span class="na">part=</span><span class="s">&quot;Body&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/wsdl:output&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/wsdl:operation&gt;</span>
</span><span class='line'>        <span class="nt">&lt;wsdl:operation</span> <span class="na">name=</span><span class="s">&quot;GetCitiesByCountry&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;http:operation</span> <span class="na">location=</span><span class="s">&quot;/GetCitiesByCountry&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;wsdl:input&gt;</span>
</span><span class='line'>                <span class="nt">&lt;mime:content</span> <span class="na">type=</span><span class="s">&quot;application/x-www-form-urlencoded&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/wsdl:input&gt;</span>
</span><span class='line'>            <span class="nt">&lt;wsdl:output&gt;</span>
</span><span class='line'>                <span class="nt">&lt;mime:mimeXml</span> <span class="na">part=</span><span class="s">&quot;Body&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/wsdl:output&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/wsdl:operation&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/wsdl:binding&gt;</span>
</span><span class='line'>    <span class="nt">&lt;wsdl:service</span> <span class="na">name=</span><span class="s">&quot;GlobalWeather&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;wsdl:port</span> <span class="na">name=</span><span class="s">&quot;GlobalWeatherSoap&quot;</span> <span class="na">binding=</span><span class="s">&quot;tns:GlobalWeatherSoap&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;soap:address</span> <span class="na">location=</span><span class="s">&quot;http://www.webservicex.net/globalweather.asmx&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/wsdl:port&gt;</span>
</span><span class='line'>        <span class="nt">&lt;wsdl:port</span> <span class="na">name=</span><span class="s">&quot;GlobalWeatherSoap12&quot;</span> <span class="na">binding=</span><span class="s">&quot;tns:GlobalWeatherSoap12&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;soap12:address</span> <span class="na">location=</span><span class="s">&quot;http://www.webservicex.net/globalweather.asmx&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/wsdl:port&gt;</span>
</span><span class='line'>        <span class="nt">&lt;wsdl:port</span> <span class="na">name=</span><span class="s">&quot;GlobalWeatherHttpGet&quot;</span> <span class="na">binding=</span><span class="s">&quot;tns:GlobalWeatherHttpGet&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;http:address</span> <span class="na">location=</span><span class="s">&quot;http://www.webservicex.net/globalweather.asmx&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/wsdl:port&gt;</span>
</span><span class='line'>        <span class="nt">&lt;wsdl:port</span> <span class="na">name=</span><span class="s">&quot;GlobalWeatherHttpPost&quot;</span> <span class="na">binding=</span><span class="s">&quot;tns:GlobalWeatherHttpPost&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;http:address</span> <span class="na">location=</span><span class="s">&quot;http://www.webservicex.net/globalweather.asmx&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/wsdl:port&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/wsdl:service&gt;</span>
</span><span class='line'><span class="nt">&lt;/wsdl:definitions&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>另外github上还有一些Gradle的插件来帮你实现xml和java对象的转换，但是本质上其实还是使用了jaxb的xjc ant插件实现的，只不过隐藏了实现细节，使用起来更加方便。感兴趣的可以看<a href="https://github.com/jacobono/gradle-jaxb-plugin">https://github.com/jacobono/gradle-jaxb-plugin</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gradle中的buildScript代码块]]></title>
    <link href="http://www.huangbowen.net/blog/2014/08/28/buildscript-in-gradle/"/>
    <updated>2014-08-28T00:12:45+10:00</updated>
    <id>http://www.huangbowen.net/blog/2014/08/28/buildscript-in-gradle</id>
    <content type="html"><![CDATA[<p>在编写Gradle脚本的时候，在build.gradle文件中经常看到这样的代码：</p>

<!-- more -->




<figure class='code'><figcaption><span>build.gradle</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">buildScript</span> <span class="o">{</span>
</span><span class='line'>     <span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>         <span class="n">mavenCentral</span><span class="o">()</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>     <span class="n">mavenCentral</span><span class="o">()</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样子很容易让人奇怪，为什么repositories要声明两次哪？buildscript代码块中的声明与下半部分声明有什么不同？</p>

<p>其实答案非常简单。buildscript中的声明是gradle脚本自身需要使用的资源。可以声明的资源包括依赖项、第三方插件、maven仓库地址等。而在build.gradle文件中直接声明的依赖项、仓库地址等信息是项目自身需要的资源。</p>

<p>gradle是由groovy语言编写的，支持groovy语法，可以灵活的使用已有的各种ant插件、基于jvm的类库，这也是它比maven、ant等构建脚本强大的原因。虽然gradle支持开箱即用，但是如果你想在脚本中使用一些第三方的插件、类库等，就需要自己手动添加对这些插件、类库的引用。而这些插件、类库又不是直接服务于项目的，而是支持其它build脚本的运行。所以你应当将这部分的引用放置在buildscript代码块中。gradle在执行脚本时，会优先执行buildscript代码块中的内容，然后才会执行剩余的build脚本。</p>

<p>举个例子，假设我们要编写一个task，用于解析csv文件并输出其内容。虽然我们可以使用gradle编写解析csv文件的代码，但其实apache有个库已经实现了一个解析csv文件的库供我们直接使用。我们如果想要使用这个库，需要在gradle.build文件中加入对该库的引用。</p>

<figure class='code'><figcaption><span>build.gradle</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">buildscript</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mavenLocal</span><span class="o">()</span>
</span><span class='line'>        <span class="n">mavenCentral</span><span class="o">()</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">classpath</span> <span class="s1">&#39;org.apache.commons:commons-csv:1.0&#39;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.commons.csv.*</span>
</span><span class='line'>
</span><span class='line'><span class="n">task</span> <span class="nf">printCSV</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">doLast</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">def</span> <span class="n">records</span> <span class="o">=</span> <span class="n">CSVFormat</span><span class="o">.</span><span class="na">EXCEL</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="k">new</span> <span class="n">FileReader</span><span class="o">(</span><span class="s1">&#39;config/sample.csv&#39;</span><span class="o">))</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">item</span> <span class="k">in</span> <span class="n">records</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">print</span> <span class="n">item</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="o">+</span> <span class="s1">&#39; &#39;</span>
</span><span class='line'>            <span class="n">println</span> <span class="n">item</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>buildscript代码块中的repositories和dependencies的使用方式与直接在build.gradle文件中的使用方式几乎完全一样。唯一不同之处是在buildscript代码块中你可以对dependencies使用classpath声明。该classpath声明说明了在执行其余的build脚本时，class loader可以使用这些你提供的依赖项。这也正是我们使用buildscript代码块的目的。</p>

<p>而如果你的项目中需要使用该类库的话，就需要定义在buildscript代码块之外的dependencies代码块中。所以有可能会看到在build.gradle中出现以下代码：</p>

<figure class='code'><figcaption><span>build.gradle</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mavenLocal</span><span class="o">()</span>
</span><span class='line'>    <span class="n">mavenCentral</span><span class="o">()</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">compile</span> <span class="s1">&#39;org.springframework.ws:spring-ws-core:2.2.0.RELEASE&#39;</span><span class="o">,</span>
</span><span class='line'>            <span class="s1">&#39;org.apache.commons:commons-csv:1.0&#39;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">buildscript</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mavenLocal</span><span class="o">()</span>
</span><span class='line'>        <span class="n">mavenCentral</span><span class="o">()</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">classpath</span> <span class="s1">&#39;org.apache.commons:commons-csv:1.0&#39;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.commons.csv.*</span>
</span><span class='line'>
</span><span class='line'><span class="n">task</span> <span class="nf">printCSV</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">doLast</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">def</span> <span class="n">records</span> <span class="o">=</span> <span class="n">CSVFormat</span><span class="o">.</span><span class="na">EXCEL</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="k">new</span> <span class="n">FileReader</span><span class="o">(</span><span class="s1">&#39;config/sample.csv&#39;</span><span class="o">))</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">item</span> <span class="k">in</span> <span class="n">records</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">print</span> <span class="n">item</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="o">+</span> <span class="s1">&#39; &#39;</span>
</span><span class='line'>            <span class="n">println</span> <span class="n">item</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>官方具体解释请参见：<a href="http://chimera.labs.oreilly.com/books/1234000001741/ch04.html#_buildscript_dependencies">http://chimera.labs.oreilly.com/books/1234000001741/ch04.html#_buildscript_dependencies</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[健身4个月总结]]></title>
    <link href="http://www.huangbowen.net/blog/2014/08/23/bodybuliding-4-month/"/>
    <updated>2014-08-23T16:23:15+10:00</updated>
    <id>http://www.huangbowen.net/blog/2014/08/23/bodybuliding-4-month</id>
    <content type="html"><![CDATA[<p>不知不觉，已经健身4个月了。刚开始健身的时候也没想到自己能坚持这么久，也没想到需要花费这么多的时间。不过目前一切都好，虽然健身花费了一些时间，但是也算有所收获，给自己的生活注入了一股新力量。也能每天有1到2个小时把自己从电脑前拉起来，去外面跑跑步，呼吸一下新鲜空气，去健身房聚聚哑铃，练习引体向上，突破身体的极限，或者去游泳池学习蛙泳、仰泳，与水亲密接触。</p>

<!-- more -->


<p>自己的体重从最重时的80KG降到了最低时的69公斤。现在目前维持在69到70公斤之间波动。经过这几个月的运动，我发现减肥真的没什么难的，只要能管住嘴、迈开腿，体重肯定会降下来的。在减脂的过程中不能急于求成，多少年涨上来的肉你想几天、几个月就减下来，那显然不太现实。我就抱着一颗平常心，只要每天不吃高热量的垃圾食品，又保持一定的有氧运动，体重随着时间肯定会降下来的。虽然它的下降不是想象中的线性下降，其实是下降-反弹-下降这样的曲线。但总体来说肯定是降下来的。我的目标是减到65公斤，目前看来有望在3个月后达成目标。</p>

<p>减肥最有效的有氧运动还是长跑。由于自身底子不错，第一次跑步就跑了10公里。这样就给自己立下了一个标杆，每次跑步至少都要跑10公里。可能对于普通人来说10公里有些难以达到，但其实跑下来真不难。只要不要求速度，按着比平时走路快一点的步伐跑，那么坚持1，2个月后达到跑10公里的目标不在话下。后来10公里已经不满足我的兽欲了，渐渐的把距离增加到15公里，20公里，干脆参加了一次马拉松，跑了42公里。自己也成为了一个长跑爱好者，又报了11月份的西昌马拉松，并且开始有目的性针对性训练。长跑结束后的那种通透感妙不可言。希望明年还能参加50公里越野跑，甚至100公里越野跑。</p>

<p>其实减肥不是我健身的目的。我健身的目的是拥有一定的肌肉，使自己变得更强壮。减肥只是为了能让肌肉线条凸显出来，最好能练出8块腹肌。刚开始我的主要健身方式就是做俯卧撑，深蹲，直立前屈身（俗称早上好）。这种运动不占地方，不费时间。每天早上40个深蹲，40个早上好。上班时利用跑build的时间做上20个俯卧撑，神清气爽。从最初每天20个俯卧撑的目标加到每天40个，100个，150个，200个，300个。本来一组只能做5个俯卧撑，现在一组做30个毫无压力。</p>

<p>但是目前还仍然无法征服引体向上这座大山。反手引体向上现在只能做4个，正手只能做可怜的两个。这练了4个月的成果还真是有点拿不出手。希望满6个月的时候能够做12个反手引体和10个正手引体。</p>

<p>除了上肢训练，腹肌训练我也没拉下。几乎每天都会做40个举退，60个卷腹。虽然小肚子靠减脂减没了，但是腹肌还是凸显不出来。现在换了腹肌撕裂者，每天撸一次腹肌撕裂者，希望能有点效果吧。</p>

<p>通过这几个月的健身体验，我明白了涨肌肉绝对不是一件容易的事情。很多人可能头脑里认为给自己3个月时间钻在健身房里，也能练出一身漂亮的肌肉出来。我只能说这是痴人说梦。想拥有一身漂亮的肌肉绝对不是3，5个月，半年能够搞定的。至少1年起，3年能有小成都算不错了。像咱们上班族，时间本就不宽裕的，那训练周期还要加长。</p>

<p>健身这条路自己还能坚持多久，这我也不知道。能做尽量做吧。反正自己心里有目标，一步一步向这个目标靠近，每天过的倒也充实。自己的极限在哪里，只有自己去挖掘，去突破。每天少了2个小时上网冲浪，多了2个小时跑步健身，长此以往，怕是人生轨迹都要改变。</p>

<p>期待2015年，能参加一次100公里越野跑，拥有迷人的8块腹肌，还有学会俄式挺身，双力臂。自知不易，还需努力。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[程序员健身之马拉松篇]]></title>
    <link href="http://www.huangbowen.net/blog/2014/08/07/my-first-marathon/"/>
    <updated>2014-08-07T01:13:15+10:00</updated>
    <id>http://www.huangbowen.net/blog/2014/08/07/my-first-marathon</id>
    <content type="html"><![CDATA[<p>程序员的身体差，似乎已经是大家的共识。整天对着电脑不运动，长此以往导致各种疾病缠身。新闻里也时不时的报道些程序员加班猝死的新闻。本人虽然是程序员，但是还是比较热爱运动的。毕业后有4，5年了，每周还时不时的踢踢球、打打篮球。每天上下班都是骑自行车，来回有26公里。加上大学时候经常锻炼，身体底子还不错。只不过上班后吃的比以前好了，运动量也没以前大了，体重蹭蹭的往上涨，最重的时候已经达到了80kg。</p>

<!-- more -->


<p>今天年初的时候，突然想健身，恰逢出差，住的公寓楼下有免费的健身房。就在健身房里泡了一个月。但是一个月过去还是什么肌肉都没练出来。看来练肌肉不是这么容易的。出差回来以后没条件去健身房，就在家里置办了哑铃、俯卧撑支架、引体向上支架等器材，开启了漫漫健身路。这时候体重也开始下降，5月初的事后是77kg。但之后很难下降了，而且我想练腹肌，无奈腹部赘肉太多，只有进行有氧运动来减去腹部的脂肪。</p>

<p>通过一番查询以后知道跑步、骑车等有氧运动能够减脂。自己天天骑自行车没见瘦啊，可能还是跑步靠谱点。自己家离一所大学比较近，遂决定在该学校的操场上跑步。第一次就跑了10公里，绕着操场转了25圈。以后每隔1、2天就去跑10公里，没有要求速度，只求跑完。这样跑了1个月，到7月10来号的时候体重降到了72.1kg。但是这时候减肥也进入了平台期，连续好多天体重一直徘徊在72
kg左右。</p>

<p>7月中旬跑到布里斯班来出差了。自己住的地方下面就是布里斯班河，河边修有专门供跑步的跑道。这可是不可多得的跑步圣地啊。自己跑一休一也改成了跑二修一。由于天天骑车上下班，骑了一年多，导致膝盖有些损伤，所以跑步时一直都没追求速度，配速基本在6分到6分半每公里。而每次跑步里程也一直在10公里左右。</p>

<p>由于连续半个月体重一直无法继续降低，就想着是否要加大运动量了。所以在7月25日晚跑了12公里，7月26日晚跑了15公里。跑完后7月27日体重是70.4kg，把我给高兴的。但是没高兴两天，体重又反弹到了72kg。这把我给气的啊。7月28日我跑步的时候，当跑了10公里后觉得自己还没运动开，就想着再跑5公里，跑5公里后我又想反正都15公里了，不如再跑6公里就有21公里了，相当于半程马拉松了。就这样我花了2小时20分钟跑完了21公里，跑完以后也没感觉多累，甚至连肌肉酸痛的感觉都没有。</p>

<p>在我跑的过程中路过一座桥的时候，看到桥头有牌子写着’3 August Run, Marathon’的字样，不知道是个什么跑步活动。所以回来以后上网一查，原来是8月3号布里斯班要举行一年一度的马拉松比赛，起点就离我住的地方不远，至少有2/3的赛道我都跑过。这马拉松比赛都举行到家门口了，真是天时、地利、人和啊。恰好我刚跑了21公里，自信心爆棚，感觉毫无压力，此时不报名，还待何时？但是报名费130澳元有点小贵啊，一咬牙还是网上报名了。接下来几天就开始做功课了。从网上看了一些关于马拉松的资料，心里也有点打鼓了。听说跑马拉松时35公里左右容易<code>撞墙</code>，那时候全身能量都被耗尽，并且很容易引起抽筋，自己最远也才跑过21公里，能不能在6个小时内完赛还不清楚。</p>

<p>就这样在忐忑中周日来了。定的早上5点的闹钟，起床后吃了片面包，喝了半瓶酸奶去起点了。一路上碰到很多人，估计都是参加比赛的，就跟着他们抹黑到了起点。存包的地方离起点有7，8百米的距离，再加上存包的地方大排长龙，等我存完包回到起点的时候已经人满为患了，我离起点至少有100米远。布里斯班马拉松的半程和全程是一起起跑的，现场目测至少有几千人。稍微做了一些拉伸，就听到前面有声枪响，应该是开跑了。过了3，4分钟，我才随人流过了起点线。</p>

<p>首马就这样开始了。我有些兴奋，有些忐忑，跟着人群一步步向前跑。总体感觉不错，看到有人还推着婴儿车跑，跑的比我还快。跑了2，3公里后，我发现了一个半程2:10的兔子（领跑员，在2：10内完成半程马拉松）。心想马拉松前面不能跑快了，自己又没带什么测配速的装备，就跟着这个兔子跑吧。不知不觉就跑了8公里，越跑感觉状态越好，就渐渐提高了速度，甩掉了这个兔子。天也逐渐亮了，布里斯班清晨的美景净收眼底。参加马拉松的不乏老头老太太，其中一个老太太还穿着黄金海岸马拉松完赛的纪念T雪，不得不佩服。跑了15，6公里也没感觉很累，我还意外发现4：15的兔子竟然还在我后面。我想着跟着这个兔子跑吧，如果能4：15完赛那还是很牛逼的（事后证明我想多了）。跟着该兔子一直跑到了20公里处，发现自己有点跟不上了。随后我感觉自己的配速有点下降，步伐也没有那么轻松了。这时候准备不足的弊端就体现出来了，我等于啥都没准备啊，没能量胶，没盐丸，唯一有的就是水站的运动饮料。为了防止后期抽筋，我每个水站都要补水，如果有运动饮料的水站我也会补充。这样我跑到了30公里，赛道上的人越来越少，超过我的人也越来越多，我也亲眼看到有些选手的腿出现抽筋等症状。但是这时候我心里更加笃定我能完赛了，因为前30公里我只用了3小时半不到，剩下的12公里即使走也能赶在6个小时关门前到达。现在首要任务是不要出现抽筋等情况，慢跑为主。30公里后配速掉的厉害啊，被人各种超，好多女的都超过了我，还有很多老头老太太。望着他们的背影，我是心有余而力不足啊。就这样跑到了38公里处，感觉实在跑不动了，就想着反正剩4公里了，走也走完了。我于是就开始步行了。让我郁闷的是我步行都没有别人步行速度快，有个女的也是步行，愣是把我超了。走了一公里后我看了一下时间，心想如果再步行下去就进不了5小时了，而且我发现似乎步行更累。于是我又跑起来了，看着终点一步步靠近，人也精神起来。当我跑到终点时，看着计时牌上显示这4小时59分，心里暗想多亏最后几公里没走，要不然就进不了5小时了。</p>

<p>最终成绩是4小时55分15秒，我对这个成绩还是比较满意的，毕竟第一次首马就顺利完赛，并且还跑进了5小时，这对于开始跑步还不到2个月的我来说还有什么好挑剔的。跑完以后感觉膝盖特别痛，大腿肌肉到没什么特别感觉。休息了一天后第二天膝盖也不痛了，一切恢复如初。甚至第三天晚上我又跑了20公里的LSD。</p>

<p>顺利完成首马还没有受任何伤，并且首马能在美丽如画的布里斯班举行，一切好的不能再好了！人生挑战不会就此止步，我已经开始计划下一个马拉松了，甚至开始计划超马（100公里越野跑）了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AWS系列之三 使用EBS]]></title>
    <link href="http://www.huangbowen.net/blog/2014/07/31/use-ebs/"/>
    <updated>2014-07-31T01:10:32+10:00</updated>
    <id>http://www.huangbowen.net/blog/2014/07/31/use-ebs</id>
    <content type="html"><![CDATA[<p>Amazon Elastic Block Store（EBS）可作为EC2实例的持久性数据块级存储。其具有高可用性和持久性的特点，可用性高达99.999%。给现有的EC2实例扩展新的存储块只需要几分钟的时间，省时省力。每个EBS块都被放置在一个特定的可用区内，并且会自动维护一个副本，随时保护数据安全。</p>

<!-- more -->


<p>Amazon EBS共提供三种硬盘类型，SSD(固态硬盘)， Provisioned IOPS SSD（特供IOPS固态硬盘）和Magnetic（普通硬盘）。SSD是默认的EC实例的硬盘格式（凶残啊！Amazon真是有钱，自从咱的本本换了SSD后，也离不开SSD了。）Provisioned IOPS SSD更凶残，具有高一致性及超低延迟的性能，专门设计用于I/O密集型操作，比如数据库。IOPS全称为Input/Output Operations Per Second，即每秒进行读写（I/O）操作的次数，用来衡量随机访问的性能。Provisioned IOPS SSD的每GB IOPS可达30。Magnetic Volumes就是俗称的磁卷了，它最便宜，当然性能也最差了。如果你的应用程序不是I/O密集型的，对数据的访问不是很频繁，使用该类型就比较划算。</p>

<p>EBS还有一个功能就是很方便的创建快照，并保存到Amazon S3上去。EBS的快照是增量存储的。比如你有一块100G的硬盘，第一次快照使用了100G容量，第二次快照时只有5G的数据发生了变化，那么你总共只需花105G的存储费用。当然你不不必担心删除其中一个快照导致数据丢失，因为删除一个快照时，系统只会删除其中不会被其它快照使用的数据，所以不会影响其它快照。</p>

<p>好了，接下来是本文的两个主要任务是两个。第一个任务是给一个EC实例附加一个新的EBS卷，并且加入到当前EC实例的文件系统中。第二个任务是为该EC实例创建一个快照。</p>

<p>首先当然是准备工作了，创建一个新的EC2实例。如何创建上一篇文章已经详细介绍了，这里不再累述。如果还没有AWS account的同学可以使用可以qwiklabs提供的免费实验来进行该练习。地址是<a href="https://run.qwiklabs.com">https://run.qwiklabs.com</a>。说实话qwiklabs真是个好东西，如果我使用自己的account来进行练习，要花不少钱。而qwiklabs里面有几个免费实验，使用AWS的所有资源不收任何费用，真是业界良心。</p>

<p>EC2创建完毕后，应该是这个样子。</p>

<p><img src="http://www.huangbowen.net/images/ec2instance01.png" width="700"></p>

<p>然后远程ssh进去。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$:</span> ssh ec2-user@54.191.59.163 -i ~/Downloads/key.pem
</span></code></pre></td></tr></table></div></figure>


<p>先查看下当前的磁盘情况。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>ec2-user@ip-172-31-17-37 ~<span class="o">]</span><span class="nv">$ </span>df -h
</span><span class='line'>Filesystem      Size  Used Avail Use% Mounted on
</span><span class='line'>/dev/xvda1      7.8G  1.1G  6.6G  14% /
</span><span class='line'>devtmpfs        486M   56K  486M   1% /dev
</span><span class='line'>tmpfs           499M     0  499M   0% /dev/shm
</span></code></pre></td></tr></table></div></figure>


<p>可以看出当前磁盘总大小在8G左右，有三个文件系统。</p>

<p>接下来就创建一个硬盘。</p>

<p>点击EC2控制面板左侧的<code>Volumes</code>按钮，来到磁盘的控制面板。</p>

<p><img src="http://www.huangbowen.net/images/volumedb01.png" width="700"></p>

<p>这里展示的一块硬盘就是当前ec2实例使用的硬盘。</p>

<p>我们点击上面的<code>Create Volumes</code>来新添加一块硬盘。</p>

<p><img src="http://www.huangbowen.net/images/createVolume01.png" width="700"></p>

<p>硬盘类型就是我上文的说的那几种，IOPS越高，硬盘就越贵，可用区的选择一定要和当前要使用的EC2实例保持一致，要不然会无法跨可用区附加硬盘。如果提供snapshot ID的话，新创建的硬盘会具有该快照的数据。</p>

<p>硬盘创建完毕后如下图所示。</p>

<p><img src="http://www.huangbowen.net/images/newVolumes01.png" width="700"></p>

<p>目前它的状态是可用的，如果将其附加到EC2实例则会变为in-use。</p>

<p>点击<code>Action</code>按钮并选择<code>Attach Volume</code>命令，可以将该硬盘附加到EC2实例上。</p>

<p><img src="http://www.huangbowen.net/images/attachvolume01.png" width="700"></p>

<p>在该界面中选择实例名及映射的设备地址，然后附加。</p>

<p><img src="http://www.huangbowen.net/images/volumesStatus01.png" width="700"></p>

<p>可以看到该硬盘状态已经发生改变。</p>

<p>那么再回到终端中查看磁盘情况。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>ec2-user@ip-172-31-17-37 ~<span class="o">]</span><span class="nv">$ </span>df -h
</span><span class='line'>Filesystem      Size  Used Avail Use% Mounted on
</span><span class='line'>/dev/xvda1      7.8G  1.1G  6.6G  14% /
</span><span class='line'>devtmpfs        486M   60K  486M   1% /dev
</span><span class='line'>tmpfs           499M     0  499M   0% /dev/shm
</span></code></pre></td></tr></table></div></figure>


<p>跟以前的一模一样，没有看到新添加的20G硬盘。这是怎么回事那？这是因为你虽然给机器添加了一块硬盘，但是还没有格式化和创建文件系统，并将文件系统添加到EC2的文件系统树上来。</p>

<p>我们换另一个命令来查看存储情况。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>ec2-user@ip-172-31-17-37 ~<span class="o">]</span><span class="nv">$ </span>lsblk
</span><span class='line'>NAME    MAJ:MIN RM SIZE RO TYPE MOUNTPOINT
</span><span class='line'>xvda    202:0    0   8G  0 disk
</span><span class='line'>└─xvda1 202:1    0   8G  0 part /
</span><span class='line'>xvdf    202:80   0  20G  0 disk
</span></code></pre></td></tr></table></div></figure>


<p>这里可以看到有一块20G的大硬盘xvdf，但是没有MOUNTPOINT，这个MOUNTPOINT你可以理解为EC2实例上针对这个硬盘的根地址。</p>

<p>细心的读者可能会发现我们附加硬盘时输入的地址是<code>/dev/sdf</code>，为什么命令行中显示的是<code>xvdf</code>那？这是因为调皮的操作系统内核给改了，不同的Linux发行版其修改后的地址也会不太一样。</p>

<p>使用file命令来查看该块硬盘有没有建立文件系统。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>ec2-user@ip-172-31-17-37 ~<span class="o">]</span><span class="nv">$ </span>sudo file -s /dev/xvdf
</span><span class='line'>/dev/xvdf: data
</span></code></pre></td></tr></table></div></figure>


<p>如果输出是data，说明该块硬盘还未创建文件系统。</p>

<p>使用下述命令来给xvdf来创建文件系统。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>ec2-user@ip-172-31-17-37 ~<span class="o">]</span><span class="nv">$ </span>sudo mkfs -t ext4 /dev/xvdf
</span></code></pre></td></tr></table></div></figure>


<p>然后再用file命令确认。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>ec2-user@ip-172-31-17-37 ~<span class="o">]</span><span class="nv">$ </span>sudo file -s /dev/xvdf
</span><span class='line'>/dev/xvdf: Linux rev 1.0 ext4 filesystem data, <span class="nv">UUID</span><span class="o">=</span>1e14ec91-156a-4eb5-8846-cb5f2fa51b64 <span class="o">(</span>extents<span class="o">)</span> <span class="o">(</span>large files<span class="o">)</span> <span class="o">(</span>huge files<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>bash</p>

<p>可以看到该块硬盘已经建立了ext4格式的文件系统。</p>

<p>接下来要将该文件系统加入到当前实例的文件系统树中，这里要使用mount命令。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>ec2-user@ip-172-31-17-37 ~<span class="o">]</span><span class="nv">$ </span>sudo mkdir /boot2
</span><span class='line'><span class="o">[</span>ec2-user@ip-172-31-17-37 ~<span class="o">]</span><span class="nv">$ </span>sudo mount /dev/xvdf /boot2
</span></code></pre></td></tr></table></div></figure>


<p>搞定，现在看看EC2实例的存储情况。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>ec2-user@ip-172-31-17-37 ~<span class="o">]</span><span class="nv">$ </span>lsblk
</span><span class='line'>NAME    MAJ:MIN RM SIZE RO TYPE MOUNTPOINT
</span><span class='line'>xvda    202:0    0   8G  0 disk
</span><span class='line'>└─xvda1 202:1    0   8G  0 part /
</span><span class='line'>xvdf    202:80   0  20G  0 disk /boot2
</span></code></pre></td></tr></table></div></figure>


<p>可以在/boot2目录下随意创建文件和文件夹了。</p>

<p>这里并不是万事大吉的时候，我们需要将该MOUNTPOINT加入到系统文件中，要不然系统重启后还是找不到该硬盘。编辑<code>/etc/fstab</code>文件，在其中加入以下行。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>/dev/xvdf       /data   ext4    defaults,nofail        0       2
</span></code></pre></td></tr></table></div></figure>


<p>这样就不怕重启的时候丢失该MOUNTPOINT了。添加完毕以后可以试一下fstab文件是否能正常运行。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>ec2-user@ip-172-31-17-37 ~<span class="o">]</span><span class="nv">$ </span>sudo mount -a
</span></code></pre></td></tr></table></div></figure>


<p>如果没有错误就一切万事大吉，如果有错误而你重启了电脑的话，你就等着哭吧。</p>

<p>这是第一个任务，第二任务是给现有硬盘创建快照，非常简单。回到<code>Volumes</code>控制面板，选择<code>Action</code>里的<code>Create Snapshot</code>按钮。</p>

<p><img src="http://www.huangbowen.net/images/createSnapshot01.png" width="700"></p>

<p>等一会snapshot就会创建成功。</p>

<p><img src="http://www.huangbowen.net/images/snapshotStatus01.png" width="700"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AWS系列之二 使用EC2]]></title>
    <link href="http://www.huangbowen.net/blog/2014/07/26/using-ec2/"/>
    <updated>2014-07-26T18:27:22+10:00</updated>
    <id>http://www.huangbowen.net/blog/2014/07/26/using-ec2</id>
    <content type="html"><![CDATA[<p>在本文中我们有三个任务。
第一：使用Amazon management console创建一个EC2实例。
第二：使用本地的命令行工具远程登陆到该EC2实例。
第三：在该EC2实例上创建一个web服务，并通过公共域名来访问该web服务。</p>

<!-- more -->


<p>如果你还没有AWS的账号的话，可以使用qwiklabs提供的免费实验来进行该练习。地址是<a href="https://run.qwiklabs.com">https://run.qwiklabs.com</a>。</p>

<p>登陆到亚马逊的AWS服务的management console后选择EC2服务。</p>

<p><img src="http://www.huangbowen.net/images/awsdashboard.png" width="700"></p>

<p>然后你就可以到EC2的控制面板了。</p>

<p><img src="http://www.huangbowen.net/images/ec2dashboard.png" width="700"></p>

<p>点击上面大大的<code>Launch Instance</code>按钮来开始创建一个新的EC2实例。</p>

<p><img src="http://www.huangbowen.net/images/imagetype.png" width="700"></p>

<p>首先要选择机器的镜像文件AMI（Amazon Machine Image）,有各种Linux的发行版，也有Windows系统。在本次实验中我们选取第一个，即Amazon Linux AMI，亚马逊自己的一个Linux发行版。</p>

<p>然后是选择机器类型，不同类型机器性能不同，收费标准也不一样，一切都是根据你的需求来决定。就选第一个吧，最便宜。</p>

<p><img src="http://www.huangbowen.net/images/instancetype.png" width="700"></p>

<p>然后你有两个选择，一个是点击<code>Review and Launch</code>直接启动新机器，其余参数都采用默认值，另一个是点击<code>Next:Configure Instance Details</code>自定义其它配置。在这里我们选择第二个按钮，然后直到step6：Configure Security Group。</p>

<p><img src="http://www.huangbowen.net/images/scrole.png" width="700"></p>

<p>这里是配置安全组的，你可以使用已有的安全组，也可以创建一个全新的安全组。在安全组里可以设置一系列策略来管理该实例与外界的访问情况。</p>

<p>由于我们需要远程登录到该实例，并且需要该实例提供http服务，所以我们需要开放22和80端口。22端口默认是开放的，80端口则需要手动开放。方法是点击<code>Add Role</code>按钮并新加一个role。</p>

<p><img src="http://www.huangbowen.net/images/httprole.png" width="700"></p>

<p>配置完成后点击<code>Launch</code>按钮，会弹出一个页面让你设置key pair。</p>

<p><img src="http://www.huangbowen.net/images/keypairconfiguration.png" width="700"></p>

<p>这个key pair是用来与该实例建立安全连接。亚马逊会存一个公钥，自己在本地存放一个私钥，当想要连接该实例时，需要提供私钥。这里我们选择新建一个key pair，并取名为awsworkshop，选择保存到本地。稍后会使用它来ssh到该实例。</p>

<p>点击<code>Launch Instances</code>按钮，实例就会被初始化了。</p>

<p><img src="http://www.huangbowen.net/images/launchstatus.png" width="700"></p>

<p>点击<code>View Instances</code>来查看新创建的实例。</p>

<p><img src="http://www.huangbowen.net/images/ec2information.png" width="700"></p>

<p>一般需要等待3到5分钟来完成对新实例的初始化。在上图中可以查看该实例的相关信息。亚马逊给该实例分配了一个公共IP和公共DNS域名，稍后需要使用它们。</p>

<p>等到该实例的<code>Instance Status</code>为<code>running</code>后，我们就可以进行第二个任务了，就是远程连接到该实例。</p>

<p>打开你心爱的终端，然后先提升刚保存的pem文件的权限。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$:</span> chmod 600 ~/Downloads/awsworkshop.pem
</span></code></pre></td></tr></table></div></figure>


<p>然后在AWS的控制面板上找到该实例的公共IP，使用ec2-user用户名来ssh到该实例。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$:</span> ssh ec2-user@54.191.210.210 -i ~/Downloads/awsworkshop.pem
</span></code></pre></td></tr></table></div></figure>


<p>稍微等待以后就可以连接到远程实例了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>ec2-user@ip-172-31-46-246 ~<span class="o">]</span><span class="nv">$ </span>who
</span><span class='line'>ec2-user pts/0        2014-07-26 06:38 <span class="o">(</span>123-243-183-184.static.tpgi.com.au<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>怎么样？一切都非常简单吧？</p>

<p>下面就进行这个实验的最后一个任务了，在该远程实例上搭建一个web服务器。</p>

<p>ssh到该实例后，执行下面命令。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$:</span> sudo yum install httpd
</span></code></pre></td></tr></table></div></figure>


<p>这句命令是安装Apache的httpd服务器。</p>

<p>然后跳转到<code>/var/www/html</code>目录下，并新建一个名为<code>index.html</code>的文件。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$:</span> <span class="nb">cd</span> /var/www/html
</span><span class='line'><span class="nv">$:</span> sudo touch index.html
</span></code></pre></td></tr></table></div></figure>


<p>使用你习惯的编辑器在该文件中输入一个html格式的文档并保存。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>    <span class="nt">&lt;body&gt;</span>
</span><span class='line'>        <span class="nt">&lt;h1&gt;</span>Hello World!<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>接下来启动web服务器。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$:</span> sudo service httpd start
</span></code></pre></td></tr></table></div></figure>


<p>大功告成，从该EC2实例的控制面板中找到其公共DNS，然后粘贴到浏览器中，就可以访问其提供的web服务了。</p>

<p><img src="http://www.huangbowen.net/images/website.png" width="700"></p>

<p>好了，这三个任务也就都完成了。希望大家喜欢这次EC2之旅。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gradle与Gatling脚本集成]]></title>
    <link href="http://www.huangbowen.net/blog/2014/07/23/integrate-gatling-with-gradle/"/>
    <updated>2014-07-23T16:12:23+10:00</updated>
    <id>http://www.huangbowen.net/blog/2014/07/23/integrate-gatling-with-gradle</id>
    <content type="html"><![CDATA[<p>Gatling作为次时代的性能测试工具，由于其API简洁明了、性能出众，越来越受欢迎。但是运行Gatling脚本却有诸多不便，其提供的默认方式不是很方便。考虑到Gatling脚本本质上是Scala类，运行的时候还是使用的是java虚拟机，我们可以将其脚本的运行与Gradle结合起来。这样子就可以通过Gradle来运行Gatling脚本了。</p>

<!-- more -->


<p>废话少说，接下来就讲述下如何来进行配置。</p>

<p>创建一个标准的maven结构的工程目录，如下图所示。</p>

<p><img src="http://www.huangbowen.net/images/gradle-gatling.png" width="600"></p>

<p>conf目录存放Gatling的基本配置文件。
Gatling的脚本文件存放在src/test/scala/simulations包里面。可以自行在此包下对脚本文件再分类。</p>

<p>在build.gradle文件中引入scala插件。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;scala&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后引入有gatling库的maven repo。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mavenCentral</span> <span class="o">()</span>
</span><span class='line'>    <span class="n">maven</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">url</span> <span class="s1">&#39;http://repository.excilys.com/content/groups/public&#39;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>再加入scala和gatling的依赖项。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">compile</span> <span class="s1">&#39;org.scala-lang:scala-library:2.10.1&#39;</span>
</span><span class='line'>    <span class="n">testCompile</span> <span class="s1">&#39;io.gatling.highcharts:gatling-charts-highcharts:2.0.0-M3a&#39;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>把conf文件夹作为test的source文件。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">sourceSets</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">test</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">resources</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">srcDir</span> <span class="s1">&#39;conf&#39;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>创建一个名为gatling的task，目的是运行所有的gatling脚本。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">task</span> <span class="nf">gatling</span> <span class="o">(</span><span class="nl">dependsOn:</span> <span class="s1">&#39;compileTestScala&#39;</span><span class="o">)</span> <span class="o">&lt;&lt;</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">logger</span><span class="o">.</span><span class="na">lifecycle</span> <span class="o">(</span><span class="s2">&quot; ---- Executing all Gatling scenarios from: ${sourceSets.test.output.classesDir} ----&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">sourceSets</span><span class="o">.</span><span class="na">test</span><span class="o">.</span><span class="na">output</span><span class="o">.</span><span class="na">classesDir</span><span class="o">.</span><span class="na">eachFileRecurse</span> <span class="o">{</span> <span class="n">file</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">file</span><span class="o">.</span><span class="na">isFile</span> <span class="o">())</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="kt">def</span> <span class="n">gatlingScenarioClass</span> <span class="o">=</span> <span class="o">(</span><span class="n">file</span><span class="o">.</span><span class="na">getPath</span> <span class="o">()</span> <span class="o">-</span> <span class="o">(</span><span class="n">sourceSets</span><span class="o">.</span><span class="na">test</span><span class="o">.</span><span class="na">output</span><span class="o">.</span><span class="na">classesDir</span><span class="o">.</span><span class="na">getPath</span> <span class="o">()</span> <span class="o">+</span> <span class="n">File</span><span class="o">.</span><span class="na">separator</span><span class="o">)</span> <span class="o">-</span> <span class="s1">&#39;.class&#39;</span><span class="o">)</span>
</span><span class='line'>                    <span class="o">.</span><span class="na">replace</span> <span class="o">(</span><span class="n">File</span><span class="o">.</span><span class="na">separator</span><span class="o">,</span> <span class="s1">&#39;.&#39;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">javaexec</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">main</span> <span class="o">=</span> <span class="s1">&#39;io.gatling.app.Gatling&#39;</span>
</span><span class='line'>                <span class="n">classpath</span> <span class="o">=</span> <span class="n">sourceSets</span><span class="o">.</span><span class="na">test</span><span class="o">.</span><span class="na">output</span> <span class="o">+</span> <span class="n">sourceSets</span><span class="o">.</span><span class="na">test</span><span class="o">.</span><span class="na">runtimeClasspath</span>
</span><span class='line'>                <span class="n">args</span> <span class="s1">&#39;-sbf&#39;</span><span class="o">,</span>
</span><span class='line'>                        <span class="n">sourceSets</span><span class="o">.</span><span class="na">test</span><span class="o">.</span><span class="na">output</span><span class="o">.</span><span class="na">classesDir</span><span class="o">,</span>
</span><span class='line'>                        <span class="s1">&#39;-s&#39;</span><span class="o">,</span>
</span><span class='line'>                        <span class="n">gatlingScenarioClass</span><span class="o">,</span>
</span><span class='line'>                        <span class="s1">&#39;-rf&#39;</span><span class="o">,</span>
</span><span class='line'>                        <span class="s1">&#39;build/reports/gatling&#39;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">logger</span><span class="o">.</span><span class="na">lifecycle</span> <span class="o">(</span><span class="s2">&quot; ---- Done executing all Gatling scenarios ----&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这是借助于Gatling的command line运行功能来实现的。具体参数指定官网上有，这里贴出原文。</p>

<blockquote><p>Command Line Options #
Gatling can be started with several options listed below:</p></blockquote>

<ul>
<li> -nr (&ndash;no-reports): Runs simulation but does not generate reports</li>
<li> -ro <folderName> (&ndash;reports-only <folderName>): Generates the reports for the simulation log file located in <gatling_home>/results/<folderName></li>
<li> -df <folderAbsolutePath> (&ndash;data-folder <folderAbsolutePath>): Uses <folderAbsolutePath> as the folder where feeders are stored</li>
<li> -rf <folderAbsolutePath> (&ndash;results-folder <folderAbsolutePath>): Uses <folderAbsolutePath> as the folder where results are stored</li>
<li> -bf <folderAbsolutePath> (&ndash;request-bodies-folder <folderAbsolutePath>): Uses <folderAbsolutePath> as the folder where request bodies are stored</li>
<li> -sf <folderAbsolutePath> (&ndash;simulations-folder <folderAbsolutePath>): Uses <folderAbsolutePath> as the folder where simulations are stored</li>
<li> -sbf <folderAbsolutePath> (&ndash;simulations-binaries-folder <folderAbsolutePath>): Uses <folderAbsolutePath> as the folder where simulation binaries are stored</li>
<li> -s <className> (&ndash;simulation <className>): Uses <className> as the name of the simulation to be run</li>
<li> -sd <text> (&ndash;simulation-description <text>): Uses <text> as simulation description</li>
</ul>


<p>我在github上创建了一个示例项目，请参见<a href="https://github.com/huangbowen521/gatling-gradle">https://github.com/huangbowen521/gatling-gradle</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AWS系列之一 亚马逊云服务概述]]></title>
    <link href="http://www.huangbowen.net/blog/2014/07/11/aws-overview/"/>
    <updated>2014-07-11T17:50:26+10:00</updated>
    <id>http://www.huangbowen.net/blog/2014/07/11/aws-overview</id>
    <content type="html"><![CDATA[<p>云计算经过这几年的发展，已经不再是是一个高大上的名词，而是已经应用到寻常百姓家的技术。每天如果你和互联网打交道，那么或多或少都会和云扯上关系。gmail、github、各种网盘、GAE、heroku等各种服务都属于云服务的范畴。那么云计算的定义到底是什么？这里有摘自wiki的定义。</p>

<!-- more -->


<blockquote><blockquote><p>Cloud computing in general can be defined as a computer network which includes, computing hardware machine or group of computing hardware machines commonly referred as a server or servers connected through a communication network such as the Internet, an intranet, a local area network(LAN) or wide area network(WAN).</p></blockquote></blockquote>

<p>从上面的定义可以看出，云计算可以看做一个计算网络，其由一组硬件主机作为服务器，然后通过通讯网络连接，从而给其他用户提供各种各样的服务。</p>

<p>以下是云计算的一个概念图。</p>

<p><img src="http://www.huangbowen.net/images/cloudComputer.png" width="800"></p>

<p>从该图中可以看出，云计算提供的服务可以分为三层，第一层是基础设施（Infrastructure）,第二层是平台（Platform）,第三层是应用软件（Application）。基础设置的服务包括虚拟或实体计算机、块级存储、网络设施（如负载均衡，内容交付网络，DNS解析）等，平台的服务包括对象存储、认证服务和访问服务、各种程序的运行时、队列服务、数据库服务等，而应用软件的服务则包括的多了，比如邮件服务、代码托管服务等等。用户可以通过台式电脑、手提电脑、手机、平板等各种互联网终端设备访问和使用这些服务。</p>

<p>其实这三层就是我们常说的IaaS（Infrastructure as a Service）、PaaS（Platform as a Service）、SaaS(Software as a Service)。</p>

<p><img src="http://www.huangbowen.net/images/cloudService.png" width="800"></p>

<p>亚马逊的云服务提供了多达几十种服务，涵盖了IaaS、PaaS、SaaS这三层。既然是亚马逊云服务，那么为什么通常都叫做Amazon Web Service（AWS）那，为什么不叫Amazon Cloud Service之类的那？这个就不得而知了，估计当时AWS第一个服务出来的时候是2006年，那时候云的概念还没有这么火，而web service则如日中天，所以起了个这个名字。好了不八卦了，先看看亚马逊云计算的架构图。</p>

<p><img src="http://www.huangbowen.net/images/awsstructure.png" width="800"></p>

<p>从该架构图可以看出，亚马逊云服务由7部分组成。接下来对这7部分的主要服务做一个简要的介绍。</p>

<h2>AWS Global Infrastructure(AWS 全局基础设施)</h2>

<p>在全局基础设施中有3个很重要的概念。第一个是Region（区域），每个Region是相互独立的，自成一套云服务体系，分布在全球各地。目前全球有10个Region，北京的Region已经在内测当中，不久就会开放使用。</p>

<p>第二个是Availability Zone(可用区)，每个Region又由数个可用区组成，每个可用区可以看做一个数据中心，相互之间通过光纤连接。</p>

<p>第三个是Edge Locations（边缘节点）。全球目前有50多个边缘节点，是一个内容分发网络（CDN，Content Distrubtion Network），可以降低内容分发的延迟，保证终端用户获取资源的速度。它是实现全局DNS基础设施（Route53）和CloudFront CDN的基石。</p>

<h2>Networking（网络）</h2>

<p>AWS提供的网络服务主要有：</p>

<ul>
<li><p>Direct Connect： 支持企业自身的数据中心直接与AWS的数据中心直连，充分利用企业现有的资源。</p></li>
<li><p>VPN Connection：通过VPN连接AWS，保证数据的安全性。</p></li>
<li><p>Virtual Private Cloud： 私有云，从AWS云资源中分一块给你使用，进一步提高安全性。</p></li>
<li><p>Route 53：亚马逊提供的高可用的可伸缩的域名解析系统。</p></li>
</ul>


<h2>Compute（计算）</h2>

<p>这可是亚马逊的计算核心，包括了众多的服务。</p>

<ul>
<li><p>EC2： Elastic Computer service,亚马逊的虚拟机，支持Windows和Linux的多个版本，支持API创建和销毁，有多种型号可供选择，按需使用。并且有auto scaling功能，有效解决应用程序性能问题。</p></li>
<li><p>ELB： Elastic Load Balancing， 亚马逊提供的负载均衡器，可以和EC2无缝配合使用，横跨多个可用区，可以自动检查实例的健康状况，自动剔除有问题的实例，保证应用程序的高可用性。</p></li>
</ul>


<h2>Storage（存储）</h2>

<ul>
<li><p>S3： Simple Storage Service，简单存储服务，是亚马逊对外提供的对象存储服务。不限容量，单个对象大小可达5TB，支持静态网站。其高达99.999999999%的可用性让其它竞争对手胆寒。</p></li>
<li><p>EBS： Elastic Block Storage，块级存储服务，支持普通硬盘和SSD硬盘，加载方便快速，备份非常简单。</p></li>
<li><p>Glacier：主要用于较少使用的存储存档文件和备份文件，价格便宜量又足，安全性高。</p></li>
</ul>


<h2>Database（数据库）</h2>

<p>亚马逊提供关系性数据库和no sql数据库，以及一些cache等数据库服务。</p>

<ul>
<li><p>DynamoDB： DynamoDB是亚马逊自主研发的no sql型数据库，性能高，容错性强，支持分布式，并且与Cloud Watch、EMR等其它云服务高度集成。</p></li>
<li><p>RDS： Relational Database Service，关系型数据库服务。支持MySql，SQL Server和Oracle等数据库，具有自动备份功能，IO吞吐量可按需调整。</p></li>
<li><p>Amazon ElastiCache： 数据库缓存服务。</p></li>
</ul>


<h2>Application Service（应用程序服务）</h2>

<p>这里的服务可就多了。</p>

<ul>
<li><p>Cloud Search: 一个弹性的搜索引擎，可用于企业级搜索。</p></li>
<li><p>Amazon SQS： 队列服务，存储和分发消息。</p></li>
<li><p>Simple Workflow：一个工作流框架。</p></li>
<li><p>CloudFront：世界范围的内容分发网络。</p></li>
<li><p>EMR： Elastic MapReduce，一个hadoop框架的实例，可用于大数据处理。</p></li>
</ul>


<h2>Deployment &amp; Admin (部署和管理)</h2>

<ul>
<li><p>Elastic BeanStalk: 一键式创建各种开发环境和运行时。</p></li>
<li><p>CloudFormation：采用jason格式的模板文件来创建和管理一系列亚马逊云资源。</p></li>
<li><p>OpsWorks： OpsWorks允许用户将应用程序的部署模块化，可以实现对数据库、运行时、服务器软件等自动化设置和安装。</p></li>
<li><p>IAM： Identity &amp; Access Management，认证和访问管理服务。用户使用云服务最担心的事情之一就是安全问题。亚马逊通过IAM提供了立体化的安全策略，保证用户在云上的资源绝对的安全。用户通过IAM可以管理对AWS资源的访问。通过IAM可以创建group和role来授权或禁止对各种云资源的访问。</p></li>
</ul>


<p>如果想获取更多知识可以访问亚马逊AWS的官网<a href="http://aws.amazon.com/">http://aws.amazon.com/</a>。如果想查看每个服务的详细信息，可以查看它们的官方文档<a href="https://aws.amazon.com/documentation/?nc1=h_su_dm">https://aws.amazon.com/documentation/?nc1=h_su_dm</a>。还有亚马逊的所有云服务都提供了API接口进行调用，并且提供了命令行工具Amazon CLI（Command Line Interface）来使用，详细信息请参见<a href="http://docs.aws.amazon.com/cli/latest/index.html">http://docs.aws.amazon.com/cli/latest/index.html</a>。</p>

<p>另外，亚马逊提供了一个网址用于练习对AWS服务的使用。地址是<a href="https://run.qwiklabs.com">https://run.qwiklabs.com</a>,还没有申请AWS账号的同学有福了，里面有6节免费的课程，可以根据提示一步步操作AWS资源，并且消耗的资源都是免费的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[成都亚马逊AWSome Day回顾]]></title>
    <link href="http://www.huangbowen.net/blog/2014/07/07/awsome-day-memo/"/>
    <updated>2014-07-07T15:54:42+10:00</updated>
    <id>http://www.huangbowen.net/blog/2014/07/07/awsome-day-memo</id>
    <content type="html"><![CDATA[<p>昨天我和公司同仁一起参加了亚马逊在成都的第一场AWSome Day活动。整个活动时间异常紧促，短短一天包含了7堂session，讲师的狂轰乱炸使得我们同学们普遍觉得比上班累多了。好了，废话不多说，让我们来回顾一下昨天都讲了那些东西。</p>

<!-- more -->


<p>第一个session主题是AWS技术推动的创新。听名称就知道给亚马逊云服务打广告了。里面讲述了AWS各种服务的牛逼，讲师说AWS计算量=其余15家云计算平台总计算量 * 5。是不是吹牛不得而知了。还有一点是AWS自从2006年发布以来经历了43次主动降价。就我个人使用AWS服务而言，感觉价格还是挺公道的。我的个人博客使用了AWS的Route53，S3，CloudFrond等服务，一个月收费也不过1刀多。这个session一句话来总结就是我们最牛B，其它的都是渣渣。当然亚马逊讲师这样说毕竟还是有一定底气的。</p>

<p>第二个session主题是AWS服务概览。讲师带领我们对AWS的服务做了一个整体回顾。其计算服务主要包括EC2，存储服务包括S3，EBS，Glacier。数据库服务包括Redshift，DynamoDB，RDS，ElasticCache。部署与自动化服务包括CloudFormation，BeanStalk，OpsWorks。认证与访问服务IAM。网络服务VPC，Route53，ELB，Direct Connect。分布式计算服务包括Amazon EMR, Auto Scaling。内容传输服务CloudFront。大家看到这里是不是有点头晕了？</p>

<p>第三个session主题是AWS存储服务。讲师仔细介绍了S3，EBS，Glacier三种存储服务的不同与适用场景。S3的容灾率最高，可用性最高，并且每个存储文件附带一个url，可以直接访问。EBS价格公道，需要配合S3或EC2来访问使用。而Glacier相当于存档文件，可以保存10年以上，价格最低。如果你上存储的数据大于1TB，甚至PB级别，亚马逊还贴心的提供了数据Import/Export服务，那速度是杠杠的，可以达到几十GB的传输速率。那么亚马逊是如何达到这样的带宽那？方法是你把你的硬盘邮寄给亚马逊数据中心，亚马逊数据中心直接外挂你的硬盘进行数据导入。</p>

<p>吃了免费的午餐，下午的一大波session又来袭了。</p>

<p>下午第一场session是关于AWS计算服务和网络。讲师介绍了最常用的EC2服务，还有用于大数据分析和挖掘的EMR系统。并且顺带讲述了CloudFront，Rout53，ELB等是如何协作来提供网络应用程序的访问速度的。还有亚马逊那神奇的Auto Scalling技术。安全是云服务的重中之重。亚马逊采用了IAM来统一管理和分配对云上的资源的各种访问。用户可以创建用户名和密码，创建access key，创建用户组等多种方式来控制对各种资源的访问。亚马逊也提供了VPC和路由机制来实现公网和私有局域网的的隔离和访问。</p>

<p>第二场session是关于AWS管理的服务和数据库。亚马逊提供DynamoDB，RDS，Redshift，ElasticCache等与数据库有关的服务。其中DynamoDB是亚马逊自护研发的no sql数据库系统，自然少不了一番大吹特吹。RDS数据库支持mysql，Oracle，sql server等。这些数据库服务都支持自动备份，每隔5分钟备份一次，备份文件可保存0-35天。用户也可以手动备份，将备份文件放置到S3中永久保存。Redshift是亚马逊提供的数据仓库服务，可帮助你使用现有的商业智能工具进行大数据分析和处理。ElasticCache是亚马逊内置的缓存服务，DynamoDB，RDS数据库都可使用，可有效提高数据库吞吐量。</p>

<p>第三场session是AWS的部署和管理。CloudWacth可以检测云上的资源，并根据配置的policy来自动进行scale out和scale in。比如如果CloudWatch发现EC2实例的cpu占用率在90%以上并保持5分钟，则会自动setup新的EC2服务器并注册到ELB上。使用的好的话运维人员再也不同半夜从床上爬起来解决问题了。而CloudFormation，Elastic Beanstalk，OpsWorks都是DevOps工具箱中不可缺少的工具，如果要实现inforstructure as code，这些工具可助你一臂之力。</p>

<p>最后一个session是AWS解决方案参考架构概览。这里主要说明了你的应用程序如果要放到云上，在设计架构的时候需要遵守一定的准则，否则无法使用到云的优势，结果适得其反。比如AWS提供给你菜刀切肉，水果刀切水果。你偏偏拿个水果刀切肉还直吆喝着不好使，那就不对了。总之一句话，架构设计时一定要SOA，SOA，SOA。</p>

<p>OK，大概内容就是这样了。听了以后是不是想亲自动手。什么？还有没有AWS账号？什么？还没有信用卡？什么？不知道哪里有详细的学习文档？</p>

<p>统统忘掉这些吧。AWS祭出了神器：<a href="https://run.qwiklabs.com">https://run.qwiklabs.com</a>。这是一个用于学习和演练亚马逊各种服务的实验室，只需花一分钟注册即可使用。里面有各种服务的详细操作文档，并且支持真实演练。当你选择一堂课后，qwiklabs会自动给你生成一个AWS账号，你可以使用该账号登陆到真实的亚马逊云服务终端中进行各种破坏而不花费你一毛钱。想当年我自己play with AWS各种云服务时可没少花冤枉钱。</p>

<p>熟悉了亚马逊云，学习其它云还不是小菜一碟。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[微服务-分解应用程序从而实现更好的部署特性及可伸缩性]]></title>
    <link href="http://www.huangbowen.net/blog/2014/06/08/microservice/"/>
    <updated>2014-06-08T21:07:01+10:00</updated>
    <id>http://www.huangbowen.net/blog/2014/06/08/microservice</id>
    <content type="html"><![CDATA[<p>本文是我翻译INFQ上的一篇文章。作者Chris由简入深的讲解了微服务的来龙去脉、使用场景、优势劣势、以及现有技术栈向微服务架构的重构步骤。是一篇微服务主题的不可多得的好文。</p>

<p>原文地址：<a href="http://www.infoq.com/articles/microservices-intro?utm_source=infoq&amp;utm_medium=popular_links_homepage#.U4-QbLLNKmI.gmail">http://www.infoq.com/articles/microservices-intro?utm_source=infoq&amp;utm_medium=popular_links_homepage#.U4-QbLLNKmI.gmail</a></p>

<!-- more -->


<h2>微服务：分解应用程序从而实现更好的部署特性及可伸缩性</h2>

<p>本文描述了越来越受欢迎的<a href="http://microservices.io/patterns/microservices.html">微服务架构模式</a>（Microservice architecture pattern）。微服务背后的大创意是将大型的、复杂的、长期的应用程序架构为随时进化的紧密结合的一组服务。术语微服务强烈建议服务应当是微小的。</p>

<p>社区中甚至提倡构建10-100个LOC服务。然而，拥有微小的服务是可取的，但其不应该是主要目的。你应该旨在将你的系统分解为服务，从而解决下面讨论的开发及部署问题。一些服务确实应当是微小的，其它的则有可能是相当大的。</p>

<p>微服务架构的本质并不是一个新事物。分布式系统的概念是非常古老的。微服务架构也类似于SOA。</p>

<p>在本文中，你将学习使用微服务架构的动机以及与更传统的架构-单块架构（monolithic architecture）的比较。我们讨论了微服务的优点和缺点。你将学习如何通过微服务架构来解决一些关键的技术挑战，包括服务间通讯和分布式数据管理。微服务甚至被称为轻量级的或细粒度的SOA。确实，某种意义上说微服务是非商业化的不能感知WS*和ESB包的SOA。尽管微服务并不是新鲜的玩意，但是仍值得讨论，因为它与传统的SOA是不同的，更重要的是，它解决了许多组织当前遭受的很多问题。</p>

<h3>（有时是邪恶的）单块架构</h3>

<p>开发web程序的最早期时间，最被广泛使用的企业程序架构是将程序的服务器端组件打包为单个单元。很多企业Java应用程序由单个WAR或EAR文件组成。其它语言（比如Ruby，甚至C++）编写的应用程序也大抵如此。</p>

<p>让我们想象一下，例如你在构建一个在线商店，从客户那里获取订单，验证清单及可用的信用卡，然后运送。你构建的程序与图1所示会非常相似。</p>

<p><img src="http://www.huangbowen.net/images/map.png" width="700" title="'单块架构’" ></p>

<p>图 1单块架构</p>

<p>该应用程序由好几个组件组成。包括了存储前端UI，其实现了用户接口，和服务一起管理产品分类，处理订单和管理客户的账户。这些服务共享一个由多个实体组成的领域模型，实体包括产品，定点和客户等。</p>

<p>尽管该程序拥有一个逻辑清晰的模型设计，但仍是一个单块架构。例如，如果你是使用Java，则该应用程序将由一个单独的WAR文件组成，并且运行在一个web容器中（比如Tomcat）。该程序的Rails版本可能会有一个具有一定层级结构的目录组成，部署也使用该目录，比如使用Phusion Passenger部署在Apache/Nginx，或者使用JRuby部署在Tomcat。</p>

<p>这种所谓的单块架构有一定的优点。单块架构的应用程序非常容易开发，因为IDE及其它开发工具都适合开发单个应用程序。这些程序也很容易被测试，你只需启动一个程序即可。单块架构的应用程序也很容易部署，因为你只需复制开发单元（一个文件或目录）到一个运行者相应服务容器的机器即可。</p>

<p>相对而言该方式更适用于小程序。然而，单块架构在复杂的程序中很难驾驭。一个庞大的单块程序对于开发者来说很难理解和维护。它对频繁改动的开发过程来说也是一种阻碍。为了对某个程序组件做修改，你不得不构建和部署整个程序，这相当复杂，风险极大，也比较耗时，需要很多开发者共同协作，还需要较长的测试周期。</p>

<p>单块架构也使得试用和采用新的技术变得困难。例如，尝试一个新的基础设施框架而不重写整个程序是非常困难的，风险又大又不现实。因此，你经常被项目开始时你做的技术选型阻塞。换句话说，单块架构对于支持大型的，周期长的应用程序并不具备伸缩性。</p>

<h3>将应用程序分解为服务</h3>

<p>幸运的是，有其它的具有可伸缩性的架构风格。《The Art of Scalability》一书中描述了真实有用的三维伸缩性模型：伸缩性立方体，如图2所示。</p>

<p><img src="http://www.huangbowen.net/images/tsc.png" width="700" title="'伸缩性立方体'" ></p>

<p>图2 伸缩性立方体</p>

<p>在该模型中，通过一个负载均衡来运行应用程序的多个完全一样的副本的方式来实现应用程序伸缩性，这种方式称为X轴伸缩性。这是一种很好的方式来提高应用程序的容量和可用度。</p>

<p>当使用Z轴伸缩性，每个服务器运行代码的一个完全相同的副本。在该方面，它与X轴伸缩性很相似。最大的不同是每个服务器只负责数据的一个子集。该系统的一些组件负责将每个请求路由给适当的服务器。一个常见的路由规则是把请求的一个属性作为被访问的实体的主键，比如分区。另一个常见的路由规则是客户类型。例如，应用程序可以向付费用户提供比免费用户更高的SLA，实现方式是将付费用户的请求路由到具有更高容量的一组服务器上。</p>

<p>Z轴伸缩性与X轴伸缩性类似，提高了应用程序的容量和可用度。然而，没有任何一个方式能够解决不断增加的开发工作和程序复杂度的问题。解决这些问题需要Y轴伸缩性。</p>

<p>伸缩性的第三个维度是针对功能性分解的Y轴伸缩性。Y轴伸缩性与Z轴伸缩性分解事情的方式相似但有不同。在应用程序层级，Y轴伸缩性将单块应用程序分割为一组服务。每个服务实现了一组相关的功能特性，例如订单管理，客户管理等。</p>

<p>决定如何将系统分割为一组服务更像是一门艺术，但是可借助于一些策略。一种方式是通过动词或使用情况分割服务。例如，接下来你会看到被分割的在线商店有一个结账UI服务，其实现了结账用例的UI。</p>

<p>另一个分割方式是通过名词或资源分割系统。这种服务负责处理给定的实体/资源的所有操作。例如，稍后你将看到为什么在线商店拥有目录服务是有道理的，其管理产品的目录。</p>

<p>理想情况下，每个服务只有一小组职责。Bob Martin(大叔)讨论了使用单一职责原则设计类。SRP定义了类的职责为有且只有一个理由被改变。将SRP应用到服务设计中也是有道理的。</p>

<p>另一个有助于服务设计的类似设计是Unix工具的设计。Unix提供了大量的工具，比如grep，cat和find。每个工具只做一件事，效果往往非常好，并且可以使用shell脚本组合多个工具以执行复杂的任务。在Unix工具中对服务建模并创建单一功能服务很有道理。</p>

<p>强调分解的目标不只是为了拥有微小的（例如，一些主张有10-100 LOC）服务。相反，目标是解决之前讨论过的实际问题和单块架构的局限性。一些服务应当是微小的，但是其它服务可能更大些。</p>

<p>如果应用Y轴来分解示例程序，我们得到的架构如图3所示。</p>

<p><img src="http://www.huangbowen.net/images/msa.png" width="700" title="‘微服务架构’" ></p>

<p>图3 微服务架构</p>

<p>分解后的程序由各种各样的前台服务和多个后台服务组成，这些前台服务实现了用户接口不同部分。前台服务包括目录UI和结账UI。目录UI实现了产品搜索和浏览，结账UI实现了购物车和结账流程。后台服务包含了在文章开始时相同的逻辑服务。我们将该应用程序的每个主要的逻辑组件转换为了独立的服务。让我们看看这样做的后果。</p>

<h3>微服务架构的优点和缺点</h3>

<p>该架构有一些优点。首先，每个微服务相对较小。开发者很容易理解该代码。少量的代码不会拖慢IDE，使得开发者更加高效。并且，每个服务比一个大型的单块程序启动速度要快的多，这又一次使得开发者更加高效，加快部署过程。</p>

<p>其次，每个服务的部署与其它服务是独立的。如果某程序员只对一个服务负责，并且想要对该服务部署一个改动，只需修改f本地服务而无需其他程序员的协作。程序员部署修改很简单。微服务使得持续部署更加可行。</p>

<p>第三，每个服务可通过X轴复制和Z轴分割独立于其它服务进行扩展。此外，每个服务可被部署到最适合该服务的资源要求的硬件上。这与使用单块架构的情况完全不同，单块架构中的组件的资源要求是不同的，例如是CPU密集型的还是内存密集型的，但是你又必须一起部署。</p>

<p>微服务架构使得开发过程更具扩展性。你可以使用多个小型(例如，两个披萨饼)的团队进行开发。每个团队只负责对单个服务或一组相关的服务的开发和部署。每个团队可独立于其它的团队来开发，部署和扩展他们的服务。</p>

<p>微服务架构也提升了错误隔离。例如，一个服务中的内存泄露只影响该服务。其它服务将会继续正常的处理请求。对比而言，一个单块架构的具有错误行为的组件会使整个系统崩溃。</p>

<p>最后但不是最重要的一点，微服务架构消除了技术栈任何长期的承诺。原则上来说，当开发一个新的服务时，开发者可以选择任何适合于当前服务的语言和框架。当然，许多组织团体限制这些选择也有一定道理，但是关键点在于你不受限于过去的决定。</p>

<p>此外，由于服务是微小的，使用其它语言和技术重写服务也变得更加实用。这也意味着如果尝试新技术失败，你只需丢掉这些工作而无需给整个项目带来风险。这与使用 单块架构是完全不同的，这里你最初的技术选择会严格限制未来使用不同的语言和框架的能力。</p>

<h3>缺点</h3>

<p>当然，没有任何一项技术是银弹，微服务也有一些重大的缺点和问题。首先，开发者必须面对创建一个分布式系统的额外的复杂性。开发者必须实现一个进程间通讯机制。不用分布式事务实现跨服务的用例是困难的。IDE和其它的开发工具关注于创建单块架构的应用程序，并不对开发分布式应用程序提供显式的支持。编写引用了多个服务的自动化测试颇具挑战性。而你使用单块架构则无需处理这些问题。</p>

<p>微服务架构也引入了重大的操作复杂度。有很多容易变动的部分（不同类型的服务的多个实例）需要在产品环境中管理。要成功实现这点你需要高级别的自动化，无论是自己编写的代码还是类似于PaaS的技术（例如Netfix Asgard）和相关的组件，或者一个现成的PaaS（例如Pivotal Cloud Foundry）。</p>

<p>而且，跨多个服务开发功能要求多个开发团队间小心翼翼的协作。你需要创建一个展示计划，该计划基于服务间依赖情况而制定服务部署顺序。这与使用单块架构的情形非常不同，你只需使用原子操作即可部署更新多个组件。</p>

<p>使用微服务架构的另一个挑战是在应用程序的那个周期点决定使用该架构。当开发应用程序的第一个版本时，你通常不会遇到该架构能够解决的问题。此外，使用复杂的分布式架构会拖慢开发速度。</p>

<p>这可能在项目刚开始时陷入左右为难的情况，最大的挑战经常是如何伴随着应用程序快速演化业务模型。使用Y轴分割可能会导致快速迭代更加困难。然而，当挑战变为如何提高可伸缩性时你需要使用功能性分解，但是纠缠不清的依赖使得将单块应用程序分解为一组服务变得困难。</p>

<p>正因为如此，不能轻易着手采用微服务架构。然而，对于需要高伸缩性的应用程序，比如面向消费者的web程序或SaaS程序，采用微服务架构通常是正确选择。一些出名的网站，比如eBay，Amazon.com，Groupon和Gilt都已经把单块架构进化为微服务架构。</p>

<p>现在我们已经知道微服务架构的关键设计的优点和缺点，现在开始了解程序间和程序与客户端的通讯机制。</p>

<h3>微服务架构中的通讯机制</h3>

<p>微服务架构中，应用程序和客户端通讯的模式，以及应用程序组件间的通讯机制与单块应用程序是不同的。首先来看应用程序的客户端与微服务是如何交互的。接下来我们将查看应用程序内部的通讯机制。</p>

<h4>API网关模式</h4>

<p>在单块架构中，应用程序的客户端，比如web浏览器和原生应用程序，发送HTTP请求通过一个负载均衡到N个完全一样的应用程序实例的其中一个。但在微服务架构中，单块程序被服务集合替代。结果，我们需要回答的关键问题是客户端应该与什么交互？</p>

<p>一个应用程序客户端，比如原生的移动应用程序，可以向单个服务发送RESTful HTTP请求，如图4所示。</p>

<p><img src="http://www.huangbowen.net/images/csd.png" width="700" title="‘直接调用服务’" ></p>

<p>图4 直接调用服务</p>

<p>表面上来看这很有吸引力。然而，在单个服务的API和客户需要的数据之间可能会有一个显著的错误匹配粒度。例如，显示一个网页可能潜在需要调用大数量的服务。例如Amazon.com，描述了一些页面如何需要100+的服务调用。即使在高速的网络连接下，更不用说低带宽，高延迟的移动网络，如此多的请求会非常低效且导致低劣的用户体验。</p>

<p>更好的方式是客户端对每个页面发出少量的请求，甚至少至一个在互联网前端服务器被称为API网关，如图5所示。</p>

<p><img src="http://www.huangbowen.net/images/apig.png" width="700" title="‘API网关’" ></p>

<p>图5 API网关</p>

<p>API网关位于应用程序的客户端与微服务之间。它提供了专为客户端定制的API。API网关为移动客户端提供了粗粒度的API，为桌面客户端提供了细粒度的API，因为客户端使用高性能的网络。在本例中，桌面客户端发送多个请求来获取一个产品信息，而移动客户端只发送单个请求。</p>

<p>API网关处理接收的请求，将这些请求通过高性能的局域网（LAN）转发给一定数量的微服务。例如,Netfix描述了每个请求如何平均分给6个后台服务。在本例中，从桌面客户端发送来的细粒度的请求只是被简单的代理给对应的服务，而从移动客户端发来的粗粒度的请求处理的方式是组合调用多个服务的结果。</p>

<p>API网关不仅可以优化客户端和应用程序间的通讯，也能隐藏微服务的细节。这使得微服务的进化不会影响客户端。例如，两个微服务可能会被合并。另一个微服务则可能被分割为两个或更多的服务。API网关唯一需要的做的是更新或反映这些修改。客户端完全不受影响。</p>

<p>现在已经知道了API网关是如何调解应用程序和其客户端的，现在看看如果实现微服务间的通讯。</p>

<h3>服务间通讯机制</h3>

<p>使用微服务架构的另一个不同之处是应用程序的组件之间交互方式的不同。单块应用程序中，组件间调用是通过常规的方法调用实现的。但是微服务架构中，不同的服务运行于不同的进程。结果，服务间必须使用一个进程间的的通讯（IPC）机制来交互。</p>

<h4>同步HTTP</h4>

<p>在微服务架构中有两个主要的方式实现进程间通讯。一种选项是基于同步HTTP的机制，比如REST或SOAP。这是简单和熟悉的IPC机制。它是防火墙友好的，所以可以穿透网络，而且实现通讯的请求/回复风格也比较容易。HTTP的低层不支持其它的通讯模式，比如发布-订阅模式。</p>

<p>另一个限制是客户端和服务器端必须保持同时在线，通常这不能随时保证，因为分布式系统很容易出现部分故障。而且，HTTP客户端需要知道服务器的主机地址和端口。听起来很简单，但整个并不简单，特别是在使用自动扩展的云部署中，这些服务实例是短暂的。应用程序需要使用一种服务发现机制（service discovery mechanism）。一些程序使用一个服务注册器，比如Apache ZooKeeper或Netflix Eureka。其它的程序中，服务必须注册到负载均衡器中，比如在Amazon VPC的一个内部的ELB。</p>

<h4>异步消息机制</h4>

<p>同步HTTP的一个替代方案是使用异步的基于消息的机制，比如基于AMQP的消息中间件。这种方式有一些优点。它解耦了消息生产者和消息消费者。消息中间件将缓存消息直到消费者能够处理它们。生产者完全不知道消费者的存在。生产者简单地与消息中间件交互，并且不需要使用服务发现机制。基于消息的通讯也支持多种通讯模式，比如单向请求和发布-订阅。使用消息的一个缺点是需要一个消息中间件，这是系统容易变动的另一部分，这会增加系统复杂度。另一个缺点是请求/回复风格的通讯不是天作之合。</p>

<p>两种方式各有优劣。应用程序可能混合使用这两种方式。例如，接下来的部分将会讨论在分段的架构中如何解决数据管理问题，你将看到如何同时使用HTTP和消息机制。</p>

<h3>分散数据管理</h3>

<p>将应用程序分解为服务的结果是数据库也被分割了。为了保证解耦，每个服务要有自己的数据库（模式）。此外，不同的服务可以使用不同的数据库，这被称为多语言的持久架构。例如，需要ACID事务的服务可能使用关系型数据库，而操作社交网络的服务可能使用图形数据库。分割数据库是必要的，但有一个新问题要解决：如何处理需要访问多个服务拥有的数据的请求。先来看如何处理读请求，再看如何处理更新请求。</p>

<h4>处理读请求</h4>

<p>例如，考虑在在线商店中每个客户有信用额度。当客户试图添加订单时，系统必须验证所有未结账单的总价不会超出信用额度。在整体应用程序中实现这种业务逻辑不难。但是如果客户是由客户服务管理，而其它部分由订单服务管理的情况下，在系统中实现登记更困难。订单服务必须通过某种方式访问由客户服务维护的信用额度信息。</p>

<p>一个解决方案是订单服务通过一个RPC调用向客户服务获取信用额度。这种方式很容易实现，而且保证了订单服务始终拿到的是最新的信用额度。缺点是它降低了可用性，因为客户服务必须时刻运行来订货。由于额外的RPC调用也增加了响应时间。</p>

<p>另一种方式是订单服务保存信用额度的一份副本。这消除了向客户服务发请求的需要，从而提高了可用性，减少了响应时间。然而，这意味着我们必须实现一种机制:当客户服务中的信用额度被修改时，来更新信用额度在订单服务中的副本。</p>

<h4>处理更新请求</h4>

<p>保持订单服务中信用额度一直是最新的问题是一个常见的问题的示例。该问题是如何处理更新被多个服务拥有的数据的请求。</p>

<h3>分布式事务</h3>

<p>当然，有个解决方案是使用分布式事务。例如，当更新客户的信用额度时，客户服务调用一个分布式的事务来更新本身的信用额度以及被订单服务维护的对应的信用额度。使用分布式事务也保证了数据的始终一致性。使用分布式事务的缺点是减少了系统可用性，因为所有参与者都必须可用，以保证事务能够提交。此外，分布式事务已经失宠，现代的软件栈（例如REST,NoSQL数据库等）通常已不支持分布式事务。</p>

<h3>事件驱动的异步更新</h3>

<p>另一种方式是使用事件驱动的异步复制。服务通过发布事件来宣布一些数据被修改。其它服务订阅这些事件来更新各自的数据。例如，当客户服务更新了一个客户的信用额度时，它发布了一个CustomerCreditLimitUpdatedEvent，其包含了客户id和新的信用额度值。订单服务订阅了这些事件并更新自身的信用额度副本。该事件流显示在图6中。</p>

<p><img src="http://www.huangbowen.net/images/rtclue.png" width="700" title="‘使用事件复制信用额度’" ></p>

<p>使用事件复制信用额度</p>

<p>本方式的主要优点是事件的生产者和消费者是解耦的。这不仅简化了开发，并且与分布式事务相比它提高了可用性。如果消费者无法处理事件，消息中间件会将消息保存在队列中直到消费者可以处理。该方式的主要缺陷是以一致性换可用性。应用程序的编写方式要能容忍最终一致性数据。开发者也需要实现修正事务来执行逻辑回滚。尽管有此缺陷，但仍不失为许多程序中的最佳方式。</p>

<h3>重构单块架构</h3>

<p>不幸的是我们不能总是工作于新品牌的绿色项目。如果你在负责一个大型的可怕的单块程序的项目中，那是个好机会。每天你都会处理在文章开头描述过的那些问题。好消息是有很多你可以使用的技术来分解你的单块应用程序为一组服务。</p>

<p>首先停止让问题更糟。不要继续通过向单块应用程序添加代码的方式来实现新功能。你应当采用某种方式来将新功能实现为独立的服务，正如图7所示。这可能并不容易。你可能会编写凌乱的，复杂的胶水代码来向单块应用程序集成服务。但这是打散单块程序的第一步。</p>

<p><img src="http://www.huangbowen.net/images/eas.png" width="700" title="‘抽取服务’" ></p>

<p>图7 抽取服务</p>

<p>其次，识别单块程序的组件并转换为紧密结合的独立服务。从组件抽取的好的候选者是不断改变的组件，或有资源需求冲突的组件，比如大型的内存缓存或CPU密集型操作。表示层也是另一个好的候选者。然后你可以将该组件转换为服务并编写胶水代码来与程序的其它部分集成。再一次，这可能很痛苦，但是它使你可以增量迁移到微服务架构。</p>

<h3>总结</h3>

<p>单块架构模式是构建企业级应用程序常用的模式。对于小的应用程序它很适用：开发，测试和部署小型的单块程序相对简单。但是，对于大型的复杂的应用程序，单块架构会阻碍开发和部署。如果你经常长期的锁定你的初始技术选择，则会使得持续交付变得困难。对于大型的应用程序，更适合适用微服务架构，其将应用程序分解为一组服务。</p>

<p>微服务架构有很多优点。例如，单个服务更容易理解，可以独立于其它服务来开发和部署。也更容易使用新的语言和技术，因为你可以一次只对一个服务尝试新技术。微服务架构也有一些显著的缺点。特别是对那些更复杂，拥有更多变化部分的应用程序。你需要高级别的自动化，比如PaaS，来高效的使用微服务。你也需要在开发微服务时处理一些复杂的分布式数据管理问题。尽管有这些缺点，微服务架构还是更适用于大型的复杂的应用程序，因为可以快速演化，特别是针对SaaS风格的应用程序。</p>

<p>有多种多样的策略来增量地将单块应用程序演化为微服务架构。开发者需要将新的功能实现为服务并编写胶水代码来将该服务与单块应用程序集成。也可以反复识别可从单块程序中抽取组件并转换为服务。演化并不容易，但总比开发和维护一个难驾驭的单块应用程序要好。</p>

<h3>关于作者</h3>

<p>Chris Richardson是一个开发者和架构师。他是Java拥护者，JavaOne 摇滚明星以及POJOs in Action一书的作者。该书描述了如何使用POJOs和诸如Spring和Hibernate的框架构建企业级Java应用。Chris也是original Cloud Foundry（一个针对Amazon EC2的早期Java PaaS）的创始人。他向组织机构做咨询从而提高人们的开发和部署技能，比如使用云计算，微服务，以及NoSQL。Twitter ID @crichardson。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTML5和CSS3响应式WEB设计指南 译者序]]></title>
    <link href="http://www.huangbowen.net/blog/2014/05/31/translators-words-of-html5/"/>
    <updated>2014-05-31T01:30:32+10:00</updated>
    <id>http://www.huangbowen.net/blog/2014/05/31/translators-words-of-html5</id>
    <content type="html"><![CDATA[<p>&ldquo;不是我不明白，这世界变化快。”崔健的这首歌使用在互联网领域最合适不过。只短短数年的功夫，互联网的浪潮还没过去，移动互联网的时代已经来临。人们已经习惯将越来越多的时间花在各种移动设备上。各大互联网公司先知先觉，在移动互联网领域杀的不可开交，甚至很多传统行业公司也在积极寻求自身领域与移动互联网的结合点。</p>

<p>终端设备种类繁多，要给所有用户群带来一致的用户体验实属不易。在这种背景下，响应式设计应运而生。响应式Web设计的理念是，页面的设计与开发应当根据用户行为及设备环境进行相应的响应和调整。响应式设计并不是单纯设计者的事情，它是一系列技术栈的结合。HTML5和CSS3酝酿了多年终于落地,其在响应式设计中扮演着举足轻重的角色。</p>

<p>本书作者Benjamin LaGrone具有丰富的互联网设计和开发经验。本书共7章，系统的介绍了利用HTML5和CSS3进行响应式Web设计的方方面面。每一小节基本都分为准备工作、实现方式、工作原理三部分，每个知识点逐步展开。并且每个小节所对应的方法都有详实的示例代码，可供读者参考学习。</p>

<p>在翻译此书的过程中，我和同事饶勋荣合作非常愉快。同时也感谢华章公司的编辑们对我们工作的支持。另外，还要感谢家人对我的包容和照顾。</p>

<p>最后，希望本书能给大家带来超凡的阅读体验。</p>

<p>黄博文</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用亚马逊的Route53服务]]></title>
    <link href="http://www.huangbowen.net/blog/2014/04/24/use-aws-route53/"/>
    <updated>2014-04-24T01:36:22+10:00</updated>
    <id>http://www.huangbowen.net/blog/2014/04/24/use-aws-route53</id>
    <content type="html"><![CDATA[<p>自从自己的博客从github迁移到AWS以上，再也不用担心Github被墙了。再加上CloudFront的CDN功能，那访问速度真是杠杆的，无论是在中国内陆，还是澳洲海边，秒开无压力。</p>

<!-- more -->


<p>但是这几天突然发现博客打不开了。这可是切换到AWS上这么久以来的头一次。仔细研究了一下发现是自己的独立域名解析不到地址。我的独立域名买的是国内某公司的，使用的DNS服务器也是他们默认提供的。给他们技术人员反映以后，发现问题更有意思了。我在澳洲无法访问，而他在国内访问一切正常。这真是奇葩啊。</p>

<p>痛定思痛，决定将自己的域名解析服务迁移到AWS上来，使用Route53服务。</p>

<p>进入AWS Management Console以后，选择Route 53.</p>

<p><img src="http://www.huangbowen.net/images/route53.png" width="700"></p>

<p>在主界面点击<code>Create Hosted Zone</code>，输入Domain name和comments。Domain name是你的域名，comments是描述。</p>

<p><img src="http://www.huangbowen.net/images/create_hosted_zone.png" width="800"></p>

<p>完成以后就会看到有一个条目显示在表格中。双击这条记录。可以看到AWS已经为你创建了NS和SOA两种类型的Record Set。NS类型中的4个地址以后会用到，需要将你的域名提供商的DNS服务器换为这里列出的四个。</p>

<p><img src="http://www.huangbowen.net/images/hosted_zone_list.png" width="800"></p>

<p>我们先为WWW创建一个Rcord Set。点击<code>Create Record Set</code>按钮，在在右侧输入相应的信息。</p>

<p><img src="http://www.huangbowen.net/images/create_record_set.png" width="800"></p>

<p>AWS支持多种类型，由于我想让www.huangbowen.net指向我cloudfront的endpoint，所以选择CNAME，Value为我cloud front中的endpoint。最后点击<code>create</code>按钮。</p>

<p>这样在AWS这边就配置完成了。最后是需要登录到域名提供商的后台中，将域名解析服务器给换掉。</p>

<p><img src="http://www.huangbowen.net/images/change_DNS.png" width="800"></p>

<p>在这里，将DNS换为之前AWS自动生成的NS地址。</p>

<p>这样就大功告成了，要等待2小时到1天来让新的解析方式生效。这下可以达到全年99.99%可访问率了吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java中测试异常的多种方式]]></title>
    <link href="http://www.huangbowen.net/blog/2014/04/14/testing-exceptions-in-java/"/>
    <updated>2014-04-14T01:32:48+10:00</updated>
    <id>http://www.huangbowen.net/blog/2014/04/14/testing-exceptions-in-java</id>
    <content type="html"><![CDATA[<p>使用JUnit来测试Java代码中的异常有很多种方式，你知道几种？</p>

<!-- more -->


<p>给定这样一个class。</p>

<figure class='code'><figcaption><span>Person.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getAge</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">age</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setAge</span><span class="o">(</span><span class="kt">int</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">age</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">&quot;age is invalid&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">age</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们来测试setAge方法。</p>

<h2>Try-catch 方式</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">shouldGetExceptionWhenAgeLessThan0</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Person</span> <span class="n">person</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Person</span><span class="o">();</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">person</span><span class="o">.</span><span class="na">setAge</span><span class="o">(-</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>            <span class="n">fail</span><span class="o">(</span><span class="s">&quot;should get IllegalArgumentException&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IllegalArgumentException</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">assertThat</span><span class="o">(</span><span class="n">ex</span><span class="o">.</span><span class="na">getMessage</span><span class="o">(),</span><span class="n">containsString</span><span class="o">(</span><span class="s">&quot;age is invalid&quot;</span><span class="o">));</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这是最容易想到的一种方式，但是太啰嗦。</p>

<h2>JUnit annotation方式</h2>

<p>JUnit中提供了一个<code>expected</code>的annotation来检查异常。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="nd">@Test</span><span class="o">(</span><span class="n">expected</span> <span class="o">=</span> <span class="n">IllegalArgumentException</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">shouldGetExceptionWhenAgeLessThan0</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Person</span> <span class="n">person</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Person</span><span class="o">();</span>
</span><span class='line'>        <span class="n">person</span><span class="o">.</span><span class="na">setAge</span><span class="o">(-</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这种方式看起来要简洁多了，但是无法检查异常中的消息。</p>

<h2>ExpectedException rule</h2>

<p>JUnit7以后提供了一个叫做<code>ExpectedException</code>的Rule来实现对异常的测试。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="nd">@Rule</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">ExpectedException</span> <span class="n">exception</span> <span class="o">=</span> <span class="n">ExpectedException</span><span class="o">.</span><span class="na">none</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">shouldGetExceptionWhenAgeLessThan0</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Person</span> <span class="n">person</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Person</span><span class="o">();</span>
</span><span class='line'>        <span class="n">exception</span><span class="o">.</span><span class="na">expect</span><span class="o">(</span><span class="n">IllegalArgumentException</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>        <span class="n">exception</span><span class="o">.</span><span class="na">expectMessage</span><span class="o">(</span><span class="n">containsString</span><span class="o">(</span><span class="s">&quot;age is invalid&quot;</span><span class="o">));</span>
</span><span class='line'>        <span class="n">person</span><span class="o">.</span><span class="na">setAge</span><span class="o">(-</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这种方式既可以检查异常类型，也可以验证异常中的消息。</p>

<h2>使用catch-exception库</h2>

<p>有个catch-exception库也可以实现对异常的测试。</p>

<p>首先引用该库。</p>

<figure class='code'><figcaption><span>pom.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>        <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>            <span class="nt">&lt;groupId&gt;</span>com.googlecode.catch-exception<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;artifactId&gt;</span>catch-exception<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;version&gt;</span>1.2.0<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>            <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span> <span class="c">&lt;!-- test scope to use it only in tests --&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后这样书写测试。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">shouldGetExceptionWhenAgeLessThan0</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Person</span> <span class="n">person</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Person</span><span class="o">();</span>
</span><span class='line'>        <span class="n">catchException</span><span class="o">(</span><span class="n">person</span><span class="o">).</span><span class="na">setAge</span><span class="o">(-</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>        <span class="n">assertThat</span><span class="o">(</span><span class="n">caughtException</span><span class="o">(),</span><span class="n">instanceOf</span><span class="o">(</span><span class="n">IllegalArgumentException</span><span class="o">.</span><span class="na">class</span><span class="o">));</span>
</span><span class='line'>        <span class="n">assertThat</span><span class="o">(</span><span class="n">caughtException</span><span class="o">().</span><span class="na">getMessage</span><span class="o">(),</span> <span class="n">containsString</span><span class="o">(</span><span class="s">&quot;age is invalid&quot;</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样的好处是可以精准的验证异常是被测方法抛出来的，而不是其它方法抛出来的。</p>

<p>catch-exception库还提供了多种API来进行测试。</p>

<p>先加载fest-assertion库。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>        <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>            <span class="nt">&lt;groupId&gt;</span>org.easytesting<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;artifactId&gt;</span>fest-assert-core<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;version&gt;</span>2.0M10<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后可以书写BDD风格的测试。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">shouldGetExceptionWhenAgeLessThan0</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// given</span>
</span><span class='line'>        <span class="n">Person</span> <span class="n">person</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Person</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// when</span>
</span><span class='line'>        <span class="n">when</span><span class="o">(</span><span class="n">person</span><span class="o">).</span><span class="na">setAge</span><span class="o">(-</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// then</span>
</span><span class='line'>        <span class="n">then</span><span class="o">(</span><span class="n">caughtException</span><span class="o">())</span>
</span><span class='line'>                <span class="o">.</span><span class="na">isInstanceOf</span><span class="o">(</span><span class="n">IllegalArgumentException</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'>                <span class="o">.</span><span class="na">hasMessage</span><span class="o">(</span><span class="s">&quot;age is invalid&quot;</span><span class="o">)</span>
</span><span class='line'>                <span class="o">.</span><span class="na">hasNoCause</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果喜欢Hamcrest风格的验证风格的话，catch-exception也提供了相应的Matcher API。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">shouldGetExceptionWhenAgeLessThan0</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// given</span>
</span><span class='line'>        <span class="n">Person</span> <span class="n">person</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Person</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// when</span>
</span><span class='line'>        <span class="n">when</span><span class="o">(</span><span class="n">person</span><span class="o">).</span><span class="na">setAge</span><span class="o">(-</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// then</span>
</span><span class='line'>        <span class="n">assertThat</span><span class="o">(</span><span class="n">caughtException</span><span class="o">(),</span> <span class="n">allOf</span><span class="o">(</span>
</span><span class='line'>                <span class="n">instanceOf</span><span class="o">(</span><span class="n">IllegalArgumentException</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'>                <span class="o">,</span> <span class="n">hasMessage</span><span class="o">(</span><span class="s">&quot;age is invalid&quot;</span><span class="o">)</span>
</span><span class='line'>                <span class="o">,</span><span class="n">hasNoCause</span><span class="o">()));</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>第一种最土鳖，第二种最简洁，第四种最靠谱。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[跑在路上的程序员随想]]></title>
    <link href="http://www.huangbowen.net/blog/2014/04/07/running/"/>
    <updated>2014-04-07T23:46:35+10:00</updated>
    <id>http://www.huangbowen.net/blog/2014/04/07/running</id>
    <content type="html"><![CDATA[<p>来布里斯班出差已经一个多月了。这一个月每天除了上班就是回到公寓里面宅起，基本没怎么运动。以前在国内的时候还是经常运动的，每天上下班要骑行将近30公里，一周至少去打3次篮球。这样一直保持着健壮的体魄，所以这么多年基本没得过什么病。（只有3年前有两个月天天加班干私活，一天工作14，5个小时，身体垮了，输了几次液，从那以后再不敢这么拼命了。所以BAT、HW那些公司经常出现过劳死也不足为怪。我经常锻炼的身体都顶不住，何况那些体质本来就比较差的人那?）</p>

<!-- more -->


<p>来布里斯班以后由于人生地不熟，不知道那里有篮球场，也没带球鞋，所以就放松了身体锻炼。结果这1个月基本没睡过好觉。经常是下午就困的不行，一下班回到公寓就呼呼大睡，睡到晚上12点又醒了，结果折腾到凌晨4点才又睡着，然后顶着通红的熊猫眼去上班。本来以为是时差和水土原因，但是过了1个月还不见好转。并且虽然没咋运动，每天反而感觉腰酸背痛的。</p>

<p>这节奏不对啊，感觉缺乏运动是作息时间不规律的元凶。楼下虽然有免费的健身房，但是那些举重设备自己玩不转，使用跑步机还不如在户外跑。我住的公寓楼下就是布里斯班河，和两边有专用自行车道和步行道，是跑步健身的绝佳场所。以前经常看到有人沿着河边骑车和跑步。</p>

<p>今天下班后去买了双跑鞋，沿着布里斯班河跑了个圆环，总共有12公里。虽然长久不运动，但是身体底子还在。跑到1公里的没啥感觉，跑到3公里时有点疲劳，跑到5公里时双腿开始酸痛。但是我并没有停下休息或者放弃，而且是继续坚持。跑到8公里已经完全是机械式运动了。慢慢的有点坚持不住了，但是我仍给自己鼓劲。我知道现在是最艰难的时刻，如果停下来对自己会有一种挫败感，我一边想象着跑到终点时的欢心时刻，一边咬牙坚持。挺过了最艰难的时刻之后，跑起来反而有些轻松。自己跑到终点之后反而有点意犹未尽。</p>

<p>这只是一个自己对自己的小测验，但是我由此想到了很多事情。</p>

<p>去年7月份的时候，临时被通知到国外出差，一半惊喜一半恐惧。惊喜的是可以见见世面，恐惧的是英文说不溜的我如何在国外存活。思前想后，似有退缩之意。后来咬牙还是去了。在国外一个月也没缺胳膊少腿，生活的还算自在，工作上也没碰到什么难题。自己假想的各种场景基本都没发生过，即使有也被轻松化解。</p>

<p>再往前，2012年底的时候，同事说某编辑找人翻译书籍，我有些心动。但是考虑到自己英语不出色，业余时间还要学习技术，再说还要试译，机会就差点溜走了。后来自己还是抓住了机会，经历了一些波折最后还是拿下了翻译合同，和另一个同事花了前后8个月完成了此书。这个过程中虽然很辛苦，使用了不少业余时间，但是当拿到出版后的书时我还是比较兴奋的。毕竟算干了一件自己之前没干过的事情，竟然干成了。现在自己翻译的第二本书业接近尾声，4月下旬左右就可以定稿。</p>

<p>再往前一年，2012年初的时候，毅然决然从工作了3年的公司离职，踏上了找工作的旅途。前后经历了几十场面试，中间凶险不用多说。后来手头拿到了10来个offer，最后选择了ThoughtWorks。这段话看似平淡，实则那段日子过的惊心动魄。当时一边背负房贷，一边还接着私活，一边还一直坚持要找一个自己喜欢的公司，那种压力可想而知。当时一个月瘦了10多斤，有时候开玩笑说想减肥就买房然后换工作，保准一个月瘦下来。面试ThoughtWorks过程中有数次差点打了退堂鼓，但终究还是认真坚持到了面试最后一轮，收到了offer。</p>

<p>经过了这么多事情，我已经习惯了坚持。当自己想做一件事情的时候，不要先给自己找借口，自己把自己吓趴下，而应该把精力放到如何解决面临的困难上，如何推动想做的事情。纵使最后事情没达到预期，自己也努力过，也有收获，下次接着干。</p>

<p>人，有的时候就是要对自己狠一点，把坚持这个习惯应用到各种小事中，这样遇到大事你才能习惯性坚持。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用ruby过程中遇到安装gem失败的一些通用解决方案]]></title>
    <link href="http://www.huangbowen.net/blog/2014/04/05/some-tips-to-resolve-ruby-gem-installation-issues/"/>
    <updated>2014-04-05T21:45:31+10:00</updated>
    <id>http://www.huangbowen.net/blog/2014/04/05/some-tips-to-resolve-ruby-gem-installation-issues</id>
    <content type="html"><![CDATA[<p>ruby语言升级还是比较勤快的。但是数量众多的版本使得程序库的兼容性成了大问题。有些gem表示明确不支持某个特定版本以前的ruby，而有些gem则与较高的版本不兼容。再加上gem本身也有版本，简直是乱成了一锅粥。即使使用了rvm、rbenv之类ruby版本管理工具也避免不了掉入坑中。并且时不时的一些其它环境设置也给你捣乱。所以一般使用ruby程序时，对升级ruby版本或各种gem版本都是比较慎重的，避免一时手贱掉入坑中。</p>

<!-- more -->


<p>当然你也不能因此就做缩头乌龟，某些情况下还是不得不升级的。比如想使用ruby或gem新版本的特性。而我本人无论使用什么软件都喜欢升级到最新版本，ruby程序也不例外。时间久了栽的次数多了也慢慢摸索出了一些经验。这里分享一下，希望大家都能避免这些坑，大胆的升级。</p>

<p>由于本人使用的操作系统是mac，所以这些tips都是基于MAC系统的。</p>

<p>当运行ruby脚本或者bundle install时，出错了首先一定要仔细看错误日志。如果有明确的出错日志，自己能解决的就可以着手解决，不知如何解决的可以选取关键词google之，一般也能找到解决方案。怕就怕google一圈以后还是不知如何是好。那么可以尝试下下面的几种方法。</p>

<h2>升级ruby的小版本。</h2>

<p>首先将当前的rvm升级到最新版本。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rvm get stable
</span></code></pre></td></tr></table></div></figure>


<p>然后查看当前使用的ruby版本和服务端可用的ruby版本。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rvm list
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>rvm list known
</span></code></pre></td></tr></table></div></figure>


<p>虽然不打算升级ruby主版本，但是小版本是可以尝试升级下，看是否能解决问题。比如当前你的ruby使用的是ruby-1.9.3-p448，但是查看到目前可用的1.9.3最新版本为ruby-1.9.3-p545。那么可以尝试切换到这个新版本下看能否解决问题。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rvm install ruby-1.9.3-p545
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>rvm use ruby-1.9.3-p545
</span></code></pre></td></tr></table></div></figure>


<h2>确保Xcode及Command line developer tools为最新版本</h2>

<p>请确保本机的Xcode的 command line developer tools已经安装并且是最新版本。把Xcode升级到最新版本以后，在命令行下输入：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>xcode-select —install
</span></code></pre></td></tr></table></div></figure>


<p>这样会弹出来一个升级对话框来升级相应的软件。</p>

<h2>确保GCC为最新版本</h2>

<p>查看目前电脑的gcc的版本。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>gcc -v
</span></code></pre></td></tr></table></div></figure>


<p>如果需要更新gcc的话推荐通过homebrew来更新。首先更新homebrew。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew update
</span></code></pre></td></tr></table></div></figure>


<p>然后输入下列命令。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew tap homebrew/dupes
</span><span class='line'><span class="nv">$ </span>brew search gcc
</span></code></pre></td></tr></table></div></figure>


<p>brew会告诉你当前最新的gcc版本。例如是apple-gcc42。然后安装新版本gcc。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew install apple-gcc42
</span></code></pre></td></tr></table></div></figure>


<p>然后查看系统是否应用了这个版本的gcc。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>which gcc-4.2
</span><span class='line'>/usr/local/bin/gcc-4.2
</span></code></pre></td></tr></table></div></figure>


<p>基本上以上的一些检查会解决掉一批由于ruby环境造成的问题。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring-Context之九:在bean定义中使用继承]]></title>
    <link href="http://www.huangbowen.net/blog/2014/04/04/using-bean-defination-inheritance/"/>
    <updated>2014-04-04T00:45:00+10:00</updated>
    <id>http://www.huangbowen.net/blog/2014/04/04/using-bean-defination-inheritance</id>
    <content type="html"><![CDATA[<p>定义bean时有个abstract属性，可以设置为true或false，默认为false。</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;animal&quot;</span> <span class="na">class=</span><span class="s">&quot;Animal&quot;</span> <span class="na">abstract=</span><span class="s">&quot;true&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;name&quot;</span> <span class="na">value=</span><span class="s">&quot;elephant&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;legs&quot;</span> <span class="na">value=</span><span class="s">&quot;4”/</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;/bean&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里定义了一个叫elepahnt的animal bean，有4条腿，它与其他bean不同之处是abstract属性为true。这意味着什么？意味着这个bean不能被实例化，不能通过ApplicationContext.getBean()的方式来获取到该bean，也不能使用ref属性引用这个bean。否则会抛出BeanIsAbstractException的异常。</p>

<p>你可能会问？坑爹那？声明一个bean不能被实例化，那有何用？</p>

<p>当然有用，Spring框架开发者也不是一帮吃饱了没事干的人，设计一些没用的功能出来。</p>

<p>这要配合着parent属性来用。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.springframework.org/schema/beans&quot;</span>
</span><span class='line'>       <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>       <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://www.springframework.org/schema/beans</span>
</span><span class='line'><span class="s">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;animal&quot;</span> <span class="na">class=</span><span class="s">&quot;Animal&quot;</span> <span class="na">abstract=</span><span class="s">&quot;true&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;legs&quot;</span> <span class="na">value=</span><span class="s">&quot;4&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;monkey&quot;</span> <span class="na">parent=</span><span class="s">&quot;animal&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;name&quot;</span> <span class="na">value=</span><span class="s">&quot;dudu&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/beans&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里有两个bean，一个是animal,指定legs是4，另一个是monkey，通过parent的属性指向animal，指定name为dudu。聪明的读者可能已经猜出来了，parent属性就是子bean可以继承父bean中的属性，并且在子bean中可以重载对应的属性。虽然我们没显式的指定monkey的legs为4，其实它已经从父bean animal中继承了这个属性。这样的好处是如果在定义大量bean时，发先大量bean存在重复属性定义时，可以抽取一个抽象bean出来，实现这些重复的属性定义，让其他bean都使用parent属性指向这个抽象bean。这样可以大大简化bean的配置。</p>

<p>除了使用parent直接引用父bean的class外，另外也可以使用自定义的class。</p>

<figure class='code'><figcaption><span>Monkey.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Monkey</span> <span class="kd">extends</span> <span class="n">Animal</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">boolean</span> <span class="n">canDrawing</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isCanDrawing</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">canDrawing</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setCanDrawing</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">canDrawing</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">canDrawing</span> <span class="o">=</span> <span class="n">canDrawing</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.springframework.org/schema/beans&quot;</span>
</span><span class='line'>       <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>       <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://www.springframework.org/schema/beans</span>
</span><span class='line'><span class="s">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;animal&quot;</span> <span class="na">class=</span><span class="s">&quot;Animal&quot;</span> <span class="na">abstract=</span><span class="s">&quot;true&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;legs&quot;</span> <span class="na">value=</span><span class="s">&quot;4&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;smartMonkey&quot;</span> <span class="na">class=</span><span class="s">&quot;Monkey&quot;</span> <span class="na">parent=</span><span class="s">&quot;animal&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;name&quot;</span> <span class="na">value=</span><span class="s">&quot;smallDudu&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;canDrawing&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/beans&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样smartMonkey自动继承了父bean中的legs属性，同时它的class类型也是一个新类型。</p>

<p>有人可能要问了，子bean的class与父bean中的class一定要是继承关系吗？答案是否定的。
请看这个修改后的Monkey class，其本身并未从Animal继承。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Monkey</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">boolean</span> <span class="n">canDrawing</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">legs</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isCanDrawing</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">canDrawing</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setCanDrawing</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">canDrawing</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">canDrawing</span> <span class="o">=</span> <span class="n">canDrawing</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getLegs</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">legs</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setLegs</span><span class="o">(</span><span class="kt">int</span> <span class="n">legs</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">legs</span> <span class="o">=</span> <span class="n">legs</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后还配置同样的bean。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.springframework.org/schema/beans&quot;</span>
</span><span class='line'>       <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>       <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://www.springframework.org/schema/beans</span>
</span><span class='line'><span class="s">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;animal&quot;</span> <span class="na">class=</span><span class="s">&quot;Animal&quot;</span> <span class="na">abstract=</span><span class="s">&quot;true&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;legs&quot;</span> <span class="na">value=</span><span class="s">&quot;4&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;smartMonkey&quot;</span> <span class="na">class=</span><span class="s">&quot;Monkey&quot;</span> <span class="na">parent=</span><span class="s">&quot;animal&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;name&quot;</span> <span class="na">value=</span><span class="s">&quot;smallDudu&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;canDrawing&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/beans&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>依然能够正常工作，并且smartMonkey中的legs还是4。</p>

<p>这说明了Spring中使用parent继承父bean中的属性并不需要子bean和父bean的class在一个继承树上。父bean更像一个模板，子bean能够自动使用父bean中的配置而已。唯一需要注意的是在父bean中定义的属性在子bean中都要存在。</p>

<p>那可能有人就有个大胆的猜想了，可不可以定义一个没有class类型的父bean那？这个bean反正不能实例化，只用来让子bean继承属性。答案是肯定的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.springframework.org/schema/beans&quot;</span>
</span><span class='line'>       <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>       <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://www.springframework.org/schema/beans</span>
</span><span class='line'><span class="s">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;animal&quot;</span> <span class="na">abstract=</span><span class="s">&quot;true&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;legs&quot;</span> <span class="na">value=</span><span class="s">&quot;4&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;monkey&quot;</span> <span class="na">parent=</span><span class="s">&quot;animal&quot;</span> <span class="na">class=</span><span class="s">&quot;Animal&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;name&quot;</span> <span class="na">value=</span><span class="s">&quot;dudu&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;smartMonkey&quot;</span> <span class="na">class=</span><span class="s">&quot;Monkey&quot;</span> <span class="na">parent=</span><span class="s">&quot;animal&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;name&quot;</span> <span class="na">value=</span><span class="s">&quot;smallDudu&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;canDrawing&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/beans&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的定义依然可以工作。</p>

<p>多说一点，parent也支持对集合属性的继承。比如在父bean中定义了一个属性为List或Map，子bean中也能继承到该List或Map，更强大的是子bean还可以对List或Map进行合并。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.springframework.org/schema/beans&quot;</span>
</span><span class='line'>       <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>       <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://www.springframework.org/schema/beans</span>
</span><span class='line'><span class="s">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;sampleAccounts&quot;</span> <span class="na">abstract=</span><span class="s">&quot;true&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;accounts&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;map&gt;</span>
</span><span class='line'>                <span class="nt">&lt;entry</span> <span class="na">key=</span><span class="s">&quot;Bob&quot;</span> <span class="na">value=</span><span class="s">&quot;001&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>                <span class="nt">&lt;entry</span> <span class="na">key=</span><span class="s">&quot;John&quot;</span> <span class="na">value=</span><span class="s">&quot;002&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/map&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;accountService&quot;</span> <span class="na">parent=</span><span class="s">&quot;sampleAccounts&quot;</span> <span class="na">class=</span><span class="s">&quot;AccountService&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;accounts&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;map</span> <span class="na">merge=</span><span class="s">&quot;true&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;entry</span> <span class="na">key=</span><span class="s">&quot;Michael&quot;</span> <span class="na">value=</span><span class="s">&quot;003&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>                <span class="nt">&lt;entry</span> <span class="na">key=</span><span class="s">&quot;Joel&quot;</span> <span class="na">value=</span><span class="s">&quot;004&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/map&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/beans&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在子bean中使用的map元素上使用merge=“true”就可以和父bean中的map条目进行合并。如果指定为false则不会合并，只会使用子bean中定义的map条目。</p>

<p>本例中的源码请在<a href="https://github.com/huangbowen521/Study">我的GitHub</a>上自行下载。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring-Context之八:一些依赖注入的小技巧]]></title>
    <link href="http://www.huangbowen.net/blog/2014/03/30/some-injection-way/"/>
    <updated>2014-03-30T18:31:00+10:00</updated>
    <id>http://www.huangbowen.net/blog/2014/03/30/some-injection-way</id>
    <content type="html"><![CDATA[<p>Spring框架在依赖注入方面是非常灵活和强大的，多了解点一些注入的方式、方法，绝对能优化配置。</p>

<!-- more -->


<h2>idref</h2>

<p>idref属性可以传入一个bean的名称，虽然它是指向一个bean的引用，但是得到的是该bean的id名。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;beans&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;movieService&quot;</span> <span class="na">class=</span><span class="s">&quot;DefaultMovieService&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;cinema&quot;</span> <span class="na">class=</span><span class="s">“Cinema&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;serviceRef&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;idref</span> <span class="na">bean=</span><span class="s">&quot;movieService&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/beans&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>它和直接设置serviceRef属性的value为movieService的区别是前者是能够保证必须有一个名movieService的bean存在于当前的spring容器中，如果没有则Spring容器会在初始化阶段就会报错;而后者仅仅是一个字符串，spring容器在初始化不会做任何检查，很可能将异常推后到运行时抛出。</p>

<h2>内部bean</h2>

<p>bean的定义是可以嵌套的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;beans&gt;</span>
</span><span class='line'>     <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">“movieService&quot;</span> <span class="na">class=</span><span class="s">&quot;DefaultMovieService&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>     <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;cinema&quot;</span> <span class="na">class=</span><span class="s">“Cinema&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;movieService&quot;</span> <span class="na">ref=</span><span class="s">“movieService&quot;/</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'><span class="nt">&lt;/beans&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以改为这种方式。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;cinema&quot;</span> <span class="na">class=</span><span class="s">&quot;Cinema&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;movieService&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">&quot;DefaultMovieService&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样内部bean就不需要一个名字的，当然这也意味着它无法被其他bean引用了。当然即使你给它起了名字，Spring容器也会忽略这个名字，其他bean也无法引用它。neibubean的scope始终和waibubean的scope保持一致。</p>

<h2>对集合的注入</h2>

<p>Java的集合框架中包含很多集合元素，比如List、Map、Set等。Spring支持对这些集合元素的注入。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;accountService&quot;</span> <span class="na">class=</span><span class="s">&quot;AccountService&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;accounts&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;map&gt;</span>
</span><span class='line'>                <span class="nt">&lt;entry</span> <span class="na">key=</span><span class="s">&quot;bowen&quot;</span> <span class="na">value=</span><span class="s">&quot;1234&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>                <span class="nt">&lt;entry</span> <span class="na">key=</span><span class="s">&quot;tom&quot;</span> <span class="na">value=</span><span class="s">&quot;3456&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/map&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;cookbook&quot;</span> <span class="na">class=</span><span class="s">&quot;Cookbook&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;recipe&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;list&gt;</span>
</span><span class='line'>                <span class="nt">&lt;value&gt;</span>noodle<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>                <span class="nt">&lt;value&gt;</span>rice<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>                <span class="nt">&lt;value&gt;</span>meat<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/list&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>还可以直接配置java的Properties。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;databaseSource&quot;</span> <span class="na">class=</span><span class="s">&quot;DatabaseSource&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;source&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;props&gt;</span>
</span><span class='line'>                <span class="nt">&lt;prop</span> <span class="na">key=</span><span class="s">&quot;port&quot;</span><span class="nt">&gt;</span>2012<span class="nt">&lt;/prop&gt;</span>
</span><span class='line'>                <span class="nt">&lt;prop</span> <span class="na">key=</span><span class="s">&quot;host&quot;</span><span class="nt">&gt;</span>localhost<span class="nt">&lt;/prop&gt;</span>
</span><span class='line'>                <span class="nt">&lt;prop</span> <span class="na">key=</span><span class="s">&quot;schema&quot;</span><span class="nt">&gt;</span>db1<span class="nt">&lt;/prop&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/props&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>嵌套属性名注入</h2>

<p>Spring支持使用嵌套属性注入值。</p>

<figure class='code'><figcaption><span>Restaurant.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Restaurant</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Person</span> <span class="n">manager</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Person</span> <span class="nf">getManager</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">manager</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setManager</span><span class="o">(</span><span class="n">Person</span> <span class="n">manager</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">manager</span> <span class="o">=</span> <span class="n">manager</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Person.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getAge</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">age</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setAge</span><span class="o">(</span><span class="kt">int</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">age</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;restaurant&quot;</span> <span class="na">class=</span><span class="s">&quot;huangbowen.net.service.Restaurant&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;manager&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">&quot;huangbowen.net.PAndCNamespace.Person&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;manager.age&quot;</span> <span class="na">value=</span><span class="s">&quot;20&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>需注意除了最后一个属性，其他属性不能为空值。</p>

<h2>使用depends-on属性</h2>

<p>当你初始化一个bean时，需要另一个bean先被初始化，这种情况很常见。虽然Spring在最大程度上能自动按照你期望的顺序来初始化bean（比如构造器注入的bean会优先初始化），但是不保证总能符合你的心意。你可以使用depends-on属性来显示指定bean的初始化顺序。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;beans&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>   <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;movieService&quot;</span> <span class="na">class=</span><span class="s">&quot;DefaultMovieService&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;cinema&quot;</span> <span class="na">class=</span><span class="s">“Cinema”</span> <span class="na">depends-on=</span><span class="s">&quot;movieService&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;serviceRef&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;idref</span> <span class="na">bean=</span><span class="s">&quot;movieService&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/beans&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>也可以同时deppends-on多个对象。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;cinema&quot;</span> <span class="na">class=</span><span class="s">“Cinema”</span> <span class="na">depends-on=</span><span class="s">“movieService,accountService&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;serviceRef&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;idref</span> <span class="na">bean=</span><span class="s">&quot;movieService&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[切换到ZSH以后遇到的坑]]></title>
    <link href="http://www.huangbowen.net/blog/2014/03/29/using-zsh/"/>
    <updated>2014-03-29T00:51:00+10:00</updated>
    <id>http://www.huangbowen.net/blog/2014/03/29/using-zsh</id>
    <content type="html"><![CDATA[<p>了解到ZSH的强大以后打算将自己目前使用的bash切换到ZSH。具体ZSH比bash强在那里就不多少了，网上的文章一搜一大把。个人主要是被ZSH强大的自动补全吸引过来的。虽然bash装了bash-completaion以后也有了一定的自动补全能力，但是和ZSH比起来还是差距太大。</p>

<!-- more -->


<p>ZSH虽然功能强大，但是配置繁琐，并且shell脚本的语法一向比较奇葩，如果自己定制还需要对shell脚本有一定的了解。本来想用ZSH来节省时间，但是还要花大量时间来配置ZSH无疑会生使众多程序员望而却步。好在github有oh-my-ZSH这个项目，自动把大量的配置给你搞好了，基本上做到了开箱即用。</p>

<p>具体如何安装ZSH和配置oh-my-zsh就不多说了，请参见<a href="https://github.com/robbyrussell/oh-my-zsh">https://github.com/robbyrussell/oh-my-zsh</a>。</p>

<p>安装完毕后运行<code>chsh -s /bin/zsh</code>将当前默认的shell切换为zsh。另外需要做的是要将以前~/.bash_profile中的配置复制到~/.zshrc中，这样保证以前在bash中定义的别名、命令等可以继续正常工作。</p>

<p>虽然说ZSH无缝兼容bash，但是刚开始使用还是遇到了一些坑，好歹都一一解决了。</p>

<h2>编码问题</h2>

<p>当我运行Octopress博客的生成博客命令时，遇到了这个奇怪的错。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rake generate
</span><span class='line'>
</span><span class='line'>YAML Exception reading 2013-12-15-responsive-menu-by-media-queries.markdown: invalid byte sequence in US-ASCII
</span></code></pre></td></tr></table></div></figure>


<p>看起来貌似是默认编码的问题，ZSH使用的默认编码是US-ASCII，但我期望的是UTF-8。</p>

<p>ok,查看当前zsh shell下的编码是什么。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>locale
</span><span class='line'><span class="nv">LANG</span><span class="o">=</span>
</span><span class='line'><span class="nv">LC_COLLATE</span><span class="o">=</span><span class="s2">&quot;C&quot;</span>
</span><span class='line'><span class="nv">LC_CTYPE</span><span class="o">=</span><span class="s2">&quot;C&quot;</span>
</span><span class='line'><span class="nv">LC_MESSAGES</span><span class="o">=</span><span class="s2">&quot;C&quot;</span>
</span><span class='line'><span class="nv">LC_MONETARY</span><span class="o">=</span><span class="s2">&quot;C&quot;</span>
</span><span class='line'><span class="nv">LC_NUMERIC</span><span class="o">=</span><span class="s2">&quot;C&quot;</span>
</span><span class='line'><span class="nv">LC_TIME</span><span class="o">=</span><span class="s2">&quot;C&quot;</span>
</span><span class='line'><span class="nv">LC_ALL</span><span class="o">=</span>
</span></code></pre></td></tr></table></div></figure>


<p>由于没设值，所以ZSH就选取了US-ASCII。</p>

<p>解决办法也很简单，在<code>~/.zshrc</code>中加入以下两行。</p>

<figure class='code'><figcaption><span>~/.zshrc</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>export LC_ALL=en_US.UTF-8  export LANG=en_US.UTF-8```然后重新加载zshrc文件并查看编码。$ source ~/.zshrc$ locale
</span><span class='line'># Compilation flagsLANG=&quot;en_US.UTF-8&quot;
</span><span class='line'>LC_COLLATE=&quot;en_US.UTF-8&quot;
</span><span class='line'>LC_CTYPE=&quot;en_US.UTF-8&quot;
</span><span class='line'>LC_MESSAGES=&quot;en_US.UTF-8&quot;
</span><span class='line'>LC_MONETARY=&quot;en_US.UTF-8&quot;
</span><span class='line'>LC_NUMERIC=&quot;en_US.UTF-8&quot;
</span><span class='line'>LC_TIME=&quot;en_US.UTF-8&quot;
</span><span class='line'>LC_ALL=&quot;en_US.UTF-8”
</span></code></pre></td></tr></table></div></figure>


<h2>通配符问题</h2>

<p>我又发现如果命令行中有[] *等字符会被zsh优先作为通配符处理，这样导致某些命令会被ZSH错误解析。</p>

<p>比如:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rake new_post<span class="o">[</span>‘a new post’<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里的[]是ruby语言中的语法，但是被ZSH解析成了通配符，所以报错。解决方法也简单，关闭ZSH的这一特性。</p>

<p>在~/.zshrc中加入下面一行即可搞定。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>setopt no_nomatch
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring-Context之七:使用p-namesapce和c-namespace简化bean的定义]]></title>
    <link href="http://www.huangbowen.net/blog/2014/03/26/using-p-namespace-and-c-namespace/"/>
    <updated>2014-03-26T00:50:00+10:00</updated>
    <id>http://www.huangbowen.net/blog/2014/03/26/using-p-namespace-and-c-namespace</id>
    <content type="html"><![CDATA[<p>在Spring中定义bean的方式多种多样，即使使用xml的方式来配置也能派生出很多不同的方式。</p>

<!-- more -->


<p>比如如下的bean定义:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.springframework.org/schema/beans&quot;</span>
</span><span class='line'>       <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>       <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://www.springframework.org/schema/beans</span>
</span><span class='line'><span class="s">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;person&quot;</span> <span class="na">class=</span><span class="s">&quot;Person&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;name&quot;</span> <span class="na">value=</span><span class="s">&quot;Tom&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;age&quot;</span> <span class="na">value=</span><span class="s">&quot;20&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/beans&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样的bean有三行，通过使用p-namespace以后可以简化为一行。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.springframework.org/schema/beans&quot;</span>
</span><span class='line'>       <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>       <span class="na">xmlns:p=</span><span class="s">&quot;http://www.springframework.org/schema/p&quot;</span>
</span><span class='line'>       <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://www.springframework.org/schema/beans</span>
</span><span class='line'><span class="s">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;person&quot;</span> <span class="na">class=</span><span class="s">&quot;Person&quot;</span> <span class="na">p:name=</span><span class="s">&quot;Tom&quot;</span> <span class="na">p:age=</span><span class="s">&quot;20&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/beans&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>那么什么是<code>p-namespace</code>那？它的作用就是使用xml中的元素属性取代<code>&lt;property/&gt;</code>节点来定义bean的属性。这个神奇的p是什么东西那？它其实是使用了namespace的xml扩展配置格式。beans的配置格式是定义在一个xsd格式中的（即<a href="http://www.springframework.org/schema/beans/spring-beans.xsd">http://www.springframework.org/schema/beans/spring-beans.xsd</a>），但p却没有一个xsd格式文件与其对应，但是它可以被spring内核解析处理。</p>

<p>上面只是演示了对属性为普通值的时使用<code>p-namespace</code>的注入，如果属性为另一个bean的引用时该如何处理那？很简单。</p>

<p>这是使用正常方式注入属性。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;messageService&quot;</span> <span class="na">class=</span><span class="s">&quot;SimpleMessageService&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;messageHandler&quot;</span> <span class="na">class=</span><span class="s">&quot;MessageHandler&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;messageService&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;ref</span> <span class="na">bean=</span><span class="s">&quot;messageService&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用<code>p-namespace</code>后是这样的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;messageService&quot;</span> <span class="na">class=</span><span class="s">&quot;SimpleMessageService&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;messageHandler&quot;</span> <span class="na">class=</span><span class="s">“MessageHandler”</span> <span class="na">p:messageService-ref=</span><span class="s">“messageService”/</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>加上<code>-ref</code>后缀即表示是对一个bean的引用。</p>

<p>那既然setter方法注入bean可以使用<code>p-namespace</code>，那么构造器方式注入有没有相应的简写那？答案是肯定的，那就是<code>c-namespace</code>，原理和使用方法与<code>p-namespace</code>大同小异。</p>

<p>使用<code>c-namespace</code>前:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.springframework.org/schema/beans&quot;</span>
</span><span class='line'>       <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>       <span class="na">xmlns:c=</span><span class="s">&quot;http://www.springframework.org/schema/c&quot;</span>
</span><span class='line'>       <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://www.springframework.org/schema/beans</span>
</span><span class='line'><span class="s">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;person&quot;</span> <span class="na">class=</span><span class="s">&quot;Person&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;constructor-arg</span> <span class="na">name=</span><span class="s">&quot;name&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;value&gt;</span>Tom<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/constructor-arg&gt;</span>
</span><span class='line'>        <span class="nt">&lt;constructor-arg</span> <span class="na">name=</span><span class="s">&quot;age&quot;</span> <span class="na">value=</span><span class="s">&quot;20&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/beans&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用<code>c-namespace</code>后:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.springframework.org/schema/beans&quot;</span>
</span><span class='line'>       <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>       <span class="na">xmlns:c=</span><span class="s">&quot;http://www.springframework.org/schema/c&quot;</span>
</span><span class='line'>       <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://www.springframework.org/schema/beans</span>
</span><span class='line'><span class="s">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;person&quot;</span>  <span class="na">c:name=</span><span class="s">&quot;Tom&quot;</span> <span class="na">c:age=</span><span class="s">&quot;20&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/beans&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>也可以使用<code>-ref</code>后缀来表示对另一个bean的引用。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'> <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;messageService&quot;</span> <span class="na">class=</span><span class="s">&quot;SimpleMessageService&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;messageHandler&quot;</span> <span class="na">class=</span><span class="s">&quot;MessageHandler&quot;</span> <span class="na">c:messageService-ref=</span><span class="s">&quot;messageService&quot;</span><span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在前面章节讲解构造器注入时，可以使用构造参数索引来注入依赖，<code>c-namespace</code>也支持这一方式。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.springframework.org/schema/beans&quot;</span>
</span><span class='line'>       <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>       <span class="na">xmlns:c=</span><span class="s">&quot;http://www.springframework.org/schema/c&quot;</span>
</span><span class='line'>       <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://www.springframework.org/schema/beans</span>
</span><span class='line'><span class="s">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;person”  c:_0=&quot;</span><span class="err">Tom&quot;</span> <span class="na">c:_1=</span><span class="s">&quot;20&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;messageService&quot;</span> <span class="na">class=</span><span class="s">&quot;SimpleMessageService&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;messageHandler&quot;</span> <span class="na">class=</span><span class="s">&quot;MessageHandler&quot;</span> <span class="na">c:_0-ref=</span><span class="s">&quot;messageService&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/beans&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>怎么样，是不是很强大啊。但是太过强大也容易伤人伤己。在项目中使用这些技巧之前最好先和项目成员达成一致。</p>

<p>本例中的源码请在<a href="https://github.com/huangbowen521/Study">我的GitHub</a>上自行下载。</p>
]]></content>
  </entry>
  
</feed>
