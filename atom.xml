<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[黄博文的地盘]]></title>
  <link href="http://www.huangbowen.net/atom.xml" rel="self"/>
  <link href="http://www.huangbowen.net/"/>
  <updated>2017-02-24T17:03:36+08:00</updated>
  <id>http://www.huangbowen.net/</id>
  <author>
    <name><![CDATA[黄博文]]></name>
    <email><![CDATA[huangbowen521@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[阿里巴巴Java开发手册评述]]></title>
    <link href="http://www.huangbowen.net/blog/2017/02/23/alibaba-java-code-style/"/>
    <updated>2017-02-23T17:34:51+08:00</updated>
    <id>http://www.huangbowen.net/blog/2017/02/23/alibaba-java-code-style</id>
    <content type="html"><![CDATA[<p>2016年底的时候阿里巴巴公开了其在内部使用的Java编程规范。随后进行了几次版本修订，目前的版本为v1.0.2版。下载地址可以在其官方社区-云栖社区<a href="https://yq.aliyun.com/articles/69327">https://yq.aliyun.com/articles/69327</a>找到。</p>

<!-- more -->


<p>笔者作为一名有数年工作经验的Java程序员，仔细研读了这份手册，觉得其是一份不可多得的好材料。阿里巴巴在发布时所说，“阿里巴巴集团推出的《阿里巴巴Java开发手册（正式版）》是阿里巴巴近万名开发同学集体智慧的结晶，以开发视角为中心，详细列举如何开发更加高效、更加容错、更加有协作性，力求知其然，更知其不然，结合正反例，让Java开发者能够提升协作效率、提高代码质量。” 同时，阿里巴巴也期望这套Java统一规范标准将有助于提高行业编码规范化水平，帮助行业人员提高开发质量和效率、大大降低代码维护成本。</p>

<p>其实早在多年前，Google就已经把公司内部采用的所有语言的编码规范(其称为Style Guide)都开源在github上，地址为<a href="https://github.com/google/styleguide">https://github.com/google/styleguide</a>。在这份清单中，包括了<a href="https://google.github.io/styleguide/cppguide.html">C++</a>、<a href="https://google.github.io/styleguide/objcguide.xml">Objective-C</a>、<a href="https://google.github.io/styleguide/javaguide.html">Java</a>、<a href="Python%20Style%20Guide">Python</a>、<a href="https://google.github.io/styleguide/Rguide.xml">R</a>、<a href="https://google.github.io/styleguide/shell.xml">Shell</a>、<a href="https://google.github.io/styleguide/htmlcssguide.xml">HTML/CSS</a>、<a href="https://google.github.io/styleguide/jsguide.html">JavaScript</a>、<a href="https://google.github.io/styleguide/angularjs-google-style.html">AngularJS</a>、<a href="https://google.github.io/styleguide/lispguide.xml">Common Lisp</a>、<a href="https://google.github.io/styleguide/vimscriptguide.xml">Vimscript</a>等语言的编程规范。并且Google还发布了一个用于检查样式合规性的工具<a href="https://github.com/google/styleguide/tree/gh-pages/cpplint">cpplint</a>以及Emacs中使用Google编程样式的配置文件<a href="https://raw.githubusercontent.com/google/styleguide/gh-pages/google-c-style.el">google-c-style.el</a>。看来Google中Emacs粉比Vim粉要强势的多。</p>

<p>Google为什么要发布这样的Style Guide那？因为它认为几乎所有的开源项目都需要有一组约定来规范如何编写代码。如果项目中的代码都能保持一致的风格，那么即使代码再多也会更容易被人理解。</p>

<p>Google的这份编程规范包含了很多方面，从”对变量使用camelCase命名法”到”绝不要使用全局变量”到”绝不允许例外“等。其Java编程规范包含7大部分，分别为介绍、源文件基本要求、源文件结构、格式化、命名、编程实践和Javadoc。每一部分又细分为很多子条目。如果采取条规范的原因不是很容易理解，都会配有相应的示例或者引用文章。</p>

<p>由于Google的这份编程规范目前只有英文版本，所以中国的程序员只有少部分人知道它的存在。并且只有更少的团队在真正的应用它，其中就包括我的团队。我们团队根据Google的<a href="https://google.github.io/styleguide/javaguide.html">Java style guide</a>也演化出了自己的团队版本，放置在团队共享wiki上供大家随时查阅。我们根据自身的项目特点丰富了&#8221;编程实践&#8221;里的内容，并且新加入一个章节来描述编写Java代码的一些原则，比如简洁代码、组合优于继承、stream优于for循环等。</p>

<p>我想阿里巴巴发布的Java开发手册之所以叫做&#8221;开发手册&#8221;，而不是像Google那样叫做“Style Guide(样式风格)”，是因为它不仅仅局限于style guide这一方面，而是以Java开发者为中心视角，划分为编程规约、异常日志规约、MYSQL规约、工程规约、安全规约五大块，再根据内容特征，细分成若干二级子目录。根据约束力强弱和故障敏感性，规约依次分为强制、推荐、参考三大类。</p>

<p>该开发手册中的每一条都值得了解。限于篇幅原因，这里只列出”编程规约“中有感受的几条来评述一下。</p>

<blockquote><p>15. 【参考】各层命名规约：</p>

<p>A) Service/DAO 层方法命名规约</p>

<p>1） 获取单个对象的方法用 get 做前缀。</p>

<p>2） 获取多个对象的方法用 list 做前缀。</p>

<p>3） 获取统计值的方法用 count 做前缀。</p>

<p>4） 插入的方法用 save（推荐）或 insert 做前缀。</p>

<p>5） 删除的方法用 remove（推荐）或 delete 做前缀。</p>

<p>6） 修改的方法用 update 做前缀。</p>

<p>B) 领域模型命名规约</p>

<p>1） 数据对象：xxxDO，xxx 即为数据表名。</p>

<p>2） 数据传输对象：xxxDTO，xxx 为业务领域相关的名称。</p>

<p>3） 展示对象：xxxVO，xxx 一般为网页名称。</p>

<p>4） POJO 是 DO/DTO/BO/VO 的统称，禁止命名成 xxxPOJO。</p></blockquote>

<p>命名规约的第15条描述了在Service/DAO层对于资源的操作的命名规范。这一条的参考价值极大，因为我所有呆过的团队对于这一点都没有明显的约束，每个团队都有五花八门的实现。如果能遵守这一点，那么我们在操作资源时就会减少一些困扰。</p>

<blockquote><p>2. 【强制】long 或者 Long 初始赋值时，必须使用大写的 L，不能是小写的 l，小写容易跟数字1混淆，造成误解。</p>

<p>说明：Long a = 2l; 写的是数字的 21，还是 Long 型的 2?</p></blockquote>

<p>这是常量定义的第2条。从这一点可以看出阿里巴巴对代码可读性的细节扣的很严格。我也很赞同这一点。代码只需编写一次，而会被查看无数次，所以要力争在第一次编写的时候尽可能少的引入歧义。</p>

<blockquote><p>1. 【强制】大括号的使用约定。如果是大括号内为空，则简洁地写成{}即可，不需要换行；如果是非空代码块则：</p>

<p>1） 左大括号前不换行。</p>

<p>2） 左大括号后换行。</p>

<p>3） 右大括号前换行。</p>

<p>4） 右大括号后还有 else 等代码则不换行；表示终止右大括号后必须换行。</p></blockquote>

<p>格式规约的第1条终于终结了括号之争。这一条需要强制遵守，那么左大括号换行一派则被彻底排除在阿里巴巴之外。有人说不推荐左大括号换行可以减少行数，增加单个屏幕可以显示的代码行数。而有的人反驳说现在屏幕已经足够大，不换行则破坏了对称之美。其实对于我来说两种格式都有各自的好处，我都可以接受，只要团队能够坚持使用其中之一即可。</p>

<blockquote><p>5. 【强制】缩进采用 4 个空格，禁止使用 tab 字符。</p>

<p>说明：如果使用 tab 缩进，必须设置 1 个 tab 为 4 个空格。IDEA 设置 tab 为 4 个空格时，请勿勾选 Use tab character；而在 eclipse 中，必须勾选 insert spaces for tabs。</p>

<p>正例： （涉及 1-5 点）</p>

<pre><code>public static void main(String[] args) {
    // 缩进 4 个空格
    String say = "hello";
    // 运算符的左右必须有一个空格
    int flag = 0;
    // 关键词 if 与括号之间必须有一个空格，括号内的 f 与左括号，0 与右括号不需要空格
    if (flag == 0) {
        System.out.println(say);
    }
    // 左大括号前加空格且不换行；左大括号后换行
    if (flag == 1) {
        System.out.println("world");
        // 右大括号前换行，右大括号后有 else，不用换行
    } else {
        System.out.println("ok");
        // 在右大括号后直接结束，则必须换行
    }
}
</code></pre></blockquote>

<p>使用空格代替tab字符进行缩进已经成为了编程界的共识。其主要原因是不同的平台甚至不同的编辑器下tab字符的长短是不一样的。不过Google在其《java style guide》中规定缩进为2个空格，而阿里巴巴约定为4个空格。由于4个空格的缩进比2个空格的缩进长一倍，所以如果在代码嵌套过深的情况下可能会很快超过单行最多字符数(阿里巴巴规定为120个)的限制。不过这个问题可以从另一个方面进行思考，如果由于缩进的原因导致单行字符数超标，这很可能是代码设计上有坏味道而导致嵌套过深。所以最好应该从调整代码结构的方面下手。</p>

<blockquote><p>6. 【强制】单行字符数限制不超过 120 个，超出需要换行，换行时遵循如下原则：</p>

<p>1） 第二行相对第一行缩进 4 个空格，从第三行开始，不再继续缩进，参考示例。</p>

<p>2） 运算符与下文一起换行。</p>

<p>3） 方法调用的点符号与下文一起换行。</p>

<p>4） 在多个参数超长，逗号后进行换行。</p>

<p>5） 在括号前不要换行，见反例。</p>

<p>正例：</p>

<pre><code>    StringBuffer sb = new StringBuffer();
    //超过 120 个字符的情况下，换行缩进 4 个空格，并且方法前的点符号一起换行
    sb.append("zi").append("xin")...
        .append("huang")...
        .append("huang")...
        .append("huang");
</code></pre>

<p>反例：</p>

<pre><code>StringBuffer sb = new StringBuffer();
//超过 120 个字符的情况下，不要在括号前换行
sb.append("zi").append("xin")...append
("huang");
//参数很多的方法调用可能超过 120 个字符，不要在逗号前换行
method(args1, args2, args3, ...
, argsX); 
</code></pre></blockquote>

<p>关于换行Google并没有给出明确的要求，而阿里巴巴则给出了强制性的要求。Google特别提示通过一些重构手法可以减少单行字符长度从而避免换行，这一点我颇为认同。关于参数很多的方法调用超过120个字符需要换行时，这暴露除了过长参数列的代码坏味道，解决方式之一就是使用重构手法的Replace Parameter With Method的方式把一次方法调用化为多次方法调用，或者使用Introduce Parameter Object手法创造出参数对象并进行传递。</p>

<blockquote><p>17. 【推荐】循环体内，字符串的联接方式，使用 StringBuilder 的 append 方法进行扩展。
反例：</p>

<pre><code>    String str = "start";
    for (int i = 0; i &lt; 100; i++) {
        str = str + "hello";
    }
</code></pre>

<p>说明：反编译出的字节码文件显示每次循环都会 new 出一个 StringBuilder 对象，然后进行append 操作，最后通过 toString 方法返回 String 对象，造成内存资源浪费。</p></blockquote>

<p>这是《Effective Java》以及其他文章中经常提及的优化方式，而且面试初级Java工程师时几乎是一个必考点。其实不仅是在循环体内，而是所有需要进行多次字符串拼接的地方都应该使用StringBuilder对象。</p>

<blockquote><p>20. 【推荐】类成员与方法访问控制从严：</p>

<p>1） 如果不允许外部直接通过 new 来创建对象，那么构造方法必须是 private。</p>

<p>2） 工具类不允许有 public 或 default 构造方法。</p>

<p>3） 类非 static 成员变量并且与子类共享，必须是 protected。</p>

<p>4） 类非 static 成员变量并且仅在本类使用，必须是 private。</p>

<p>5） 类 static 成员变量如果仅在本类使用，必须是 private。</p>

<p>6） 若是 static 成员变量，必须考虑是否为 final。</p>

<p>7） 类成员方法只供类内部调用，必须是 private。</p>

<p>8） 类成员方法只对继承类公开，那么限制为 protected。</p>

<p>说明：任何类、方法、参数、变量，严控访问范围。过宽泛的访问范围，不利于模块解耦。思
考：如果是一个 private 的方法，想删除就删除，可是一个 public 的 Service 方法，或者一个 public 的成员变量，删除一下，不得手心冒点汗吗？变量像自己的小孩，尽量在自己的视线内，变量作用域太大，如果无限制的到处跑，那么你会担心的。</p></blockquote>

<p>这其实就是经典的原则‘
Principle of least privilege’ 的体现。我们必须遵循这一原则，但不知为何阿里巴巴将其级别列为“推荐”。</p>

<blockquote><p>7. 【参考】方法中需要进行参数校验的场景：</p>

<p>1） 调用频次低的方法。</p>

<p>2） 执行时间开销很大的方法，参数校验时间几乎可以忽略不计，但如果因为参数错误导致
中间执行回退，或者错误，那得不偿失。</p>

<p>3） 需要极高稳定性和可用性的方法。</p>

<p>4） 对外ᨀ供的开放接口，不管是 RPC/API/HTTP 接口。</p>

<p>5） 敏感权限入口。</p>

<p>8. 【参考】方法中不需要参数校验的场景：</p>

<p>1） 极有可能被循环调用的方法，不建议对参数进行校验。但在方法说明里必须注明外部参
数检查。</p>

<p>2） 底层的方法调用频度都比较高，一般不校验。毕竟是像纯净水过滤的最后一道，参数错
误不太可能到底层才会暴露问题。一般 DAO 层与 Service 层都在同一个应用中，部署在同一
台服务器中，所以 DAO 的参数校验，可以省略。</p>

<p>3） 被声明成 private 只会被自己代码所调用的方法，如果能够确定调用方法的代码传入参
数已经做过检查或者肯定不会有问题，此时可以不校验参数。</p></blockquote>

<p>编写代码时，对参数进行校验是不可避免的。详细说又扯到“防御式编程”和“契约式编程”的话题上。这两项之所以列为参考，并没有强迫大家遵守。</p>

<blockquote><p>6. 【推荐】与其“半吊子”英文来注释，不如用中文注释把问题说清楚。专有名词与关键字保持英文原文即可。</p>

<p>反例：“TCP 连接超时”解释成“传输控制协议连接超时”，理解反而费脑筋。</p></blockquote>

<p>看到这一条我已经笑出来了。这一条说的很好，注释是用来阐述问题的，如果看了注释还一头雾水，那么这样的注释不要也罢。使用中文没什么可丢人的，解决问题才是王道。</p>

<blockquote><p>7. 【推荐】代码修改的同时，注释也要进行相应的修改，尤其是参数、返回值、异常、核心逻辑等的修改。</p>

<p>说明：代码与注释更新不同步，就像路网与导航软件更新不同步一样，如果导航软件严重滞后，
就失去了导航的意义。</p></blockquote>

<p>阿里巴巴对该条的说明非常到位。其实我们团队在编写代码时默认是没有任何注释的，因为我们追求的是self-explanatory methods。即代码本身已经就能说明它的用途。只有在很少的情况下需要添加注释。</p>

<hr />

<p>编程规约的第九部分都是很好的tips，值得去了解和学习。</p>

<p>除了编程规约之外，日志规约、MySQL规约、工程规约和安全规约也都有极高的参考价值，这也是比Google的<a href="https://google.github.io/styleguide/javaguide.html">Java Style Guide</a>出色的地方。这里就不再评述了。</p>

<hr />

<p>阿里巴巴公布这个Java开发手册绝对是值得赞赏的事情。最后我也想给其提几点建议：</p>

<ol>
<li><p>建议使用公开wiki的方式发布该手册，而不是采用pdf的方式。因为如果像google那样是公开wiki的方式的话，可以很方便大家参与修正和改进，并且可以看到版本历史。</p></li>
<li><p>该手册并没有明确的版权许可，只是在页脚处加入了“禁止用于商业用途，违者必究”的字样。Google的style guide的版权为CC-By 3.0 License，建议阿里巴巴能够指明其版权。</p></li>
<li><p>手册中的部分示例代码并没有遵守其列出的编程规约，有点打脸之嫌。比如以下示例代码：</p>

<pre><code> Iterator&lt;String&gt; it = a.iterator();
 while(it.hasNext()){
     String temp = it.next();
     if(删除元素的条件){
         it.remove();
     }
 }
</code></pre>

<p> 其while和if关键字与小括号之间并没有空格，违反了该手册中<code>3. 【强制】if/for/while/switch/do 等保留字与左右括号之间都必须加空格。</code>这一规则。</p></li>
<li><p>集合处理中可以多推荐一些Java8的集合操作方法。</p></li>
<li><p>有些名词没有过多解释，比如很多人可能都不知道什么叫一方库、二方库。</p></li>
<li><p>希望除了这份开发手册以外，阿里巴巴也可以推出对应的checkstyle配置文件以及Intellij、Eclipse的配置文件。毕竟格式化这些事都可以交由IDE来解决，通过在构建时使用checkstyle插件也可以防止不合规的代码迁入到仓库，从源头上保证代码样式的一致性。</p></li>
</ol>


<p>最后，希望这份Java开发手册可以持续改进，吸纳百家之长，成为每个入门程序员必看的手册。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一个程序员的2016年总结]]></title>
    <link href="http://www.huangbowen.net/blog/2017/01/20/summary-for-2016/"/>
    <updated>2017-01-20T16:59:24+08:00</updated>
    <id>http://www.huangbowen.net/blog/2017/01/20/summary-for-2016</id>
    <content type="html"><![CDATA[<p>2016年过的很快，是被时间追着走。</p>

<!-- more -->


<h2>工作</h2>

<p>2016年的工作可以分为三大块。</p>

<p>1月份和2月份还在咨询团队。这两个月在某国内大型企业做技术教练。先后开展了TDD、Clean Code、Continus Integration等课程。做咨询的日子每天都有很多挑战，收获也是大大的。</p>

<p>3月份、4月份以及8月份和9月份在印度Pune做TWU的讲师。在ThoughtWorks错失了以毕业生的身份参加TWU，不过还好可以以Coach的身份参加TWU。全英文授课，一对一coach，全新的环境&hellip;TWU对我来说挑战颇多，但是它绝对是一段奇妙的经历。有幸和来自全球8个国家的coach一起服务了有史以来TWU最大的一期batch。我很幸运自己是其中的一员。我很怀念大家一起备课，一起上课，一起泡吧，一起看电影，一起玩游戏的日子。尤其是每周一次的足球活动，能够直接感受巴西桑巴足球的魅力。</p>

<p>5-7月份和10-12月份在某国外项目的offshore account上担任tech lead。经过在在咨询团队以及TWU的锤炼之后，自己在看待问题、处理事情完全换了一个视角。尤其是10-12月份，随便每天都很忙碌，但是自己也学到很多东西。</p>

<h2>健身</h2>

<p>当我在出差时，健身比较规律，一周能保证3次以上的健身房训练。当回到家以后时间就不能保证了。身体素质的巅峰期是在4月底的时候，卧推可以达到70KG。最弱的时候就是现在了。现在每周保持一次的训练节奏。</p>

<h2>跑步</h2>

<p>全年非完全统计总共跑了1336公里，耗时163个小时。</p>

<p><img src="http://www.huangbowen.net/images/IMG_5181.PNG" width="400"></p>

<p>有四场赛事值得纪念。</p>

<ul>
<li>第一个是右膝盖术后的越野跑复出之战，龙山50公里越野赛成功完赛，说明了术后恢复的确不错。</li>
<li>第二个是9月份在印度参加的12小时超级马拉松赛，在膝盖不适的情况下跑了66公里，用时10.5小时。</li>
<li>第三个是张掖百公里赛事在祁连山海拔4000多米的地方的失温事件，让我第一次感觉到死神是如此的接近。也因此让我错失了完赛百公里赛事的愿望。</li>
<li>第四个是四姑娘山越野赛，耗时7个小时爬上了四姑娘山的大峰，海拔5035米。虽然它是个初级雪山，但让我感受到了登山的魅力。可惜最后由于高反而被关门，没有拿到砸核桃的神器。</li>
</ul>


<h2>翻译</h2>

<p>拖了1年多，终于将《面向对象的思考过程》翻译出版，也算是了却了一桩心事。另外也校审和翻译了《C#多线程编程实战》的第二版，此书已经在出版过程中。还有参与了《基础设施即代码》一书的合译，目前正在校审过程中。</p>

<h2>博客</h2>

<p>今年写的博客数量少于往年。完结了《膝盖中了一箭》系列，因为实在不想再写这样的口水话文章。技术类的精品文章不是很多，不过还好在ThoughtWorks洞见上发表了好几篇。</p>

<hr />

<p>在2016年初的时候，我定下了每月一个目标的计划，结果执行了8各月就半途而废了。2017年初想法很多，先按下不表，过完新年再计议。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[面向对象的思考过程第四版译者序]]></title>
    <link href="http://www.huangbowen.net/blog/2017/01/19/the-object-oriented-thought-process/"/>
    <updated>2017-01-19T20:31:55+08:00</updated>
    <id>http://www.huangbowen.net/blog/2017/01/19/the-object-oriented-thought-process</id>
    <content type="html"><![CDATA[<p><img src="http://www.huangbowen.net/images/the-object-process.jpg" width="400"></p>

<p>很多IT从业人员进入这个行业都是从学习一门编程语言开始的。对于编程，我们往往过于关注语言的语法细节，反而忽略了其背后的设计理念。面向对象的思考过程就是一个非常优秀的设计理念。它可以独立于语言存在。如果你熟练掌握了面向对象的思考过程，那么就可以轻松地在不同的面向对象的语言之间切换。</p>

<!-- more -->


<p>本书透彻地阐述了面向对象这一概念。作者Matt在书中反复强调学习面向对象的思考过程优于学习任何编程语言或工具。事实上，他也是这么做的。Matt阐述了面向对象的三要素：继承、封装、多态，并且自己加上了第四个要素：组合。关于组合，Matt不惜篇幅做了大量的讲解，并且列举了很多通俗易懂的例子，这也是本书的一大特色。</p>

<p>Matt也纠正了人们的一些普遍误解，比如面向对象的范式与面向过程的范式并不是完全对立的关系。而且在应用面向对象的设计和开发时，Matt也讲解了不少如何与遗留系统集成的技巧。同时，Matt也简要介绍了UML这个建模利器。为了不混淆重点，他把介绍UML的章节放置在很靠后的位置。因为他明白，先了解面向对象的各项概念是最重要的。</p>

<p>我虽然拥有多年的从业经验，但是再看本书时仍然有不少收获。其实自从我接触了函数式编程，就渐渐成为函数式编程的拥趸。我会时不时地“鼓吹”函数式编程范式的好处，顺便“贬低”一下面向对象编程。但同时我也有个疑问，既然函数式编程这么好，为什么这几年的发展只能算是波澜不惊，而没有掀起大风浪呢？读了本书之后，我似乎找到了答案。首先面向对象的思考过程更加符合大家对世界的直观感受，毕竟不是每个人都是数学家。函数式编程可以简化很多问题，但它并不能简化所有问题。其次是面向对象的编程范式和函数式编程的范式并不是完全对立的，正如作者讲过，面向过程的编程范式和面向对象的编程范式也不是完全对立的。比如目前流行的一些语言（Scala、Go等）都具备函数式的特点，也兼具面向对象的特点（只不过它们的面向对象的机制与传统的方式有所不同）。所以无论你喜欢哪种编程范式，了解彼此的不同之处是至关重要的。而本书则是了解面向对象范式的优秀书籍。</p>

<p>本书已经更新到了第4版。从本书长达10多年的跨度来看，面向对象范式经久不衰。Matt也适时地在新版中加入了一些新的主题，比如可移植数据、分布式系统、Web服务等。Matt不仅阐述了这些技术，还讲述了它们的前世今生。这样可以帮助读者更加充分地了解技术的演化之路。</p>

<p>无论你是否有面向对象编程的经验，本书都适合你作为面向对象思考的旅程开端。最后，希望本书能给大家带来超凡的阅读体验。</p>

<p>购买链接：<a href="http://product.china-pub.com/5007999">《面向对象的思考过程第四版》</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[以敏捷的方式运作一所大学]]></title>
    <link href="http://www.huangbowen.net/blog/2017/01/11/operate-the-university-using-agile/"/>
    <updated>2017-01-11T20:54:32+08:00</updated>
    <id>http://www.huangbowen.net/blog/2017/01/11/operate-the-university-using-agile</id>
    <content type="html"><![CDATA[<p>2001年，敏捷宣言在美国犹他州瓦萨奇山雪鸟滑雪胜地横空出世。时至今日，敏捷软件开发流程早已经深入人心。ThoughtWorks作为敏捷实践的翘楚，一直不遗余力的向行业推广敏捷。而ThoughtWorks自身不仅在所有项目中都使用敏捷，甚至对毕业生的培养都是敏捷的。</p>

<!-- more -->


<p><img src="http://www.huangbowen.net/images/1-Agile-Manifesto.jpg" width="400"></p>

<p>在印度浦那有着一所很神秘的大学，叫做ThoughtWorks Univesity，简称“TWU”。每个加入ThoughtWorks的毕业生，都要接受在TWU为期5周的洗礼。笔者于2016年以讲师的身份，参加了两期ThoughtWorks University。整个经历真的是一趟奇妙的旅程，收获颇丰。在这个教授敏捷的大学，我领略到了如何以敏捷的方式来运作一所大学。</p>

<h2>敏捷的两个先决条件</h2>

<p>《Practices of An Agile Developer》一书讲到，一个项目适不适合敏捷有两个先决条件：第一点是项目是否以价值为导向，第二点是团队是否能够达到高度协作。</p>

<p><img src="http://www.huangbowen.net/images/2-team.jpg" width="400"></p>

<p>第一点也就是说整个团队有一个总体一致的目标。TWU拥有明确的目标，一切都是围绕着培养毕业生的四个方面：Customer Serivce Mindset &amp; Skills（客户服务意识和技能）, Business Understanding（ThoughtWorks业务理解）, Culture/Way of Life（文化及生活方式）, Global &amp; Social Experience（国际经验及社会责任）。</p>

<p>只有打造一个相对扁平的组织，给予充分的信任和自由度，才有利于敏捷的实施。这反过来又要求团队中的每个人有高度的自律性。</p>

<p>TWU的团队主要分为核心团队和讲师团队。核心团队统筹管理所有的TWU活动，确保所有的课程和活动都是围绕着TWU的目标开展。而讲师团队则是由全球各个办公室的员工抽调而来，负责具体实施这些活动。整个TWU团队都是完全扁平的架构，没有上下级的关系。</p>

<p>第二点是说必须能够保证团队中的成员能够流畅的交流。我们那期的讲师来自8个国家：中国、马来西亚、澳洲、美国、印度、巴西、英国、德国。这样的国际化战队能够在组建之后立马投入运作的最大原因就是每个人在ThoughtWorks学到的深入骨髓的合作理念。TWU的核心团队和讲师团队每周都有固定的时间碰头，讨论遇到的问题并商讨解决之道。每天早上TWU的讲师也有固定时间站会，更新各自的状态。下午也有碰头会，讨论当天的工作内容、遇到的问题，并提出行动来解决。</p>

<p>这两个先决条件在TWU完全符合。</p>

<h2>敏捷的基础是反馈</h2>

<p>《Practices of An Agile Developer》中讲到敏捷的基础就是反馈。如果别人能及时指出你走错了路，那么你就会少走点弯路。只有不断的接受反馈并付出行动，才会不断的提高。反馈也是双向的，不仅自己要接受反馈，也需要主动给同事反馈。</p>

<p><img src="http://www.huangbowen.net/images/3-feedback.jpg" width="400"></p>

<p>在TWU，首当其冲要接受来自核心团队和讲师的反馈。每周我们有个很独特的活动，叫做Speedback Session。在这个活动上所有的讲师会进行一对一的4分钟的谈话，相互给予反馈。这种开诚布公的行为把大家都团结到了一起。</p>

<p>而在每期TWU的前两周，新讲师会对课程进行试讲，这是获取其他讲师反馈的好时机。笔者本人收到了很多反馈，比如说我的语速很合适、声音洪亮等，也有鞭策我提高的反馈，比如我的引导力能力不强，有的时候课堂感染力不够等。</p>

<p>讲师要给学生讲课，及时收集学生的反馈也相当重要。TWU团队在每个教室都专门制作了一面反馈墙，每次讲师讲完课后都会提醒学生通过贴纸的方式留下对本堂课的反馈。从这些反馈中我找到了自己的一些问题，比如有的学生说我的口音有点重，对一些技术词汇解释的不是很清楚。这会促使我下次讲课时注意解决这些问题。同时我也收到了很多鼓舞，因为很多同学都留言说学到了很多有用的新东西，很感谢我的付出。</p>

<p>正是这种良好的反馈文化让我在短时间内意识到了很多不足之处，也明确了改进的方向。它能使你每天都正面面对工作和生活，每天都能保持提升自己。</p>

<h2>敏捷的精髓是拥抱变化</h2>

<p>《Practices of An Agile Developer》一书中讲到敏捷的精髓就是拥抱变化。TWU每一期的学生来自不同的国家和地区，各自拥有完全不同的经历。这就要求我们在短短几天内充分了解团队中的学生，并且对课程进行相应的调整。</p>

<p><img src="http://www.huangbowen.net/images/4-change.jpg" width="400"></p>

<p>比如有一次我们要求学生团队进行一次软件发布活动，而当时他们还没有学习功能开关（Feature Toggle），正在思考如何实现只发布想要的功能，而屏蔽掉其他正在开发中的功能。为了能让他们自行思考发布策略，我们特意把介绍发布策略的课程往后挪了一天。</p>

<p>我们不仅会调整课程的安排，对于课程的内容我们也会经常更新。比如有一节教授HTML和CSS的课程，我们对课程进行了大幅改动，删除了一些过时的内容，加上了一些通用的最佳实践。这样的改动能够保证TWU所有教授的内容都能赶得上IT领域日新月异的变化。相比起国内大学有些课程还在使用几十年前的教材，而我们的有些课程可能每半年就会全部更新一次。</p>

<p>一些重大的改动会被放到一年一度的TWU年度升级中进行处理。在年度升级中我们有两个月的时间对TWU的关键活动做升级。比如今年就将TWU使用的整个技术栈全部迁移到了AWS平台，实现能够一键式创建和删除整个学期需要的资源。</p>

<p>TWU在课程的设置方面一直紧跟市场的变化。ThoughtWorks最近不断接收一些关于UX和XD的业务，而TWU当时并没有专门针对UX和XD的培训内容。但是短短三个月的时间TWU一群卓越的同事就创建了相关的课程，并迎来了第一批UX和XD的毕业生。</p>

<h2>最后</h2>

<p>在TWU当讲师的几个月，笔者一直感觉这个大学是一个充满活力的大学。在这个大学里面，没有权威，没有各种条条框框，整个团队有一股极强的凝聚力，每个人是TWU的主人。运作一所大学不易，但如果能坚持做到持续反馈、拥抱变化的话，这所大学将始终是一所紧追时代步伐的大学。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[敏捷团队中的QA由来]]></title>
    <link href="http://www.huangbowen.net/blog/2016/12/20/qa-in-agile-team/"/>
    <updated>2016-12-20T22:32:43+08:00</updated>
    <id>http://www.huangbowen.net/blog/2016/12/20/qa-in-agile-team</id>
    <content type="html"><![CDATA[<p>QA,全称为Quality Analyst，即质量分析师(有些称为Quality Assurance,即质量保证师)。为什么它总跟质量扯在一块？感觉这个角色明明做的都是测试的事情，为什么不直接叫做tester那？敏捷项目中的QA日常都做什么事情那？可能一大推问题都会冒出来。别急，跟着我这篇文章来一步步的回答这些问题。</p>

<!-- more -->


<p>假设现在有一个保险公司，他想找一个软件公司做一个在线卖保险的系统。那么这个系统从开始到完成至少需要三个角色。</p>

<p>Business owner -> developer -> end user</p>

<ul>
<li>Business owner即保险公司的人，也是我们的需求来源，由他来提出业务需求。</li>
<li>developer即软件开发工程师，根据客户的需求做出客户期望的产品，最终交付给客户。</li>
<li>end user即产品的最终用户，在本例子中即有意愿在网上买保险的人。这个系统到底好不好用，他们最有发言权。（有的时候end user和business owner有可能是同一批人，比如开发的是一个内部公司使用的OA系统）。</li>
</ul>


<p>只有这些角色能够顺利、成功的完成一个产品吗？实际操作中肯定会遇到很多问题。这些问题会集中在两个地方。</p>

<p>第一个问题出在Business owner和developer。在沟通需求的时候他们彼此会发现太费劲了。Business owner张口就来的quote、premium、policy这些名词软件开发工程师不懂什么意思，因为他们没有保险行业的背景知识，而软件工程师喜欢说的MVC、BDD、Java之类的，Business owner也搞不懂，并且人家对这也不感兴趣。那么软件开发工程师想，如果有人能即懂得保险行业知识，又具有IT背景，那么分析需求肯定会顺利不少。这样的人在敏捷团队中就叫做BA（Business Anslyst,业务分析师）。BA会理解并挖掘客户的需求，然后将需求转变为具体的AC(验收条件,Acceptance critirial)，再交由开发工程师来实现。同时他也可以将业务知识最大化的传递给开发工程师，保证开发工程师能够准确的理解需求（为什么不让Business owner直接将业务知识传递给开发工程师那？原因很简单，人家可是一秒钟几十万上下的主，那里有这么多闲工夫。）</p>

<p>所以系统从开始到完成变成了这个样子。</p>

<p>Business owner -> BA -> developer -> end user</p>

<p>另一个问题就出现在了developer和end user之间。开发工程师完成的系统能够直接拿给最终用户用吗？如果你说能，要么你是对自己的产品信心十足，要么就是盲目乐观。我想大多数情况是后者。因为开发工程师在将业务需求转换为编码实现时，一方面由于理解的问题，实现或多或少可能会与需求有所偏差。另一方面由于自身思维的局限性，会导致系统隐含了一些缺陷。假如最终用户在使用系统时，发现在线支付有问题，或者页面在自己所用的浏览器下不能正常显示，你觉得他们还有兴趣使用你的系统吗？这就相当于把最终用户当做系统的测试者，人家不收钱还帮助我们发现bug，那里有这好事？系统的问题要尽可能的避免暴露给最终用户。那么在软件开发工程师和最终用户之间应该再加一个角色，就是tester。tester的主要职责就是按照AC，对系统进行功能性测试，确保功能的正确性，另一方面是针对一些非功能性测试（比如安全性测试，性能测试），保证系统的健壮性。</p>

<p>Business owner -> BA -> developer -> tester -> end user</p>

<p>做到这些的tester还不能称之为QA，因为它的角色更像是软件质量的看门人，最终把关者，还达不到测试分析的要求。</p>

<p>现在新的问题来了，到底tester什么时候该开始对软件的测试那？</p>

<p>一个极端情况是等developer把所有的功能完成以后，再交给tester来测。这样会造成很多问题。</p>

<ol>
<li>如果开发者需求理解有偏差，需要重新返工。</li>
<li>软件中发现了bug，该功能是很久以前开发完成的，developer定位和修复要花很长时间。</li>
<li>有太多的功能需要测试，tester要花很长时间，developer又要修复发现的bug，这段时间不可预估，虽然是属于项目上线的最后时刻，但是整个系统始终处于一个不稳定的状态。</li>
</ol>


<p>大家都知道在软件工程中，需求变更发生的越晚，bug发现的越晚，会软件开发的影响会越大。这种极端情况的做法是不可取的。</p>

<p>那么应该怎么做那？我们可以将整个系统的功能细分成很多小功能点，每一个小功能点都是独立可测的，那么一旦开发工程师完成此功能点，tester立马就可以拿去测试。每一个小功能点就是敏捷中所说的用户故事（user story）。</p>

<p>一个user story的典型的生命周期是这样子的。</p>

<ul>
<li>backlog -> BA将刚建好的story卡放置在backlog list里</li>
<li>Analyse -> BA细化story卡，完成验收条件等内容的编写</li>
<li>development -> 开发人员进行开发工作</li>
<li>testing -> 测试人员进行测试</li>
<li>UAT -> 用户验收测试，Business owner会对功能进行确认</li>
<li>Production -> Business owner准许后，将功能发布到生产环境</li>
</ul>


<p>如果只是实现这样的流程，那么这个团队还不算是真正的敏捷团队，这里的tester也不算是真正的QA。因为业务需求通过Business owner到BA再到DEV到tester，是一个衰减的过程。小时候我们玩过一个游戏，老师让一群人排成一排，他会给第一个人说一句悄悄话，然后让第一个人偷偷讲给第二个人，第二个人再原封不动的讲给第三个人..直到最后一个人把这个悄悄话讲出来和老师的原话比较，我们往往发现最后一个人的话很难和老师的原话保持一致，甚至意思会大相径庭。那么这就意味着tester在做测试的时候他不一定能够真正了解业务的实际需求，所以在测试时难免会出现纰漏。这样的卡最后让business owner确认时，很难避免给business owner “惊喜”。</p>

<p>所以为了解决需求衰减的问题，tester要尽早的介入到的story的前期工作。在BA分析故事卡的时候，tester就可以根据卡的内容准备测试策略、测试环境，甚至准备测试数据。在开发人员领取卡的时候，tester可以从测试的角度给开发人员提供一些建议。而在开发人员开发卡的时候，tester可以和开发人员一起pair编写自动化的测试用例。开发人员开发完毕后，tester可以在开发人员的本地环境中快速验证其是否满足所有验收条件，必要的自动化测试是否已经完成等。在UAT环节，tester又可以帮助business owner进行sign off。</p>

<p>这个时候需求的传递已经不是一个简单的链式的行为，测试人员作为连接器把需求良好地串联了起来。测试人员的职责范围已经超出了我们通常所理解的范围。这个时候再用tester这个称呼已经无法涵盖该角色的职责了。所以就有了QA（质量分析师）这一角色。可以看出在敏捷团队中QA并不是质量的最终把关者，而是在项目开始就参与到了质量的控制当中，一直贯穿到所有环节。</p>

<p>如果想了解敏捷团队中QA的具体职责，可以参见我司的同事的文章<a href="http://www.infoq.com/cn/articles/agility-of-qa">《敏捷中的QA》</a>.
如果你想知道自己适不适合QA，请参见我司另一位同事的文章<a href="http://insights.thoughtworkers.org/agile-qa/">《敏捷QA，从入门到放弃》</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring Batch在大型企业中的最佳实践]]></title>
    <link href="http://www.huangbowen.net/blog/2016/11/30/spring-batch-best-practices/"/>
    <updated>2016-11-30T23:36:45+08:00</updated>
    <id>http://www.huangbowen.net/blog/2016/11/30/spring-batch-best-practices</id>
    <content type="html"><![CDATA[<p>在大型企业中，由于业务复杂、数据量大、数据格式不同、数据交互格式繁杂，并非所有的操作都能通过交互界面进行处理。而有一些操作需要定期读取大批量的数据，然后进行一系列的后续处理。这样的过程就是“批处理”。</p>

<!-- more -->


<p>批处理应用通常有以下特点：</p>

<ul>
<li>数据量大，从数万到数百万甚至上亿不等；</li>
<li>整个过程全部自动化，并预留一定接口进行自定义配置；</li>
<li>这样的应用通常是周期性运行，比如按日、周、月运行；</li>
<li>对数据处理的准确性要求高，并且需要容错机制、回滚机制、完善的日志监控等。</li>
</ul>


<h2>什么是Spring batch</h2>

<p>Spring batch是一个轻量级的全面的批处理框架，它专为大型企业而设计，帮助开发健壮的批处理应用。Spring batch为处理大批量数据提供了很多必要的可重用的功能，比如日志追踪、事务管理、job执行统计、重启job和资源管理等。同时它也提供了优化和分片技术用于实现高性能的批处理任务。</p>

<p>它的核心功能包括：</p>

<ul>
<li>事务管理</li>
<li>基于块的处理过程</li>
<li>声明式的输入/输出操作</li>
<li>启动、终止、重启任务</li>
<li>重试/跳过任务</li>
<li>基于Web的管理员接口</li>
</ul>


<hr />

<p>笔者所在的部门属于国外某大型金融公司的CRM部门，在日常工作中我们经常需要开发一些批处理应用，对Spring Batch有着丰富的使用经验。近段时间笔者特意总结了这些经验。</p>

<h2>使用Spring Batch 3.0以及Spring Boot</h2>

<p>在使用Spring Batch时推荐使用最新的Spring Batch 3.0版本。相比Spring Batch2.2，它做了以下方面的提升：</p>

<ul>
<li>支持JSR-352标准</li>
<li>支持Spring4以及Java8</li>
<li>增强了Spring Batch Integration的功能</li>
<li>支持JobScope</li>
<li>支持SQLite</li>
</ul>


<p>支持Spring4和Java8是一个重大的提升。这样就可以使用Spring4引入的Spring boot组件，从而开发效率方面有了一个质的飞跃。引入Spring-batch框架只需要在build.gradle中加入一行代码即可：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>compile("org.springframework.boot:spring-boot-starter-batch")</span></code></pre></td></tr></table></div></figure>


<p>而增强Spring Batch Integration的功能后，我们就可以很方便的和Spring家族的其他组件集成，还可以以多种方式来调用job，也支持远程分区操作以及远程块处理。</p>

<p>而支持JobScope后我们可以随时为对象注入当前Job实例的上下文信息。只要我们制定Bean的scope为job scope，那么就可以随时使用jobParameters和jobExecutionContext等信息。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>@Component
</span><span class='line'>@JobScope
</span><span class='line'>public class CustomClass {
</span><span class='line'>    
</span><span class='line'>    @Value("#{jobParameters[jobDate]}")
</span><span class='line'>    private String jobDate;
</span><span class='line'>
</span><span class='line'>    @Value("#{jobExecutionContext['input.name']}.")
</span><span class='line'>    private String fileName;
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<h2>使用Java Config而不是xml的配置方式</h2>

<p>之前我们在配置job和step的时候都习惯用xml的配置方式，但是随着时间的推移发现问题颇多。</p>

<ul>
<li>xml文件数急剧膨胀，配置块长且复杂，可读性很差；</li>
<li>xml文件缺少语法检查，有些低级错误只有在运行集成测试的时候才能发现；</li>
<li>在xml文件中进行代码跳转时IDE的支持力度不够；</li>
</ul>


<p>我们渐渐发现使用纯Java类的配置方式更灵活，它是类型安全的，而且IDE的支持更好。在构建job或step时采用的流式语法相比xml更加简洁易懂。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>        @Bean
</span><span class='line'>        public Step step(){
</span><span class='line'>                return stepBuilders.get("step")
</span><span class='line'>                                .&lt;Partner,Partner&gt;chunk(1)
</span><span class='line'>                                .reader(reader())
</span><span class='line'>                                .processor(processor())
</span><span class='line'>                                .writer(writer())
</span><span class='line'>                                .listener(logProcessListener())
</span><span class='line'>                                .faultTolerant()
</span><span class='line'>                                .skipLimit(10)
</span><span class='line'>                                .skip(UnknownGenderException.class)
</span><span class='line'>                                .listener(logSkipListener())
</span><span class='line'>                                .build();
</span><span class='line'>        }</span></code></pre></td></tr></table></div></figure>


<p>在这个例子中可以很清楚的看到该step的配置，比如reader/processor/writer组件，以及配置了哪些listener等。</p>

<h2>本地集成测试中使用内存数据库</h2>

<p>Spring batch在运行时需要数据库支持，因为它需要在数据库中建立一套schema来存储job和step运行的统计信息。而在本地集成测试中我们可以借助Spring batch提供的内存Repository来存储Spring batch的任务执行信息，这样即避免了在本地配置一个数据库，又可以加快job的执行。先为Job的配置类添加扩展类：DefaultBatchConfigurer。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class CustomJobConfiguration extends DefaultBatchConfigurer {
</span><span class='line'>    
</span><span class='line'>    ...
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>我们在build.gradle中加入对hsqldb的依赖：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>runtime(‘org.hsqldb:hsqldb:2.3.2’)</span></code></pre></td></tr></table></div></figure>


<p>然后在测试类中添加对DataSource的配置。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@EnableAutoConfiguration
</span><span class='line'>@EnableBatchProcessing
</span><span class='line'>@DataJpaTest
</span><span class='line'>@Import({DataSourceAutoConfiguration.class, BatchAutoConfiguration.class})
</span><span class='line'>public class TestConfiguration {
</span><span class='line'>    
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>并且在applicaton.properties配置中添加初始化Database的配置：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>spring.batch.initializer.enable=true</span></code></pre></td></tr></table></div></figure>


<h2>合理的使用Chunk机制</h2>

<p>Spring batch在配置Step时采用的是基于Chunk的机制。即每次读取一条数据，再处理一条数据，累积到一定数量后再一次性交给writer进行写入操作。这样可以最大化的优化写入效率，整个事务也是基于Chunk来进行。</p>

<p>当我们在需要将数据写入到文件、数据库中之类的操作时可以适当设置Chunk的值以满足写入效率最大化。但有些场景下我们的写入操作其实是调用一个web service或者将消息发送到某个消息队列中，那么这些场景下我们就需要设置Chunk的值为1，这样既可以及时的处理写入，也不会由于整个Chunk中发生异常后，在重试时出现重复调用服务或者重复发送消息的情况。</p>

<h2>使用Listener来监视job执行情况并及时做相应的处理</h2>

<p>Spring batch提供了大量的Listener来对job的各个执行环节进行全面的监控。</p>

<p>在job层面Spring batch提供了JobExecutionListener接口，其支持在Job开始或结束时进行一些额外处理。在step层面Spring batch提供了StepExecutionListener，ChunkListener,ItemReadListener,ItemProcessListener,ItemWriteListener,SkipListener等接口，同时对Retry和Skip操作也提供了RetryListener及SkipListener。</p>

<p>通常我们会为每个job都实现一个JobExecutionListener，在afterJob操作中我们输出job的执行信息，包括执行时间、job参数、退出代码、执行的step以及每个step的详细信息。这样无论是开发、测试还是运维人员对整个job的执行情况了如指掌。</p>

<p>如果某个step会发生skip的操作，我们也会为其实现一个SkipListener，并在其中记录skip的数据条目，用于下一步的处理。</p>

<p>实现Listener有两种方式，一种是继承自相应的接口，比如继承JobExecutionListener接口，另一种是使用annoation（注解）的方式。经过实践我们认为使用注解的方式更好一些，因为使用接口你需要实现接口的所有方法，而使用注解则只需要对相应的方法添加annoation即可。</p>

<p>下面的这个类采用了继承接口的方式，我们看到其实我们只用到了第一个方法，第二个和第三个都没有用到。但是我们必须提供一个空的实现。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class CustomSkipListener implements SkipListener&lt;String, String&gt; {
</span><span class='line'>    @Override
</span><span class='line'>    public void onSkipInRead(Throwable t) {
</span><span class='line'>        // business logic
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    @Override
</span><span class='line'>    public void onSkipInWrite(String item, Throwable t) {
</span><span class='line'>        // no need
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    @Override
</span><span class='line'>    public void onSkipInProcess(String item, Throwable t) {
</span><span class='line'>        // no need
</span><span class='line'>    }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>而使用annoation的方式可以简写为：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class CustomSkipListener {
</span><span class='line'>    
</span><span class='line'>    @OnSkipInRead
</span><span class='line'>    public void onSkipInRead(Throwable t) {
</span><span class='line'>        // business logic
</span><span class='line'>    }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<h2>使用Retry和Skip增强批处理工作的健壮性</h2>

<p>在处理百万级的数据过程过程中难免会出现异常。如果一旦出现异常而导致整个批处理工作终止的话那么会导致后续的数据无法被处理。Spring Batch内置了Retry（重试）和Skip（跳过）机制帮助我们轻松处理各种异常。我们需要将异常分为三种类型。第一种是需要进行Retry的异常，它们的特点是该异常可能会随着时间推移而消失，比如数据库目前有锁无法写入、web服务当前不可用、web服务满载等。所以对它们适合配置Retry机制。第二种是需要Skip的异常，比如解析文件的某条数据出现异常等，因为对这些异常即使执行Retry每次的结果也都是相同，但又不想由于某条数据出错而停止对后续数据的处理。第三种异常是需要让整个Job立刻失败的异常，比如如果出现了OutOfMemory的异常，那么需要整个Job立刻运行。</p>

<p>一般来说需要Retry的异常也要配置Skip选项，从而保证后续的数据能够被继续处理。我们也可以配置SkipLimit选项保证当Skip的数据条目达到一定数量后及时终止整个Job。</p>

<p>有时候我们需要在每次Retry中间隔做一些操作，比如延长Retry时间，恢复操作现场等，Spring Batch提供了BackOffPolicy来达到目的。下面是一个配置了Retry机制、Skip机制以及BackOffPolicy的step示例。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>@Bean
</span><span class='line'>public Step step(){
</span><span class='line'>    return stepBuilders.get("step")
</span><span class='line'>            .&lt;Partner,Partner&gt;chunk(1)
</span><span class='line'>            .reader(reader())
</span><span class='line'>            .processor(processor())
</span><span class='line'>            .writer(writer())
</span><span class='line'>            .listener(logProcessListener())
</span><span class='line'>            .faultTolerant()
</span><span class='line'>            .skipLimit(10)
</span><span class='line'>            .skip(UnknownGenderException.class)
</span><span class='line'>            .skip(ServiceUnavailableException.class)
</span><span class='line'>            .retryLimit(5)
</span><span class='line'>            .retry(ServiceUnavailableException.class)
</span><span class='line'>            .backOffPolicy(backoffPolicy)
</span><span class='line'>            .listener(logSkipListener())
</span><span class='line'>            .build();
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>使用自定义的Decider来实现Job flow</h2>

<p>在Job执行过程中不一定都是顺序执行的，我们经常需要根据某个job的输出数据或执行结果来决定下一步的走向。以前我们会把一些判断放置在下游step中进行，这样可能会导致有些step实际运行了，但其实并没有做任何事情。比如一个step执行过程中会将失败的数据条目记录到一个报告中，而下一个step会判断有没有生成报告，如果生成了报告则将该报告发送给指定联系人，如果没有则不做任何事情。这种情况下可以通过Decider机制来实现Job的执行流程。在Spring batch 3.0中Decider已经从Step中独立出来，和Step处于同一级别。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class ReportDecider implements JobExecutionDecider {
</span><span class='line'>    @Override
</span><span class='line'>    public FlowExecutionStatus decide(JobExecution jobExecution, StepExecution stepExecution) {
</span><span class='line'>        if (report.isExist()) {
</span><span class='line'>            return new FlowExecutionStatus(“SEND");
</span><span class='line'>        }
</span><span class='line'>        
</span><span class='line'>        return new FlowExecutionStatus(“SKIP");
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>而在job配置中可以这样来使用Decider。这样整个Job的执行流程会更加清晰易懂。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public Job job() {
</span><span class='line'>    return new JobBuilder("petstore")
</span><span class='line'>            .start(orderProcess())
</span><span class='line'>            .next(reportDecider)
</span><span class='line'>            .on("SEND").to(sendReportStep)
</span><span class='line'>            .on("SKIP").end().build()
</span><span class='line'>            .build()
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>采用多种机制加速Job的执行</h2>

<p>批处理工作处理的数据量大，而执行窗口一般又要求比较小。所以必须要通过多种方式来加速Job的执行。一般我们有四种方式来实现：</p>

<ul>
<li>在单个step中多线程执行任务</li>
<li>并行执行不同的Step</li>
<li>并行执行同一个Step</li>
<li>远程执行Chunk任务</li>
</ul>


<p>在单个step多线程执行任务可以借助于taskExecutor来实现。这种情况适合于reader、writer是线程安全的并且是无状态的场景。我们还可以设置线程数量。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public Step step() {
</span><span class='line'>    return stepBuilders.get("step")
</span><span class='line'>            .tasklet(tasklet)
</span><span class='line'>            .throttleLimit(20)
</span><span class='line'>            .build();
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>上述示例中的tasklet需要实现TaskExecutor，Spring Batch提供了一个简单的多线程TaskExecutor供我们使用：SimpleAsyncTaskExecutor。</p>

<p>并行执行不同的Step在Spring batch中很容易实现，以下是一个示例：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public Job job() {
</span><span class='line'>    return stepBuilders.get("parallelSteps")
</span><span class='line'>            .start(step1)
</span><span class='line'>            .split(asyncTaskExecutor).add(flow1, flow2)
</span><span class='line'>            .next(step3)
</span><span class='line'>            .build();
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>在这个示例中我们先执行step1，然后并行执行flow1和flow2，最后再执行step3。</p>

<p>Spring batch提供了PartitionStep来实现对同一个step在多个进程中实现并行处理。通过PartitonStep再配合PartitionHandler可以将一个step扩展到多个Slave上实现并行运行。</p>

<p>远程执行Chunk任务则是将某个Step的processer操作分割到多个进程中，多个进程通过一些中间件进行通讯（比如采用消息的方式）。这种方式适合于Processer是瓶颈而Reader和Writer不是瓶颈的场景。</p>

<h2>结语</h2>

<hr />

<p>Spring Batch对批处理场景进行了合理的抽象，封装了大量的实用功能，使用它来开发批处理应用可以达到事半功倍的效果。在使用的过程中我们仍需要坚持总结一些最佳实践，从而能够交付高质量的可维护的批处理应用，满足企业级应用的苛刻要求。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[12小时超级马拉松赛记]]></title>
    <link href="http://www.huangbowen.net/blog/2016/10/08/12-hours-ultra-running/"/>
    <updated>2016-10-08T17:59:29+08:00</updated>
    <id>http://www.huangbowen.net/blog/2016/10/08/12-hours-ultra-running</id>
    <content type="html"><![CDATA[<p>8月初再次来到印度Pune出差，还是在TWU当讲师。这次的TWU是第51期，也是有史以来人数最多的一期。整个TWU的工作很多，非常忙，经常从早上8点忙到晚上8点。为了备战10月份的越野比赛，只有在周末才有时间拉个半马。</p>

<!-- more -->


<p>9月初从www.townscirpt.com网站上看到9月24日Pune会举行一场12小时超级马拉松，从晚上的7点钟跑到第二天早上的7点钟，心里顿时长了草。自己之前还没有参加过12小时超级马拉松，所以很想得到这样的一份体验。另外可以把这场比赛作为10月份越野赛的很好的一次赛前拉练。</p>

<p>9月24日很快就到来了。之前一周非常忙，每天基本上都是凌晨2、3点才睡觉。为了保证24日晚上有充足的精力，我并没有参加23日晚上的TWU 毕业Party，而是在家里睡大觉。24日的整个白天也是除了吃就是睡。下午4点多睡醒了，开始收拾装备准备出发去赛场。</p>

<p>比赛之前我从网上查了一下关于12小时马拉松的准备情况，了解到这样的马拉松通常都是在操场/公园之类的地方举行，地形无起伏。所以我初步制定了完成80公里的计划。并且列出了下面的装备清单。</p>

<ul>
<li>凡士林</li>
<li>黑色长裤、牛仔裤、运动内裤两条</li>
<li>短袖一件、长袖一件、外套一件</li>
<li>跑鞋一双，袜子两双</li>
<li>充满电的手机充电宝</li>
<li>手机，手机充电线</li>
<li>止痛片？</li>
<li>好吃的零食</li>
</ul>


<p>带凡士林是为了防止裆部皮肤磨破，已经因为这个好几次比赛都吃亏了，所以这次12小时的跑步一定不能掉以轻心。带止痛片是为了缓解膝盖和脚踝的疼痛，但是最后忘记买了。好吃的零食也是为了补给了，12小时不吃东西万万不行，不过身在印度，还真没有发现任何好吃的零食，所以最后也没有带。最后带的东西是1到6列的那些东西.</p>

<p>比赛前一周的时候我在jogger’s park刷线上半程马拉松刷到10公里的时候右膝盖突然感觉跑步时有异响。这可是一个非常的征兆。虽然并不是很痛，但几乎每次屈伸腿都会感觉里面似乎有东西在磨动。之后的一周就没有怎么运动，但是感觉膝盖的异响还是没有减轻。所以这也是参加比赛的一个巨大的隐患。但我不想因此而放过这次百公里比赛前的拉练机会，所以决定还是要参加。</p>

<p>五点多去了little door餐馆吃了好吃的牛肉饭，把能量补足。然后使用印度本土的ola软件打了一辆车去目的地，一个高尔夫球场。上车后司机问我目的地正确不，我说没问题。接下来才是悲剧的开始。由于我的目的地是在城外，而ola默认是不跑城外的，它把我的目的地给定到了一个奇怪的地方。司机拉到后把我放下就走了。我用google map一下看妈的离目的地还有14公里远。我赶紧用uber重新叫车。当时时间已经是7点了，而且还是Pune的下班高峰期，连续叫了两辆Uber都被司机取消了。当时我看到已经错过比赛时间了，都想直接回去得了。但回去也要叫车啊，我又尝试叫了一次，并且在一个路人的帮助下司机pick up了我。当时上车已经7点半了，到了比赛场地是一个小时后了。</p>

<p><img src="http://www.huangbowen.net/images/IMG_4661.jpg" width="400"></p>

<p>我急急忙忙领了号码簿，存了包，就开跑了。一开跑我就快哭了。这MD整个赛道都是在山上啊，12小时超级马拉松硬生生给整成了越野跑。赛道是一个全长4.2公里的公路。从这头跑到那头再跑回来算一圈。4.2公里中平路大概占1公里多，剩下的都是上坡和下坡。</p>

<p>看到这路况我知道80公里的目标肯定是完成不了了。跑步过程中碰到一个赤脚大叔说他今天的目标是跑8个来回。我想8个来回也就是64公里左右，我也跑8个来回吧。看来到哪里都是赤脚的跑神，在开挂的印度也不例外。</p>

<p><img src="http://www.huangbowen.net/images/IMG_0006_2.jpg" width="400"></p>

<p>虽然线路起伏很大，我感觉状态还好，上坡能跑，维持在9分多的配速，下坡也能冲到5分多。我知道长路漫漫，所以刚开始一定不能太猛了，免得后劲乏力。跑的过程中膝盖没有出现弹响，这让我很高兴。这边比赛的补给还挺好的，有瓶装水、饮料、饼干、香蕉、橘子、花生，还有盐。盐是那种一小包的包装，就像咖啡店里装糖的那种包装。这可是防止抽筋的利器，我直接撕一包到嘴里，然后合着矿泉水吞下。我在想以后比赛也别买盐丸了，直接装包盐，经济又划算。</p>

<p>不知不觉我就刷了两圈了。第一圈用时52分钟，在山地环境下跑出这样的成绩我很满意。第二圈用时一个小时，速度有所下降，但也在接受的范围之内。第三圈1小时10分钟，因为上坡基本跑不动了，只能快走了，平路和下坡还是能跑。第三圈完了以后喝了些咖啡，觉得这个咖啡真是太美味了。在补给站呆了6分钟后，又重新向第四圈发起冲锋。</p>

<p>其实第四圈整个人状态还好，就是膝盖又开始弹响，右膝盖又有点隐隐作痛。第四圈跑完的时候恰好花了4个半小时，当时是凌晨1点钟。还有6个小时比赛结束，而我还有4圈要跑。第5圈跑完用时1小时10分钟左右。这时候最快的一公里也只能到7分多点了，最慢的有将近12分钟。</p>

<p>第五圈跑完在补给站的时候我又碰到了赤脚大叔，我说接下来我们一起跑吧。整个第六圈我们一起边跑边聊。这个大叔说他跑过的最长距离是100公里，是在山里跑的，用了24个小时。他很热情，看到没有的跑者都要打招呼，给他们加油。第六圈跑完再次进入补给站后，我感觉膝盖很痛，两个大腿肌肉硬的很，跑步已经完全失去弹性了。有个医护小妹帮我做了腿部肌肉放松。做完之后我发现MD路都走不了了。只好在站里休息了20多分钟才出发。而赤脚大叔早都弃我而去。</p>

<p>我一拐一瘸的爬坡，恰好也碰到另一个跑友也是一拐一瘸，看起来伤的比我还严重。他问我是不是受伤了，说前面看我跑的很快，问我是不是专业跑步的。我说不是，业余玩票而已。他说他平时跑的比较少，这次是被朋友拉过来的，他的目标就是跑够12小时，接下来打算全程走完。这个小哥走的太慢，我和他走了一段路就分开了。后面有个大叔跟了上来陪着我跑。经过聊天才知道他是这次比赛的组织者之一，是专门负责赛道上参赛者的安全的。他说他跑过的最长距离是212公里，用时40小时。我的天啊！一山更比一山高。到了第7圈折返点的时候，看到一个跑友再用一个喷雾剂往腿上喷。我开始还以为是杀虫的。他问我要不要喷，可以减少疼痛感。我试了一下，还别说真有效，喷了以后膝盖的疼痛感减少了不少。我在想要不要下个月的比赛自己也带一瓶。</p>

<p>跑完第7圈，这时候已经将近6点了。时间过的好快，我还没有任何瞌睡的感觉，只是腿部肌肉实在是非常僵硬。只有一个小时的时间，跑完一圈时间应该不够了，除非能拿出刚开始跑的那种装填。但这个时候整个人已经非常疲惫，只有慢慢走了，能走多少是多少。天也慢慢亮了，我突然发现路上跑的人变多了，而且各个竟然上坡还能跑。后来才知道原来有些人跑到凌晨就找钻进补给点的帐篷休息了，现在马上要到7点了，所以都出来完成赛事。他们由于休息了几个小时，所以精力自然比我要好的多。</p>

<p><img src="http://www.huangbowen.net/images/IMG_0020_2.jpg" width="400"></p>

<p>果然我第8圈没有跑完就已经7点了，差1.5公里完成整整8圈，这也算是一点小遗憾吧。到了终点领了完赛T恤，还收获了一个完赛奖杯。跑步这么久，这可是我跑步以来收获的第一个奖杯，之前收到的都是完赛奖牌。我还和赛事主办者合了影。主办者也参加了比赛，跑了貌似不下10圈，尤其是最后上坡还能冲着跑，实力不一般。他说11月份要来中国参加100公里越野赛，当时太匆忙没有问他参加的是哪个比赛。</p>

<p><img src="http://www.huangbowen.net/images/IMG_4688.jpg" width="400"></p>

<p>第一次12小时超级马拉松就这样跑完了。整个过程其实不是很累，没有那种让人绝望的感觉，也没有想过要放弃。可能是因为没有距离限制，即使跑不动了也可以走，所以心里比较淡定。总共跑了66公里，爬升2000米，下降2000米，这个成绩自己也比较满意。这个比赛我也见识了很多很牛的印度跑友。其中有个女的刚参加完新加坡的一个比赛，完成了168公里，她是这次比赛的女子组冠军。印度跑友超级热情，不止一个跑友问我知不知道Great Wall Marathon。我说知道，其实我心里在想，挂名长城马拉松的比赛中国一年没有10个也有5个，谁知道你们说的是哪一个。他们问我参加了Great Wall Marathon没，我说没有。他们问为什么，我说离我生活的城市太远了。</p>

<p><img src="http://www.huangbowen.net/images/IMG_0023_2.jpg" width="400"></p>

<p><img src="http://www.huangbowen.net/images/IMG_0024_2.jpg" width="400"></p>

<p>第一个马拉松是在布里斯班跑的，而第一个12小时超级马拉松是在Pune跑的。看来国外才是我的福地。希望这次膝盖的伤痛能尽快康复，待我完成百公里超马后，就正式收山, 转战铁三！</p>

<p><img src="http://www.huangbowen.net/images/IMG_0017_2.jpg" width="400"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2016年8月份]]></title>
    <link href="http://www.huangbowen.net/blog/2016/09/05/summary-for-2016-august/"/>
    <updated>2016-09-05T04:11:46+08:00</updated>
    <id>http://www.huangbowen.net/blog/2016/09/05/summary-for-2016-august</id>
    <content type="html"><![CDATA[<p>8月份又一次来到了印度Pune，作为TWU第51期的讲师会在这里呆上2个月左右。</p>

<!-- more -->


<p>由于在3月份已经来过一次，所以一切都很熟悉，甚至住的房间和上次都差不多。再一次和来自全球各地的Trainer一起合作，共同服务有史以来TWU学生最多的一期，我很荣幸。每次来TWU都是带着学习的态度来的。现在呆了一个月，感觉不错。</p>

<p>这一个月跑步训练5次，总距离40公里，达到了历史新低。一部分原因是TWU前三周很忙，抽不出时间训练，另一部分原因是张掖比赛的失利使得自己有所懈怠。当然自己也要尽快从这种情绪中脱离出来，恢复状态。因为10月15日的大理100以及11月6日的四姑娘山越野赛都是硬仗。这个月一次半马拉练都没有，所以身体素质达到了历史新低。</p>

<p><img src="http://www.huangbowen.net/images/IMG_4638.PNG" width="300"></p>

<p>这次又参加了Pune当地的跑步活动，名字叫做Midnight marathone。其实是晚上8点半起跑，组别有5公里、10公里和21公里。我和两个同事报名了10公里并且顺利完赛。</p>

<p><img src="http://www.huangbowen.net/images/IMG_4580.JPG" width="400"></p>

<p>另外利用了一个周末和同事一起出游，去爬了当地最高的一座山峰。攀爬的过程中一会儿下雨、一会儿出太阳，还真是一段奇妙的经历。这也算一次越野拉练吧。</p>

<p><img src="http://www.huangbowen.net/images/IMG_4535.jpg" width="400"></p>

<p>由于还住在上次的小区，所以又可以使用这个小区的健身房了。与上次不同的是现在健身房有了一个教练。健身房人气和上次差不多，每次我去只有稀稀拉拉2、3个人锻炼。由于7月份几乎没去过健身房，所以这个月主要是唤醒身上的肌肉，锻炼时没怎么上量。8月份健身房出勤率可能也就30%左右吧。</p>

<p><img src="http://www.huangbowen.net/images/IMG_4587.jpg" width="400"></p>

<p>好事情是我又回归篮球场和足球场了。小区里面就有个篮球场，所以下班早的话就和同事一块去打球。有的时候也和小区里的其他孩子过过招。当然为了保护自己，基本不会有什么身体对抗。足球基本每周一次，也是和同事一起踢5V5的小场子。由于这次没有带球鞋，所以每次踢球都是赤脚。</p>

<p>8月份没有定什么计划，9月份计划就定为完成Infrastructure as Code一书的合译吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2016年7月份的总结]]></title>
    <link href="http://www.huangbowen.net/blog/2016/08/22/target-about-july/"/>
    <updated>2016-08-22T00:52:59+08:00</updated>
    <id>http://www.huangbowen.net/blog/2016/08/22/target-about-july</id>
    <content type="html"><![CDATA[<p>《膝盖中了一箭》已经连载了一年，我想是时候终止这个系列了。当然不排除以后有相关的东西继续写。</p>

<!-- more -->


<p>整个7月份过的都比较忙碌。由于父母回老家了，只有我和老婆两个带孩子。平时把孩子送在家附近的一个早教中心，早上8点半送过去，下午5点半再接回来。结果在早教中心带了两周后孩子就生病了，忙活了好几天。由于这个病有一定的传染性，所以早教中心也不能去了，只好喊岳母过来照看一段时间。</p>

<p>基本上我也没怎么训练，这样间接导致了张掖的失利。整个7月份只可怜的跑了3次，总距离80多公里。</p>

<p><img src="http://www.huangbowen.net/images/IMG_4561.PNG" width="300"></p>

<p>健身房也基本没咋去过。停训了一个月，恢复肯定又要花大量的时间。</p>

<p>7月份定的两个目标也没有完成。目标之一是张掖完赛，但跑了50公里，只完成了目标的50%。目标之二是考取AWS的解决方案架构师的专家级证书，但经过一个月的准备之后发现考取难度还是太大，所以就先考了一个AWS的开发人员证书。</p>

<p>8月份在TWU预计会非常繁忙，暂时就不给8月份定什么目标吧，专心把TWU搞好。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AWS的SysOps认证考试样题解析]]></title>
    <link href="http://www.huangbowen.net/blog/2016/08/01/aws-sysops-exam-sample/"/>
    <updated>2016-08-01T17:47:01+08:00</updated>
    <id>http://www.huangbowen.net/blog/2016/08/01/aws-sysops-exam-sample</id>
    <content type="html"><![CDATA[<p>刚考过了AWS的developer认证，顺手做了一下SysOps的样题。以下是题目和答案。</p>

<!-- more -->


<hr />

<p>When working with Amazon RDS, by default AWS is responsible for implementing which two management-related activities? (Pick 2 correct answers)</p>

<ol type="a">
<li><p>Importing data and optimizing queries</p></li>
<li><p>Installing and periodically patching the database software</p></li>
<li><p>Creating and maintaining automated database backups with a point-in-time recovery of up to five minutes</p></li>
<li><p>Creating and maintaining automated database backups in compliance with regulatory long-term retention requirements</p></li>
</ol>


<p>答案：B C</p>

<p>参考文档：<a href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.html">http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.html</a></p>

<hr />

<p>You maintain an application on AWS to provide development and test platforms for your developers.</p>

<p>Currently both environments consist of an m1.small EC2 instance. Your developers notice performance degradation as they increase network load in the test environment.</p>

<p>How would you mitigate these performance issues in the test environment?</p>

<ol type="a">
<li><p>Upgrade the m1.small to a larger instance type</p></li>
<li><p>Add an additional ENI to the test instance</p></li>
<li><p>Use the EBS optimized option to offload EBS traffic</p></li>
<li><p>Configure Amazon Cloudwatch to provision more network bandwidth when network utilization exceeds 80%</p></li>
</ol>


<p>答案：A</p>

<p>解析：添加ENI并不会增加带宽；m1.small机器类型没有EBS optimized option;network utilisation与机器类型相关，无法对m1.small provision更多的带宽</p>

<hr />

<p>Per the AWS Acceptable Use Policy, penetration testing of EC2 instances:</p>

<ol type="a">
<li><p>may be performed by the customer against their own instances, only if performed from EC2 instances.</p></li>
<li><p>may be performed by AWS, and is periodically performed by AWS.</p></li>
<li><p>may be performed by AWS, and will be performed by AWS upon customer request.</p></li>
<li><p>are expressly prohibited under all circumstances.</p></li>
<li><p>may be performed by the customer against their own instances with prior authorization from AWS.</p></li>
</ol>


<p>答案：E</p>

<p>参考文档：<a href="https://aws.amazon.com/security/penetration-testing/">https://aws.amazon.com/security/penetration-testing/</a></p>

<hr />

<p>You have been tasked with identifying an appropriate storage solution for a NoSQL database that requires random I/O reads of greater than 100,000 4kB IOPS.</p>

<p>Which EC2 option will meet this requirement?</p>

<ol type="a">
<li><p>EBS provisioned IOPS</p></li>
<li><p>SSD instance store</p></li>
<li><p>EBS optimized instances</p></li>
<li><p>High Storage instance configured in RAID 10</p></li>
</ol>


<p>答案：B</p>

<p>解析：这道题只有SSD instance store能提供10万的IOPS</p>

<hr />

<p>Instance A and instance B are running in two different subnets A and B of a VPC. Instance A is not able to ping instance B.</p>

<p>What are two possible reasons for this? (Pick 2 correct answers)</p>

<ol type="a">
<li><p>The routing table of subnet A has no target route to subnet B</p></li>
<li><p>The security group attached to instance B does not allow inbound ICMP traffic</p></li>
<li><p>The policy linked to the IAM role on instance A is not configured correctly</p></li>
<li><p>The NACL on subnet B does not allow outbound ICMP traffic</p></li>
</ol>


<p>答案：B D</p>

<p>解析：同一个VPC下的所有subnet默认可以相互连接，所以A不对；ping连接不需要什么AWS权限，所以C也不对。而控制机器访问有两层，一层是给subnet指定的ACL，另一层是给机器指定的SG。</p>

<hr />

<p>Your web site is hosted on 10 EC2 instances in 5 regions around the globe with 2 instances per region.</p>

<p>How could you configure your site to maintain site availability with minimum downtime if one of the 5 regions was to lose network connectivity for an extended period of time?</p>

<ol type="a">
<li><p>Create an Elastic Load Balancer to place in front of the EC2 instances. Set an appropriate health check on each ELB.</p></li>
<li><p>Establish VPN Connections between the instances in each region. Rely on BGP to failover in the case of a region wide connectivity outage</p></li>
<li><p>Create a Route 53 Latency Based Routing Record Set that resolves to an Elastic Load Balancer in each region. Set an appropriate health check on each ELB.</p></li>
<li><p>Create a Route 53 Latency Based Routing Record Set that resolves to Elastic Load Balancers in each region and has the Evaluate Target Health flag set to true.</p></li>
</ol>


<p>答案：D</p>

<p>参考文档：<a href="http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-complex-configs.html">http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-complex-configs.html</a></p>

<p>解析：只有开启了Evaluate Target Health flag，Route53才会根据健康情况进行路由</p>

<hr />

<p>You run a stateless web application with the following components: Elastic Load Balancer (ELB), 3 Web/Application servers on EC2, and 1 MySQL RDS database with 5000 Provisioned IOPS. Average response time for users is increasing. Looking at CloudWatch, you observe 95% CPU usage on the Web/Application servers and 20% CPU usage on the database. The average number of database disk operations varies between 2000 and 2500.</p>

<p>Which two options could improve response times? (Pick 2 correct answers)</p>

<ol type="a">
<li><p>Choose a different EC2 instance type for the Web/Application servers with a more appropriate
CPU/memory ratio</p></li>
<li><p>Use Auto Scaling to add additional Web/Application servers based on a CPU load threshold</p></li>
<li><p>Increase the number of open TCP connections allowed per web/application EC2 instance</p></li>
<li><p>Use Auto Scaling to add additional Web/Application servers based on a memory usage threshold</p></li>
</ol>


<p>答案：A B</p>

<p>解析：这里是application机器CPU过载，解决方式是要不加强application机器性能，要不增加更多的application机器，C没有用，D是基于内存门槛，所以都不对</p>

<hr />

<p>Which features can be used to restrict access to data in S3? (Pick 2 correct answers)</p>

<ol type="a">
<li><p>Create a CloudFront distribution for the bucket.</p></li>
<li><p>Set an S3 bucket policy.</p></li>
<li><p>Use S3 Virtual Hosting.</p></li>
<li><p>Set an S3 ACL on the bucket or the object.</p></li>
<li><p>Enable IAM Identity Federation.</p></li>
</ol>


<p>答案：B D</p>

<p>参考文档：<a href="http://docs.aws.amazon.com/AmazonS3/latest/dev/using-iam-policies.html">http://docs.aws.amazon.com/AmazonS3/latest/dev/using-iam-policies.html</a>
<a href="http://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html">http://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html</a></p>

<hr />

<p>You need to establish a backup and archiving strategy for your company using AWS. Documents should be immediately accessible for 3 months and available for 5 years for compliance reasons.</p>

<p>Which AWS service fulfills these requirements in the most cost effective way?</p>

<ol type="a">
<li><p>Use StorageGateway to store data to S3 and use life-cycle policies to move the data into Redshift for
long-time archiving</p></li>
<li><p>Use DirectConnect to upload data to S3 and use IAM policies to move the data into Glacier for longtime
archiving</p></li>
<li><p>Upload the data on EBS, use life-cycle policies to move EBS snapshots into S3 and later into Glacier
for long-time archiving</p></li>
<li><p>Upload data to S3 and use life-cycle policies to move the data into Glacier for long-time archiving</p></li>
</ol>


<p>答案：D</p>

<p>参考文档：<a href="http://docs.aws.amazon.com/AmazonS3/latest/dev/object-lifecycle-mgmt.html">http://docs.aws.amazon.com/AmazonS3/latest/dev/object-lifecycle-mgmt.html</a></p>

<p>解析：S3可以存放经常使用的文档，然后存档文件可以使用life-cycle policies放置到Glacier上</p>

<hr />

<p>Given the following IAM policy:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'><span class="s2">&quot;Version&quot;</span><span class="o">:</span> <span class="s2">&quot;2012-10-17&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;Statement&quot;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="s2">&quot;Effect&quot;</span><span class="o">:</span> <span class="s2">&quot;Allow&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;Action&quot;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'><span class="s2">&quot;s3:Get*&quot;</span><span class="p">,</span> <span class="s2">&quot;s3:List*&quot;</span>
</span><span class='line'><span class="p">],</span>
</span><span class='line'><span class="s2">&quot;Resource&quot;</span><span class="o">:</span> <span class="s2">&quot;*&quot;</span>
</span><span class='line'><span class="p">},</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="s2">&quot;Effect&quot;</span><span class="o">:</span> <span class="s2">&quot;Allow&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;Action&quot;</span><span class="o">:</span> <span class="s2">&quot;s3:PutObject&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;Resource&quot;</span><span class="o">:</span> <span class="s2">&quot;arn:aws:s3:::corporate_bucket/*&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>What does the IAM policy allow? (Pick 3 correct answers)</p>

<ol type="a">
<li><p>The user is allowed to read objects from all S3 buckets owned by the account</p></li>
<li><p>The user is allowed to write objects into the bucket named &lsquo;corporate_bucket&rsquo;</p></li>
<li><p>The user is allowed to change access rights for the bucket named &lsquo;corporate_bucket&rsquo;</p></li>
<li><p>The user is allowed to read objects in the bucket named &lsquo;corporate_bucket&rsquo; but not allowed to list the objects
in the bucket</p></li>
<li><p>The user is allowed to read objects from the bucket named &lsquo;corporate_bucket&rsquo;</p></li>
</ol>


<p>答案：A B E</p>

<p>解析：AWS的权限认证遵循最小化原则。即：默认情况都是deny的；显式allow会覆盖默认deny；显式deny会覆盖显式allow。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[张掖百公里，再次折戟]]></title>
    <link href="http://www.huangbowen.net/blog/2016/07/27/zhangye-trail-running/"/>
    <updated>2016-07-27T23:26:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2016/07/27/zhangye-trail-running</id>
    <content type="html"><![CDATA[<p>张掖百公里，不愧为中国最美百公里。可惜的是自己没有看到后面50公里的风景。不过前50公里让我过足了瘾，受足了罪。</p>

<!-- more -->


<p>2016年5月15日完成了熊猫热土环汶川50公里越野赛之后，我就寻思着再次踏上百公里的赛道，向百公里再次发起冲锋。恰好看到张掖祁连山超百公里山地户外挑战赛的报名信息，我就第一时间报了名。张掖的美景我早有耳闻，早就听跑友说过张掖百公里的风景是如何的优美。而今年的百公里难度比往年下降了不少，爬升只有3400米，所以我对于完赛充满信心。</p>

<p>整个7月份由于家里的事情较多，一团乱麻，只跑了一次半马训练。比赛前两天还去北京出了个差，晚上回来时还差点被暴雨困在了北京。好不容易回到家就发现发烧了，嗓子也发炎了。赶紧去诊所看了医生，输了液，期望第二天能好转。</p>

<p>这么多的事情整的自己的心情特别差，整理装备的时候也比较匆忙。本来打算带上排骨羽绒服的，但是最后没找到，只好作罢。</p>

<p>周五早上坐飞机先到了兰州。出了机场先吃了一碗兰州拉面，说实话很难吃，我都没吃完，肉也少的可怜。然后坐机场大巴赶去高铁站做去张掖的动车。一路上都沿着黄河再开。</p>

<p><img src="http://www.huangbowen.net/images/IMG_4378.JPG" width="500"></p>

<p>到了高铁站坐上了去张掖的动车。一路上领略了西北风情。意外的是发现了一大片油菜花地，绵延有几十公里。</p>

<p><img src="http://www.huangbowen.net/images/IMG_4381.JPG" width="500"></p>

<p>到啦张掖西站后，就看到了接我们的工作人员。当天天气非常热，大概有30多度，我想这么热的天跑步简直要人命。期望第二天天气能凉爽点。那时候可能死活都没想到我差点冻死在山上。</p>

<p><img src="http://www.huangbowen.net/images/IMG_4395.JPG" width="500"></p>

<p>坐着接我们的大巴来到了比赛的终点七彩镇。七彩镇就在丹霞景区的边上。当看到七彩丹霞时还是比较震撼的，不过颜色没有照片里面的那么鲜艳。领了装备，分配了住宿，然后参加了技术说明会。技术说明会讲的东西参赛手册上都有。不过组委会再三强调强制装备要随身携带，并且明天极有可能有雨。我望了一下天气，万里无云，心想塞北的天气变化可能比较快。</p>

<p><img src="http://www.huangbowen.net/images/IMG_4401.jpg" width="500"></p>

<p>下午7点多开幕式后有个4公里的徒步活动，可以免费去丹霞景区转一圈。我跟着大部队就走进景区了，谁知道太坑了，这哪里是4公里，最后走了10公里。我还穿着拖鞋。好在碰到2个跑步的，一起聊天也不觉得累，权当是赛前热身了。</p>

<p><img src="http://www.huangbowen.net/images/KLS_0469.jpg" width="500"></p>

<p><img src="http://www.huangbowen.net/images/IMG_4414.JPG" width="500"></p>

<p>晚饭吃的是清汤羊肉，有点像我老家的羊肉汤，很合我的胃口。</p>

<p><img src="http://www.huangbowen.net/images/IMG_4429.JPG" width="500"></p>

<p>第二天早上4点都就起来了，吃了早饭后被班车拉到了比赛的起点大转经筒。这时天上已经乌云密布，温度也有些低。我就把随身携带的卫衣和一条薄的运动长裤穿上了，然后把一件抓绒服也带到了包里。</p>

<p><img src="http://www.huangbowen.net/images/IMG_4432.jpg" width="500"></p>

<p><img src="http://www.huangbowen.net/images/IMG_4434.JPG" width="500"></p>

<p>8点钟正式鸣枪起跑。这次比赛我定的目标就是安全完赛。结合前几次越野跑的经历，这次开跑前50公里一定不能冒进，速度一定稳住。所以我采取的策略就是上坡一律走，只有下坡和平路才跑。不一会儿我们就离开了大路，进入了祁连山腹地，向山中进发。一路上基本上都是缓慢上升的坡，所以快走起来也不费劲。到了CP1时比关门时间提前了2个小时左右。由于昨天穿拖鞋暴走，才到CP1脚上就磨了个泡。还好我带有别针和创可贴，把泡挑破了，然后贴了一个创可贴。CP1的补给限量，每人只能一节香蕉和一个小面包。</p>

<p><img src="http://www.huangbowen.net/images/IMG_4452.jpg" width="500"></p>

<p><img src="http://www.huangbowen.net/images/IMG_4463.jpg" width="500"></p>

<p>过了CP1之后就向CP2进发。这段路有一个比较大的集中爬升。整个过程我基本没有停歇，路上超了一些人。带杖爬山就是好，能给我节省不少体力。后半段路还有几公里的下坡。我撒开脚丫子跑了20多分钟就到了CP2.到达CP2比关门时间早了1个小时15分钟。CP2的补给也限量，我只吃了一个小面包，补了点水。很久没有补充盐分了，我也没有带盐丸，这样下去容易抽筋。还好CP2竟然有最后一包凤爪，很小的一包，我吃了就权当补充盐分了。</p>

<p><img src="http://www.huangbowen.net/images/DSCF1959.JPG" width="500"></p>

<p>CP2到CP3的路也是缓坡居多，中间还要过一些河流。刚开始的小雨也慢慢的下大了。有些路面变得有些湿滑，我在摔了几次之后下坡也不敢跑快了。30多公里的长途跋涉让我觉得有些能量流失。但想着CP3是个大站，补给一定比较充足，所以到时候一定好好补补。到了CP3时，雨已经下了好一阵了，离关门时间也只有45分钟。补给站的粥、咸菜之类的都没了。有方便面，但是没有热水。要等热水烧好要半小时。WTF，我真想骂组委会。不过这个站有西瓜，我一口气吃了10块西瓜，觉得这西瓜太甜了，好吃。我在CP3存有一条厚裤子，本来想拿出来穿上，但发现组委会对于选手的转运包没有做防水处理，裤子湿漉漉的。我那个气啊！就没有穿这条厚裤子。磨蹭了10多分钟，吃了一碗不是很热的泡面后，我开始向CP4进发。</p>

<p><img src="http://www.huangbowen.net/images/IMG_4477.jpg" width="500"></p>

<p>刚出发就起雾了，10米之外什么都看不到，另外又是刮风又是下雨，真的冷啊。而且这段赛道都是在山脊上，也就是说没有任何可以躲风躲雨的地方。就在这样的天气中，我渐渐进入了失温的状态，浑身止不住的发抖。不过好在虽然海拔3500米以上，我并没有什么高原反应，只是喘气比较粗而已。一路上我看到每个人都步伐沉重，有很多失温的小伙伴。但是鉴于自己的目前情况，也无法给予他人太多的帮助。</p>

<p>CP3到CP4有11公里。我机械的走着，途中摔了无数次。空顶帽什么时候掉的都不知道，打卡指环也摔掉了。我原地找了几分钟也没找到。由于失温也不敢停留太久，只好继续前进。后来我从包里把绒线帽带上，又穿上早已淋湿的抓绒服继续前进。到了CP4，已经是下午的7点半了，CP4有几个失温的小伙子蹲在那里浑身发抖等待救援。这里可是最高点，海拔3900多米，救援人员就算上来也至少要好几个小时，而且这么滑的路也难以将人转移下去。我一直坚定信念自己走下去。</p>

<p>过了CP4不久就看到有工作人员从对面上来喊退赛的小伙伴沿着山脊下去，到老乡家里烤火。我这时想拿出参赛图来看距离CP5还有多远，关门时间是多久。但无奈由于失温双手根本不听指挥，参赛图由于湿透了，打开以后就裂成了几片。这个关键的信息我没有看到。这时候我在想是退赛还是继续前进。继续前进的话发现前面又是一段爬升，而且是悬崖峭壁。现在沿着路标的路已经根本没法走了，全是泥。</p>

<p>思考了一下后我还是决定继续沿着路标向CP5进发，我也知道被关门是最后的结局。因为路是在是太滑了，如果不跑起来根本不能在规定时间内赶到。</p>

<p>翻过了峭壁不久就下撤到了一条机耕道上。一个工作人员说沿着这个机耕道不断下降就能到达CP5.这时候天已经黑了。不过由于已不再山脊上，我的失温症状也有所减轻，不再发抖。不过由于浑身都是湿的，还是觉得很不舒服。路上我还捡了个严重失温的小伙伴，他穿着短裤，边走边嘘气。我怕他坚持不住，就一路陪着他走。中间有数次他都说不想走了，我还是推着他走。因为我知道在这么冷的天气下，停下来的后果会非常严重。一路上我没舍得用的急救毯也拿给他用了，还有半根能量棒也让他吃了。在我的鼓励下，我们终于走下了山。刚好有一辆车停在CP5的卡点前，这个车就把他接去老乡家烤火了。</p>

<p>我继续步行到达CP5已经9点多了，被关门1个小时。这个补给点也只剩下一些面包和西瓜。我又吃了很多西瓜。工作人员让我继续向CP6前进。我一度以为我还可以继续比赛。但搞清楚状况后我又很沮丧，也不想走了，就跑到CP5点下的老乡家烤火。</p>

<p>一直等到第二天早上5点多才有车来接我们回七彩镇。到了七彩镇后我很沮丧，本来计划欢快的拿个完赛奖牌的，谁知道结果会是这样。</p>

<p>这次挑战百公里再次失败对我打击还是很大的。失败的主要原因还是自己的准备工作做得不够充分。高海拔地区天气多变而自己没有做好万全的保暖措施，而且补给物自己带的也不是很多。俗话说有备无患，这个道理真是太对了。这也打破了我以往越野赛过于依赖组委会的习惯。以前补给都是吃补给点的，管够。而这次碰上了限量还是让人猝不及防。</p>

<p>当然张掖组委会也有做的不到位的地方，比如CP点食物不充足、CP3点换装包全被打湿、组委会应急预案不足等，我也懒得吐槽了。</p>

<p>周六跑了50公里公里，周日奔波一天直到周一凌晨3点才到家，早上7点多又要爬起来上班。这就是生活！周六下午那三个多小时的生死煎熬现在看来又是那么的虚幻。</p>

<p>Anyway，继续奋斗吧！10月份的大理100，第三次发起冲锋！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AWS开发人员认证考试样题解析]]></title>
    <link href="http://www.huangbowen.net/blog/2016/07/27/aws-developer-exam-sample-questions/"/>
    <updated>2016-07-27T11:40:02+08:00</updated>
    <id>http://www.huangbowen.net/blog/2016/07/27/aws-developer-exam-sample-questions</id>
    <content type="html"><![CDATA[<p>最近在准备AWS的开发人员考试认证。所以特意做了一下考试样题。每道题尽量给出了文档出处以及解析。</p>

<!-- more -->


<hr />

<p>Which of the following statements about SQS is true?</p>

<ol type="a">
<li><p>Messages will be delivered exactly once and messages will be delivered in First in, First out order</p></li>
<li><p>Messages will be delivered exactly once and message delivery order is indeterminate</p></li>
<li><p>Messages will be delivered one or more times and messages will be delivered in First in, First out order</p></li>
<li><p>Messages will be delivered one or more times and message delivery order is indeterminate</p></li>
</ol>


<p>答案：D</p>

<p>参考文档：<a href="https://aws.amazon.com/sqs/faqs/">https://aws.amazon.com/sqs/faqs/</a></p>

<p>解析：SQS为了保持高可用，会在多个服务器间duplicate消息，所以消息可能会被delivery多次，但会保证至少被delivery一次；另外由于分布式的特性，所以消息的delivery顺序无法得到保证</p>

<hr />

<p>EC2 instances are launched from Amazon Machine Images (AMIs). A given public AMI:</p>

<ol type="a">
<li><p>can be used to launch EC2 instances in any AWS region</p></li>
<li><p>can only be used to launch EC2 instances in the same country as the AMI is stored</p></li>
<li><p>can only be used to launch EC2 instances in the same AWS region as the AMI is stored</p></li>
<li><p>can only be used to launch EC2 instances in the same AWS availability zone as the AMI is stored</p></li>
</ol>


<p>答案：C</p>

<p>参考文档：<a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AMIs.html">http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AMIs.html</a></p>

<p>解析：AMI只在当前region可用（不过AMI的ID是global范围内唯一的）；如果想跨region的话需要copy到其它region。</p>

<hr />

<p>Company B provides an online image recognition service and utilizes SQS to decouple system
components for scalability. The SQS consumers poll the imaging queue as often as possible to keep endto-end
throughput as high as possible. However, Company B is realizing that polling in tight loops is
burning CPU cycles and increasing costs with empty responses. How can Company B reduce the number
of empty responses?</p>

<ol type="a">
<li><p>Set the imaging queue VisibilityTimeout attribute to 20 seconds</p></li>
<li><p>Set the imaging queue ReceiveMessageWaitTimeSeconds attribute to 20 seconds</p></li>
<li><p>Set the imaging queue MessageRetentionPeriod attribute to 20 seconds</p></li>
<li><p>Set the DelaySeconds parameter of a message to 20 seconds</p></li>
</ol>


<p>答案：B</p>

<p>参考文档：<a href="http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-long-polling.html">http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-long-polling.html</a></p>

<p>解析：这个需要使用SQS的long pulling；方式之一就是设置queue的ReceiveMessageWaitTimeSeconds属性</p>

<hr />

<p>You attempt to store an object in the US-STANDARD region in Amazon S3, and receive a confirmation
that it has been successfully stored. You then immediately make another API call and attempt to read
this object. S3 tells you that the object does not exist. What could explain this behavior?</p>

<ol type="a">
<li><p>US-STANDARD uses eventual consistency and it can take time for an object to be readable in a bucket.</p></li>
<li><p>Objects in Amazon S3 do not become visible until they are replicated to a second region.</p></li>
<li><p>US-STANDARD imposes a 1 second delay before new objects are readable</p></li>
<li><p>You exceeded the bucket object limit, and once this limit is raised the object will be visible.</p></li>
</ol>


<p>答案：A</p>

<p>参考文档：<a href="http://docs.aws.amazon.com/AmazonS3/latest/dev/Introduction.html">http://docs.aws.amazon.com/AmazonS3/latest/dev/Introduction.html</a></p>

<p>解析：这道题有点过时了，当时US-STANDARD不支持read-after-write，使用的是eventual consistency，所以当写入一个object以后，不一定会立即读到。现在已经没有US-STANDARD region了（被重命名了）。而且所有region都支持read-after-write了。</p>

<hr />

<p>You have reached your account limit for the number of CloudFormation stacks in a region. How do you
increase your limit?</p>

<ol type="a">
<li><p>Make an API call</p></li>
<li><p>Contact AWS</p></li>
<li><p>Use the console</p></li>
<li><p>You cannot increase your limit</p></li>
</ol>


<p>答案：B</p>

<p>参考文档： <a href="http://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html#limits_cloudformation">http://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html#limits_cloudformation</a></p>

<p><a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cloudformation-limits.html">http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cloudformation-limits.html</a></p>

<p>解析：stack数量的限制只是一个软限制，所以可以通过向AWS发请求来放宽限制。</p>

<hr />

<p>Which statements about DynamoDB are true? (Pick 2 correct answers)</p>

<ol type="a">
<li><p>DynamoDB uses a pessimistic locking model</p></li>
<li><p>DynamoDB uses optimistic concurrency control</p></li>
<li><p>DynamoDB uses conditional writes for consistency</p></li>
<li><p>DynamoDB restricts item access during reads</p></li>
<li><p>DynamoDB restricts item access during writes</p></li>
</ol>


<p>答案：BC</p>

<p>参考文档： <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithItems.html">http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithItems.html</a>
解析：这个题目需要对DynamoDB有深入了解，具体可以查看相关文档</p>

<hr />

<p>What is one key difference between an Amazon EBS-backed and an instance-store backed instance?</p>

<ol type="a">
<li><p>Instance-store backed instances can be stopped and restarted</p></li>
<li><p>Auto scaling requires using Amazon EBS-backed instances</p></li>
<li><p>Amazon EBS-backed instances can be stopped and restarted</p></li>
<li><p>Virtual Private Cloud requires EBS backed instances</p></li>
</ol>


<p>答案：C</p>

<p>参考文档：<a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ComponentsAMIs.html">http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ComponentsAMIs.html</a></p>

<hr />

<p>A corporate web application is deployed within an Amazon VPC, and is connected to the corporate data
center via IPSec VPN. The application must authenticate against the on-premise LDAP server. Once
authenticated, logged-in users can only access an S3 keyspace specific to the user.
Which two approaches can satisfy the objectives?</p>

<ol type="a">
<li><p>The application authenticates against LDAP. The application then calls the IAM Security Service to login
to IAM using the LDAP credentials. The application can use the IAM temporary credentials to access the
appropriate S3 bucket.</p></li>
<li><p>The application authenticates against LDAP, and retrieves the name of an IAM role associated with the
user. The application then calls the IAM Security Token Service to assume that IAM Role. The application
can use the temporary credentials to access the appropriate S3 bucket.</p></li>
<li><p>The application authenticates against IAM Security Token Service using the LDAP credentials. The
application uses those temporary AWS security credentials to access the appropriate S3 bucket.</p></li>
<li><p>Develop an identity broker which authenticates against LDAP, and then calls IAM Security Token Service
to get IAM federated user credentials. The application calls the identity broker to get IAM federated user
credentials with access to the appropriate S3 bucket.</p></li>
<li><p>Develop an identity broker which authenticates against IAM Security Token Service to assume an IAM
Role to get temporary AWS security credentials. The application calls the identity broker to get AWS
temporary security credentials with access to the appropriate S3 bucket.</p></li>
</ol>


<p>答案：BD</p>

<p>参考文档：<a href="https://aws.amazon.com/blogs/aws/aws-identity-and-access-management-now-with-identity-federation/">https://aws.amazon.com/blogs/aws/aws-identity-and-access-management-now-with-identity-federation/</a></p>

<p>解析：IAM认证一向是考察的重点。B采用的是assume role的方式，D采用的是federated user的方式。
A错误在于没有login to IAM这个功能；C、E错误在于认证应该通过LDAP，而不是STS。</p>

<hr />

<p>You run an ad-supported photo sharing website using S3 to serve photos to visitors of your site. At some
point you find out that other sites have been linking to the photos on your site, causing loss to your
business. What is an effective method to mitigate this?</p>

<ol type="a">
<li><p>Use CloudFront distributions for static content.</p></li>
<li><p>Remove public read access and use signed URLs with expiry dates.</p></li>
<li><p>Block the IPs of the offending websites in Security Groups.</p></li>
<li><p>Store photos on an EBS volume of the web server.</p></li>
</ol>


<p>答案：B</p>

<p>参考文档：<a href="http://docs.aws.amazon.com/AmazonS3/latest/dev/ShareObjectPreSignedURL.html">http://docs.aws.amazon.com/AmazonS3/latest/dev/ShareObjectPreSignedURL.html</a></p>

<p>解析：使用signed URL或者创建bucket policy都可以防止盗链。</p>

<hr />

<p>Your application is trying to upload a 6 GB file to Simple Storage Service and receive a &ldquo;Your proposed
upload exceeds the maximum allowed object size.&rdquo; error message. What is a possible solution for this?</p>

<ol type="a">
<li><p>None, Simple Storage Service objects are limited to 5 GB</p></li>
<li><p>Use the multi-part upload API for this object</p></li>
<li><p>Use the large object upload API for this object</p></li>
<li><p>Contact support to increase your object size limit</p></li>
<li><p>Upload to a different region</p></li>
</ol>


<p>答案:B</p>

<p>参考文档：<a href="http://docs.aws.amazon.com/AmazonS3/latest/dev/UploadingObjects.html">http://docs.aws.amazon.com/AmazonS3/latest/dev/UploadingObjects.html</a></p>

<p>解析：所以S3能存放的最大对象是5T，但单个put操作支持的最大对象只有5G，超过5G的需要使用multi-part upload API上传。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[膝盖中了一箭之康复篇-一周年纪念]]></title>
    <link href="http://www.huangbowen.net/blog/2016/07/20/acl-for-one-year/"/>
    <updated>2016-07-20T00:44:47+08:00</updated>
    <id>http://www.huangbowen.net/blog/2016/07/20/acl-for-one-year</id>
    <content type="html"><![CDATA[<p>右膝盖前十字韧带在2014年12月份的一次常规踢球中不小心弄断。2015年5月份才确诊。随后2个月后的7月1日做了十字韧带重建术。到现在刚好是术后一年了。</p>

<!-- more -->


<p>总体来说恢复的情况我还比较满意。虽然两条腿的肌肉还不是很平衡，甚至在下雨天的时候右膝还有点隐隐作痛。但是好在我还可以继续运动，比如跑步、踢球、打球等。虽然不能再像以前那么勇猛。</p>

<p>先盘点一下6月份的情况。</p>

<p>6月份跑步出勤5次，总跑量52.75公里。其中包括两次半程马拉松，还有一次9公里的越野跑。这个9公里的越野跑是参加赵公山的登山赛。上行4.5公里，下行4.5公里，总爬升1400米，累计下降1400米。最终上山花了将近2个小时时间，下山花了将近1个半小时。由于当天下雨，所以对速度也有一定影响。尤其是下山刚开始冲得太快，摔了好几个跟头，手都破皮了，不得不减速。可能是连续上升加下降过于凶猛，快到终点前能明显感觉到右膝的疼痛，但还不至于跑不起来。到了终点休息了10分钟后疼痛消失。</p>

<p>6月份健身房去的次数比较少，出勤率可能只有1/3。训练强度也只能说用于保持状态。6月份定的目标是交稿翻译的书籍，已经达成。</p>

<p>从手术确诊到现在基本上每个月一篇文章记录了整个过程。康复训练是痛苦的，但也是值得的。因为如果错过了康复黄金期，那么以后要花多倍的力气，甚至即使花了力气也没用。对于这个韧带手术我的主刀医生喜欢激进的康复手段，比如术后第二天就练习抬腿，弯腿，并且下床。人家从德国学习回来以后立马就把一些理念运用了进去。而我在术前也看了很多国外的视频和文章，都主张激进的康复方式。所以我也练的比较拼。差不多一周我就脱拐了。三周的时候已经可以自己开车了。一个月的时候进入健身房开始骑自行车训练，顺便也练练萎缩的肌肉。二个月后开始跑步训练，并且二个半月的时候有一次在南京玄武湖跑了15公里。速度虽然很慢，但是跑完之后感觉良好。三个月后开始加强训练，跑步里程提高到了每次10公里。之后又加入了半马训练以及速度训练。在2016年1月份的时候刷新了自己的半马记录。术后6个月的时候我已经感觉不出自己是个做过韧带手术的人。</p>

<p>进入2016年以后跑步训练也逐渐加量。半马跑了不少。不过一直没有打球和踢球，因为医生说最好要修养一年后再开展这样的剧烈运动。而我在韧带断裂后打球、踢球的次数屈指可数，慢慢的对这些运动的热情也变淡了。健身和跑步已经够耗费我的时间了。</p>

<p>2016年5月份重回越野跑赛道，完赛了第一个50公里越野赛。看来反咬一口一口吃，两次向50公里+的越野赛赛事发起冲锋，一次被关门，一次退赛，这次终于如愿以偿。</p>

<p>2016年7月份有场大赛，张掖100公里越野赛。届时我会第二次站在100公里越野赛的起点，这次虽然赛前由于种种原因训练不是很到位，但我还是期望能够顺利完赛。如果中间不出现任何伤病，完赛还是挺有信心的。</p>

<p>去年7月中旬，术后10多天就托着拐杖来北京出差参加TID大会。一年以后的现在我又坐在国家会议中心酒店。只能感叹时间过得真快。</p>

<p>7月份的目标就定为完赛张掖100公里越野赛，以及通过AWS架构师专家级认证吧。</p>

<p>这一年的康复经历，我的经验如下：</p>

<ol>
<li>找一个靠谱的主治医生相当重要；</li>
<li>术后2周的角度练习相当关键，忍痛黑练吧，至少练到100度；我依稀记得那种痛比骨头断的都痛，但为了以后少受罪，还是忍着吧；</li>
<li>术后一个月能达到120度，这样粘连的可能性就非常小了；</li>
<li>一个半月后可以骑车练习了；我发现骑车真的是康复的利器，虽然刚开始骑车特别痛，但坚持几天就有明显好转；</li>
<li>跑步也是恢复的有效手段，再保守术后三个月也要开始跑步训练了。</li>
<li>对于剧烈运动和对膝部有明显变相的运动（比如篮球、足球、羽毛球等）前半年最好不用做；半年后如果真的非常喜爱可以在无对抗的情况慢慢恢复训练。</li>
</ol>


<p>总之就是要练。静躺修养是康复的大忌。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[每月一个目标，过好这一年]]></title>
    <link href="http://www.huangbowen.net/blog/2016/07/01/review-of-the-half-year/"/>
    <updated>2016-07-01T10:36:13+08:00</updated>
    <id>http://www.huangbowen.net/blog/2016/07/01/review-of-the-half-year</id>
    <content type="html"><![CDATA[<p>从几年前开始，我习惯于每年的年末写一篇总结。这些总结一部分在我的QQ空间，另一部分在我的<a href="http://www.huangbowen.net">个人博客</a>。有些时候也会顺便展望一下下一年。每一年自己都在进步，自己变得更加成熟和专业。尤其是脸皮越来越厚，表现出来的行为就是啥都敢干。</p>

<!-- more -->


<p>但是随着年龄的增长，我渐渐的发现自己的私有时间越来越少，自己想做某些事情往往总会被其他事情打断。为了更加专注，我在2015年底启动了一个计划，那就是为每一个月制定一个目标，并在月底检查这个目标的执行结果。</p>

<p>制定目标当然要考虑SMART原则，即计划必须具备以下几个要素：</p>

<ul>
<li>Specific - 目标必须具体；可以通过五’W’原则来挖掘出具体的目标。</li>
<li>Measurable - 可以衡量是否达到目标；</li>
<li>Achievable - 不能制定impossible的目标；</li>
<li>Relevant - 目标必须要跟你想提高的方面相关；</li>
<li>Time-bound - 达成目标要有时间限制</li>
</ul>


<p>2016年1月份定的目标是跑步200公里，其中包括4个半程马拉松。之所以制定这样的目标是因为想巩固一下我手术后的恢复效果。最终结果是1月份跑步220公里+，完成了4个半程马拉松。其中一次还打破了个人半程最好记录，将个人记录提高了2分30秒。</p>

<p>2016年2月份的目标是完成4000个俯卧撑+4篇技术博客。这次有点贪心，想个人爱好和能力提升一把抓。事实证明目标定的太多往往容易迷失重点。4000个俯卧撑是在2月份的最后一天晚上11点多达成的。而4篇技术博客也在最后一刻艰难完成，其中还把一篇以前的翻译拿出来凑数。为了记录我每天做的俯卧撑个数，我还专门写了一个<a href="http://www.huangbowen.net/blog/2016/02/02/use-weibo-to-track-workout/">小程序</a>，只需敲一条命令就可以把做的俯卧撑个数推送到我的微博上。</p>

<p>2016年3月份的目标是突击腹肌训练，即练习20次“腹肌撕裂者”。这次没有贪心的一口气制定双重目标。“腹肌撕裂者”是一个时长17分钟的腹肌训练，训练时无需任何外部器械，随时随地都可以搞。最终结果是我做了21次“腹肌撕裂者”。经过突击训练后，我可以轻松跟完整个腹肌训练，不用中途休息了。</p>

<p>2016年的4月份目标是交稿翻译的书“面向对象的思考过程”，还有跑4次半马训练。事实又证明双目标是不靠谱的。结果月底盘点只完成了4次半马训练，“面向对象的思考过程”一书突击翻译了一些，但还是剩下50页左右。</p>

<p>2016年的5月份目标是读两本书并写读书总结。我想加强一下自己的系统思考能力，就买了几本相关的书。但5月份刚加入新项目，又要组织、参加一些社区活动，结果书只翻看了几页，没有完成目标。连续两个月没有完成目标也是挺打击人的。其实5月份应该继续完成4月份未竟的目标，而不应该好高骛远。</p>

<p>所以2016年6月份的目标就比较简单了，就是完成4月份未竟的目标，交稿翻译的书。经过一番突击以后，终于完成了一个自己较为满意的版本并交给编辑审核。这本书前后托了1年半，而我之前翻译的三本书总共也就1年半的时间。可见选择一本自己喜欢翻译的书是多么的重要！</p>

<p>以上就是今年上半年的目标盘点。其实这些关于健身的目标是为了完成我一个更高的目标，那就是完成一场100公里越野赛事。完成这些跑步训练、力量训练、腹肌训练只是这个更大目标的子目标。正是前半年扎实的训练，才让我能在5月份就重回越野跑赛道，完成了第一个50公里越野跑比赛。</p>

<p>下半年的目标会跟提升专业技能相关。我7月份的目标是通过AWS的解决方案架构师专家级考试，目前已经开始积极准备。</p>

<p>我发现这种制定月度目标的方式对我很有效。</p>

<ol>
<li>可以保证再忙也要抽出时间做一些自己想做的事情；</li>
<li>可以培养、加强坚持的品质；</li>
<li>可以让我逐步接近我想成为的人。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[膝盖中了一箭之康复篇-第十一个月暨5月份目标总结]]></title>
    <link href="http://www.huangbowen.net/blog/2016/06/13/acl-recovery-for-11-month/"/>
    <updated>2016-06-13T17:08:23+08:00</updated>
    <id>http://www.huangbowen.net/blog/2016/06/13/acl-recovery-for-11-month</id>
    <content type="html"><![CDATA[<p>2015年7月1日进行了右膝前十字韧带重建术，至今已经有十一个月了。</p>

<!-- more -->


<p>5月份还继续健身房之旅。出勤率略低，应该在4成左右。这个月练了几次腿，练完以后酸爽的很。以前腿部斜举试过160公斤。现在试了190公斤可以做组，说明腿部肌肉又回来了。不过还是感觉左右膝的肌肉不平衡，伤腿明显弱的很。其实每次练腿的时间挺纠结的。由于每周末都要跑一个半马，感觉跑完半马后需要休养一下，所以周一、周二不能练。而每次练完腿要恢复到完全没感觉的状态至少要三天。所以一周中练腿的最佳时间就是周三。但是又不能保证周三能去健身房。现在计划每周争取能练一次腿。另外我发现每天只练一个大肌肉群的训练计划不太适合我。因为这属于高阶玩法，最适合我的应该是pull、push、腿这种三天循环机制，而不是目前的五天循环机制。但三天循环制有个问题是由于每次要练多个肌肉群，要求单次训练时间较长，基本上加上热身等要1小20分。而目前我一般是晚上9点10分左右到健身房，热身6分钟，9点50分钟还要进行8分钟的腹肌训练，练完后刚好健身房关门。所以力量训练的时间只有35分钟左右。这个时间练一个肌肉群都够呛，所以明知三天循环制更好，但是无奈时间因素是大敌。</p>

<p>5月份加强了对腹肌的训练。每次健身的结尾是练习一次腹肌8分钟，总共240个动作，做完后还是有点感觉。先这么练着，至少能保持腹肌的状态。</p>

<p>5月底的时候做了一次体测。结果如图。</p>

<p><img src="http://www.huangbowen.net/images/IMG_4148.jpg" width="500"></p>

<p>从图中可以看出体脂比偏高。原因一是有氧做的比以前少，二是没有控制饮食。而且要命的是右腿比左腿少了0.4kg的水分。由于肌肉大部分都是水分，从中可以看出肌肉的差距有多大。其实从去年12月份正式恢复训练到现在已经有半年了。半年里基本没有长时间的停止健身，但是取得的成果也不是很大。比如卧推也只是提高了5kg而已。说起来让人汗颜。可能还是训练方法的问题，还是对自己不太狠。另外每次跑步长距离估计也消耗了不少肌肉。</p>

<p>5月份总共跑步110公里+，其中半马3个，50公里一个，出勤5次。由于健身已经挤占了大部分时间，所以跑步次数明显减少了。跑步训练也基本只有每周末的半马。</p>

<p><img src="http://www.huangbowen.net/images/IMG_4257.PNG" width="400"></p>

<p>5月15日参加了熊猫热土环汶川超级越野跑的50公里组别比赛。这是术后第一次参加越野跑比赛。总爬升3600多米，关门时间14小时。我于13小时10分钟顺利完赛。跑到10多公里的时候右膝有痛感。当时有些担心痛感会加剧。但是到了30公里多的时候痛感竟然消失了，只有肌肉的酸痛。最后10多公里的连续1500米下降又虐我一把。平时不敢下山跑的我在怕被关门的忐忑中也跑了起来。赛后成功的收获了两个黑指甲。</p>

<p>总体来说汶川赛道还是非常虐的，难度也较大。风景也是异常的美，唯一的遗憾是没有再上龙山之巅。</p>

<p><img src="http://www.huangbowen.net/images/IMG_4078.jpg" width="400"></p>

<p><img src="http://www.huangbowen.net/images/IMG_4083.jpg" width="400"></p>

<p>虽然在奔跑的路上一直在自我怀疑，怀疑当前的实力能否挑战100公里越野赛。但是赛后听说张掖百公里开始报名后，我又第一时间报了名。能否完赛试过才知。7月份见分晓吧！</p>

<p>盘点一下五月份的目标，读两本书并写读书总结！大大的没完成。书只读了几页而已。哎！
六月份目前看来也是很忙，目标定底点，定稿目前手头翻译的书。这个目前来看极容易达到，不要再出什么闪失。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[谈谈命名]]></title>
    <link href="http://www.huangbowen.net/blog/2016/06/06/talk-abount-naming-issue/"/>
    <updated>2016-06-06T19:54:17+08:00</updated>
    <id>http://www.huangbowen.net/blog/2016/06/06/talk-abount-naming-issue</id>
    <content type="html"><![CDATA[<p>Martin Fowler曾经在<a href="http://martinfowler.com/bliki/TwoHardThings.html">一篇文章</a>中曾经引用过Phil Karlton的话：</p>

<blockquote><p>There are only two hard things in Computer Science: cache invalidation and naming things.</p></blockquote>

<!-- more -->


<p>他说这句话在很长的一段时间内都是他最喜欢的话。可见命名对于广大的程序员来说的确是个大问题。</p>

<p>对于我们中国人来说，问题可能出在两个方面：</p>

<ul>
<li><p><strong>自打学编程开始就没被教育过要重视命名。</strong></p>

<p>  这可以在谭浩强的《C语言入门》一书中可见一斑。《C语言入门》可以说是很多程序员在大学时学习的第一门编程语言使用的教材。而本书通篇都是各种a,b,c，x,y,z的命名方式。这种poor naming的方式被广大程序员纷纷效仿，导致如今在很多项目代码中随处可见。</p></li>
<li><p><strong>命名需要一定的英文功底，而国内程序员的英文水平参差不齐。</strong></p></li>
</ul>


<p>很多程序员被教育后开始逐渐重视命名，但是受限于英文水平，不知道使用什么合适的英文词汇来命名。有的甚至直接把中文直译为英文的方式命名，或者直接用拼音来命名，反而得不偿失。</p>

<p>命名的重要性我想不需要过于强调。如今的软件开发早已不是求伯君那种单枪匹马的时代。你写下的每一行代码都会在不久的以后被团队的其他人甚至你自己多次查看。如果是个开源项目，那么更会被全球各地的人查看源代码。所以代码的可读性就变得尤为重要。如果读者能够轻松读出你的代码的意图，那么就说明你的命名功底相当扎实。</p>

<p>比如在一个管理系统中，你使用这样的代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="n">b</span> <span class="o">*</span> <span class="n">c</span>
</span></code></pre></td></tr></table></div></figure>


<p>很容易让人摸不着头脑，虽然程序能够正常运作，但恐怕没人敢轻易修改这行他们不了解的代码。而如果修改成为这样：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">weekly_pay</span> <span class="o">=</span> <span class="n">hours_worked</span> <span class="o">*</span> <span class="n">pay_rate</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>那恐怕极少有人不懂这行代码的意图。</p>

<p>糟糕的命名也会导致大量无谓的注释，这是一个很容易跳进去的陷阱。下一段代码怕别人不明白你的意图，那么就加上注释。这貌似是一个很精妙的想法，实际上却南辕北辙。比如以下的注释：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">int</span> <span class="n">d</span><span class="o">;</span> <span class="c1">// elapsed time in days</span>
</span></code></pre></td></tr></table></div></figure>


<p>貌似很容易让人读懂，但是问题还是很多。首先注释不能跟着所有的引用，在定义处了解了d的含义，继续往下看的话却很容易忘记；其次代码更新了，很可能会忘记修改注释，反而给把读者带入歧途。</p>

<p>与其用这样的注释，还不如直接重命名：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">int</span> <span class="n">elapsedTimeInDays</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样清晰易懂，还不用维护注释，何乐而不为？</p>

<p>那么如何着手来提高的自己的命名技巧那？</p>

<p><strong>首先寻找一份公认的代码规范，并严格按照这样的标准执行。</strong>比如google开源了自己内部使用的语言编码规范，我们可以直接拿来使用。比如请看<a href="https://google.github.io/styleguide/javaguide.html">Google Java的style guide</a>，相当详实。除此之外还有<a href="https://google.github.io/styleguide/cppguide.html">C++</a>等。<a href="https://github.com/google/styleguide">这里</a>收集了Google对各种语言的编码规范，非常具有参考价值。</p>

<p>标准的代码规范中的每一条都是有胜出的理由，值得我们遵从。但某些命名问题不一定只有一种最好的解决方式，这就需要团队自己建立起约定。比如对于Java单元测试类的命名方式，不同的团队可能不一样。比如有的团队喜欢以should开头，有的喜欢test开头，有的喜欢骆驼命名法，有些喜欢下划线命名法，每种方式有各自的利弊，没有一种能完全脱颖而出，所以需要团队自行制定。一旦确定使用某一种，那么一定要保持一致。</p>

<p><strong>某些命名规范其实是可以进行自动化检查的</strong>，比如在Java应用的构建过程中可以引用checkStyle这款插件，对命名进行一些基本的检查，比如方法名、变量名是否遵循了一定模式等。这样在一定程度上可以强制大家遵守某些约定。自己以前曾经写过一篇文章，请参见<a href="http://www.huangbowen.net/blog/2013/06/21/introduce-checkstyle/">http://www.huangbowen.net/blog/2013/06/21/introduce-checkstyle/</a>。</p>

<p><strong>最后要在团队中建立起code review的机制，通过code review来相互监督纠正命名问题</strong>，并且这样更容易达成一致的命名约定，方便协作开发。code review可以采取非正式会议评审的方式。最简单的方式就是每天找个固定时间大家一起聚在一个显示器前review每个人的代码，现场提出问题，当事人记录下来会后更改。这种方式非常高效。另外有的团队在迁入代码时可能会引入一些代码评审机制，比如pull request， cherry pick等。这种review方式比较重量级，反馈周期也较长，好处是可以保证最终迁入的代码是没有问题的。</p>

<hr />

<p>很多语言和框架为了更加可读，都把命名玩出花来了。比如JavaScript生态圈中重要的单元测试工具Jasmine把测试函数以it命名，这样可以与参数连接起来成为一种表意的自然语言：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s2">&quot;A suite&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s2">&quot;contains spec with an expectation&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">expect</span><span class="p">(</span><span class="kc">true</span><span class="p">).</span><span class="nx">toBe</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>总之，命名问题只是整个编码规范中的一小部分，但是起的作用举足轻重，它是判断一个程序员是否专业的必要标准。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[熊猫热土-环汶川50公里越野赛赛记]]></title>
    <link href="http://www.huangbowen.net/blog/2016/05/27/wenchuan-trail-run/"/>
    <updated>2016-05-27T12:04:12+08:00</updated>
    <id>http://www.huangbowen.net/blog/2016/05/27/wenchuan-trail-run</id>
    <content type="html"><![CDATA[<p>先后去过两次汶川，一次是2014年12月份参加汶川30公里越野赛，8小时完赛时间，在最后10分钟完成。这是我参加的第一次越野赛。第二次是2015年3月份的爱江山汶川60公里越野，在55公里处因晚到半小时被关门。两次都爬了汶川的龙山，并且爬到了龙山顶，海拔3800左右。</p>

<!-- more -->


<p>2015年5月份的汶川山地马拉松由于膝盖受伤的原因没有参加。今年的环汶川越野赛也差点因为出差而错过。后来出差提前归来，所以顺利的报名参加。</p>

<p>这次越野赛有12，23，50公里组。我报名的是50公里组。由于有一年没有参加任何线下的全马及以上长度的比赛了，所以我急需完赛一个50公里的比赛，从而拿到相应的积分（资质）来参加百公里超马越野赛，所以这个比赛恰到好处。顺便也可以检验一下我的膝盖的恢复情况，看看是否还能进行超长距离越野赛。</p>

<p>今年1月份训练较为勤快，跑步200公里+，半马4个，2月份懈怠了，只跑了1个半马，3月份跑了2个半马，4月份跑了4个半马。5月份在赛前跑了1个半马。总体来说训练次数偏少，不过几乎每周的半马拉练感觉增强了耐力。现在跑半马都几乎没有任何补给的，有的时候连水都不用。最近的一次越野训练还要追溯到2015年12月份，当时跑了5次黄金山，总爬升200米左右。（好吧，这是一座爬升40米的小土堆。）所以跑山是啥感觉都几乎忘光了。</p>

<p>5月14日从成都自驾开往汶川，路上下起了雨。到了汶川县城也下起了小雨。县城里路两边都是卖樱桃和车厘子的。听说这些车厘子都是从外地运过来的，汶川本地产的还没有成熟。不管那么多了，先买上1斤自己吃。</p>

<p><img src="http://www.huangbowen.net/images/IMG_4047.JPG" width="400"></p>

<p>为了这次比赛又跑了几次迪卡侬来添装备。买了手杖、压缩袜、备用头灯、空顶帽等装备。迪卡侬的东西性价比还是比较高的，如果作为入门装备还是非常适合的。不过对于进阶跑者，这些廉价装备的性能毕竟有限，入不得他们的法眼。以下是比赛的定妆照。很久没有照定妆照，物品摆放的一团乱麻。</p>

<p><img src="http://www.huangbowen.net/images/IMG_4046.JPG" width="400"></p>

<p>之前越野跑买的头灯竟然在比赛前一天不亮了，还好在迪卡侬买了备用头灯，要不然第二天早上5点开跑，黑灯瞎火的肯定要郁闷死。我给手机冲了电，也拿出了一年多没用的TomTom运动手表冲了电。晚饭是和小宇以及成都几个跑友一起吃的，但是到了晚上11点多感觉肚子又饿，然后自己一个人去吃了点烧烤。雨还是在下，希望第二天可别是雨战，不然不好受。</p>

<p><img src="http://www.huangbowen.net/images/IMG_4048.jpg" width="400"></p>

<p>第二天4点多起来，穿衣服，上厕所排空，吃早饭，搞完已经4点40多了，赶紧拿上所有东西去起点汶川体育广场。到了以后还赶上了大合照，然后立马就出发了。雨竟然奇迹般的晴了，不用雨战了。沿着公路没走多远就开始进入机耕道了。整个汶川还在沉睡当中。出发没多久就被前面一批选手带错路，多跑了2公里，等重新回到赛道已经”成功“到了队尾了。都是很久没有越野跑惹的祸，连最基本的检查路标都忘记了。好在这次迷路给我敲响了警钟，之后的路程都很注意路标，没有再走冤枉路。</p>

<p><img src="http://www.huangbowen.net/images/IMG_4085.JPG" width="400"></p>

<p>起点到CP1的路程还算简单，跑过一些放牛道，滑坡体，由于前一天下过雨，有些道路比较泥泞，我的泰尼卡闪电也感觉不是很耐操，害的我摔倒了好几次。到了CP1我灌了两瓶红牛，吃了点香蕉就继续前进。CP1到CP2的路只能说太泥泞了，连摔了N次。CP2到CP3有一段机耕道比较平缓，可以跑起来，赶了不少时间。差不多跑了有20多公里了，右膝盖感觉微痛，还在忍受范围之内。不过大腿肌肉感觉到了快抽筋的极限，有好几次摔跤后感觉肌肉马上都要抽起来了，赶紧停下来扳脚尖。</p>

<p><img src="http://www.huangbowen.net/images/IMG_4052.jpg" width="400"></p>

<p><img src="http://www.huangbowen.net/images/IMG_4054.jpg" width="400"></p>

<p><img src="http://www.huangbowen.net/images/IMG_4055.jpg" width="400">
<img src="http://www.huangbowen.net/images/IMG_4060.JPG" width="400">
<img src="http://www.huangbowen.net/images/IMG_4062.JPG" width="400">
<img src="http://www.huangbowen.net/images/IMG_4067.JPG" width="400"></p>

<p>到了CP3，感觉自己状态还好。听说CP3到CP4是最难的一段，5公里总爬升920米。所以我在CP3多休息了会就上路了。这段路果然是变态，又是爬水管，又是走沟渠，手脚并用，胆子还要大。我很庆幸自己这次比赛带了杖，爬山轻松了很多，虽然速度慢，但是基本没怎么休息。CP3到CP4花了不少时间，不过这段风景也是不错，望着对面群山，郁郁葱葱，远处还可以看到雪山。</p>

<p><img src="http://www.huangbowen.net/images/IMG_4078.jpg" width="400"></p>

<p><img src="http://www.huangbowen.net/images/IMG_4070.JPG" width="400"></p>

<p><img src="http://www.huangbowen.net/images/IMG_4082.JPG" width="400"></p>

<p><img src="http://www.huangbowen.net/images/IMG_4094.JPG" width="400"></p>

<p>CP4补给站没有红牛了，只好灌了些其它饮料。这里结识了来自江苏的跑友大狮子，两个跑渣边走边聊，能减轻些痛苦。CP4到CP5的总爬升有500米，坡度也是非常的陡。这时候我的体力感觉不足了。每次越野跑过了30公里后就感觉肠胃不好，吃什么都没胃口，补给站只是吃了点水果，自己带的能量胶一口没吃，实在是没胃口。好歹挣扎着到了CP5，离终点还有12.5公里，关门时间还有4小时，貌似还来得及。</p>

<p><img src="http://www.huangbowen.net/images/IMG_4075.JPG" width="400"></p>

<p><img src="http://www.huangbowen.net/images/IMG_4073.JPG" width="400"></p>

<p>CP5再来500米爬升，接下来就是1500米的连续下降了。这500米爬升路况还行，基本都是一些被废弃的机耕道，我只能勉强的走着。但是走的速度相当缓慢，大狮子早已经不在视线范围之内了。终于跑到了山脊，我也无心欣赏风景了，心里一直在盘算是否会被关门。开始下降后，我才发现这下降的路直击我的软肋啊。我是典型的上山娘，下山怂。这种坡度在45度以上的羊肠小道别说跑了，就连走都不顺畅，配速比爬山差不多。我就这样慢慢挪着，听到手机报时我下山速度是24分钟每公里后，我想完了，照这样的速度下去肯定被关门。咋办？跑呗。我尝试着跑起来，一边跑一边回忆视频里以及以前跑山时学到的下坡技巧。慢慢的竟然找到了感觉，心里也没有那么恐惧了。我在比赛中学习下坡技巧我也是醉了。下撤到公路了，看到铺装路面顿时心情好多了。由于自己一直注意路标，所以下撤到公路后也没有乱跑，看到几个路标需要斜插到小路也没有错过。否则就要走很长的冤枉路。</p>

<p><img src="http://www.huangbowen.net/images/IMG_4083.jpg" width="400"></p>

<p>最后到了县城后感觉跑不动了，完赛是没问题了，我就闲庭信步的走起来。直到离终点还有200米才假吧意思跑了几步冲线。终于完赛了，历时13小时10分。赛后抽奖还抽到了一个三合一风衣。可惜这个风衣太小了，我穿不上，最后拿给老婆穿了。</p>

<p><img src="http://www.huangbowen.net/images/IMG_4127.JPG" width="400"></p>

<p>这次越野跑完赛后，就基本具备了参加100公里越野赛的资质。同时自己也积累了一些越野跑的经验。回来以后发现右膝盖不怎么痛，不过右脚脚踝比较痛，一直隐隐作痛了1周左右。另外三个脚趾也搞成了黑指甲。</p>

<p>这次跑步的经验总结：</p>

<ul>
<li>跑山太少，越野跑还不是很适应，所以要适当多进行一些跑山专项训练，尤其是下坡技巧；</li>
<li>上坡可以慢，平路必须跑，下坡也要尽量跑，这样才能保证完赛；如果下坡不敢跑，那么很可能会被关门；</li>
<li>赛前一定要检查装备，这次多亏赛前检查了一下头灯，不然如果没提前发现头灯是坏的，到了赛场就傻眼了；</li>
<li>腿部肌肉训练还是要继续；</li>
<li>50公里+越野赛看来是必须要带杖了，带杖爬山要轻松很多；</li>
<li>一定要定时补给，即使胃口不好也要吃，不然后面能量耗尽会造成恶性循环。</li>
</ul>


<p>接下来已经报名了7月份的张掖百公里和11月份的四姑娘山42公里越野，希望都能顺利完赛。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[膝盖中了一箭之康复篇-第十个月暨4月份目标总结]]></title>
    <link href="http://www.huangbowen.net/blog/2016/05/04/acl-recovery-for-10th-month/"/>
    <updated>2016-05-04T22:45:05+08:00</updated>
    <id>http://www.huangbowen.net/blog/2016/05/04/acl-recovery-for-10th-month</id>
    <content type="html"><![CDATA[<p>2015年7月1日进行了右膝盖前交叉韧带重建术，至今已经10个月了。</p>

<!-- more -->


<p>4月份健身房的出勤率应该达到了六成。每周一般争取训练4次以上，每次训练一个部位，分别是胸、肩、背、二三头、腿。由于这个健身房的人不是很多，练的时候也没有什么氛围，其实感觉很少把自己练的通透了。感觉这段时间练的辛苦，但进步不大，可能需要高手或者教练指导一下。训练的时候我始终觉得右腿肌肉力量比左腿差不少，这点差距真不知道怎么才能练回来。</p>

<p>腹肌训练从腹肌撕裂者改成了腹肌八分钟。腹肌八分钟总共320个动作，比腹肌撕裂者要少几十个，强度也没有那么大，不过最大好处是时间短，腹肌撕裂者练一遍差不多要17分钟，感觉时间稍长。</p>

<p>4月中旬我的体重应该是这几个月来的最低点，不过但是没有秤，不知道具体数值。但4月中旬后就没有可以控制饮食，晚上胡吃海喝，现在体重成功的变回到了去印度前的体重，73KG。也就是在印度将近一个多月的节食效果被打回原形。</p>

<p>4月跑步出勤5次，总跑步里程90公里，其中包括四次半程马拉松。也就是说4月份跑步训练基本上荒废掉了。而我又报名了5月15日的汶川50公里越野赛，真是有点作死的感觉。</p>

<p><img src="http://www.huangbowen.net/images/IMG_4015.PNG" width="300"></p>

<p>好了盘点一下四月份的目标，4个半程马拉松是跑完了，4月底的时候是把书翻译完了，不过还需要在review一遍，目前只review了三章，估计还要10天左右才能完全交稿。当时定这个目标的时候我就知道很可能完成不了，不过也是为了逼自己一把，加快进度。这本书终于定稿在望，也算是了却了我一件心事。</p>

<p>五月份也是繁忙的一个月，刚回到办公室，一大堆事情要干，而且刚进入一个项目组，也要多花点心思。以前一直说要多读书，但读的还是太少。五月份的目标就定为读完两本书，并写出相应的读书总结吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[膝盖中了一箭之康复篇-第九个月暨3月份目标总结]]></title>
    <link href="http://www.huangbowen.net/blog/2016/04/04/acl-recovery-for-9th-month/"/>
    <updated>2016-04-04T02:22:07+08:00</updated>
    <id>http://www.huangbowen.net/blog/2016/04/04/acl-recovery-for-9th-month</id>
    <content type="html"><![CDATA[<p>2015年进行了右膝前十字韧带重建术，至今已经有九个月了。</p>

<!-- more -->


<p>3月份整个膝盖的恢复情况并不明显。一是本体感觉还没找到，始终觉得是条伤腿，有些动作不敢做。比如从半米高的地方跳下来都觉得心有余悸。我认为伤腿是具备这样的能力的，只是心理作用而已。这点如果不克服的话以后跑山是道坎。二是伤腿和好腿的肌肉水平仍然有明显差别。伤腿的肌肉力量比好腿要弱一些，做一些大重量的训练（比如深蹲）感觉非常明显。跑步的时候这点差异倒是没什么大的影响。当然仅限于路跑，越野跑就不得而知了。毕竟有快一年没跑山了。</p>

<p>针对伤腿已经很久没有进行任何针对性训练了。现在平均一周练一次腿，两腿肌肉不均衡也就凑合着练。3月份健身房出勤率还是比较高的，估计去的次数有15次左右吧。虽然这个月非常忙，基本上早上8点出门，一直到晚上将近8点才回到公寓，但基本上回到公寓稍作休息就马上去健身房。这边的健身房就在楼下，步行只要3分钟即达。而且健身房里基本没什么人，也没多少人搞力量训练，所以不怕别人和你抢器材。经过这一个月的训练，感觉力量比以前的巅峰时期有所进步，以后还是要保持下去。</p>

<p>3月份的目标是做20次腹肌撕裂者，最终总共做了21次。现在做腹肌撕裂者已经可以轻松跟完全程了。当然有些动作做的还不是很标准。练了这么久腹肌依然还是若隐若现，可能还是腹部赘肉较多的原因。在印度这边呆了一个月吃肉的次数两个巴掌都数的过来。来到这里就没吃到过猪肉，鸡肉偶尔能吃到一点，还有周末下馆子的时候吃点羊肉。还好我机智的带了一罐蛋白粉过来，每次健完身吃一勺蛋白粉，有效补充蛋白质。这里吃肉少，又不油腻，简直是趁机减肥的大好时机。由于这个月想继续控制体脂，所以采取了相对严格的节食策略，早饭、中午饭照常吃，一周有5天不吃晚饭。节食再配合运动感觉体重有所下降，可惜这边没有称，不知道自己现在的体重是多少。最近一次称体重是3月初的时候，体重是71.6KG。我感觉现在已经降到了70KG，离终极目标还差5KG。</p>

<p><img src="http://www.huangbowen.net/images/IMG_3514.PNG" width="400"></p>

<p>3月份跑步出勤8次，跑步总距离77公里。主要还是因为太忙了，早上起不来，晚上又要力量训练，把跑步的时间都给挤没了。</p>

<p><img src="http://www.huangbowen.net/images/IMG_3515.PNG" width="400"></p>

<p>不过在浦那参加了当地两次马拉松活动，跑了两个半马。这也是难得的体验。</p>

<p>第一次是3月20日。早上5点就到了比赛地点，热身是跳舞20分钟，如果全程跟完肯定累的不要不要的。早上6点钟开跑，漆黑一片，一直跑到太阳出来，大地重见光明。志愿者都很热情，水之类的补给很充足，由于是折返赛道，所以每隔几公里就有水可以补给。不过我自己刷半马习惯了，平时自己跑中间都不补给的，所以整个过程中也没喝多少水。由于这次跑步穿的是越野跑鞋，不是很合脚，跑到第10公里后脚上磨了水泡，所以速度逐渐下降，发挥欠佳。</p>

<p><img src="http://www.huangbowen.net/images/pune_harf_marathon.JPG" width="400"></p>

<p><img src="http://www.huangbowen.net/images/moveitmarathon.png" width="400"></p>

<p>上周末的半马活动中我充分吸取了教训，提前买了一双跑鞋，是印度这边颇受欢迎的POWER品牌，感觉物美价廉。整个过程基本保持定速巡航，配速在5分10秒左右晃荡。最后两公里有个组织者主动领跑，帮我带速度。那时候我已经处于力竭的边缘，在他的带领下又重新振作起来，这两公里的配速反而是整个半马最快的配速。看来以后跑马还是要跟着兔子跑，要省力不少。</p>

<p><img src="http://www.huangbowen.net/images/IMG_3496.JPG" width="400"></p>

<p><img src="http://www.huangbowen.net/images/IMG_3501.jpg" width="400"></p>

<p>本来要在浦那呆到6月多才回去的，后来计划有变，4月下旬就要回去。刚好5月15日有汶川50公里越野赛，我出山的时候到了。4月份好好训练，汶川越野赛只求安全无伤完赛。这样我就有资格参加100公里越野赛了。</p>

<p>4月份的目标是交稿手上翻译的书，并且跑4次半马训练。跑4次半马训练对我来说难度不大，但交稿手上翻译的书则比较难，因为还有50多页没有翻译完，而且翻译完还要整体全部校审一遍，工作量还是比较大。尽力而为吧！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[印度浦那三周感受]]></title>
    <link href="http://www.huangbowen.net/blog/2016/03/27/living-in-pune-three-weeks-so-far/"/>
    <updated>2016-03-27T22:27:57+08:00</updated>
    <id>http://www.huangbowen.net/blog/2016/03/27/living-in-pune-three-weeks-so-far</id>
    <content type="html"><![CDATA[<p>本来打算写印度浦那一周感受的，结果一周过去了一个字都没写，然后打算写二周感受，结果第二周也没找到时间来写。第三周是异常繁忙的一周，终于在周末找到了一点时间来编写。</p>

<!-- more -->


<p>这次去印度浦那是作为ThoughtWorks University的Coach，需要在印度呆3个多月。</p>

<p>2月27日从成都出发到浦那，整个过程非常纠结，需要成都飞上海，然后上海飞德里，最后德里飞浦那。整个行程从周六下午的2点到周日早上的7点才完成。周日早上的7点是浦那的时间。浦那和中国有两个半小时的时差，所以浦那的早上7点是中国的早上9点半。成都到上海和上海到德里的飞机是东航的，感觉还行。</p>

<h2>关于出行</h2>

<p>浦那的街道比较窄，道路也修的不好，大都是两条机动道，而且路边大都没有人行道。浦那的摩托车特别多，大部分路口都没有信号灯，更别提人行横道了。路上摩托车和汽车混行，驾驶员需要极高的驾驶技巧。穿越马路是行人必须要掌握的一项技能，在车流中看准时机迅速通过。曾经有一条主干道我花了10分钟来通过。</p>

<p>浦那街上最多的公共交通工具是一种叫做auto的三轮车，这种三轮车是可以打表的，一辆最多可以做3个人。不过如果看你是外国人一般是不会打表的，而是直接喊价，所以做的时候先要提前讲好价。街上基本没看到有出粗车标志的出租车。印度同事告诉我如果想打车可以用uber或者Olaclubs软件。我使用了几次Olaclubs，打车还是挺方便的，不到10秒就有人接单。不过有的司机不懂英文，电话里沟通地址真是费了老大劲。</p>

<p>我住的地方和公司办公室有一定距离，上下班有shuttle接送，就是一种小巴，可以坐下10多个人。</p>

<p><img src="http://www.huangbowen.net/images/pune_office.JPG" width="400"></p>

<p>浦那的交通异常繁忙，上下班高峰期经常交通堵塞，20公里的路都要跑1个小时多。</p>

<h2>关于饮食</h2>

<p>公司管早饭和晚饭。大都是饼子配上各种咖喱。蔬菜的话就是土豆和西兰花。每周貌似一天有鸡肉提供，其它时间都是素食。刚好最近在减肥，所以素食对我来说ok。印度人不吃牛肉，猪肉也很少吃，只有鸡肉常见一些。而这些鸡肉的做法和中国的大相径庭，味道比中国的差远了。</p>

<p><img src="http://www.huangbowen.net/images/food_in_pune_1.JPG" width="400"></p>

<p><img src="http://www.huangbowen.net/images/food_in_pune_2.JPG" width="400"></p>

<p>晚饭的话同事经常一起约着去下馆子。我由于节食去的不多。由于整个讲师团队是个跨国部队，有印度人、中国人、英国人、澳洲人、美国人、德国人；巴西人&hellip;&hellip;所以去的馆子也是五花八门，有印度本土的，也有偏欧美风的，就是没找到一家正宗的中国馆子。</p>

<p><img src="http://www.huangbowen.net/images/food_in_pune_3.JPG" width="400"></p>

<p>下馆子的话感觉浦那餐厅的消费比国内的要贵一些，也有可能我们去的馆子是浦那比较高的馆子。便宜的馆子我们还真不敢去啊，万一吃坏肚子就麻烦了。</p>

<p>这是在一家餐馆吃的铁板羊肉。羊肉的味道不是很好，但是分量很足，我吃的很饱。
<img src="http://www.huangbowen.net/images/food_in_pune_4.JPG" width="400"></p>

<h2>关于住宿</h2>

<p>刚来浦那的第一周住在一个叫做stay@home的公寓，有点像7天酒店。房间里面没有网络，要上网的需要去顶楼的餐厅。房间里面很简单，连个书桌都没有，不过有独立卫生间。由于浦那夏季温度比较高，经常飙到40度以上，所以吊扇和空调的配置率还是挺高的。不过这些空调看起来很老，运行起来的噪音大得很，吊扇的噪音比空调还要小一些。</p>

<p>第二周开始换到了另一个地方，是一个小区。门口一群保安24小时看守。小区里设施还挺完备，有篮球场、网球场、健身房和游泳池。不过游泳池水脏的很，基本处于弃用的状态。健身房里各种器械比较齐全，没有教练，去的话自己练，600卢比一个月，价格是相当的实惠啊。我住的地方是三室一厅，和另外两个同事一起住。房间里的网络非常差劲，隔三差五断网。</p>

<p><img src="http://www.huangbowen.net/images/gym_in_fortaleza.JPG" width="400"></p>

<h2>关于购物</h2>

<p>这三周总共去过两个商场。一个是phenix mall，和国内的商场差不多。里面有全球的些名牌店，也有超市、电影院、健身房、游乐场，还有各种餐馆，比如肯德基、麦当劳、必胜客等。我在这里买了一双跑鞋，印度人颇受欢迎的power牌子，总共3000多卢比，算是该牌子中比较贵的鞋子了。穿起来还是比较舒服，感觉物超所值。</p>

<p><img src="http://www.huangbowen.net/images/shoe_power.JPG" width="400"></p>

<p>另一个商场叫做D-Mart，其实就是个大型超市。那是周日的晚上去的，结账的时候人超级多，每人都推着手推车，车里的东西都装满了。我们花了1个小时来排队结账。正因为第一次体验很不好，所以之后再也没去过这家店。</p>

<p>说说浦那比较有趣的事情。</p>

<ol>
<li>街上有很多流浪狗，简直是随处可见。他们每天过的悠闲自得，躺在地上睡的一动不动，就算你走到跟前都不理你。</li>
</ol>


<p><img src="http://www.huangbowen.net/images/dog_in_pune.JPG" width="400"></p>

<ol>
<li>去商场、好的餐馆、办公楼在门口都要安检。其实感觉保安也就是做做样子，用的设备都很老旧。</li>
<li>浦那有真正的乞丐，很多几岁的小孩会追着你要钱。和国内乞丐不同的是，这些小孩会主动伸手跟你有身体接触，这会让你感觉很不舒服。</li>
<li>浦那的公交车开动时候是不关车门的，这些公交车都普遍很旧。我还没有乘过公交车。</li>
<li>印度这里并不是所有人都懂英文的，其实英文的普及率没有你想象的那么高。不过咱们外国人也很少和不懂英文的人有机会接触。</li>
<li>现在正值浦那的夏天，白天温度最高可达30度，听说4月份是最热的时候，温度可达40度以上。早上和晚上还是比较凉快的。由于白天大部分时间我都呆在有空调的办公室，所以这种热没给我带来多大困扰。</li>
<li>在浦那叫外卖比较盛行。可能是由于天太热，大家不愿意出去吃饭的缘故吧。可以使用手机app zomato来找餐厅和订餐，和国内的大众点评差不多。</li>
</ol>


<p>上周日在浦那我参加了一次本地的线下马拉松活动，也是一次难得的体验。让我记忆深刻的是开始前的热身活动，刚开始主持人还是带领着伸胳膊伸腿的，几分钟后就演变成了跳舞，整整跳了20多分钟。真是跳完可以直接回去睡觉了。整个跑步体验还不错，我挺喜欢的。</p>

<p><img src="http://www.huangbowen.net/images/pune_harf_marathon.JPG" width="400"></p>
]]></content>
  </entry>
  
</feed>
