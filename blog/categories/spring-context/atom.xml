<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Spring-Context | 黄博文的地盘]]></title>
  <link href="http://www.huangbowen.net/blog/categories/spring-context/atom.xml" rel="self"/>
  <link href="http://www.huangbowen.net/"/>
  <updated>2014-03-16T02:36:27+11:00</updated>
  <id>http://www.huangbowen.net/</id>
  <author>
    <name><![CDATA[黄博文]]></name>
    <email><![CDATA[huangbowen521@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Spring-Context之四:Spring容器及bean的定义]]></title>
    <link href="http://www.huangbowen.net/blog/2014/03/16/bean-defination-in-spring/"/>
    <updated>2014-03-16T02:29:00+11:00</updated>
    <id>http://www.huangbowen.net/blog/2014/03/16/bean-defination-in-spring</id>
    <content type="html"><![CDATA[<p>Spring框架的核心功能之一就是控制反转（Inversion of Control, IoC），也叫做依赖注入（dependency injection, DI）。关于依赖注入的具体内容可以参见Martin Fowler写的一篇文章<a href="http://martinfowler.com/articles/injection.html">《Inversion of Control Containers and the Dependency Injection pattern》</a>。</p>

<!-- more -->


<p>Spring容器接口是BeanFactory，其提供了一些方法来配置和管理对象。ApplicationContext是BeanFactory的子接口，它集成了Spring的AOP特性，信息资源管理（用于全球化），公共事件等。简单的说，BeanFactory提供了配置框架及基本的功能，而ApplicationContext增加了更多的企业级定制功能。比如其实现类WebApplicationContext可用于web应用程序中。</p>

<p>在Spring中，应用程序中受Spring IoC容器管理的对象叫做bean，即bean是一个由Spring IoC容器实例化、装配及其它管理的对象。下图是Spring IoC容器的一个简单图解。</p>

<p><img src="/images/iocOverView.png"></p>

<p>以下列出了几个常用的实现了ApplicationContext的容器对象。</p>

<ul>
<li><p>AnnotationConfigApplicationContext :接收注解的class作为输入来初始化配置。</p></li>
<li><p>GenericGroovyApplicationContext: 根据Groovy DSL来初始化配置。</p></li>
<li><p>ClassPathXmlApplicationContext:根据当前classpath下的xml文件初始化配置。</p></li>
<li><p>FileSystemXmlApplicationContext:根据文件系统路径下的xml文件初始化配置。</p></li>
</ul>


<p>Bean的定义有多种方式，XML定义，Annoation定义，Java代码直接定义，Groovy DSL定义等。之前例子基本都演示过这些定义方法。</p>

<p>一个简单的XML定义是这样的。</p>

<p>```xml</p>

<p>&lt;?xml version="1.0" encoding="UTF-8"?></p>

<p>&lt;beans xmlns="http://www.springframework.org/schema/beans"</p>

<pre><code>   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd"&gt;

&lt;bean id="movieService" class="huangbowen.net.service.DefaultMovieService”/&gt;
</code></pre>

<p></beans></p>

<p>```</p>

<p>其包含一个id和一个class。id是一个bean的唯一标示，同一个spring容器中不能有两个id一样的bean，不过你也可以给bean起别名，使用name属性即可，多个别名可以用逗号,分号或空格分开。</p>

<p>```xml</p>

<p><bean id="movieService" name="service1 service2" class="huangbowen.net.service.DefaultMovieService"/></p>

<p>```</p>

<p>```xml</p>

<p><bean id="movieService" name=“service1,service2" class="huangbowen.net.service.DefaultMovieService"/></p>

<p>```</p>

<p>```xml</p>

<p><bean id="movieService" name="service1;service2" class="huangbowen.net.service.DefaultMovieService"/></p>

<p>```</p>

<p>也可以使用alisa来起别名。</p>

<p>```xml</p>

<p><bean id="movieService" name="service1,service2" class="huangbowen.net.service.DefaultMovieService"/></p>

<p><alias name="movieService" alias="service3"/></p>

<p>```</p>

<p>如果你的bean的实例不是通过构造函数直接生成的，而是通过工厂方法生成那，那么也有相应的配置方法。</p>

<p>```xml</p>

<p><bean id="defaultMovieService" class="huangbowen.net.service.MovieServiceFactory" factory-method="GetMovieService" /></p>

<p>```</p>

<p>```java MovieServiceFactory</p>

<p>package huangbowen.net.service;</p>

<p>public class MovieServiceFactory {</p>

<pre><code>private static DefaultMovieService defaultMovieService = new DefaultMovieService();

public static MovieService GetMovieService() {
    return defaultMovieService;
}
</code></pre>

<p>}</p>

<p>```</p>

<p>如果bean对象是由一个实例工厂生成的，那么应该这样配置。</p>

<p>```xml</p>

<pre><code>&lt;bean id="serviceLocator" class="huangbowen.net.service.MovieServiceLocator"/&gt;

&lt;bean id="instantMovieService" factory-bean="serviceLocator" factory-method="GetMovieService"/&gt;
</code></pre>

<p>```</p>

<p>```java MovieServiceLocator</p>

<p>package huangbowen.net.service;</p>

<p>public class MovieServiceLocator {</p>

<pre><code>private static DefaultMovieService defaultMovieService = new DefaultMovieService();

public MovieService GetMovieService() {
    return defaultMovieService;
}
</code></pre>

<p>}</p>

<p>```</p>

<p>本例中的源码请在<a href="https://github.com/huangbowen521/Study">我的GitHub</a>上自行下载。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring-Context之三:使用XML和Groovy DSL配置Bean]]></title>
    <link href="http://www.huangbowen.net/blog/2014/03/13/use-groovy-dsl-in-spring/"/>
    <updated>2014-03-13T02:13:00+11:00</updated>
    <id>http://www.huangbowen.net/blog/2014/03/13/use-groovy-dsl-in-spring</id>
    <content type="html"><![CDATA[<p>在第一讲中显示了如何使用注解配置bean，其实这是Spring3引进的特性,Spring2使用的是XML的方式来配置Bean，那时候漫天的XML文件使得Spring有着<code>配置地狱</code>的称号。Spring也一直在力求改变这一缺陷。Spring3引入的注解方式确实使配置精简不少，而Spring4则引入了Groovy DSL来配置，其语法比XML要简单很多，而且Groovy本身是门语言，其配置文件就相当于代码，可以用来实现复杂的配置。</p>

<!-- more -->


<p>废话少说，让我们来对Groovy DSL配置来个第一次亲密接触。</p>

<p>首先我们先实现一个XML的bean配置，沿用第一讲中的例子。</p>

<p>```xml configuration.xml</p>

<p>&lt;?xml version="1.0" encoding="UTF-8"?></p>

<p>&lt;beans xmlns="http://www.springframework.org/schema/beans"</p>

<pre><code>   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd"&gt;

&lt;bean id="movieService" class="huangbowen.net.service.DefaultMovieService"/&gt;

&lt;bean id="cinema" class="huangbowen.net.service.Cinema"&gt;
    &lt;property name="movieService" ref="movieService"/&gt;
&lt;/bean&gt;
</code></pre>

<p></beans></p>

<p>```</p>

<p>这个XML文件就不用我多做解释了，很清晰明了。Ok，照例写个测试来测一下。</p>

<p>```java XmlConfigurationTest.java</p>

<p>package huangbowen.net;</p>

<p>import huangbowen.net.service.Cinema;
import huangbowen.net.service.DefaultMovieService;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</p>

<p>import static org.hamcrest.core.IsInstanceOf.instanceOf;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertThat;</p>

<p>@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = {"/configuration.xml"})
public class XmlConfigurationTest {</p>

<pre><code>@Autowired
private ApplicationContext applicationContext;

@Autowired
private Cinema cinema;

@Test
public void shouldGetCinemaInstance()  {
    Cinema cinema = applicationContext.getBean(Cinema.class);
    assertNotNull(cinema);
}

@Test
public void shouldGetAutowiredCinema() {
    assertNotNull(cinema);
}

@Test
public void shouldGetMovieServiceInstance() {
    assertNotNull(cinema.getMovieService());
    assertThat(cinema.getMovieService(), instanceOf(DefaultMovieService.class));
}
</code></pre>

<p>}</p>

<p>```</p>

<p>这个测试与第二讲中的测试基本上一样，不过Spring配置的读取是从configuration.xml来的，在@ContextConfiguration中指定了该xml文件为Spring配置文件。</p>

<p>如果想使用Groovy DSL的话第一步需要引入groovy依赖。</p>

<p>```xml pom.xml</p>

<p><dependency></p>

<pre><code>&lt;groupId&gt;org.codehaus.groovy&lt;/groupId&gt;
&lt;artifactId&gt;groovy-all&lt;/artifactId&gt;
&lt;version&gt;2.2.2&lt;/version&gt;
</code></pre>

<p></dependency></p>

<p>```</p>

<p>然后就可以新建一个groovy文件来实现配置编写。</p>

<p>```groovy Configuration.groovy</p>

<p>beans {</p>

<p>   movieService huangbowen.net.service.DefaultMovieService</p>

<p>   cinema huangbowen.net.service.Cinema, movieService : movieService</p>

<p>}</p>

<p>```</p>

<p>这其实体现不出来Groovy DSL的强大灵活，因为我们的例子太简单了。</p>

<p>beans相当于xml中的beans标签，第一行中是 bean id + class的形式。
第二行是bean id + class + properties map的形式。第二个参数是一个map数组，分别对应property和值。</p>

<p>实现同样的Bean配置有很多种写法。</p>

<p>```groovy</p>

<p>movieService (huangbowen.net.service.DefaultMovieService)</p>

<p>cinema(huangbowen.net.service.Cinema, {movieService : movieService})</p>

<p>```</p>

<p>上面这种其实是Groovy语法的一个特性，在调用方法时括号是可选的，既可以加，也可以不加。</p>

<p>```groovy</p>

<p>movieService huangbowen.net.service.DefaultMovieService</p>

<p>cinema (huangbowen.net.service.Cinema) {</p>

<pre><code>movieService :ref movieService
</code></pre>

<p>}</p>

<p>```</p>

<p>上面这中使用了另一个设置属性的方法，通过一个闭包将属性设置进去。</p>

<p>```groovy</p>

<p>movieService huangbowen.net.service.DefaultMovieService</p>

<p>cinema (huangbowen.net.service.Cinema) {</p>

<pre><code>movieService : movieService
</code></pre>

<p>}</p>

<p>```
这种更好理解了，ref方法也是可选的。</p>

<p>来照旧写个测试来测一下。</p>

<p>```java GroovyDSLConfigurationTest.java</p>

<p>package huangbowen.net;</p>

<p>import huangbowen.net.service.Cinema;
import huangbowen.net.service.DefaultMovieService;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader;
import org.springframework.beans.factory.support.BeanDefinitionReader;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.GenericApplicationContext;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.context.support.AbstractGenericContextLoader;</p>

<p>import static huangbowen.net.GroovyDSLConfigurationTest.*;
import static org.hamcrest.core.IsInstanceOf.instanceOf;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertThat;</p>

<p>@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(value = "classpath:Configuration.groovy", loader = GenericGroovyContextLoader.class)
public class GroovyDSLConfigurationTest {</p>

<pre><code>public static class GenericGroovyContextLoader extends
        AbstractGenericContextLoader {

    @Override
    protected BeanDefinitionReader createBeanDefinitionReader(
            GenericApplicationContext context) {
        return new GroovyBeanDefinitionReader(context);
    }

    @Override
    protected String getResourceSuffix() {
        return ".groovy";
    }

}

@Autowired
private ApplicationContext applicationContext;

@Autowired
private Cinema cinema;

@Test
public void shouldGetCinemaInstance()  {
    Cinema cinema = applicationContext.getBean(Cinema.class);
    assertNotNull(cinema);
}

@Test
public void shouldGetAutowiredCinema() {
    assertNotNull(cinema);
}

@Test
public void shouldGetMovieServiceInstance() {
    assertNotNull(cinema.getMovieService());
    assertThat(cinema.getMovieService(), instanceOf(DefaultMovieService.class));
}
</code></pre>

<p>}</p>

<p>```</p>

<p>在集成测试中如果加载xml配置文件，Spring提供了GenericXmlContextLoader类，如果加载注解方式的配置类，Spring提供了AnnotationConfigContextLoader类。但是对于Groovy配置文件Spring testContext框架还未提供相应的Loader，所以在本测试方法中需要自己实现一个Loader，其实也简单，只要实现两个方法即可。</p>

<p>本例中的源码请在<a href="https://github.com/huangbowen521/Study">我的GitHub</a>上自行下载。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring-Context之二:使用Spring提供的测试框架进行测试]]></title>
    <link href="http://www.huangbowen.net/blog/2014/03/12/use-spring-test/"/>
    <updated>2014-03-12T01:01:00+11:00</updated>
    <id>http://www.huangbowen.net/blog/2014/03/12/use-spring-test</id>
    <content type="html"><![CDATA[<p>Spring框架是无侵入性的，所以你的代码可以完全是POJO（plain old java object），直接使用Junit就可以完成大部分的单元测试。但是在集成测试方面就比较吃力了。单元测试层面你可以mock一些依赖对象，但是集成测试时需要真实的依赖对象，而这些对象都是在Spring容器的控制之下。那么如何在引入了Spring的情况下进行集成测试那？别着急，Spring框架早为我们想到了这点，本身提供了集成测试的功能。</p>

<!-- more -->


<p>就拿上一次那个简单的例子来做实验吧。</p>

<p>首先引入对junit以及spring-test库的依赖。</p>

<p>```xml pom.xml</p>

<p>   <dependencies></p>

<pre><code>    &lt;dependency&gt;
        &lt;groupId&gt;junit&lt;/groupId&gt;
        &lt;artifactId&gt;junit&lt;/artifactId&gt;
        &lt;version&gt;4.11&lt;/version&gt;
        &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework&lt;/groupId&gt;
        &lt;artifactId&gt;spring-test&lt;/artifactId&gt;
        &lt;version&gt;4.0.2.RELEASE&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
</code></pre>

<p>```</p>

<p>spring-test模块是专门为使用了spring框架的项目进行集成测试的辅助类库。其有以下几个目的。</p>

<ul>
<li><p>提供在运行测试时对Spring IOC容器的缓存，提高集成测试速度。</p></li>
<li><p>对测试实例提供依赖注入功能。</p></li>
<li><p>集成测试中提供事务管理。</p></li>
<li><p>提供一些辅助类库帮助开发者更好的编写集成测试。</p></li>
</ul>


<p>然后新建一个ApplicationTest.java类，代码如下所示。</p>

<p>```java ApplicationTest.java</p>

<p>package huangbowen.net;</p>

<p>import huangbowen.net.service.Cinema;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</p>

<p>import static org.junit.Assert.assertNotNull;</p>

<p>@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(classes = {Application.class})
public class ApplicationTest {</p>

<pre><code>@Autowired
private ApplicationContext applicationContext;

@Autowired
private Cinema cinema;

@Test
public void shouldGetCinemaInstance()  {
    Cinema cinema = applicationContext.getBean(Cinema.class);
    assertNotNull(cinema);
}

@Test
public void shouldGetAutowiredCinema() {
    assertNotNull(cinema);
}

@Test
public void shouldGetMovieServiceInstance() {
    assertNotNull(cinema.getMovieService());
    assertThat(cinema.getMovieService(), instanceOf(DefaultMovieService.class));
}
</code></pre>

<p>}</p>

<p>```</p>

<p>在本例中ApplicationTest有两个注解。@RunWith(SpringJUnit4ClassRunner.class).是Spring TestContext 框架提供的一个自定义的JUnit runner，这样在测试类中就可以获取ApplicationContext，甚至直接进行依赖注入，使用事务控制测试方法执行等。声明了@RunWith(SpringJUnit4ClassRunner.class)以后一般还要声明@ContextConfiguration注解。这个注解是用于告诉测试类本项目中的Spring配置。这里我们传入Application.class类，因为这个类中配置了Spring的bean。</p>

<p>然后就可以在测试类中使用强大的@Autowired功能了。我们写了三个测试方法，第一个是通过Autowired功能拿到ApplicationContext，第二个是通过Autowired功能直接拿到cinema，第三个则是验证Cinema中的MovieService是被正确注入了的。</p>

<p>Ok,今天就到这里。本例中的源码请在<a href="https://github.com/huangbowen521/Study">我的GitHub</a>上自行下载。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring-Context之一:一个简单的例子]]></title>
    <link href="http://www.huangbowen.net/blog/2014/03/11/first-exmaple-of-spring-conext/"/>
    <updated>2014-03-11T02:27:00+11:00</updated>
    <id>http://www.huangbowen.net/blog/2014/03/11/first-exmaple-of-spring-conext</id>
    <content type="html"><![CDATA[<p>很久之前就想系统的学习和掌握Spring框架，但是拖了很久都没有行动。现在趁着在外出差杂事不多，就花时间来由浅入深的研究下Spring框架。Spring框架这几年来已经发展成为一个巨无霸产品。从最初的只是用来作为依赖注入到现在已经是无法不包。其涉及的领域有依赖注入、MVC、JMS、Web flow、Batch job、Web service、Security…..几乎是涵盖了技术开发的所有方面。本人虽然从事Java语言开发时间不长，但是对Spring中的很多组件都有所涉猎，比如上面列出的那几个都有用过。可以说Spring是Java程序员必须要掌握的一个库。</p>

<!-- more -->


<p>现在Spring的最新的稳定版本是4.0.2,该版本中包含了大量的新特性，是比较重要的一次release。本系列将基本使用该版本进行讲解。</p>

<p>第一讲就用一个简单的例子开始吧，初步学会使用Spring-Context的依赖注入功能。</p>

<p>首先使用maven创建一个新的项目。</p>

<p>```bash</p>

<p>$: mvn archetype:generate</p>

<p>```</p>

<p>创建成功后在pom.xml文件中加入对Spring-Context的依赖。</p>

<p>```xml pom.xml</p>

<p><dependencies></p>

<pre><code>&lt;dependency&gt;
    &lt;groupId&gt;org.springframework&lt;/groupId&gt;
    &lt;artifactId&gt;spring-context&lt;/artifactId&gt;
    &lt;version&gt;4.0.2.RELEASE&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>

<p></dependencies></p>

<p>```</p>

<p>然后我们创建一个MovieService的接口。</p>

<p>```java MovieService.java</p>

<p>package huangbowen.net.service;</p>

<p>public interface MovieService {</p>

<pre><code>String getMovieName();
</code></pre>

<p>}</p>

<p>```</p>

<p>创建一个DefaultMovieService来实现这个接口。</p>

<p>```java DefaultMovieService.java</p>

<p>package huangbowen.net.service;</p>

<p>public class DefaultMovieService implements MovieService {</p>

<pre><code>public String getMovieName() {
    return "A Touch of Sin";
}
</code></pre>

<p>}</p>

<p>```</p>

<p>然后创建一个Cinema类，会使用MoviceService来放电影。</p>

<p>```java Cinema.java</p>

<p>package huangbowen.net.service;</p>

<p>import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;</p>

<p>@Component
public class Cinema {</p>

<pre><code>@Autowired
private MovieService movieService;

public void printMovieName() {
    System.out.println(movieService.getMovieName());
}
</code></pre>

<p>}</p>

<p>```</p>

<p>建立一个Application类。</p>

<p>```java Application.java</p>

<p>package huangbowen.net;</p>

<p>import huangbowen.net.service.Cinema;
import huangbowen.net.service.DefaultMovieService;
import huangbowen.net.service.MovieService;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;</p>

<p>@Configuration
@ComponentScan
public class Application
{</p>

<pre><code>@Bean
public MovieService getMovieService() {
    return new DefaultMovieService();
}

public static void main( String[] args )
{
    AnnotationConfigApplicationContext applicationContext = new AnnotationConfigApplicationContext(Application.class);
    Cinema cinema = applicationContext.getBean(Cinema.class);
    cinema.printMovieName();

}
</code></pre>

<p>}</p>

<p>```</p>

<p>Ok,运行main函数，得到控制台输出：</p>

<p>```text</p>

<p>A Touch of Sin</p>

<p>```</p>

<p>本例子中主要使用Annotation功能来实现对MoviceService的注入。我们将Cinema.java的头部标注为@Component说明该类交由Spring托管。而Cinema.java中的属性MoviceService标注为@Autowired，则Spring在初始化Cinema类时会从Application Context中找到类型为MovieService的Bean，并赋值给Cinema。在Application.java中我们声明了一个类型为MovieService的Bean。并且标注Application.java为@Configuration,这是告诉Spring在Application.java中定义了一个或多个@Bean方法，让Spring容器可以在运行时生成这些Bean。@ComponentScan则会让Spring容器自动扫描当前package下的标有@Component的class，这些class都将由Spring托管。</p>

<p>本例中的源码请在<a href="https://github.com/huangbowen521/Study">我的GitHub</a>上自行下载。</p>
]]></content>
  </entry>
  
</feed>
