<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Spring-context | 黄博文的地盘]]></title>
  <link href="http://www.huangbowen.net/blog/categories/spring-context/atom.xml" rel="self"/>
  <link href="http://www.huangbowen.net/"/>
  <updated>2016-11-30T23:29:04+08:00</updated>
  <id>http://www.huangbowen.net/</id>
  <author>
    <name><![CDATA[黄博文]]></name>
    <email><![CDATA[huangbowen521@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Spring-Context之七:使用p-namesapce和c-namespace简化bean的定义]]></title>
    <link href="http://www.huangbowen.net/blog/2014/03/26/using-p-namespace-and-c-namespace/"/>
    <updated>2014-03-26T00:50:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2014/03/26/using-p-namespace-and-c-namespace</id>
    <content type="html"><![CDATA[<p>在Spring中定义bean的方式多种多样，即使使用xml的方式来配置也能派生出很多不同的方式。</p>

<!-- more -->


<p>比如如下的bean定义:</p>

<pre><code class="xml">
&lt;beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd"&gt;


    &lt;bean id="person" class="Person"&gt;
        &lt;property name="name" value="Tom"/&gt;
        &lt;property name="age" value="20"/&gt;
    &lt;/bean&gt;

&lt;/beans&gt;
</code></pre>

<p>这样的bean有三行，通过使用p-namespace以后可以简化为一行。</p>

<pre><code class="xml">
&lt;beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd"&gt;

    &lt;bean id="person" class="Person" p:name="Tom" p:age="20"/&gt;

&lt;/beans&gt;
</code></pre>

<p>那么什么是<code>p-namespace</code>那？它的作用就是使用xml中的元素属性取代<code>&lt;property/&gt;</code>节点来定义bean的属性。这个神奇的p是什么东西那？它其实是使用了namespace的xml扩展配置格式。beans的配置格式是定义在一个xsd格式中的（即<a href="http://www.springframework.org/schema/beans/spring-beans.xsd">http://www.springframework.org/schema/beans/spring-beans.xsd</a>），但p却没有一个xsd格式文件与其对应，但是它可以被spring内核解析处理。</p>

<p>上面只是演示了对属性为普通值的时使用<code>p-namespace</code>的注入，如果属性为另一个bean的引用时该如何处理那？很简单。</p>

<p>这是使用正常方式注入属性。</p>

<pre><code class="xml">
    &lt;bean id="messageService" class="SimpleMessageService"/&gt;
    &lt;bean id="messageHandler" class="MessageHandler"&gt;
        &lt;property name="messageService"&gt;
            &lt;ref bean="messageService" /&gt;
        &lt;/property&gt;
    &lt;/bean&gt;
</code></pre>

<p>使用<code>p-namespace</code>后是这样的。</p>

<pre><code class="xml">
    &lt;bean id="messageService" class="SimpleMessageService"/&gt;
    &lt;bean id="messageHandler" class=“MessageHandler” p:messageService-ref=“messageService”/&gt;
</code></pre>

<p>加上<code>-ref</code>后缀即表示是对一个bean的引用。</p>

<p>那既然setter方法注入bean可以使用<code>p-namespace</code>，那么构造器方式注入有没有相应的简写那？答案是肯定的，那就是<code>c-namespace</code>，原理和使用方法与<code>p-namespace</code>大同小异。</p>

<p>使用<code>c-namespace</code>前:</p>

<pre><code class="xml">
&lt;beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:c="http://www.springframework.org/schema/c"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd"&gt;


    &lt;bean id="person" class="Person"&gt;
        &lt;constructor-arg name="name"&gt;
            &lt;value&gt;Tom&lt;/value&gt;
        &lt;/constructor-arg&gt;
        &lt;constructor-arg name="age" value="20"/&gt;
    &lt;/bean&gt;

&lt;/beans&gt;
</code></pre>

<p>使用<code>c-namespace</code>后:</p>

<pre><code class="xml">
&lt;beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:c="http://www.springframework.org/schema/c"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd"&gt;

&lt;bean id="person"  c:name="Tom" c:age="20"/&gt;
&lt;/beans&gt;
</code></pre>

<p>也可以使用<code>-ref</code>后缀来表示对另一个bean的引用。</p>

<pre><code class="xml">
 &lt;bean id="messageService" class="SimpleMessageService"/&gt;
    &lt;bean id="messageHandler" class="MessageHandler" c:messageService-ref="messageService"/&gt;
</code></pre>

<p>在前面章节讲解构造器注入时，可以使用构造参数索引来注入依赖，<code>c-namespace</code>也支持这一方式。</p>

<pre><code class="xml">
&lt;beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:c="http://www.springframework.org/schema/c"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd"&gt;

&lt;bean id="person”  c:_0="Tom" c:_1="20"/&gt;

&lt;bean id="messageService" class="SimpleMessageService"/&gt;
&lt;bean id="messageHandler" class="MessageHandler" c:_0-ref="messageService"/&gt;

&lt;/beans&gt;
</code></pre>

<p>怎么样，是不是很强大啊。但是太过强大也容易伤人伤己。在项目中使用这些技巧之前最好先和项目成员达成一致。</p>

<p>本例中的源码请在<a href="https://github.com/huangbowen521/Study">我的GitHub</a>上自行下载。</p>
]]></content>
  </entry>
  
</feed>
