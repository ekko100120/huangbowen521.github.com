<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Cloud | 黄博文的地盘]]></title>
  <link href="http://www.huangbowen.net/blog/categories/cloud/atom.xml" rel="self"/>
  <link href="http://www.huangbowen.net/"/>
  <updated>2016-11-30T23:46:12+08:00</updated>
  <id>http://www.huangbowen.net/</id>
  <author>
    <name><![CDATA[黄博文]]></name>
    <email><![CDATA[huangbowen521@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[定时关闭AWS上的EC2机器实例]]></title>
    <link href="http://www.huangbowen.net/blog/2014/12/26/shudown-ec2-at-certain-time/"/>
    <updated>2014-12-26T14:19:34+08:00</updated>
    <id>http://www.huangbowen.net/blog/2014/12/26/shudown-ec2-at-certain-time</id>
    <content type="html"><![CDATA[<p>最近一段时间在做一个产品从阿里云向亚马逊云中国区迁移的前期试验。亚马逊中国区并没有开放免费体验账号，使用的每一份资源都要实打实的掏钱。而为了实验我们使用时一般要启动好几台EC2实例。为了不浪费辛辛苦苦赚的钱，特写了一个脚本，在每天晚上6点将所有的EC2实例自动关闭。由于在亚马逊云中关闭的EC2实例是不收费的，只收取少量的存储费用，所以这样节省不少钱。</p>

<!-- more -->


<p>为了让一台机器可以值守这个任务，所以我们在AWS留一台机器用来定期执行关闭其它机器的命令。关闭EC2的命令主要是使用AWS提供了awscli来实现。</p>

<p>首先在这台机器上安装awscli。这台机器使用的操作系统是ubuntu 12.04，所以使用其自带的包管理器可以一键安装。</p>

<pre><code class="bash">
$ apt-get install awscli
</code></pre>

<p>安装完毕后需要配置aws命令行工具的认证。方式有很多，最简单的是运行<code>aws configure</code>来实现。</p>

<pre><code class="bash">
$ aws configure 
AWS Access Key ID [None]: YOURACCESSKEY
AWS Secret Access Key [None]: YOURSECRTKEY
Default region name [None]: cn-north-1
Default output format [None]: json
</code></pre>

<p>或者你可以在当前用户根目录下的.aws目录中配置认证信息，详情请移步<a href="http://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html">http://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html</a>.</p>

<p>接下来在当前用户根目录下创建stopinstance.sh文件，并输入以下信息.</p>

<pre><code class="text stopinstance.sh">
#!/bin/bash
aws ec2 stop-instances --instance-ids i-68726951 i-965ca276 i-377a620e i-d35fa133 i-fe5ca21e
</code></pre>

<p>这就是关闭指定EC2实例的命令，<code>--instance-ids</code>后面跟的就是你的EC2实例的id。</p>

<p>把该文件权限改为可执行。</p>

<pre><code class="bash">
$ chmod +x stopinstance.sh
</code></pre>

<p>最后要让该命令定时执行，那么就要借助<code>crontab</code>这个命令了。</p>

<p>使用<code>crontab -e</code>来编辑batch文件，在文件最后加上下行.</p>

<pre><code class="text">
* 18 * * * ~/stopinstance.sh &gt;&gt; ~/shutdown.log
</code></pre>

<p>前五个字段制定命令执行的时间。第一个是分钟，第二个是小时，第三个是每月的哪天，第四个是月份，第五个是每周的哪天。配置相当灵活。</p>

<p>这句话是描述了一个batch任务，在每天的下午6点执行，会执行stopinstance.sh脚本，并把日志输出到shutdown.log文件中。</p>

<p>注意使用crontab执行任务时一定要注意当前机器的时区和你期望执行的时间所用时区是否不同。有关crontab和cron命令的进一步使用请移步<a href="http://www.adminschoice.com/crontab-quick-reference">http://www.adminschoice.com/crontab-quick-reference</a></p>

<p>至此，就大功告成了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AWS re:Invent 2014回顾]]></title>
    <link href="http://www.huangbowen.net/blog/2014/11/25/aws-reinvent-conference/"/>
    <updated>2014-11-25T11:38:26+08:00</updated>
    <id>http://www.huangbowen.net/blog/2014/11/25/aws-reinvent-conference</id>
    <content type="html"><![CDATA[<p>亚马逊在2014年11月11-14日的拉斯维加斯举行了一年一度的re:Invent大会。在今年的大会上，亚马逊一股脑发布和更新了很多服务。现在就由我来带领大家了解一下这些新服务。</p>

<!-- more -->


<h2>安全及规范相关</h2>

<h3>AWS Key Management Service</h3>

<p>该服务可用于管理数据加密秘钥，以及使用硬件设备来保护秘钥。它与Amazon EBS，Amazon S3及Amazon Redshift高度集成。还与CloudTrail集成，可提供所有秘钥使用情况的日志。</p>

<h3>AWS Config(预览)</h3>

<p>这是个配置管理服务，可以监控和记录你对AWS资源的使用情况及配置修改历史。通过它你能轻易得到你所使用的所有AWS资源情况，以及各自的配置细节，并且能够追溯任何资源的历史配置情况。</p>

<h3>AWS Service Catalog</h3>

<p>AWS Service Catalog可以让管理员创建和管理一组资源，只有包含在该组中的资源才能被指定终端用户访问。这保证了服务的隔离性和安全性，快速响应市场变化。</p>

<h2>应用程序生命周期管理工具</h2>

<h3>AWS CodeDeploy</h3>

<p>顾名思义，就是代码部署服务。其实现将代码部署到EC2实例的自动化功能。并且它与你的基础设施紧密结合，天生具有可伸缩性，不管是部署到1台EC2还是1千EC2都得心应手。</p>

<h3>AWS CodeCommit</h3>

<p>一个云端的代码托管服务。如果你的程序使用的是Git版本控制工具，可以与它很轻松的集成。CodeCommit还提供一个在线代码工具，可以通过它来浏览、编辑项目，进行项目协作。（这Y听起来有点像GitHub啊）。</p>

<h3>AWS CodePipeline</h3>

<p>难道是另一款Jenkins或Go Server工具？CodePipeline提供了持续部署和发布的自动化服务。从迁入代码、构建代码、测试、部署、上线一气呵成。并且可以将第三方工具集成到发布流程中。这款工具我还是比较期待的，不知道它会给持续交付带来什么样的变化。</p>

<h2>数据库服务</h2>

<h3>Amazon RDS for Aurora</h3>

<p>Amazon Aurora是一款兼容MySQL的关系型数据库引擎。它既具备高档商业数据库的的速度及可用性优点，也具有开源数据库的简单和成本低廉等优点。其实我并不明白在当前No SQL大行其道的情况下，为什么亚马逊会推出一款关系型数据库引擎，让我们拭目以待吧。</p>

<h2>容器服务</h2>

<h3>Amazon EC2 Container Service</h3>

<p>最近一段时间Docker火的不行，亚马逊对Docker容器的支持也不甘落后。它直接发布了一个EC2 Container Service，内置对Docker的支持，提供了一系列API来方便对Docker容器程序的管理。</p>

<h2>计算服务</h2>

<h3>AWS Lambda</h3>

<p>AWS Lambda是一个计算服务，提供对事件或通知的快速响应机制。看起来是一个神奇的服务。收费方式是根据请求次数以及计算执行时间，完全是按需收费。具体使用场景目前还不得而知。</p>

<h2>对一些已有服务的更新</h2>

<h3>Amazon EC2 C4 instances</h3>

<p>这次亚马逊提供了个全新的EC2类型- C4。 C4实例基于Intel Xeon E5-2666 V3,主频高达2.9GHz，专门设计用来进行计算密集型的操作。可适用于高性能计算要求的场景，比如运行应用程序，游戏服务，Web服务等。</p>

<h3>Amazon EBS</h3>

<p>亚马逊将会增加普通用途的SSD及Provisioned IOPS(SSD)卷的性能和大小。普通用途的SSD最大可达16TB，IOPS可达10000。而Provisioned IOPS(SSD)卷最大可达16TB，IOPS可达20000。当将EBS附加到优化EBS实例上时，普通用途的SSD卷MBps最高可达160，而Provisioned IOPS(SSD)可达320 MBps。</p>

<hr />

<p>这次大会发布的服务大部分要等到2015年初才能开始体验。中国区region就更晚了。总体来说，体现出re:Invent的服务不是很多，但也有不少值得期待。AWS作为云服务厂商的领军人物，自身实力毋庸置疑，改革、创新也是大刀阔斧。只不过我感觉它横跨IASS,PASS,SASS三大领域，包罗万象，越来越臃肿，有些服务是否画蛇添足不得而知。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AWS助理架构师认证考经]]></title>
    <link href="http://www.huangbowen.net/blog/2014/10/27/how-to-pass-the-aws-certification/"/>
    <updated>2014-10-27T21:06:36+08:00</updated>
    <id>http://www.huangbowen.net/blog/2014/10/27/how-to-pass-the-aws-certification</id>
    <content type="html"><![CDATA[<p>上周考了亚马逊的解决方案架构师-助理级别的认证考试并顺利通过。这也算是对自己AWS服务熟悉程度的一种检验。在准备考试的过程中，把自己学习到的AWS知识都梳理了一遍，也算是收获颇丰。这次特意分享了该认证考经。</p>

<!-- more -->


<h2>什么是AWS认证？</h2>

<p>AWS 认证是对其在 AWS 平台上设计、部署和管理应用程序所需的技能和技术知识的一种认可。获得证书有助于证明您使用 AWS 的丰富经验和可信度，同时还能提升您所在的组织熟练使用基于 AWS 云服务应用的整体水平。</p>

<p>目前亚马逊推出了Solutions Architect,Developer和SysOps Administrator三个方向的认证。每个方向又分为Associate Level(助理级)，Professional Level（专家级）和Master Level（大师级）。当然目前只有Solutions Architect开放了Professional Level,其他层级会逐步开放中。</p>

<p><img src="/images/cert_roadmap_Q214_EN.png"></p>

<h2>我的AWS使用经验</h2>

<ul>
<li><p>本人于2013年注册了AWS账号，开始只是做些小实验玩，后来把自己的整个博客都迁移到了AWS上，使用了Route53，S3，CloudFront等服务。</p></li>
<li><p>在办公室做过Chef，CloudFormation，AWS云服务Overview等session。</p></li>
<li><p>2014年参加过亚马逊在成都举办的AWSome day活动，也算是对AWS云服务有了一个系统性了解。</p></li>
<li><p>使用Qwiklabs动手实验室在里面做过所有免费的实验，也借助里面的资源做了一些其它实验。</p></li>
<li><p>参加了一次亚马逊的在线课堂，内容是Auto Scaling。</p></li>
</ul>


<h2>考前准备</h2>

<ul>
<li><p>仔细研究了<a href="http://awstrainingandcertification.s3.amazonaws.com/production/AWS_certified_solutions_architect_associate_blueprint.pdf">AWS助理架构师考试大纲</a>，明确了自己和大纲要求的差距。</p></li>
<li><p>仔细研读了样题，了解了考试体型和方式，并且写了篇文章解析了样题。地址：<a href="http://www.huangbowen.net/blog/2014/10/22/aws-cert-sample-question/">http://www.huangbowen.net/blog/2014/10/22/aws-cert-sample-question/</a></p></li>
<li><p>进行过两次模拟考试。每次模拟考试20美元，每次有20道题。第一次是考前一周做的，只对了9道，惨败。第二次是考试前一天做的，对了14道，过关。</p></li>
<li><p>根据模拟考试的薄弱环节进行了补强，深入了解了VPN，IAM，Data Security等方面的知识。</p></li>
<li><p>大量查阅了<a href="http://aws.amazon.com/cn/documentation/">AWS的文档</a></p></li>
</ul>


<h2>考试</h2>

<p>考试地点还是比较高大上的，在春熙路附近一座写字楼里。考试中心其实地方很小，就一个前台和一个办公室。前台接待我过后，就在会议室电脑上连接上了考试系统，然后她就出去了。也就是说基本算无人监考。正式考试有55道题，考试时间80分钟，全英文。题目都是选择题，有单选与多选，题目会明确告诉你有几个正确选项（如果没说就只有一个）。</p>

<p>可以说这些考题综合性非常强。有些很考察动手经验，有些则会考察具体服务的应用场景。如果只是对AWS云服务有肤浅认识的话，绝对是过不了的。我用了50多分钟时间做完了全部55道题，有25道题不确定答案。这给我留下了20多分钟来对这20多道题再进行斟酌。时间还是挺充裕的。有些题目你不知道就是不知道，除非能查阅相应文档或者动手做一下实验看一下，光想是想不出来的。</p>

<p>80分钟后自动交卷，这次正确率是65%，涉险过关（听别人说拿证的最低正确率就是65%）。我感觉做对的比例要高于65%的，可能还是自己对AWS有些知识点不熟悉。</p>

<p>交卷以后会立马知道成绩，邮箱里也会收到认证证书与可以使用的认证logo。</p>

<h2>一些Tips</h2>

<p>接下来是一些Tips给想要考取该证的人。</p>

<ul>
<li><p>首先了解AWS认证:<a href="http://aws.amazon.com/certification/">http://aws.amazon.com/certification/</a>，了解助理架构师考试大纲：<a href="http://awstrainingandcertification.s3.amazonaws.com/production/AWS_certified_solutions_architect_associate_blueprint.pdf">http://awstrainingandcertification.s3.amazonaws.com/production/AWS_certified_solutions_architect_associate_blueprint.pdf</a></p></li>
<li><p>阅读考试常见问题：<a href="http://aws.amazon.com/cn/certification/faqs/">http://aws.amazon.com/cn/certification/faqs/</a></p></li>
<li><p>必须读AWS白皮书：<a href="http://media.amazonwebservices.com/AWS_Overview.pdf">http://media.amazonwebservices.com/AWS_Overview.pdf</a></p></li>
<li><p>熟悉考试样题：<a href="http://awstrainingandcertification.s3.amazonaws.com/production/AWS_certified_solutions_architect_associate_examsample.pdf">http://awstrainingandcertification.s3.amazonaws.com/production/AWS_certified_solutions_architect_associate_examsample.pdf</a></p></li>
<li><p>动手做实验，可以使用动手实验室，免费蹭资源：<a href="https://run.qwiklab.com">https://run.qwiklab.com</a></p></li>
<li><p>AWS文档中主要的service必须要过一遍，比如EC2，S3，VPC，EBS等。<a href="http://aws.amazon.com/cn/documentation/">http://aws.amazon.com/cn/documentation/</a></p></li>
<li><p>阅读各种云服务的常见问题：<a href="http://aws.amazon.com/cn/faqs/">http://aws.amazon.com/cn/faqs/</a></p></li>
<li><p>最好做一次模拟考试，熟悉考试的方式，题目类型，记住不熟悉的知识点然后加强。</p></li>
<li><p>这是从网上找的一个部分题目，可以了解下。<a href="http://quizlet.com/35935418/detailed-questions-flash-cards/">http://quizlet.com/35935418/detailed-questions-flash-cards/</a></p></li>
</ul>


<hr />

<p>总体来说AWS助理级架构师考试不算很难，但前提是你做好了充分准备的基础了。虽然你有可能长期使用AWS服务，但并不保证你能裸考过关。因为这是架构师认证，有些问题和场景可能你并没有经历过，有些服务你并没有使用过，在考试中这些缺点都会被放大。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AWS系列之三 使用EBS]]></title>
    <link href="http://www.huangbowen.net/blog/2014/07/30/use-ebs/"/>
    <updated>2014-07-30T23:10:32+08:00</updated>
    <id>http://www.huangbowen.net/blog/2014/07/30/use-ebs</id>
    <content type="html"><![CDATA[<p>Amazon Elastic Block Store（EBS）可作为EC2实例的持久性数据块级存储。其具有高可用性和持久性的特点，可用性高达99.999%。给现有的EC2实例扩展新的存储块只需要几分钟的时间，省时省力。每个EBS块都被放置在一个特定的可用区内，并且会自动维护一个副本，随时保护数据安全。</p>

<!-- more -->


<p>Amazon EBS共提供三种硬盘类型，SSD(固态硬盘)， Provisioned IOPS SSD（特供IOPS固态硬盘）和Magnetic（普通硬盘）。SSD是默认的EC实例的硬盘格式（凶残啊！Amazon真是有钱，自从咱的本本换了SSD后，也离不开SSD了。）Provisioned IOPS SSD更凶残，具有高一致性及超低延迟的性能，专门设计用于I/O密集型操作，比如数据库。IOPS全称为Input/Output Operations Per Second，即每秒进行读写（I/O）操作的次数，用来衡量随机访问的性能。Provisioned IOPS SSD的每GB IOPS可达30。Magnetic Volumes就是俗称的磁卷了，它最便宜，当然性能也最差了。如果你的应用程序不是I/O密集型的，对数据的访问不是很频繁，使用该类型就比较划算。</p>

<p>EBS还有一个功能就是很方便的创建快照，并保存到Amazon S3上去。EBS的快照是增量存储的。比如你有一块100G的硬盘，第一次快照使用了100G容量，第二次快照时只有5G的数据发生了变化，那么你总共只需花105G的存储费用。当然你不不必担心删除其中一个快照导致数据丢失，因为删除一个快照时，系统只会删除其中不会被其它快照使用的数据，所以不会影响其它快照。</p>

<p>好了，接下来是本文的两个主要任务是两个。第一个任务是给一个EC实例附加一个新的EBS卷，并且加入到当前EC实例的文件系统中。第二个任务是为该EC实例创建一个快照。</p>

<p>首先当然是准备工作了，创建一个新的EC2实例。如何创建上一篇文章已经详细介绍了，这里不再累述。如果还没有AWS account的同学可以使用可以qwiklabs提供的免费实验来进行该练习。地址是<a href="https://run.qwiklabs.com">https://run.qwiklabs.com</a>。说实话qwiklabs真是个好东西，如果我使用自己的account来进行练习，要花不少钱。而qwiklabs里面有几个免费实验，使用AWS的所有资源不收任何费用，真是业界良心。</p>

<p>EC2创建完毕后，应该是这个样子。</p>

<p><img src="/images/ec2instance01.png" width="700"></p>

<p>然后远程ssh进去。</p>

<pre><code class="bash">
$: ssh ec2-user@54.191.59.163 -i ~/Downloads/key.pem
</code></pre>

<p>先查看下当前的磁盘情况。</p>

<pre><code class="bash">
[ec2-user@ip-172-31-17-37 ~]$ df -h
Filesystem      Size  Used Avail Use% Mounted on
/dev/xvda1      7.8G  1.1G  6.6G  14% /
devtmpfs        486M   56K  486M   1% /dev
tmpfs           499M     0  499M   0% /dev/shm
</code></pre>

<p>可以看出当前磁盘总大小在8G左右，有三个文件系统。</p>

<p>接下来就创建一个硬盘。</p>

<p>点击EC2控制面板左侧的<code>Volumes</code>按钮，来到磁盘的控制面板。</p>

<p><img src="/images/volumedb01.png" width="700"></p>

<p>这里展示的一块硬盘就是当前ec2实例使用的硬盘。</p>

<p>我们点击上面的<code>Create Volumes</code>来新添加一块硬盘。</p>

<p><img src="/images/createVolume01.png" width="700"></p>

<p>硬盘类型就是我上文的说的那几种，IOPS越高，硬盘就越贵，可用区的选择一定要和当前要使用的EC2实例保持一致，要不然会无法跨可用区附加硬盘。如果提供snapshot ID的话，新创建的硬盘会具有该快照的数据。</p>

<p>硬盘创建完毕后如下图所示。</p>

<p><img src="/images/newVolumes01.png" width="700"></p>

<p>目前它的状态是可用的，如果将其附加到EC2实例则会变为in-use。</p>

<p>点击<code>Action</code>按钮并选择<code>Attach Volume</code>命令，可以将该硬盘附加到EC2实例上。</p>

<p><img src="/images/attachvolume01.png" width="700"></p>

<p>在该界面中选择实例名及映射的设备地址，然后附加。</p>

<p><img src="/images/volumesStatus01.png" width="700"></p>

<p>可以看到该硬盘状态已经发生改变。</p>

<p>那么再回到终端中查看磁盘情况。</p>

<pre><code class="bash">
[ec2-user@ip-172-31-17-37 ~]$ df -h
Filesystem      Size  Used Avail Use% Mounted on
/dev/xvda1      7.8G  1.1G  6.6G  14% /
devtmpfs        486M   60K  486M   1% /dev
tmpfs           499M     0  499M   0% /dev/shm
</code></pre>

<p>跟以前的一模一样，没有看到新添加的20G硬盘。这是怎么回事那？这是因为你虽然给机器添加了一块硬盘，但是还没有格式化和创建文件系统，并将文件系统添加到EC2的文件系统树上来。</p>

<p>我们换另一个命令来查看存储情况。</p>

<pre><code class="bash">
[ec2-user@ip-172-31-17-37 ~]$ lsblk
NAME    MAJ:MIN RM SIZE RO TYPE MOUNTPOINT
xvda    202:0    0   8G  0 disk
└─xvda1 202:1    0   8G  0 part /
xvdf    202:80   0  20G  0 disk
</code></pre>

<p>这里可以看到有一块20G的大硬盘xvdf，但是没有MOUNTPOINT，这个MOUNTPOINT你可以理解为EC2实例上针对这个硬盘的根地址。</p>

<p>细心的读者可能会发现我们附加硬盘时输入的地址是<code>/dev/sdf</code>，为什么命令行中显示的是<code>xvdf</code>那？这是因为调皮的操作系统内核给改了，不同的Linux发行版其修改后的地址也会不太一样。</p>

<p>使用file命令来查看该块硬盘有没有建立文件系统。</p>

<pre><code class="bash">
[ec2-user@ip-172-31-17-37 ~]$ sudo file -s /dev/xvdf
/dev/xvdf: data
</code></pre>

<p>如果输出是data，说明该块硬盘还未创建文件系统。</p>

<p>使用下述命令来给xvdf来创建文件系统。</p>

<pre><code class="bash">
[ec2-user@ip-172-31-17-37 ~]$ sudo mkfs -t ext4 /dev/xvdf
</code></pre>

<p>然后再用file命令确认。</p>

<pre><code class="bash">
[ec2-user@ip-172-31-17-37 ~]$ sudo file -s /dev/xvdf
/dev/xvdf: Linux rev 1.0 ext4 filesystem data, UUID=1e14ec91-156a-4eb5-8846-cb5f2fa51b64 (extents) (large files) (huge files)
</code></pre>

<p>可以看到该块硬盘已经建立了ext4格式的文件系统。</p>

<p>接下来要将该文件系统加入到当前实例的文件系统树中，这里要使用mount命令。</p>

<pre><code class="bash">
[ec2-user@ip-172-31-17-37 ~]$ sudo mkdir /boot2
[ec2-user@ip-172-31-17-37 ~]$ sudo mount /dev/xvdf /boot2
</code></pre>

<p>搞定，现在看看EC2实例的存储情况。</p>

<pre><code class="bash">
[ec2-user@ip-172-31-17-37 ~]$ lsblk
NAME    MAJ:MIN RM SIZE RO TYPE MOUNTPOINT
xvda    202:0    0   8G  0 disk
└─xvda1 202:1    0   8G  0 part /
xvdf    202:80   0  20G  0 disk /boot2
</code></pre>

<p>可以在/boot2目录下随意创建文件和文件夹了。</p>

<p>这里并不是万事大吉的时候，我们需要将该MOUNTPOINT加入到系统文件中，要不然系统重启后还是找不到该硬盘。编辑<code>/etc/fstab</code>文件，在其中加入以下行。</p>

<pre><code class="text">
/dev/xvdf       /data   ext4    defaults,nofail        0       2
</code></pre>

<p>这样就不怕重启的时候丢失该MOUNTPOINT了。添加完毕以后可以试一下fstab文件是否能正常运行。</p>

<pre><code class="bash">
[ec2-user@ip-172-31-17-37 ~]$ sudo mount -a
</code></pre>

<p>如果没有错误就一切万事大吉，如果有错误而你重启了电脑的话，你就等着哭吧。</p>

<p>这是第一个任务，第二任务是给现有硬盘创建快照，非常简单。回到<code>Volumes</code>控制面板，选择<code>Action</code>里的<code>Create Snapshot</code>按钮。</p>

<p><img src="/images/createSnapshot01.png" width="700"></p>

<p>等一会snapshot就会创建成功。</p>

<p><img src="/images/snapshotStatus01.png" width="700"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AWS系列之二  使用EC2]]></title>
    <link href="http://www.huangbowen.net/blog/2014/07/26/using-ec2/"/>
    <updated>2014-07-26T16:27:22+08:00</updated>
    <id>http://www.huangbowen.net/blog/2014/07/26/using-ec2</id>
    <content type="html"><![CDATA[<p>在本文中我们有三个任务。
第一：使用Amazon management console创建一个EC2实例。
第二：使用本地的命令行工具远程登陆到该EC2实例。
第三：在该EC2实例上创建一个web服务，并通过公共域名来访问该web服务。</p>

<!-- more -->


<p>如果你还没有AWS的账号的话，可以使用qwiklabs提供的免费实验来进行该练习。地址是<a href="https://run.qwiklabs.com">https://run.qwiklabs.com</a>。</p>

<p>登陆到亚马逊的AWS服务的management console后选择EC2服务。</p>

<p><img src="/images/awsdashboard.png" width="700"></p>

<p>然后你就可以到EC2的控制面板了。</p>

<p><img src="/images/ec2dashboard.png" width="700"></p>

<p>点击上面大大的<code>Launch Instance</code>按钮来开始创建一个新的EC2实例。</p>

<p><img src="/images/imagetype.png" width="700"></p>

<p>首先要选择机器的镜像文件AMI（Amazon Machine Image）,有各种Linux的发行版，也有Windows系统。在本次实验中我们选取第一个，即Amazon Linux AMI，亚马逊自己的一个Linux发行版。</p>

<p>然后是选择机器类型，不同类型机器性能不同，收费标准也不一样，一切都是根据你的需求来决定。就选第一个吧，最便宜。</p>

<p><img src="/images/instancetype.png" width="700"></p>

<p>然后你有两个选择，一个是点击<code>Review and Launch</code>直接启动新机器，其余参数都采用默认值，另一个是点击<code>Next:Configure Instance Details</code>自定义其它配置。在这里我们选择第二个按钮，然后直到step6：Configure Security Group。</p>

<p><img src="/images/scrole.png" width="700"></p>

<p>这里是配置安全组的，你可以使用已有的安全组，也可以创建一个全新的安全组。在安全组里可以设置一系列策略来管理该实例与外界的访问情况。</p>

<p>由于我们需要远程登录到该实例，并且需要该实例提供http服务，所以我们需要开放22和80端口。22端口默认是开放的，80端口则需要手动开放。方法是点击<code>Add Role</code>按钮并新加一个role。</p>

<p><img src="/images/httprole.png" width="700"></p>

<p>配置完成后点击<code>Launch</code>按钮，会弹出一个页面让你设置key pair。</p>

<p><img src="/images/keypairconfiguration.png" width="700"></p>

<p>这个key pair是用来与该实例建立安全连接。亚马逊会存一个公钥，自己在本地存放一个私钥，当想要连接该实例时，需要提供私钥。这里我们选择新建一个key pair，并取名为awsworkshop，选择保存到本地。稍后会使用它来ssh到该实例。</p>

<p>点击<code>Launch Instances</code>按钮，实例就会被初始化了。</p>

<p><img src="/images/launchstatus.png" width="700"></p>

<p>点击<code>View Instances</code>来查看新创建的实例。</p>

<p><img src="/images/ec2information.png" width="700"></p>

<p>一般需要等待3到5分钟来完成对新实例的初始化。在上图中可以查看该实例的相关信息。亚马逊给该实例分配了一个公共IP和公共DNS域名，稍后需要使用它们。</p>

<p>等到该实例的<code>Instance Status</code>为<code>running</code>后，我们就可以进行第二个任务了，就是远程连接到该实例。</p>

<p>打开你心爱的终端，然后先提升刚保存的pem文件的权限。</p>

<pre><code class="bash">

$: chmod 600 ~/Downloads/awsworkshop.pem
</code></pre>

<p>然后在AWS的控制面板上找到该实例的公共IP，使用ec2-user用户名来ssh到该实例。</p>

<pre><code class="bash">

$: ssh ec2-user@54.191.210.210 -i ~/Downloads/awsworkshop.pem
</code></pre>

<p>稍微等待以后就可以连接到远程实例了。</p>

<pre><code class="bash">

[ec2-user@ip-172-31-46-246 ~]$ who
ec2-user pts/0        2014-07-26 06:38 (123-243-183-184.static.tpgi.com.au) 
</code></pre>

<p>怎么样？一切都非常简单吧？</p>

<p>下面就进行这个实验的最后一个任务了，在该远程实例上搭建一个web服务器。</p>

<p>ssh到该实例后，执行下面命令。</p>

<pre><code class="bash">

$: sudo yum install httpd
</code></pre>

<p>这句命令是安装Apache的httpd服务器。</p>

<p>然后跳转到<code>/var/www/html</code>目录下，并新建一个名为<code>index.html</code>的文件。</p>

<pre><code class="bash">
$: cd /var/www/html
$: sudo touch index.html
</code></pre>

<p>使用你习惯的编辑器在该文件中输入一个html格式的文档并保存。</p>

<pre><code class="html">
&lt;html&gt;
    &lt;body&gt;
        &lt;h1&gt;Hello World!&lt;/h1&gt;
    &lt;/body&gt;
&lt;html&gt;
</code></pre>

<p>接下来启动web服务器。</p>

<pre><code class="bash">
$: sudo service httpd start
</code></pre>

<p>大功告成，从该EC2实例的控制面板中找到其公共DNS，然后粘贴到浏览器中，就可以访问其提供的web服务了。</p>

<p><img src="/images/website.png" width="700"></p>

<p>好了，这三个任务也就都完成了。希望大家喜欢这次EC2之旅。</p>
]]></content>
  </entry>
  
</feed>
