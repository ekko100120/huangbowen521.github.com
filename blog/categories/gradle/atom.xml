<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Gradle | 黄博文的地盘]]></title>
  <link href="http://www.huangbowen.net/blog/categories/gradle/atom.xml" rel="self"/>
  <link href="http://www.huangbowen.net/"/>
  <updated>2016-02-29T22:59:19+05:30</updated>
  <id>http://www.huangbowen.net/</id>
  <author>
    <name><![CDATA[黄博文]]></name>
    <email><![CDATA[huangbowen521@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Maven和Gradle对比]]></title>
    <link href="http://www.huangbowen.net/blog/2016/02/23/gradle-vs-maven/"/>
    <updated>2016-02-23T09:00:27+05:30</updated>
    <id>http://www.huangbowen.net/blog/2016/02/23/gradle-vs-maven</id>
    <content type="html"><![CDATA[<p>Java世界中主要有三大构建工具：Ant、Maven和Gradle。经过几年的发展，Ant几乎销声匿迹、Maven也日薄西山，而Gradle的发展则如日中天。笔者有幸见证了Maven的没落和Gradle的兴起。Maven的主要功能主要分为5点，分别是依赖管理系统、多模块构建、一致的项目结构、一致的构建模型和插件机制。我们可以从这五个方面来分析一下Gradle比起Maven的先进之处。</p>

<!-- more -->


<h2>依赖管理系统</h2>

<p>Maven为Java世界引入了一个新的依赖管理系统。在Java世界中，可以用groupId、artifactId、version组成的Coordination（坐标）唯一标识一个依赖。任何基于Maven构建的项目自身也必须定义这三项属性，生成的包可以是Jar包，也可以是war包或者ear包。一个典型的依赖引用如下所示：</p>

<pre><code class="xml">&lt;dependency&gt;
    &lt;groupId&gt;junit&lt;/groupId&gt;
    &lt;artifactId&gt;junit&lt;/artifactId&gt;
    &lt;version&gt;4.12&lt;/version&gt;
    &lt;scope&gt;test&lt;/scope&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework&lt;/groupId&gt;
    &lt;artifactId&gt;spring-test&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre>

<p>从上面可以看出当引用一个依赖时，version可以省略掉，这样在获取依赖时会选择最新的版本。而存储这些组件的仓库有远程仓库和本地仓库之分。远程仓库可以使用世界公用的central仓库，也可以使用Apache Nexus自建私有仓库；本地仓库则在本地计算机上。通过Maven安装目录下的settings.xml文件可以配置本地仓库的路径，以及采用的远程仓库的地址。</p>

<p>Gradle在设计的时候基本沿用了Maven的这套依赖管理体系。不过它在引用依赖时还是进行了一些改进。首先引用依赖方面变得非常简洁。</p>

<pre><code class="groovy">
dependencies {
    compile 'org.hibernate:hibernate-core:3.6.7.Final'
    testCompile ‘junit:junit:4.+'
}
</code></pre>

<p>第二，Maven和Gradle对依赖项的scope有所不同。在Maven世界中，一个依赖项有6种scope，分别是complie(默认)、provided、runtime、test、system、import。而grade将其简化为了4种，compile、runtime、testCompile、testRuntime。那么如果想在gradle使用类似于provided的scope怎么办？别着急，由于gradle语言的强大表现力，我们可以轻松编写代码来实现类似于provided scope的概念（例如<a href="http://stackoverflow.com/questions/18738888/how-to-use-provided-scope-for-jar-file-in-gradle-build">How to use provided scope for jar file in Gradle build?</a>）。</p>

<p>第三点是Gradle支持动态的版本依赖。在版本号后面使用+号的方式可以实现动态的版本管理。</p>

<p>第四点是在解决依赖冲突方面Gradle的实现机制更加明确。使用Maven和Gradle进行依赖管理时都采用的是传递性依赖；而如果多个依赖项指向同一个依赖项的不同版本时就会引起依赖冲突。而Maven处理这种依赖关系往往是噩梦一般的存在。而Gradle在解决依赖冲突方面相对来说比较明确。在<a href="https://docs.gradle.org/current/userguide/dependency_management.html">Chapter 23. Dependency Management
</a>中的23.2.3章节详细解读了gradle是如何处理版本冲突的。</p>

<h2>多模块构建</h2>

<p>在SOA和微服务的浪潮下，将一个项目分解为多个模块已经是很通用的一种方式。在Maven中需要定义个parent POM作为一组module的聚合POM。在该POM中可以使用<code>&lt;modules&gt;</code>标签来定义一组子模块。parent POM不会有什么实际构建产出。而parent POM中的build配置以及依赖配置都会自动继承给子module。</p>

<p>而Gradle也支持多模块构建。而在parent的build.gradle中可以使用allprojects和subprojects代码块来分别定义里面的配置是应用于所有项目还是子项目。对于子模块的定义是放置在setttings.gradle文件中的。在gradle的设计当中，每个模块都是Project的对象实例。而在parent build.gradle中通过allprojects或subprojects可以对这些对象进行各种操作。这无疑比Maven要灵活的多。</p>

<p>比如在parent的build.gradle中有以下代码：</p>

<pre><code class="groovy">
allprojects {
    task hello &lt;&lt; { task -&gt; println "I'm $task.project.name" }
}
</code></pre>

<p>执行命令<code>gradle -q hello</code>会依次打印出父module以及各个submodule的项目名称。这种强大的能力能让gradle对各个模块具有更强的定制化。</p>

<h2>一致的项目结构</h2>

<p>在Ant时代大家创建Java项目目录时比较随意，然后通过Ant配置指定哪些属于source，那些属于testSource等。而Maven在设计之初的理念就是Conversion over configuration（约定大于配置）。其制定了一套项目目录结构作为标准的Java项目结构。一个典型的Maven项目结构如下：</p>

<p><img src="/images/project_structure.png" width="400"></p>

<p>Gradle也沿用了这一标准的目录结构。如果你在Gradle项目中使用了标准的Maven项目结构的话，那么在Gradle中也无需进行多余的配置,只需在文件中包含<code>apply plugin:'java'</code>,系统会自动识别source、resource、test srouce、 test resource等相应资源。不过Gradle作为JVM上的构建工具，也同时支持groovy、scala等源代码的构建，甚至支持Java、groovy、scala语言的混合构建。虽然Maven通过一些插件（比如<a href="http://scala-tools.org/mvnsites/maven-scala-plugin/">maven-scala-plugin</a>）也能达到相同目的，但配置方面显然Gradle要更优雅一些。</p>

<h2>一致的构建模型</h2>

<p>为了解决Ant中对项目构建活动缺乏标准化的问题，Maven特意设置了标准的项目构建周期，其默认的构建周期如下所示：</p>

<pre><code class="xml">
&lt;phases&gt;
  &lt;phase&gt;validate&lt;/phase&gt;
  &lt;phase&gt;initialize&lt;/phase&gt;
  &lt;phase&gt;generate-sources&lt;/phase&gt;
  &lt;phase&gt;process-sources&lt;/phase&gt;
  &lt;phase&gt;generate-resources&lt;/phase&gt;
  &lt;phase&gt;process-resources&lt;/phase&gt;
  &lt;phase&gt;compile&lt;/phase&gt;
  &lt;phase&gt;process-classes&lt;/phase&gt;
  &lt;phase&gt;generate-test-sources&lt;/phase&gt;
  &lt;phase&gt;process-test-sources&lt;/phase&gt;
  &lt;phase&gt;generate-test-resources&lt;/phase&gt;
  &lt;phase&gt;process-test-resources&lt;/phase&gt;
  &lt;phase&gt;test-compile&lt;/phase&gt;
  &lt;phase&gt;process-test-classes&lt;/phase&gt;
  &lt;phase&gt;test&lt;/phase&gt;
  &lt;phase&gt;prepare-package&lt;/phase&gt;
  &lt;phase&gt;package&lt;/phase&gt;
  &lt;phase&gt;pre-integration-test&lt;/phase&gt;
  &lt;phase&gt;integration-test&lt;/phase&gt;
  &lt;phase&gt;post-integration-test&lt;/phase&gt;
  &lt;phase&gt;verify&lt;/phase&gt;
  &lt;phase&gt;install&lt;/phase&gt;
  &lt;phase&gt;deploy&lt;/phase&gt;
&lt;/phases&gt;
</code></pre>

<p>而这种构建周期也是Maven最为人诟病的地方。因为Maven将项目的构建周期限制的太死，你无法在构建周期中添加新的phase，只能将插件绑定到已有的phase上。而现在项目的构建过程变得越来越复杂，而且多样化，显然Maven对这种复杂度缺少足够的应变能力。比如你想在项目构建过程中进行一项压缩所有javascript的任务，那么就要绑定到Maven的现有的某个phase上，而显然貌似放在哪个phase都不太合适。而且这些phase都是串行的，整个执行下来是一条线，这也限制了Maven的构建效率。而Gradle在构建模型上则非常灵活。在Gradle世界里可以轻松创建一个task，并随时通过<code>depends</code>语法建立与已有task的依赖关系。甚至对于Java项目的构建来说，Gradle是通过名为<code>java</code>的插件来包含了一个对Java项目的构建周期，这等于Gradle本身直接与项目构建周期是解耦的。</p>

<h2>插件机制</h2>

<p>Maven和Gradle设计时都采用了插件机制。但显然Gradle更胜一筹。主要原因在于Maven是基于XML进行配置。所以其配置语法太受限于XML。即使实现很小的功能都需要设计一个插件，建立其与XML配置的关联。比如想在Maven中执行一条shell命令，其配置如下：</p>

<pre><code class="xml">
&lt;plugin&gt;
  &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
  &lt;artifactId&gt;exec-maven-plugin&lt;/artifactId&gt;
  &lt;version&gt;1.2&lt;/version&gt;
  &lt;executions&gt;
    &lt;execution&gt;
      &lt;id&gt;drop DB =&gt; db_name&lt;/id&gt;
      &lt;phase&gt;pre-integration-test&lt;/phase&gt;
      &lt;goals&gt;
        &lt;goal&gt;exec&lt;/goal&gt;
      &lt;/goals&gt;
      &lt;configuration&gt;
        &lt;executable&gt;curl&lt;/executable&gt;
        &lt;arguments&gt;
          &lt;argument&gt;-s&lt;/argument&gt;
          &lt;argument&gt;-S&lt;/argument&gt;
          &lt;argument&gt;-X&lt;/argument&gt;
          &lt;argument&gt;DELETE&lt;/argument&gt;
          &lt;argument&gt;http://${db.server}:${db.port}/db_name&lt;/argument&gt;
        &lt;/arguments&gt;
      &lt;/configuration&gt;
    &lt;/execution&gt;
  &lt;/executions&gt;
&lt;/plugin&gt;
</code></pre>

<p>而在Gradle中则一切变得非常简单。</p>

<pre><code class="groovy">task dropDB(type: Exec) {
 commandLine ‘curl’,’-s’,’s’,’-x’,’DELETE’,"http://${db.server}:{db.port}/db_name"
}
</code></pre>

<p>在创建自定义插件方面，Maven和Gradle的机制都差不多，都是继承自插件基类，然后实现要求的方法。这里就不展开说明。</p>

<hr />

<p>从以上五个方面可以看出Maven和Gradle的主要差异。Maven的设计核心<code>Convention Over Configuration</code>被Gradle更加发扬光大，而Gradle的<code>配置即代码</code>又超越了Maven。在Gradle中任何配置都可以作为代码被执行的，我们也可以随时使用已有的Ant脚本（Ant task是Gradle中的一等公民）、Java类库、Groovy类库来辅助完成构建任务的编写。</p>

<p>这种采用本身语言实现的DSL对本身语言项目进行构建管理的例子比比皆是。比如Rake和Ruby、Grunt和JavaScript、Sbt和Ruby&hellip;..而Gradle之所以使用Groovy语言实现，是因为Groovy比Java语言更具表现力，其语法特性更丰富，又兼具函数式的特点。这几年兴起的语言（比如Scala、Go、Swift）都属于强类型的语言，兼具面向对象和函数式的特点。</p>

<p>最后想说的Gradle的命令行比Maven的要强大的多。以前写过一篇文章专门讲述了Gradle的命令行操作，详情请见<a href="http://www.huangbowen.net/blog/2013/09/01/command-line-of-gradle/">Gradle命令行黑魔法</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Gradle中使用jaxb的xjc插件]]></title>
    <link href="http://www.huangbowen.net/blog/2014/08/30/use-jaxb-in-gradle/"/>
    <updated>2014-08-30T17:55:45+05:30</updated>
    <id>http://www.huangbowen.net/blog/2014/08/30/use-jaxb-in-gradle</id>
    <content type="html"><![CDATA[<p>jaxb，全称为Java Architecture for Xml Binding,是一种将java对象与xml建立起映射的技术。其主要提供两个功能，一是将java对象映射为xml，二是将xml映射为java对象。JAXB有1.0版和2.0版。2.0版对应的JSR（Java specification request, java规格要求）是JSR 222。jaxb中的xjc工具能够将XML Schema转换为对应的java类。支持的XML类型包括XML DTD，XSD以及WSDL。而schemagen工具则可以将具有相应annotation标记的java类转换为XML结构。</p>

<!-- more -->


<p>ant脚本有xjc插件来实现对xml schema文件转换为java类的工作。而由于ant任务是gradle中的一等公民，所以我们可以直接在gradle脚本中使用ant的xjc插件来实现对xml schema和java类的映射。以下代码演示了如何将xsd格式和wsdl格式的xml转换为具体的java类。</p>

<pre><code class="groovy build.gradle">
configurations {
    jaxb
}

dependencies {
    jaxb 'com.sun.xml.bind:jaxb-impl:2.2.7'
    jaxb 'com.sun.xml.bind:jaxb-xjc:2.2.7'
}

ext {
    generatedSourceDir = 'src/main/generated'
}


task jaxb {

    doLast {
        file(generatedSourceDir).mkdirs()

        ant.taskdef(name: 'xjc', classname: 'com.sun.tools.xjc.XJCTask', classpath: configurations.jaxb.asPath)

        ant.xjc(destdir: generatedSourceDir,
                package: 'jaxb.ws.ship',
                schema: 'schema/shiporder.xsd'
        )

        ant.xjc(destdir: generatedSourceDir,
                package: 'jaxb.ws.hello',
                schema: 'schema/weather.wsdl'
        ) {
            arg(value: '-wsdl')
        }

    }
}

clean {
    ant.delete(dir: generatedSourceDir)
}
</code></pre>

<p>这里实现了将xsd和wsdl格式的xml文档转换为具体的java类。注意一点是如果wsdl中的schema过于简单，可能不会有具体的类生成。另外附上使用的示例文件。</p>

<p>shiporder.xsd文件如下：</p>

<pre><code class="xml shiporder.xsd">
&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;

    &lt;xs:element name="shiporder"&gt;
        &lt;xs:complexType&gt;
            &lt;xs:sequence&gt;
                &lt;xs:element name="orderperson" type="xs:string"/&gt;
                &lt;xs:element name="shipto"&gt;
                    &lt;xs:complexType&gt;
                        &lt;xs:sequence&gt;
                            &lt;xs:element name="name" type="xs:string"/&gt;
                            &lt;xs:element name="address" type="xs:string"/&gt;
                            &lt;xs:element name="city" type="xs:string"/&gt;
                            &lt;xs:element name="country" type="xs:string"/&gt;
                        &lt;/xs:sequence&gt;
                    &lt;/xs:complexType&gt;
                &lt;/xs:element&gt;
                &lt;xs:element name="item" maxOccurs="unbounded"&gt;
                    &lt;xs:complexType&gt;
                        &lt;xs:sequence&gt;
                            &lt;xs:element name="title" type="xs:string"/&gt;
                            &lt;xs:element name="note" type="xs:string" minOccurs="0"/&gt;
                            &lt;xs:element name="quantity" type="xs:positiveInteger"/&gt;
                            &lt;xs:element name="price" type="xs:decimal"/&gt;
                        &lt;/xs:sequence&gt;
                    &lt;/xs:complexType&gt;
                &lt;/xs:element&gt;
            &lt;/xs:sequence&gt;
            &lt;xs:attribute name="orderid" type="xs:string" use="required"/&gt;
        &lt;/xs:complexType&gt;
    &lt;/xs:element&gt;

&lt;/xs:schema&gt;
</code></pre>

<p>weather.wsdl文件内容如下：</p>

<pre><code class="xml weather.wsdl">
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;wsdl:definitions xmlns:tm="http://microsoft.com/wsdl/mime/textMatching/" xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/" xmlns:mime="http://schemas.xmlsoap.org/wsdl/mime/" xmlns:tns="http://www.webserviceX.NET" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:s="http://www.w3.org/2001/XMLSchema" xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" xmlns:http="http://schemas.xmlsoap.org/wsdl/http/" targetNamespace="http://www.webserviceX.NET" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"&gt;
    &lt;wsdl:types&gt;
        &lt;s:schema elementFormDefault="qualified" targetNamespace="http://www.webserviceX.NET"&gt;
            &lt;s:element name="GetWeather"&gt;
                &lt;s:complexType&gt;
                    &lt;s:sequence&gt;
                        &lt;s:element minOccurs="0" maxOccurs="1" name="CityName" type="s:string" /&gt;
                        &lt;s:element minOccurs="0" maxOccurs="1" name="CountryName" type="s:string" /&gt;
                    &lt;/s:sequence&gt;
                &lt;/s:complexType&gt;
            &lt;/s:element&gt;
            &lt;s:element name="GetWeatherResponse"&gt;
                &lt;s:complexType&gt;
                    &lt;s:sequence&gt;
                        &lt;s:element minOccurs="0" maxOccurs="1" name="GetWeatherResult" type="s:string" /&gt;
                    &lt;/s:sequence&gt;
                &lt;/s:complexType&gt;
            &lt;/s:element&gt;
            &lt;s:element name="GetCitiesByCountry"&gt;
                &lt;s:complexType&gt;
                    &lt;s:sequence&gt;
                        &lt;s:element minOccurs="0" maxOccurs="1" name="CountryName" type="s:string" /&gt;
                    &lt;/s:sequence&gt;
                &lt;/s:complexType&gt;
            &lt;/s:element&gt;
            &lt;s:element name="GetCitiesByCountryResponse"&gt;
                &lt;s:complexType&gt;
                    &lt;s:sequence&gt;
                        &lt;s:element minOccurs="0" maxOccurs="1" name="GetCitiesByCountryResult" type="s:string" /&gt;
                    &lt;/s:sequence&gt;
                &lt;/s:complexType&gt;
            &lt;/s:element&gt;
            &lt;s:element name="string" nillable="true" type="s:string" /&gt;
        &lt;/s:schema&gt;
    &lt;/wsdl:types&gt;
    &lt;wsdl:message name="GetWeatherSoapIn"&gt;
        &lt;wsdl:part name="parameters" element="tns:GetWeather" /&gt;
    &lt;/wsdl:message&gt;
    &lt;wsdl:message name="GetWeatherSoapOut"&gt;
        &lt;wsdl:part name="parameters" element="tns:GetWeatherResponse" /&gt;
    &lt;/wsdl:message&gt;
    &lt;wsdl:message name="GetCitiesByCountrySoapIn"&gt;
        &lt;wsdl:part name="parameters" element="tns:GetCitiesByCountry" /&gt;
    &lt;/wsdl:message&gt;
    &lt;wsdl:message name="GetCitiesByCountrySoapOut"&gt;
        &lt;wsdl:part name="parameters" element="tns:GetCitiesByCountryResponse" /&gt;
    &lt;/wsdl:message&gt;
    &lt;wsdl:message name="GetWeatherHttpGetIn"&gt;
        &lt;wsdl:part name="CityName" type="s:string" /&gt;
        &lt;wsdl:part name="CountryName" type="s:string" /&gt;
    &lt;/wsdl:message&gt;
    &lt;wsdl:message name="GetWeatherHttpGetOut"&gt;
        &lt;wsdl:part name="Body" element="tns:string" /&gt;
    &lt;/wsdl:message&gt;
    &lt;wsdl:message name="GetCitiesByCountryHttpGetIn"&gt;
        &lt;wsdl:part name="CountryName" type="s:string" /&gt;
    &lt;/wsdl:message&gt;
    &lt;wsdl:message name="GetCitiesByCountryHttpGetOut"&gt;
        &lt;wsdl:part name="Body" element="tns:string" /&gt;
    &lt;/wsdl:message&gt;
    &lt;wsdl:message name="GetWeatherHttpPostIn"&gt;
        &lt;wsdl:part name="CityName" type="s:string" /&gt;
        &lt;wsdl:part name="CountryName" type="s:string" /&gt;
    &lt;/wsdl:message&gt;
    &lt;wsdl:message name="GetWeatherHttpPostOut"&gt;
        &lt;wsdl:part name="Body" element="tns:string" /&gt;
    &lt;/wsdl:message&gt;
    &lt;wsdl:message name="GetCitiesByCountryHttpPostIn"&gt;
        &lt;wsdl:part name="CountryName" type="s:string" /&gt;
    &lt;/wsdl:message&gt;
    &lt;wsdl:message name="GetCitiesByCountryHttpPostOut"&gt;
        &lt;wsdl:part name="Body" element="tns:string" /&gt;
    &lt;/wsdl:message&gt;
    &lt;wsdl:portType name="GlobalWeatherSoap"&gt;
        &lt;wsdl:operation name="GetWeather"&gt;
            &lt;wsdl:documentation xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"&gt;Get weather report for all major cities around the world.&lt;/wsdl:documentation&gt;
            &lt;wsdl:input message="tns:GetWeatherSoapIn" /&gt;
            &lt;wsdl:output message="tns:GetWeatherSoapOut" /&gt;
        &lt;/wsdl:operation&gt;
        &lt;wsdl:operation name="GetCitiesByCountry"&gt;
            &lt;wsdl:documentation xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"&gt;Get all major cities by country name(full / part).&lt;/wsdl:documentation&gt;
            &lt;wsdl:input message="tns:GetCitiesByCountrySoapIn" /&gt;
            &lt;wsdl:output message="tns:GetCitiesByCountrySoapOut" /&gt;
        &lt;/wsdl:operation&gt;
    &lt;/wsdl:portType&gt;
    &lt;wsdl:portType name="GlobalWeatherHttpGet"&gt;
        &lt;wsdl:operation name="GetWeather"&gt;
            &lt;wsdl:documentation xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"&gt;Get weather report for all major cities around the world.&lt;/wsdl:documentation&gt;
            &lt;wsdl:input message="tns:GetWeatherHttpGetIn" /&gt;
            &lt;wsdl:output message="tns:GetWeatherHttpGetOut" /&gt;
        &lt;/wsdl:operation&gt;
        &lt;wsdl:operation name="GetCitiesByCountry"&gt;
            &lt;wsdl:documentation xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"&gt;Get all major cities by country name(full / part).&lt;/wsdl:documentation&gt;
            &lt;wsdl:input message="tns:GetCitiesByCountryHttpGetIn" /&gt;
            &lt;wsdl:output message="tns:GetCitiesByCountryHttpGetOut" /&gt;
        &lt;/wsdl:operation&gt;
    &lt;/wsdl:portType&gt;
    &lt;wsdl:portType name="GlobalWeatherHttpPost"&gt;
        &lt;wsdl:operation name="GetWeather"&gt;
            &lt;wsdl:documentation xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"&gt;Get weather report for all major cities around the world.&lt;/wsdl:documentation&gt;
            &lt;wsdl:input message="tns:GetWeatherHttpPostIn" /&gt;
            &lt;wsdl:output message="tns:GetWeatherHttpPostOut" /&gt;
        &lt;/wsdl:operation&gt;
        &lt;wsdl:operation name="GetCitiesByCountry"&gt;
            &lt;wsdl:documentation xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"&gt;Get all major cities by country name(full / part).&lt;/wsdl:documentation&gt;
            &lt;wsdl:input message="tns:GetCitiesByCountryHttpPostIn" /&gt;
            &lt;wsdl:output message="tns:GetCitiesByCountryHttpPostOut" /&gt;
        &lt;/wsdl:operation&gt;
    &lt;/wsdl:portType&gt;
    &lt;wsdl:binding name="GlobalWeatherSoap" type="tns:GlobalWeatherSoap"&gt;
        &lt;soap:binding transport="http://schemas.xmlsoap.org/soap/http" /&gt;
        &lt;wsdl:operation name="GetWeather"&gt;
            &lt;soap:operation soapAction="http://www.webserviceX.NET/GetWeather" style="document" /&gt;
            &lt;wsdl:input&gt;
                &lt;soap:body use="literal" /&gt;
            &lt;/wsdl:input&gt;
            &lt;wsdl:output&gt;
                &lt;soap:body use="literal" /&gt;
            &lt;/wsdl:output&gt;
        &lt;/wsdl:operation&gt;
        &lt;wsdl:operation name="GetCitiesByCountry"&gt;
            &lt;soap:operation soapAction="http://www.webserviceX.NET/GetCitiesByCountry" style="document" /&gt;
            &lt;wsdl:input&gt;
                &lt;soap:body use="literal" /&gt;
            &lt;/wsdl:input&gt;
            &lt;wsdl:output&gt;
                &lt;soap:body use="literal" /&gt;
            &lt;/wsdl:output&gt;
        &lt;/wsdl:operation&gt;
    &lt;/wsdl:binding&gt;
    &lt;wsdl:binding name="GlobalWeatherSoap12" type="tns:GlobalWeatherSoap"&gt;
        &lt;soap12:binding transport="http://schemas.xmlsoap.org/soap/http" /&gt;
        &lt;wsdl:operation name="GetWeather"&gt;
            &lt;soap12:operation soapAction="http://www.webserviceX.NET/GetWeather" style="document" /&gt;
            &lt;wsdl:input&gt;
                &lt;soap12:body use="literal" /&gt;
            &lt;/wsdl:input&gt;
            &lt;wsdl:output&gt;
                &lt;soap12:body use="literal" /&gt;
            &lt;/wsdl:output&gt;
        &lt;/wsdl:operation&gt;
        &lt;wsdl:operation name="GetCitiesByCountry"&gt;
            &lt;soap12:operation soapAction="http://www.webserviceX.NET/GetCitiesByCountry" style="document" /&gt;
            &lt;wsdl:input&gt;
                &lt;soap12:body use="literal" /&gt;
            &lt;/wsdl:input&gt;
            &lt;wsdl:output&gt;
                &lt;soap12:body use="literal" /&gt;
            &lt;/wsdl:output&gt;
        &lt;/wsdl:operation&gt;
    &lt;/wsdl:binding&gt;
    &lt;wsdl:binding name="GlobalWeatherHttpGet" type="tns:GlobalWeatherHttpGet"&gt;
        &lt;http:binding verb="GET" /&gt;
        &lt;wsdl:operation name="GetWeather"&gt;
            &lt;http:operation location="/GetWeather" /&gt;
            &lt;wsdl:input&gt;
                &lt;http:urlEncoded /&gt;
            &lt;/wsdl:input&gt;
            &lt;wsdl:output&gt;
                &lt;mime:mimeXml part="Body" /&gt;
            &lt;/wsdl:output&gt;
        &lt;/wsdl:operation&gt;
        &lt;wsdl:operation name="GetCitiesByCountry"&gt;
            &lt;http:operation location="/GetCitiesByCountry" /&gt;
            &lt;wsdl:input&gt;
                &lt;http:urlEncoded /&gt;
            &lt;/wsdl:input&gt;
            &lt;wsdl:output&gt;
                &lt;mime:mimeXml part="Body" /&gt;
            &lt;/wsdl:output&gt;
        &lt;/wsdl:operation&gt;
    &lt;/wsdl:binding&gt;
    &lt;wsdl:binding name="GlobalWeatherHttpPost" type="tns:GlobalWeatherHttpPost"&gt;
        &lt;http:binding verb="POST" /&gt;
        &lt;wsdl:operation name="GetWeather"&gt;
            &lt;http:operation location="/GetWeather" /&gt;
            &lt;wsdl:input&gt;
                &lt;mime:content type="application/x-www-form-urlencoded" /&gt;
            &lt;/wsdl:input&gt;
            &lt;wsdl:output&gt;
                &lt;mime:mimeXml part="Body" /&gt;
            &lt;/wsdl:output&gt;
        &lt;/wsdl:operation&gt;
        &lt;wsdl:operation name="GetCitiesByCountry"&gt;
            &lt;http:operation location="/GetCitiesByCountry" /&gt;
            &lt;wsdl:input&gt;
                &lt;mime:content type="application/x-www-form-urlencoded" /&gt;
            &lt;/wsdl:input&gt;
            &lt;wsdl:output&gt;
                &lt;mime:mimeXml part="Body" /&gt;
            &lt;/wsdl:output&gt;
        &lt;/wsdl:operation&gt;
    &lt;/wsdl:binding&gt;
    &lt;wsdl:service name="GlobalWeather"&gt;
        &lt;wsdl:port name="GlobalWeatherSoap" binding="tns:GlobalWeatherSoap"&gt;
            &lt;soap:address location="http://www.webservicex.net/globalweather.asmx" /&gt;
        &lt;/wsdl:port&gt;
        &lt;wsdl:port name="GlobalWeatherSoap12" binding="tns:GlobalWeatherSoap12"&gt;
            &lt;soap12:address location="http://www.webservicex.net/globalweather.asmx" /&gt;
        &lt;/wsdl:port&gt;
        &lt;wsdl:port name="GlobalWeatherHttpGet" binding="tns:GlobalWeatherHttpGet"&gt;
            &lt;http:address location="http://www.webservicex.net/globalweather.asmx" /&gt;
        &lt;/wsdl:port&gt;
        &lt;wsdl:port name="GlobalWeatherHttpPost" binding="tns:GlobalWeatherHttpPost"&gt;
            &lt;http:address location="http://www.webservicex.net/globalweather.asmx" /&gt;
        &lt;/wsdl:port&gt;
    &lt;/wsdl:service&gt;
&lt;/wsdl:definitions&gt;
</code></pre>

<p>另外github上还有一些Gradle的插件来帮你实现xml和java对象的转换，但是本质上其实还是使用了jaxb的xjc ant插件实现的，只不过隐藏了实现细节，使用起来更加方便。感兴趣的可以看<a href="https://github.com/jacobono/gradle-jaxb-plugin">https://github.com/jacobono/gradle-jaxb-plugin</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gradle中的buildScript代码块]]></title>
    <link href="http://www.huangbowen.net/blog/2014/08/27/buildscript-in-gradle/"/>
    <updated>2014-08-27T19:42:45+05:30</updated>
    <id>http://www.huangbowen.net/blog/2014/08/27/buildscript-in-gradle</id>
    <content type="html"><![CDATA[<p>在编写Gradle脚本的时候，在build.gradle文件中经常看到这样的代码：</p>

<!-- more -->


<pre><code class="groovy build.gradle">

buildScript {
     repositories {
         mavenCentral()
}
}

repositories {
     mavenCentral()
}
</code></pre>

<p>这样子很容易让人奇怪，为什么repositories要声明两次哪？buildscript代码块中的声明与下半部分声明有什么不同？</p>

<p>其实答案非常简单。buildscript中的声明是gradle脚本自身需要使用的资源。可以声明的资源包括依赖项、第三方插件、maven仓库地址等。而在build.gradle文件中直接声明的依赖项、仓库地址等信息是项目自身需要的资源。</p>

<p>gradle是由groovy语言编写的，支持groovy语法，可以灵活的使用已有的各种ant插件、基于jvm的类库，这也是它比maven、ant等构建脚本强大的原因。虽然gradle支持开箱即用，但是如果你想在脚本中使用一些第三方的插件、类库等，就需要自己手动添加对这些插件、类库的引用。而这些插件、类库又不是直接服务于项目的，而是支持其它build脚本的运行。所以你应当将这部分的引用放置在buildscript代码块中。gradle在执行脚本时，会优先执行buildscript代码块中的内容，然后才会执行剩余的build脚本。</p>

<p>举个例子，假设我们要编写一个task，用于解析csv文件并输出其内容。虽然我们可以使用gradle编写解析csv文件的代码，但其实apache有个库已经实现了一个解析csv文件的库供我们直接使用。我们如果想要使用这个库，需要在gradle.build文件中加入对该库的引用。</p>

<pre><code class="groovy build.gradle">
buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        classpath 'org.apache.commons:commons-csv:1.0'
    }
}

import org.apache.commons.csv.*

task printCSV() {
    doLast {
        def records = CSVFormat.EXCEL.parse(new FileReader('config/sample.csv'))
        for (item in records) {
            print item.get(0) + ' '
            println item.get(1)
        }

    }
}
</code></pre>

<p>buildscript代码块中的repositories和dependencies的使用方式与直接在build.gradle文件中的使用方式几乎完全一样。唯一不同之处是在buildscript代码块中你可以对dependencies使用classpath声明。该classpath声明说明了在执行其余的build脚本时，class loader可以使用这些你提供的依赖项。这也正是我们使用buildscript代码块的目的。</p>

<p>而如果你的项目中需要使用该类库的话，就需要定义在buildscript代码块之外的dependencies代码块中。所以有可能会看到在build.gradle中出现以下代码：</p>

<pre><code class="groovy build.gradle">
repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    compile 'org.springframework.ws:spring-ws-core:2.2.0.RELEASE',
            'org.apache.commons:commons-csv:1.0'
}


buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        classpath 'org.apache.commons:commons-csv:1.0'
    }
}

import org.apache.commons.csv.*

task printCSV() {
    doLast {
        def records = CSVFormat.EXCEL.parse(new FileReader('config/sample.csv'))
        for (item in records) {
            print item.get(0) + ' '
            println item.get(1)
        }

    }
}
</code></pre>

<p>官方具体解释请参见：<a href="http://chimera.labs.oreilly.com/books/1234000001741/ch04.html#_buildscript_dependencies">http://chimera.labs.oreilly.com/books/1234000001741/ch04.html#_buildscript_dependencies</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Gradle运行集成测试]]></title>
    <link href="http://www.huangbowen.net/blog/2013/12/10/integration-test-in-gradle/"/>
    <updated>2013-12-10T13:17:00+05:30</updated>
    <id>http://www.huangbowen.net/blog/2013/12/10/integration-test-in-gradle</id>
    <content type="html"><![CDATA[<p>如果Gradle构建的项目是一个web项目的话，里面可能包含一些集成测试和功能性测试。这些测试和单元测试不同之处是在运行之前要先在本地将web服务启动起来，并且跑完测试后能够自动的关闭web服务。</p>

<!-- more -->


<p>在本地启动web服务我们可以使用Gradle内置的jetty插件。jetty是一个轻量级的web容器，其执行速度快，配置简单，远程调试方便。启用jetty只需在build.gradle中加入对这个插件的引用。</p>

<pre><code class="groovy build.gradle">
apply plugin: 'jetty'
</code></pre>

<p>之后可以配置war包的名称，启动的端口等属性。</p>

<pre><code class="groovy build.gradle">
apply plugin: 'jetty'

httpPort = 9876

[jettyRun, jettyRunWar, jettyStop]*.stopPort = 9966
[jettyRun, jettyRunWar, jettyStop]*.stopKey = 'stopKey'
</code></pre>

<p>我们需要将集成测试与一般的单元测试分开。因为单元测试并不需要事先启动web服务，保证其执行速度快，能够得到更快的反馈。一般做法是单元测试后缀名为Test.java，集成测试后缀名为IntegrationTest.java。</p>

<p>配置单元测试执行的测试集合。</p>

<pre><code class="groovy build.gradle">
test {
    include '**/*Test.class'
    exclude '**/*IntegrationTest.class'
}
</code></pre>

<p>然后新建一个Task，用于运行集成测试。</p>

<pre><code class="groovy build.gradle">
task intTest(type: Test, dependsOn: test) {

    include '**/*IntegrationTest.class'

    doFirst {

        jettyRun.daemon = true
        jettyRun.execute()

    }

    doLast {
        jettyStop.execute()
    }
}
</code></pre>

<p>上述代码首先是创建一个名为intTest的task，其类型为Test,依赖于test task。该集成测试只会运行后缀名为IntegrationTest的测试类。在运行测试之前，首先采用后台模式启动jetty服务器，运行完测试后再调用jettyStop task停止jetty服务。</p>

<p>为了使我们在运行<code>gradle build</code>时也会运行intTest task，可以添加对intTest的依赖。</p>

<pre><code class="groovy build.gradle">
build.dependsOn intTest
</code></pre>

<p>这样在运行<code>gradle build</code>时也会运行集成测试。并且在集成测试前后web服务会自动的启动和关闭。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gradle中使用idea插件的一些实践]]></title>
    <link href="http://www.huangbowen.net/blog/2013/12/04/use-idea-plugin-in-gradle/"/>
    <updated>2013-12-04T22:19:00+05:30</updated>
    <id>http://www.huangbowen.net/blog/2013/12/04/use-idea-plugin-in-gradle</id>
    <content type="html"><![CDATA[<p>如果你的项目使用了Gradle作为构建工具，那么你一定要使用Gradle来自动生成IDE的项目文件，无需再手动的将源代码导入到你的IDE中去了。</p>

<!-- more -->


<p>如果你使用的是eclipse，可以在build.gradle中加入这么一行.</p>

<pre><code class="groovy">
apply plugin: 'eclipse'
</code></pre>

<p>然后在命令行中输入<code>gradle eclipse</code>就可以生成eclipse的项目文件，直接使用eclipse打开生成的项目文件即可。</p>

<p>当然作为Java程序开发者，最好使的IDE还是Intellij,昨天听闻Intellij 13已经发布了，增加了不少新功能，看来又要掏腰包了。如果要让Gradle自动生成Intellij的项目文件，需要使用idea插件。</p>

<pre><code class="groovy">
apply plugin: 'idea'
</code></pre>

<p>命令行下输入<code>gradle idea</code>，就会生成Intellij的项目文件，真是省时省力。如果在已经存在Intellij的项目文件情况下，想根据build.gradle中的配置来更新项目文件，可以输入<code>gradle cleanIdea idea</code>。<code>cleanIdea</code>可以清除已有的Intellij项目文件。</p>

<p>Intellij项目文件主要有三种类型。</p>

<ul>
<li><p>.ipr Intellij工程文件</p></li>
<li><p>.iml Intellij 模块文件</p></li>
<li><p>.iws Intellij 工作区文件</p></li>
</ul>


<p>如果只简单的使用<code>gradle idea</code>生成Intellij的工程文件，其实在使用Intellij打开项目以后，我们还要做一些手工配置，比如指定JDK的版本，指定源代码管理工具等。Gradle的idea命令本质上就是生成这三个xml文件,所以Gradle提供了生成文件时的hook(钩子)，让我们可以方便的做定制化，实现最大程度的自动化。这就需要自定义idea这个任务了。</p>

<pre><code class="groovy">
idea.project {
     jdkName = '1.6'
     languageLevel = '1.6' 
}
</code></pre>

<p>这个用来配置项目的jdk及languageLevel。</p>

<p>如果要指定源代码管理工具类型，就需要调用hook修改生成的ipr文件。</p>

<pre><code class="groovy">
idea.project {

    ipr {
        withXml { provider -&gt;
            provider.node.component.find { it.@name == 'VcsDirectoryMappings' }.mapping.@vcs = 'Git'
        }
    }

}
</code></pre>

<p>通过这种方式可以最大限度的实现对Intellij项目文件的定制化。</p>
]]></content>
  </entry>
  
</feed>
