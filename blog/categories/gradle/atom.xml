<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Gradle | 黄博文的地盘]]></title>
  <link href="http://www.huangbowen.net/blog/categories/gradle/atom.xml" rel="self"/>
  <link href="http://www.huangbowen.net/"/>
  <updated>2013-12-10T17:10:59+08:00</updated>
  <id>http://www.huangbowen.net/</id>
  <author>
    <name><![CDATA[黄博文]]></name>
    <email><![CDATA[huangbowen521@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用Gradle运行集成测试]]></title>
    <link href="http://www.huangbowen.net/blog/2013/12/10/integration-test-in-gradle/"/>
    <updated>2013-12-10T13:17:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/12/10/integration-test-in-gradle</id>
    <content type="html"><![CDATA[<p>如果Gradle构建的项目是一个web项目的话，里面可能包含一些集成测试和功能性测试。这些测试和单元测试不同之处是在运行之前要先在本地将web服务启动起来，并且跑完测试后能够自动的关闭web服务。</p>

<!-- more -->


<p>在本地启动web服务我们可以使用Gradle内置的jetty插件。jetty是一个轻量级的web容器，其执行速度快，配置简单，远程调试方便。启用jetty只需在build.gradle中加入对这个插件的引用。</p>

<p>```groovy build.gradle</p>

<p>apply plugin: 'jetty'</p>

<p>```</p>

<p>之后可以配置war包的名称，启动的端口等属性。</p>

<p>```groovy build.gradle</p>

<p>apply plugin: 'jetty'</p>

<p>httpPort = 9876</p>

<p>[jettyRun, jettyRunWar, jettyStop]<em>.stopPort = 9966
[jettyRun, jettyRunWar, jettyStop]</em>.stopKey = 'stopKey'</p>

<p>```</p>

<p>我们需要将集成测试与一般的单元测试分开。因为单元测试并不需要事先启动web服务，保证其执行速度快，能够得到更快的反馈。一般做法是单元测试后缀名为Test.java，集成测试后缀名为IntegrationTest.java。</p>

<p>配置单元测试执行的测试集合。</p>

<p>```groovy build.gradle</p>

<p>test {</p>

<pre><code>include '**/*Test.class'
exclude '**/*IntegrationTest.class'
</code></pre>

<p>}</p>

<p>```</p>

<p>然后新建一个Task，用于运行集成测试。</p>

<p>```groovy build.gradle</p>

<p>task intTest(type: Test, dependsOn: test) {</p>

<pre><code>include '**/*IntegrationTest.class'

doFirst {

    jettyRun.daemon = true
    jettyRun.execute()

}

doLast {
    jettyStop.execute()
}
</code></pre>

<p>}</p>

<p>```</p>

<p>上述代码首先是创建一个名为intTest的task，其类型为Test,依赖于test task。该集成测试只会运行后缀名为IntegrationTest的测试类。在运行测试之前，首先采用后台模式启动jetty服务器，运行完测试后再调用jettyStop task停止jetty服务。</p>

<p>为了使我们在运行<code>gradle build</code>时也会运行intTest task，可以添加对intTest的依赖。</p>

<p>```groovy build.gradle</p>

<p>build.dependsOn intTest</p>

<p>```</p>

<p>这样在运行<code>gradle build</code>时也会运行集成测试。并且在集成测试前后web服务会自动的启动和关闭。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gradle中使用idea插件的一些实践]]></title>
    <link href="http://www.huangbowen.net/blog/2013/12/04/use-idea-plugin-in-gradle/"/>
    <updated>2013-12-04T22:19:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/12/04/use-idea-plugin-in-gradle</id>
    <content type="html"><![CDATA[<p>如果你的项目使用了Gradle作为构建工具，那么你一定要使用Gradle来自动生成IDE的项目文件，无需再手动的将源代码导入到你的IDE中去了。</p>

<!-- more -->


<p>如果你使用的是eclipse，可以在build.gradle中加入这么一行.</p>

<p>```groovy</p>

<p>apply plugin: 'eclipse'</p>

<p>```</p>

<p>然后在命令行中输入<code>gradle eclipse</code>就可以生成eclipse的项目文件，直接使用eclipse打开生成的项目文件即可。</p>

<p>当然作为Java程序开发者，最好使的IDE还是Intellij,昨天听闻Intellij 13已经发布了，增加了不少新功能，看来又要掏腰包了。如果要让Gradle自动生成Intellij的项目文件，需要使用idea插件。</p>

<p>```groovy</p>

<p>apply plugin: 'idea'</p>

<p>```</p>

<p>命令行下输入<code>gradle idea</code>，就会生成Intellij的项目文件，真是省时省力。如果在已经存在Intellij的项目文件情况下，想根据build.gradle中的配置来更新项目文件，可以输入<code>gradle cleanIdea idea</code>。<code>cleanIdea</code>可以清除已有的Intellij项目文件。</p>

<p>Intellij项目文件主要有三种类型。</p>

<ul>
<li><p>.ipr Intellij工程文件</p></li>
<li><p>.iml Intellij 模块文件</p></li>
<li><p>.iws Intellij 工作区文件</p></li>
</ul>


<p>如果只简单的使用<code>gradle idea</code>生成Intellij的工程文件，其实在使用Intellij打开项目以后，我们还要做一些手工配置，比如指定JDK的版本，指定源代码管理工具等。Gradle的idea命令本质上就是生成这三个xml文件,所以Gradle提供了生成文件时的hook(钩子)，让我们可以方便的做定制化，实现最大程度的自动化。这就需要自定义idea这个任务了。</p>

<p>```groovy</p>

<p>idea.project {</p>

<pre><code> jdkName = '1.6'
 languageLevel = '1.6' 
</code></pre>

<p>}</p>

<p>```</p>

<p>这个用来配置项目的jdk及languageLevel。</p>

<p>如果要指定源代码管理工具类型，就需要调用hook修改生成的ipr文件。</p>

<p>```groovy</p>

<p>idea.project {</p>

<pre><code>ipr {
    withXml { provider -&gt;
        provider.node.component.find { it.@name == 'VcsDirectoryMappings' }.mapping.@vcs = 'Git'
    }
}
</code></pre>

<p>}</p>

<p>```
通过这种方式可以最大限度的实现对Intellij项目文件的定制化。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gradle的属性设置大全]]></title>
    <link href="http://www.huangbowen.net/blog/2013/09/12/setup-properties-in-gradle/"/>
    <updated>2013-09-12T22:41:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/09/12/setup-properties-in-gradle</id>
    <content type="html"><![CDATA[<p>Gradle作为一款项目构建工具，由于其强大、灵活、快速、完全兼容Ant等特性，越来越受到人们欢迎。Gradle的灵活有时候也会引起人们的困惑。比如在Gradle中设置变量和属性就有N种办法。由于Gradle的理念是Convention over configruation(约定优于配置),所以如果了解了这些约定，那么在使用Gradle的属性配置时一定会如鱼得水。</p>

<!-- more -->


<hr />

<p><strong>在项目根目录下建立名为gradle.properties文件，在该文件中定义需要的属性。这些属性在Gradle构建Gradle领域对象（即project对象实例）时会被自动加到project对象实例中作为其属性被直接调用。</strong></p>

<p>```xml gradle.properties</p>

<p>guestName= Bowen</p>

<p>```</p>

<p>```groovy build.gradle</p>

<p>task hello &lt;&lt; {</p>

<pre><code> println $guestName
 println "hello, $guestName"
</code></pre>

<p>}</p>

<p>```</p>

<p>```bash</p>

<p>$ gradle hello -q
Bowen
hello, Bowen</p>

<p>$ gradle properties | grep guestName
guestName: Bowen</p>

<p>```</p>

<hr />

<p><strong>定义在build.gradle中的ext块中。ext准确的说是Gradle领域对象的一个属性，我们可以将自定义的属性添加到ext对象上，Build.gradle中的其它代码片段可以使用。</strong></p>

<p>```groovy build.gradle</p>

<p>ext {</p>

<pre><code> guestName='Bowen'
</code></pre>

<p>}</p>

<p>task hello &lt;&lt; {</p>

<pre><code> println guestName
 println "hello, $guestName"
</code></pre>

<p>}</p>

<p>```</p>

<p>```bash</p>

<p>$ gradle hello -q
Bowen
hello, Bowen</p>

<p>$ gradle properties | grep guestName
guestName: Bowen
$ gradle properties | grep ext
ext: org.gradle.api.internal.plugins.DefaultExtraPropertiesExtension@10ef5fa0</p>

<p>```</p>

<p>从上述可以看到ext对象其实是DefaultExtraPropertiesExtension对象的一个实例。</p>

<hr />

<p><strong>在命令行中通过<code>-D</code>或者<code>-P</code>给Gradle实时创建属性。</strong>
<code>-D</code>属性会被传送给启动Gradle的jvm，作为一个系统属性被jvm使用。</p>

<p>```groovy build.gradle</p>

<p>task hello &lt;&lt; {</p>

<pre><code> println System.properties['guestName']
</code></pre>

<p>}</p>

<p><code>
</code>bash</p>

<p>$ gradle hello -DguestName='Bowen' -q
Bowen</p>

<p>```</p>

<p><code>-P</code>属性则会被直接加载到Gradle领域对象上。</p>

<p>```groovy build.gradle</p>

<p>task hello &lt;&lt; {</p>

<pre><code>  println "hello, $guestName"
</code></pre>

<p>}</p>

<p><code>
</code>bash</p>

<p>$ gradle hello -PguestName='Bowen' -q
hello, Bowen</p>

<p>```</p>

<hr />

<p><strong>在Gradle配置文件中创建系统属性。刚讲过在gradle.properties文件可以创建属性，同时我们也可以创建系统属性。如果有<code>systemProp.</code>前缀的属性会被识别为系统属性。</strong></p>

<p>```xml gradle.properties</p>

<p>systemProp.guestName = 'Bowen'</p>

<p><code>
</code>groovy build.gradle</p>

<p>task hello &lt;&lt; {</p>

<pre><code>  println "hello, " + System.properties['guestName']
</code></pre>

<p>}</p>

<p>```</p>

<p>```bash</p>

<p>$ gradle hello -q
hello, Bowen</p>

<p>```</p>

<hr />

<p><strong>将特殊前缀的系统属性或环境变量自动加入到Gradle领域对象中。</strong></p>

<p>如果有环境变量以<code>ORG_GRADLE_PROJECT.</code>为前缀，那么该变量会被自动添加到Gradle领域对象中。同样，如果有系统属性以<code>org.gradle.project.</code>为前缀，那么也会被自动加入到Gradl领域对象中。这一特性的目的之一是为了隐藏一些敏感的信息。比如在执行Gradle脚本时需要传入密码信息，如果以<code>-P</code>的方式传送会被别人看到。而把该属性保存为环境变量，只有系统管理员才有权访问和修改。在运行Gralde的时候该环境变量会被自动加入到Gradle对象中被使用，隔离了明暗数据，又不行影响其他用户使用。（其他用户可以通过<code>-P</code>方式是设置该属性）。</p>

<p>```groovy build.gradle</p>

<p>task hello &lt;&lt; {</p>

<pre><code>  println "hello, " + guestName 
</code></pre>

<p>}</p>

<p>```</p>

<p>```bash</p>

<p>$ gradle hello -Dorg.gradle.project.guestName=Bowen -q
hello, Bowen</p>

<p>$ export ORG_GRADLE_PROJECT_guestName=Bob
$ gradle hello -q
hello, Bob</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gradle里配置jetty实现静态资源的热部署]]></title>
    <link href="http://www.huangbowen.net/blog/2013/09/04/hot-deploy-for-jetty-gradle-plugin/"/>
    <updated>2013-09-04T22:32:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/09/04/hot-deploy-for-jetty-gradle-plugin</id>
    <content type="html"><![CDATA[<p>通过Gradle我们可以很方便的使用内置jetty启动我们的web程序，在本地进行调试。但是在使用的过程中，我发现了几个问题，导致本地调试的效率大受影响。</p>

<!-- more -->


<ol>
<li><p>如果使用<code>gradle jettyRun</code>启动jetty服务器后，项目里的静态资源（jsp，html，JavaScript文件）都被锁定了，导致无法实时修改这些静态资源。</p></li>
<li><p>既然无法实时修改这些静态资源，那意味着我们做一个很小的改动都需要先停止jetty server，然后修改，再重新启动jetty server，这样来回浪费很多时间，尤其是涉及前台页面改动时，每调整一个参数都需要重启jetty。</p></li>
</ol>


<p>由于我以前使用过Maven，在Maven里jetty是可以显示热部署的。也就是说如果有静态文件被改动，那么jetty可以实时load并展现。那么在Gradle里面实现这个应该也不是难事，花了一些时间搞定了。</p>

<ul>
<li><strong>首先要解决文件被锁定的问题。</strong></li>
</ul>


<p>文件被锁定是由于在使用windows系统时，jetty默认在内存中映射了这些文件，而windows会锁定内存映射的文件。解决的办法就是修改jetty的配置，让其在启动server时将useFileMappedBuffer标志位设置为false。</p>

<p>设置方法有两种，一种是修改webdefault.xml文件中的useFileMappdBuffer标志位。webdefault.xml文件是jetty启动服务的配置文件，其先于项目中的WEB-INF/web.xml文件被加载。
jetty包中默认有这个文件，可以将其提取出来，保存在项目根目录下，并修改useFileMappedBuffer节点。</p>

<p>```xml</p>

<p><param-name>useFileMappedBuffer</param-name>
<param-value>false</param-value></p>

<p>```</p>

<p>然后在build.gradle加入对此文件的引用。</p>

<p>```groovy</p>

<p>[jettyRun, jettyRunWar,jettyStop]*.with {</p>

<pre><code>webDefaultXml = file("${rootDir}/webdefault.xml") 
</code></pre>

<p>}</p>

<p>```</p>

<p>第二种方法是修改项目中的<code>WEB-INF/web.xml</code>文件，在其中加入这个节点。</p>

<p>```xml</p>

<p><servlet></p>

<pre><code>&lt;!-- Override init parameter to avoid nasty --&gt;
&lt;!-- file locking issue on windows.         --&gt; 
&lt;servlet-name&gt;default&lt;/servlet-name&gt; 
    &lt;init-param&gt;    
        &lt;param-name&gt;useFileMappedBuffer&lt;/param-name&gt;  
        &lt;param-value&gt;false&lt;/param-value&gt; 
    &lt;/init-param&gt; 
</code></pre>

<p></servlet></p>

<p>```</p>

<ul>
<li><strong>解决jetty的hot deploy的问题。</strong></li>
</ul>


<p>这个就比较简单了，Gradle的jetty插件有两个属性，一个是reload属性，需要设置为automatic。另一个属性是
scanIntervalSeconds，这是指定jetty扫描文件改变的时间间隔，默认为0，单位是秒。
在build.gradle中加入设置。</p>

<p>```groovy</p>

<p>jettyRun {</p>

<pre><code>reload ="automatic"    
scanIntervalSeconds = 1 
</code></pre>

<p>}</p>

<p>```</p>

<p>齐活。接下来运行<code>gradle jettyRun</code>，待服务启动起来以后，如果修改了静态资源，只需要按<code>Ctrl</code>+<code>R</code>刷新页面即可重新加载资源。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gradle命令行黑魔法]]></title>
    <link href="http://www.huangbowen.net/blog/2013/09/01/command-line-of-gradle/"/>
    <updated>2013-09-01T22:25:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/09/01/command-line-of-gradle</id>
    <content type="html"><![CDATA[<p><img src="/images/building.jpg"></p>

<p>毫无疑问，现在Gradle已经成为java世界最火的构建工具，风头已经盖过了冗余的ant，落后的maven。Gradle是以Groovy语言编写的一套构建脚本的DSL，由于Groovy语法的优雅，所以导致Gradle天生就有简洁、可读性强、灵活等特性。</p>

<p>Gradle的命令行功能也非常强大。本人从maven转到Gradle，深深被gradle强大的命令行功能折服。通过命令行来实现Gradle的各种特性，就像魔法师在表演魔法一样。</p>

<!-- more -->


<ul>
<li><strong>日志输出。</strong> Gradle中的日志有6个层级。从高到低分别是 ERROR（错误信息）、QUIET（重要信息）、WARNGING（警告信息）、LIFECYCLE（进程信息）、INFO（一般信息）、DEBUG（调试信息）。在执行gradle task时可以适时的调整信息输出等级，以便更方便的观看执行结果。</li>
</ul>


<p><code>-q</code>(或<code>--quiet</code>)是启用重要信息级别，该级别下只会输出自己在命令行下打印的信息及错误信息。</p>

<p><code>-i</code>(或<code>--info</code>)则会输出除debug以外的所有信息。</p>

<p><code>-d</code>（或<code>--debug</code>)会输出所有日志信息。</p>

<p>比如一个build.gradle有这样一个task。</p>

<p>```groovy</p>

<p>task hello &lt;&lt; {</p>

<pre><code> println 'hello world!'
</code></pre>

<p>}</p>

<p>```</p>

<p>加入<code>-q</code>与不加<code>-q</code>的输出结果不同。</p>

<p>```bash</p>

<p>$ gradle hello
:hello
hello world!</p>

<p>BUILD SUCCESSFUL</p>

<p>Total time: 3.546 secs
$ gradle -q hello
hello world!</p>

<p>```</p>

<ul>
<li><p><strong>堆栈跟踪。</strong>如果执行gradle task失败时，如果想得到更详细的错误信息，那么就可以使用<code>-s</code>(或<code>--stacktrace</code>)来输出详细的错误堆栈。你还可以使用<code>-S</code>(或<code>--full-stacktrace</code>)来输出全部堆栈信息，不过一般不推荐这样做，因为gradle是基于groovy语言，而groovy作为一门动态语言可能会输出与你的错误代码毫不相关的信息。</p></li>
<li><p><strong>跳过指定的测试。</strong>如果你在执行build的时候想跳过test task，那么可以使用<code>-x</code>命令。</p></li>
</ul>


<p>```bash</p>

<p>$ gradle build -x test
:compileJava UP-TO-DATE
:processResources UP-TO-DATE
:classes UP-TO-DATE
:jar UP-TO-DATE
:assemble UP-TO-DATE
:check
:build</p>

<p>BUILD SUCCESSFUL</p>

<p>Total time: 3.529 secs</p>

<p>```</p>

<ul>
<li><p><strong>继续执行task而忽略前面失败的task。</strong>默认情况下，如果有某个task失败，后续的task就不会继续执行。但是有时候我们想运行所有的task来一次性得到所有的构建错误，那么我们可以使用<code>--continue</code>命令。使用<code>--continue</code>命令后即使遇到某些task失败也不会停止后续task的执行。但是需要注意的是如果某个task失败了，那么依赖于这个task的其他task依旧不会执行，因为这会带来不安全的因素。</p></li>
<li><p><strong>调用task时使用短名或缩写。</strong>如果一个task的名称过长，那么调用时可以只输入部分名称即可调用，无需输入全名。</p></li>
</ul>


<p>```groovy</p>

<p>task helloWorld &lt;&lt; {</p>

<pre><code> println 'hello world!'
</code></pre>

<p>}</p>

<p>```</p>

<p>比如调用helloWorld可以通过全名调用、前缀调用或首字母调用。</p>

<p><code>bash
$ gradle -q helloWorld
hello world!
$ gradle -q hell
hello world!
$ gradle -q hW
hello world!
</code></p>

<ul>
<li><strong>使用指定的gradle文件调用task。</strong>默认情况下，如果你调用gradle task，那么首先会寻找当前目录下的build.gradle文件,以及根据settings.gradle中的配置寻找子项目的build.gradle。但是有时候我们想指定使用某个gradle文件，那么可以使用<code>-b</code>命令。
比如当前目录有个子目录subproject1,里面有个叫hello.gradle。</li>
</ul>


<p>```groovy subproject1/hello.gradle</p>

<p>task helloWorld &lt;&lt; {</p>

<pre><code> println 'hello world!'
</code></pre>

<p>}</p>

<p>```</p>

<p>那么在当前目录可以使用以下命令调用这个task。</p>

<p>```bash
$ gradle -b subproject1/hello.gradle  helloWorld
:helloWorld
hello world!</p>

<p>BUILD SUCCESSFUL</p>

<p>Total time: 3.752 secs</p>

<p>```</p>

<ul>
<li><strong>使用指定的项目目录调用task。</strong>前面已经说过，执行gradle的task默认会在当前目录寻找build.gradle及settings.gradle文件。如果我们想在任何地方执行某个项目的task，那么可以使用<code>-p</code>来指定使用的项目。</li>
</ul>


<p>```groovy</p>

<p>gradle -q -p learnGradle helloWorld</p>

<p>```</p>

<p>这条命令是调用learnGradle这个项目下的helloWorld task。</p>

<ul>
<li><strong>显示task之间的依赖关系。</strong>众所周知，使用<code>gradle tasks</code>可以列出当前所有可被使用的task，但是并没有显示task之间的依赖关系。我们可以加上<code>--all</code>来显示
task的依赖关系。</li>
</ul>


<p>```bash</p>

<p>$ gradle tasks --all
………………</p>

<h2>Other tasks</h2>

<p>task0</p>

<pre><code>task1
task2
task3
</code></pre>

<p>…………</p>

<p>```</p>

<pre><code>从上面可以看出task0依赖task1、task2及task3。
</code></pre>

<ul>
<li><strong>查看指定阶段的依赖关系。</strong>使用<code>gradle dependencies</code> 可以查看项目中包的依赖关系。不过是列出了所有阶段的依赖，如果项目中依赖复杂的话看起来有点头痛。那么可以使用<code>--configuration</code>来查看指定阶段的依赖情况。</li>
</ul>


<p>```groovy</p>

<p>$ gradle -q dependencies</p>

<hr />

<h2>Root project</h2>

<p>archives - Configuration for archive artifacts.
No dependencies</p>

<p>compile - Compile classpath for source set 'main'.
No dependencies</p>

<p>default - Configuration for default artifacts.
No dependencies</p>

<p>runtime - Runtime classpath for source set 'main'.
No dependencies</p>

<p>testCompile - Compile classpath for source set 'test'.
--- junit:junit:4.11</p>

<pre><code> \--- org.hamcrest:hamcrest-core:1.3
</code></pre>

<p>testRuntime - Runtime classpath for source set 'test'.
--- junit:junit:4.11</p>

<pre><code> \--- org.hamcrest:hamcrest-core:1.3
</code></pre>

<p>```</p>

<p>使用<code>gradle -q dependencies --configuration testCompile</code>可以只查看testComiple的依赖。</p>

<p>```
$ gradle -q dependencies --configuration testCompile</p>

<hr />

<h2>Root project</h2>

<p>testCompile - Compile classpath for source set 'test'.
--- junit:junit:4.11</p>

<pre><code> \--- org.hamcrest:hamcrest-core:1.3
</code></pre>

<p>```</p>

<ul>
<li><strong>查看指定dependency的依赖情况。</strong>
假如我想查看项目中有没有引入junit，那些阶段引入了junit，那么可以使用<code>dependecyInsight</code>来查看。</li>
</ul>


<p>```bash</p>

<p>$ gradle dependencyInsight --dependency junit --configuration testCompile
:dependencyInsight
junit:junit:4.11
--- testCompile</p>

<p>```</p>

<p>注意<code>dependencyInsight</code>默认只会查看compile阶段的依赖，如果要查看其他阶段可以使用<code>--configuration</code>来指定。</p>

<ul>
<li><strong>使用<code>--profile</code>命令行可以产生build运行时间的报告。</strong>该报告存储在build/report/profile目录，名称为build运行的时间。</li>
</ul>


<p>```bash
$ gradle build --profile
:compileJava UP-TO-DATE
:processResources UP-TO-DATE
:classes UP-TO-DATE
:jar UP-TO-DATE
:assemble UP-TO-DATE
:compileTestJava UP-TO-DATE
:processTestResources UP-TO-DATE
:testClasses UP-TO-DATE
:test UP-TO-DATE
:check UP-TO-DATE
:build UP-TO-DATE</p>

<p>BUILD SUCCESSFUL</p>

<p>Total time: 3.726 secs</p>

<p>```</p>

<p>然后在build/report/profile目录下可以看到build的report。</p>

<p><img src="/images/gradle_profile.png" width="600"></p>

<p>这个报表非常有用，尤其是在在缩短build时间时可以快速定位那些耗时长的task。</p>

<ul>
<li><strong>试运行build。</strong>如果你想知道某个task执行时那些task会被一起执行，但是你又不想真正的执行这些task，可以使用<code>-m</code>来试运行。</li>
</ul>


<p>```bash</p>

<p>$ gradle -m build
:compileJava SKIPPED
:processResources SKIPPED
:classes SKIPPED
:jar SKIPPED
:assemble SKIPPED
:compileTestJava SKIPPED
:processTestResources SKIPPED
:testClasses SKIPPED
:test SKIPPED
:check SKIPPED
:build SKIPPED</p>

<p>BUILD SUCCESSFUL</p>

<p>Total time: 3.53 secs</p>

<p>```</p>

<p>这样我们可以一目了然的看到那些task被执行了，又不需要花太多的时间。</p>

<ul>
<li><strong>Gradle的图形界面。</strong></li>
</ul>


<p>其实Gradle自带一个图形界面来让习惯gui操作的人来操作Gradle。打开方式很简单。</p>

<p>```bash</p>

<p>$ gradle --gui</p>

<p>```</p>

<p>这样就会弹出一个gui界面。</p>

<p><img src="/images/gradle_gui.png" width="600"></p>

<p>通过这个gui界面可以很方面的执行gradle的各种命令，还可以将常用的命令保存为favorites。该gui的配置信息默认被存储在当前项目的gradle-app.setting文件中。</p>

<p>注意使用<code>gradle --gui</code>会阻塞当前终端，可以使用<code>gradle --gui&amp;</code>来实现后台运行。</p>

<ul>
<li><strong>重新编译Gradle脚本。</strong>第一次运行Gradle命令，会在项目更目录下生成一个.gradle目录来存放编译后的脚本。只有当构建脚本发生修改时采用重新编译。我们可以使用<code>--recompile-scripts</code>来强行重新编译。</li>
</ul>

]]></content>
  </entry>
  
</feed>
