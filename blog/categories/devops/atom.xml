<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: DevOps | 黄博文的地盘]]></title>
  <link href="http://www.huangbowen.net/blog/categories/devops/atom.xml" rel="self"/>
  <link href="http://www.huangbowen.net/"/>
  <updated>2016-03-08T23:18:34+05:30</updated>
  <id>http://www.huangbowen.net/</id>
  <author>
    <name><![CDATA[黄博文]]></name>
    <email><![CDATA[huangbowen521@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[翻译-Salt与Ansible全方位比较]]></title>
    <link href="http://www.huangbowen.net/blog/2015/07/21/salt-vs-ansiable/"/>
    <updated>2015-07-21T12:45:47+05:30</updated>
    <id>http://www.huangbowen.net/blog/2015/07/21/salt-vs-ansiable</id>
    <content type="html"><![CDATA[<p>原文链接：<a href="http://jensrantil.github.io/salt-vs-ansible.html">http://jensrantil.github.io/salt-vs-ansible.html</a></p>

<p>作者： Jens Rantil</p>

<p>之前某些时候我需要评估配置管理系统。结合从他人得到的意见，我认为<a href="https://puppetlabs.com/">Puppet</a>及<a href="http://www.getchef.com/">Chef</a>在配置和运行方面过于复杂。由于我是Python粉，所以我时常关注<a href="http://www.ansible.com/home">Ansible</a>及<a href="http://www.saltstack.com/">Salt</a>。Ruby目前不是我感冒的语言，当然我也不想在这里引起语言之争。</p>

<!-- more -->


<p>去年我花了6个月美好的时光用Ansible来配置服务器。从而对这个工具变得很熟悉。在那个项目中Ansible可以说是最佳选择，因为它易于使用，还有完整的文档。我所工作的团队尽量遵循文档中指示的<a href="http://docs.ansible.com/ansible/playbooks_best_practices.html">最佳实践</a>，从而使我们快速上手，而且我们可以借鉴已经被验证过可以工作的结构。</p>

<p>几周前我去日本开始为期10天的休假，在一个完全没人认识我的地方，我有充足的时间来阅读一些电脑杂志和文档。享受了美味的寿司，观赏了东京美景，玩耍了滑雪之余，我发现阅读<a href="https://media.readthedocs.org/pdf/salt/latest/salt.pdf">Salt PDF文档</a>是一个很棒的休闲。</p>

<p>当然我花了一些时间来试用Salt并使用了<a href="http://docs.saltstack.com/en/latest/topics/tutorials/starting_states.html">States</a>系统。现在我认为我对两个系统有了一个粗略的背景，我义无返顾的进行了一个具有个人色彩的测评。</p>

<h2>术语</h2>

<p>Salt及Ansible创建之初都被作为执行引擎。即，它们都可以在一台或多台远程系统中执行命令，并且可以并行执行。</p>

<p>Ansible支持在多个机器上执行任意的命令行命令。它也支持执行模块。一个<a href="http://docs.ansible.com/ansible/modules.html">Ansible模块</a>基本上是以对Ansible友好的方式编写的Python模块。大多数标准的Ansible模块是幂等的。这意味着你只需告诉你的系统想要的状态，那么该模块就会尝试将你的系统调整为该状态。</p>

<p>Unusable也有<a href="http://docs.ansible.com/ansible/playbooks.html">Playbook</a>的概念。一个playbook是为一组主机定义了一系列模块执行顺序的文件。playbook可通过执行模块来改变主机准柜台。这使得我们可以精准控制多台机器，比如在升级一个应用程序之前把机器从负载均衡器中剔除出去。</p>

<p>Salt有两种模块：<a href="http://docs.saltstack.com/en/latest/ref/modules/all/index.html">执行模块</a>和<a href="http://docs.saltstack.com/en/latest/ref/states/all/index.html">状态模块</a>。执行模块可以简单的执行一些命令，比如执行命令行命令，或者下载一个文件。状态模块与Ansible模块更相似，通过参数定义一个状态，而模块则尝试满足该最终状态。通常状态模块调用执行模块来完成工作。</p>

<p>状态模块执行时使用state执行模块。状态模块支持通过文件定义状态，该文件被称为SLS文件。而状态与主机的映射关系被定义在<a href="http://docs.saltstack.com/en/latest/ref/states/top.html">top.sls</a>文件中。</p>

<p>playbook及SLS文件（通常）都是使用YAML格式。</p>

<p>另外，我想指出当任务需要使用inventory,或者需要在多台机器上运行时，使用远程执行引擎是非常有用的。</p>

<h2>架构</h2>

<p>Salt有一个Salt master，而很多Salt minon在初始化时会连接到该master上。通常，命令起始于master的命令行中。master然后将命令分发到minion上。初始化时，minion会交换一个秘钥建立握手，然后建立一个持久的加密的TCP连接。我可以喋喋不休的阐述Salt如何借助<a href="http://zeromq.org/">ZeroMQ</a>库来通讯，但简短的来说，Salt master可以同时连接很多minion而无需担心过载，这归功于ZeroMQ。</p>

<p>由于minion和Salt master之间建立了持久化连接，所以Salt master上的命令能很快的到达minion上。minion也可以缓存多种数据，以便加速执行。</p>

<p>Ansible无需master，它使用SSH作为主要的通讯层。这意味着它比较慢，但无需master意味着它在设置及测试Ansible playbook上更加容易。有人也声称它更安全，因为它不需要额外的服务器程序。你可以在“安全”章节获取更多信息。</p>

<p>Ansible也有支持ZeroMQ的版本，但需要一个初始的SSH连接来设置。我尝试了这个，但说实话我并没感到速度有所提升。我猜如果playbook更大，主机更多时才会感受到速度的提升。</p>

<p>Ansible推荐使用inventory文件来追踪机器。inentory文件基本上包含了一组主机，可以对其分类为组，可以对一组主机或单个主机指定属性。你可以建立多个inventory文件，比如一个作为阶段环境，另一个作为产品环境。</p>

<p>Salt也支持使用SSH替代ZeroMQ，即<a href="http://docs.saltstack.com/en/latest/topics/ssh/">Salt SSH</a>。但请注意目前还是试用版本（而且我还没尝试用过）</p>

<h2>社区</h2>

<p>对于这两个项目我都有使用IRC及邮件列表的经历。我也给它们发过补丁包，包括Python代码及一些文档修正。以下是我的经历的总结：</p>

<p>Ansible：IRC上反馈非常快，并且很友好。但该项目貌似缺少社区影响，更像是一个人在领导，即Michael DeHaan。抱歉我这样说，其实我很喜欢社区，因为对于改进更加开放和友好。Ansible一些改进问题还未修复就关闭了，让我感觉它把问题隐藏了起来。好在所有的问题都有回答。</p>

<p>Salt需要继续证明其欢迎社区贡献。IRC反馈已经变得及时和友好。有时我需要借助于邮件列表。我有一些邮件，直到4天以后才得到响应，但看起来每个邮件最终都会有跟进。</p>

<p>我的印象是Salt有更成熟的社区，更欢迎协作。我说这句话时可能会得罪很多人，当然这是我个人观点！</p>

<h2>速度</h2>

<p>如果你以为你的服务器比较少，速度无所谓时，我相信你是错的。能够快速迭代永远是非常重要的。长期来说，配置缓慢会拖慢你的整个节奏。如果有些东西需要花费30秒以上来编译，我会在编译时去玩Twitter，而这意味着该编译会其实会花掉至少120秒。部署时也会这样。</p>

<p>Ansible始终使用SSH来初始化连接。这很慢。也许Ansible的ZeroMQ实现（之前提到过）会改善这点，但初始化依然会很慢。Salt默认使用ZeroMQ，所以很快。</p>

<p>之前说过，Salt拥有持久的minion进程。这使得Salt可以缓存文件，从而加速执行。</p>

<h2>代码结构</h2>

<p>我最不能忍受的是Ansible模块不能被导入（因为<a href="https://github.com/JensRantil/ansible/blob/devel/library/files/copy#L189">导入就会执行代码</a>）。这意味着测试模块时会引入一些魔法。因为你无法导入任何一个模块。我不喜欢魔法，而喜欢纯粹简单的代码。这更像Salt的风格。</p>

<p>少用魔法意味着给Salt模块写测试更清晰。Salt完全可测。我很高兴Salt关于<a href="http://docs.saltstack.com/en/latest/topics/development/tests/unit.html">测试</a>有三个章节，包括鼓励你mock一些你不具备的基础设施来增加可测性，比如mock一个MySQL实例。</p>

<p>以上说明Ansible通常拥有简洁干净的代码。我在其中可以快速跳转。然而，<a href="https://groups.google.com/forum/#!msg/ansible-project/mpRFULSiIQw/jIIQdOSubnUJ">提升代码结构</a>不是“Ansiable社区”的关注点。</p>

<p>Ansible和Salt都可以通过<a href="https://pypi.python.org/pypi/salt">PyPi</a>来安装。</p>

<h2>Vagrant支持</h2>

<p>当讨论测试时，DevOps人喜欢Vagrant。直到现在我还没用过它。Vagrant可以使用Slat和Ansible提供的模块来初始化机器。这意味着在初始化机器时，Vagrant可以轻而易举的使用master+minion模式，或者执行一个playbook。</p>

<h2>任务编排</h2>

<p>Ansible和Salt都支持编排，我认为Ansible中编排规则更容易理解和使用。基本上，playbook可以分割为多个任务组，每组匹配一组主机（或主机组）。每组按顺序来依次执行。这与任务的执行顺序相同。</p>

<p>Salt支持<a href="http://docs.saltstack.com/en/latest/topics/event/index.html">事件</a>和<a href="http://docs.saltstack.com/en/latest/topics/reactor/">反应器</a>。这意味Salt执行可能会触发另一个机器上的东西。Salt的执行引擎也支持监控。所以未来这块前景比较广阔。你可以使用<a href="http://docs.saltstack.com/en/latest/ref/states/overstate.html">Overstate</a>在集群中以特定顺序设置多种角色来实现基础编排。</p>

<p>Ansible比Salt在编排方面更好，因为它简单。Salt将来会更好，因为在集群变化中它更具持续反应性。</p>

<p>Salt及Ansible都支持通过机器窗口执行任务。这对于保证服务始终可用（比如升级时）是非常有用的。</p>

<h2>安全</h2>

<p>Ansible使用SSH来传输数据。SSH是经历过考验的协议。一旦SSH服务器被正确配置（使用一个良好的随机数生成器），我相信大多数人会认为SSH客户端是安全的。</p>

<p>Ansible也可以轻松的建立多个非root用户与单个主机的连接。如果你非常反对有进程以root权限运行，那么你可以考虑使用Ansible。Ansible支持使用sudo来以root方式执行模块。所以你可以无需使用root来建立SSH连接。</p>

<p>Salt使用“自己”的AES实现及key管理。我想指出这里的“自己”其实是使用<a href="https://www.dlitz.net/software/pycrypto/">PyCrypto</a>包。Salt<a href="http://www.cvedetails.com/vulnerability-list/vendor_id-12943/product_id-26420/version_id-155046/Saltstack-Salt-0.17.0.html">以前</a>有安全问题，但同时我认为Salt架构很简单，所以安全问题可以轻松的维护。</p>

<p>有点需要指出，Salt运行master及minion时默认以root方式。这个配置可以改，但显而易见会导致一些新问题，比如非root模式下很难安装Debian包。在master上你可以配置salt命令为非root模式。我极力推荐这样做。</p>

<h2>敏感数据</h2>

<p>所有敏感数据应当单独存放，然后在需要时存放在配置机器上。如果配置机器是系统管理员的机器（现在通常是笔记本电脑），那么会有数据被盗用的风险。</p>

<p>经过深入的长时间思考后，我认为认证master方式是更好的选择。这意味着敏感数据可以强制存放在一个受保护的地方（当然需要加密的备份）。Salt可以把安全证书存放在”Pillar”里。当然，破解master会是个毁灭性打击，但是同时我们只需要安全保护一台机器。不是所有的开发者电脑都是安全的，尤其在火车上或飞机场时。</p>

<p>显然，Ansible用户可以选择始终通过一个绝对安全的存放敏感数据的电脑上执行playbook。但人们通常会这样做吗？</p>

<h2>审计能力</h2>

<p>当讨论安全时我认为审计是相当重要的。Salt在这方面比Ansible做的要好。Salt的每次执行都会在master上<a href="http://docs.saltstack.com/en/latest/topics/jobs/index.html">存放</a>X天。这样我们更容易调试，也容易发现可疑的事情。</p>

<h2>部署</h2>

<p>Ansible显然更容易些。因为它无需部署。当然，Salt支持SSH，但文档中大多数情况下假设我们使用ZeroMQ的方式。当然，SSH要慢些。</p>

<p>初始化minion的好处是这些minion都会连接到master。这使得我们可以快速初始化很多新机器。如果你想使用类似于亚马逊的自动化弹性扩展功能时，minion-连接架构很有用。每一个自动化弹性扩展的机器将自动变为一个minion。</p>

<p>Salt <a href="https://github.com/saltstack/salt-bootstrap">初始化脚本</a>非常好用，而且执行很快。可以处理不多种分发，文档也很<a href="http://salt.readthedocs.org/en/latest/topics/tutorials/salt_bootstrap.html">丰富</a>。</p>

<h2>学习曲线</h2>

<p>Ansible这方面更好。Ansible更容易学习及提高。因为我们只需拷贝一份Ansible GIT代码库，然后设置一些环境变量就可以执行playbook了。</p>

<p>Salt可以以<a href="http://docs.saltstack.com/en/latest/topics/tutorials/quickstart.html">非master模式</a>运行。这样可以更容易设置和运行salt。然而，对于产品环境（以及阶段环境）我推荐使用master模式来运行Salt。</p>

<p>通体来说，Salt功能更花哨，代价是学习曲线陡峭。Salt<a href="http://docs.saltstack.com/en/latest/topics/development/modular_systems.html">更加模块化</a>。这易于组织代码结构，但是完全精通Salt需要更多学习。</p>

<h2>升级</h2>

<p>升级Salt取决于当时是如何安装Salt的。基于Debian的分发的话，有一个apt代码库来存放最新的Debian包。所以升级的话可以使用apt-getupgrade。对于Ubuntu机器，有PPA。这些代码库的维护很活跃。最新发布的2014.1.0版本一周内（时间有点长）就有了Debian/Ubuntu包。</p>

<p>升级Ansible更简单。你只需简单执行git fetch &amp;&amp; git checkout <tag>即可。</p>

<h2>文档</h2>

<p>两个项目都有详尽的文档供你设置和运行，以及开发模块及配置。过去Ansible比Salt有更好的文档结构。最近Salt花了<a href="https://github.com/saltstack/salt/issues/10526">大力气</a>来重整文档。我也贡献了自己的力量来帮助完善这些文档。</p>

<h2>结语</h2>

<p>对于我来说，Ansible是个极好的工具来自动化服务器配置及自动化部署。设置Ansible并运行起来很简单，而且文档也很丰富。</p>

<p>进一步说，Salt具有可伸缩性，速度快，架构合理。我发现Salt的结构更适合云端部署。将来我会毫不犹豫的使用Salt。</p>

<p>总的来说，你在做出选择之前最好在你的项目中都试用下它们。反正配置及测试Ansible及Salt都非常快。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[翻译-DevOps究竟是什么？]]></title>
    <link href="http://www.huangbowen.net/blog/2014/10/03/what-exactly-is-devops/"/>
    <updated>2014-10-03T19:04:43+05:30</updated>
    <id>http://www.huangbowen.net/blog/2014/10/03/what-exactly-is-devops</id>
    <content type="html"><![CDATA[<p>原文地址:<a href="http://www.drdobbs.com/architecture-and-design/what-exactly-is-devops/240009147">http://www.drdobbs.com/architecture-and-design/what-exactly-is-devops/240009147</a>
作者:Neil Garnichaud</p>

<p>软件开发目前的最新趋势是DevOps文化，即开发人员和运营人员一起确保软件以最低的故障率运行。</p>

<!-- more -->


<p>很多组织发现他们面临这样的挑战，即随着云的Web应用程序的发展，要求快速发布以便及时响应来自用户社区的问题或请求。及时响应用户需求是每个软件开发团队的目标，但是会给组织内的功能团队造成压力。压力往往导致更多的缺陷和对团队持续性的打断。DevOps通过构建一种开发和运营（这就是DevOps名字的由来）之间的关系来试图解决该问题。在该结构中，开发团队支持运营需求，比如部署脚本，异常诊断，以及从周期最开始就进行的负载和性能测试；而运营团队在软件部署前，部署时及部署后向开发团队提供知识支持和及时的反馈。</p>

<p>DevOps是很多软件开发团队正在前进的方向。他们之前忍受着组织给予的压力，即在QA缺少时间测试的情况下还要生产高质量的代码。而DevOps是一个新的环境，如果开发人员想要成功，就不得不有所调整。在截止期限的压缩，分为开发，QA，产品的故事墙成为了敏捷的阻碍。DevOps试图打破这个墙。现在，团队协作能力变得与技术能力一样重要。因此，单一关注最终用户的体验，来看其是如何影响业务的。DevOps并不是新的工具或组织，而是新的文化和流程。它是开发，QA以及运营相互工作来加快开发和解决问题。</p>

<h2>为什么开发人员需要DevOps</h2>

<p>DevOps对于开发人员来说是好事。开发人员想工作于DevOps为导向的组织中，有三个主要的原因：</p>

<ul>
<li><p>更好的生活质量。DevOps模式的开发人员很少会在半夜接到电话要求解决产品问题。这是因为问题在产生灾难性之前已经被发现，主动监控比被动警告要好的多。</p></li>
<li><p>引以为豪的所有权。传统的软件流程中，一旦软件被部署，就被“甩手扔给了”QA，然后甩手扔到了产品环境。所以最终用户看到的可能与开发人员编写的完全不同。但在DevOps模式下，编写的即是发布的，因为开发人员在代码被交给QA甚至到产品环境后，仍可以继续查看和访问代码。换句话说，开发人员拥有从创建到实现的整个交付过程的代码所有权。</p></li>
<li><p>更多相关的工作。开发人员和大多数人类一样，在真实世界中相关的工作中更容易得到满足感。因为在传统组织中的开发人员是孤立的，他们经常虚构用户场景来模拟问题。当出问题的时候他们只能尽量模拟接近这个问题。在DevOps模式中，场景是真实的。环境是经过负载测试的，比如，在软件被放入产品环境之前会测试是否能正确工作。另一个例子是测试脚本本身可以测试产品你环境，而不仅仅是模拟环境。将测试结果分享给开发人员，给予了开发人员查看在真实条件下他们编写的代码的性能的机会。</p></li>
</ul>


<h2>已经实现DevOps意味着什么</h2>

<p>可能你的组织已经采用了DevOps模型。有三个问题可以让你清楚的了解DevOps的实行情况：</p>

<ul>
<li><p>你作为一个开发人员，能够实时获取故障信息吗？</p></li>
<li><p>产品环境中是否使用了开发团队的测试及其它工具来验证产品环境是否能正常工作？</p></li>
<li><p>作为开发人员，你是否视网络团队为你的合作伙伴？</p></li>
</ul>


<p>如果这些回答都是“否”，那么你并未真正实现DevOps。有一些建议可以改进该情况。先从工具说起。DevOps是文化和流程高于组织，工具可以帮助执行最佳实践。特别是跨团队共享故障信息。这要求在软件中添加更多的检测信息以便查看软件在QA及产品环境中的执行情况，而不仅仅是开发环境中。这些代码会捕获错误，检查系统参数，报告功能超时，以及返回程序执行期间的其它值，并将其写入到日志文件中。</p>

<p>在孤立的环境中，一旦代码被发布到产品环境中，开发人员往往不能再查看这些日志文件。在DevOps世界中，开发人员可以查看任意环境中的日志文件，不管是开发环境，QA环境还是产品环境。这样不仅可以快速修复缺陷，也可以避免同样的缺陷出现在将来的发布中。这使得开发自身对业务能更快速，更具响应性，把敏捷质量引入到敏捷开发中。</p>

<h2>打破旧习惯</h2>

<p>DevOps也要求打破旧习惯。比如自然倾向是软件bug数量作为衡量质量的方式。但修复单个bug并不意味着能更快的创建无bug的软件。更好的衡量方式是处理bug的流程。换句话说，整个流程中是那个环节引入这个bug的？例如，是因为开发人员本地的构建环境与QA环境或产品环境不一致？或者是代码行为之所以在不同环境中表现不一致是因为某些环境中无法显示某些东西？</p>

<p>除非代码版本是跨环境紧密同步的，而且这些环境也是紧密同步的，否则很难搞清楚一个问题到底是个逻辑问题还是数据问题，抑或环境问题，或者其它问题。而工具能够保证其一致性。即工具能自动的将同样的代码一次性部署到多个环境中。</p>

<h2>合作伙伴或谴责者？</h2>

<p>开发人员需要做的最大改变可能就是与其他团队成员要有日常互动。开发人员是是主动解决软件问题（比如通过日常监控操作日志），还是等待问题报告给他们？当有问题时，又是如何被解决的？团队成员是合作伙伴还是谴责者？</p>

<p>很多都取决于领导力。不管管理团队如何说教DevOps愿景，请以身作则，提供必要的培训和支持，奖励开发人员的团队贡献，而不仅仅是技术能力。DevOps需要一个乐队指挥。即使当前工作并不是你的工作领域，你也应当接受它。实现DevOps环境需要理解什么对于管理是重要的；是不是发布更快了？是不是质量更高了？是不是开发人员对他们的代码更负责了？这些都与DevOps环境的方式有关。</p>

<hr />

<p>Neil　Garnichaud是SmartBear公司的Host　Solutions　Business经理，负责产品开发及软件研发。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[(翻译)正确实施DevOps-The Lay of the Land]]></title>
    <link href="http://www.huangbowen.net/blog/2014/09/29/geting-devops-right-the-lay-of-the-land/"/>
    <updated>2014-09-29T19:08:28+05:30</updated>
    <id>http://www.huangbowen.net/blog/2014/09/29/geting-devops-right-the-lay-of-the-land</id>
    <content type="html"><![CDATA[<p>原文地址:<a href="http://www.drdobbs.com/architecture-and-design/getting-devops-right-the-lay-of-the-land/240062639">http://www.drdobbs.com/architecture-and-design/getting-devops-right-the-lay-of-the-land/240062639</a>，作者Scott W. Ambler。</p>

<p><strong>对于不同的利益相关人DevOps含义不同，但是基本组成部分是相同的。</strong></p>

<!-- more -->


<p>在过去的1，2年，媒体上有很多关于DevOps的争论。有关DevOps的声音越来越杂乱，导致听众也越来越困惑。DevOps提供了针对IT市场的敬业精神和生产力一个潜在增长点。但是，与在它之前的所有运动一样，误解和误用DevOps是非常危险的。本文章以及随后的系列文章，将提供有条理的严肃的建议来解开这些困惑。</p>

<p>让我们先从一些定义开始。首先，在本文章中我会用两种方式表述词条“产品”。当我使用IT短语“发布产品”时，如果上下文与商业产品有关，我也隐含了“发布到市场”。当我使用单词“产品”时，意味着运营和支持（有时也被称为“help desk”）的结合。一些组织认为运营和支持是两个概念，但其它组织结合了这两个概念。"DevOps"是开发（development）和运营（operations）两个单词组成的混合词。在该上下文中的开发包括了解决方案被发布到产品环境之前发生的所有活动，即项目初始化时明确初始概念一直到可以部署。DevOps上下文中的运营包括了部署之后的所有活动。即“与产品相关的东西”（production stuff），包括了对所部署的解决方案的运营和支持。</p>

<p>定义DevOps词条，说起来容易做起来难，这是因为需要综合考虑多个视角，即主要的DevOps利益相关者的视角。你的谈话对象不同，DevOps是什么的定义的回答也不相同。DevOps的利益相关者以及他们的视角如下：</p>

<p>*开发人员，尤其是有经验的敏捷开发人员，认为DevOps是交付产品的一个持续的流程，有可能一天数次。</p>

<p>*运营专家往往认为DevOps提倡与开发团队建立更有效的关系，不仅包括整个开发生命周期，也包括解决方案被部署到产品环境的过程。有经验的运营人员也意识到他们内部过程往往基于<a href="http://en.wikipedia.org/wiki/Information_Technology_Infrastructure_Library">ITIL</a>或<a href="http://en.wikipedia.org/wiki/IT_service_management">ITSM</a>，需要被精简以便更好的与开发团队协作。</p>

<p>*支持专家（有时也被称为help desk专家）对DevOps的认识与运营专家类似，但稍微有点区别：他们想和开发团队一起工作来保证解决方案被发布到产品环境前他们的需求能被正确理解和满足。他们也想确保有一个流程，一旦当解决方案被使用后，能够处理需求更改（包括缺陷）。</p>

<p>*高级管理团队认为DevOps是可以通过简化所有人一起工作的方式从而提高IT部门整体效率的一种成果。</p>

<h2>规范DevOps</h2>

<p>现在来看看规范DevOps。图1展示了采用规范DevOps前以及规范DevOps努力想达到的效果的对比图。目前在很多组织中，开发团队和运营团队间尽管有流程和组织级障碍存在，但仍努力达到有效协作。</p>

<p>开发团队的部署并无规律-“快速”的团队一年进行1到2次发布，偶尔为发现的产品问题打个补丁。</p>

<p>运营团队反而推进变更请求，包括缺陷报告，返回给开发组织。这两个组织一起协作就可以保证这些活动是成功的，但仍有一个明显的地方可以提高。规范DevOps通过增加开发，运营和支持人员之间的协作这一策略来提高这一点。向开发团队引入持续交付实践，向IT引入新的组织级架构；采用商业智能工艺和技术来支持开发智能和运营智能，即支持改进的IT管理。不规范的DevOps和规范的DevOps的不同之处在于，规范的方式以整体视角来考虑所有DevOps利益相关者的渴望，而不仅仅关注于一个视角。</p>

<p><img src="/images/closingdevopsgap.gif">
图1：缩小DevOps差距</p>

<p>要想成功实践DevOps，你需要在5个方面实现提高：人，准则，实践，产品及流程。这些问题以从高到低的优先级顺序排列。人及他们相互交互的方式是任何IT努力达到成功的决定因素。而规范DevOps清楚的需要人们重新思考他们的技能，如何定义自己的角色，如何一起工作。IT组织采用DevOps需要重新思考他们所做的决定的底层准则。例如，采用与业务更紧密交互的准则将激励他们采用更频繁的发布产品的方式。组织需要采用诸如持续集成，持续部署，运营智能，协作支持等实践。如果他们决定采用DevOps，有更多新鲜的事情需要去做。新的产品，包括开发工具，商业智能工具，以及运营监控工具等需要被采用。最终，流程框架（比如规范敏捷交付，DAD），将DevOps策略变为开发流程，还有ITIL或ITSM的更新版也需要考虑是否使用。</p>

<h2>误解</h2>

<p>组织运行DevOps似乎有着普遍的方式。我担心这样的观点，即“云=DevOps”，这种观点似乎越来越受欢迎。采用云技术可以早点接触到DevOps的一些方面，但只是5个方面的其中之一（即产品方面）。相似的，一些厂商的工具驱动的消息工具，以及一些开源社区（的产品）也令人不安，新的工具仅仅是DevOps大局观的一部分而已。第三个误解之前有提到过，即过于关注于一个DevOps利息相关人的视角。特别常见的是过于关注开发过程，因为效果显而易见，特别是持续交付实践可以带来潜在的更高效的提高。该问题是仅关注了5个方面的实践部分。</p>

<p>这些误解，确定会导致他们遇到问题，在之后的文章中会详细讨论这些问题的解决之道。</p>

<hr />

<p>Scott Ambler 在IBM Rational工作了6年时间，在这里他帮助客户采用及适应敏捷技术。现在是该领域的咨询师。他也是Dr.Dobb's的长期撰稿人。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[翻译-高效DevOps的10项实践]]></title>
    <link href="http://www.huangbowen.net/blog/2014/09/22/ten-practices-for-effective-devops/"/>
    <updated>2014-09-22T15:59:44+05:30</updated>
    <id>http://www.huangbowen.net/blog/2014/09/22/ten-practices-for-effective-devops</id>
    <content type="html"><![CDATA[<p>原文链接： <a href="http://www.drdobbs.com/architecture-and-design/top-10-practices-for-effective-devops/240149363?pgno=1">http://www.drdobbs.com/architecture-and-design/top-10-practices-for-effective-devops/240149363?pgno=1</a>, 作者Scott W. Ambler。</p>

<h2><strong>采用这些DevOps实践可以实现高效协作，平滑运营，更整洁的代码等目标。</strong></h2>

<p><a href="http://www.drdobbs.com/architecture-and-design/what-exactly-is-devops/240009147">DevOps</a>已经成为了我们行业最热门的流行语之一。然而出人意料的是，在更紧密的愿景和开发团队和运营团队更有效的协作之上，很少有共识DevOps到底意味着什么。不同组织对DevOps有着不同的定义，其实DevOps有个新兴的最佳实践核心,其更进一步的目标是高度协作以生产更好的软件。在这里我考验了这些实践。但是坦白说，我并不只从开发人员角度来观察这些实践。</p>

<!-- more -->


<p>我按优先级从高到低列出了这些实践条目，后面的实践往往依赖于前面的实践。</p>

<h2><strong>实践1：利益相关者的积极参与</strong></h2>

<p>DevOps的根本原则是开发人员,运营人员以及支持人员必须定期紧密的工作在一起。言外之意是他们必须互相视对方为重要的利益相关人，并积极争取一起工作。敏捷社区中一个普遍的实践是“现场客户”。这个实践出自于极限编程，它鼓励开发人员应该与业务人员紧密合作。规范的敏捷团队将该实践更进一步，即利益相关的积极参与，这意味着开发人员应该与所有利益相关者一起紧密工作，包括运营人员及支持人员，而不仅仅是业务人员。这是双向的：运营人员和支持人员也必须愿意和开发人员紧密工作。</p>

<h2><strong>实践2：自动化测试</strong></h2>

<p>敏捷软件开发人员被称为质量感染者，这是因为他们关注于编写高质量的代码，渴望测试越早开始越好。结果，自动化的回归测试是敏捷团队普遍采用的实践。该实践有时又被扩展为测试先行的方式，比如测试驱动开发（TDD），以及行为驱动开发（BDD）。由于敏捷团队经常一天多次运行他们的自动化测试集，并且能够马上修复发现的问题，所以他们比普通团队能达到更高的质量。对于运营人员而言，在同意一个解决方案发布到产品环境前，坚持足够的质量审查，这是件好事情。</p>

<h2><strong>实践3：集成配置管理</strong></h2>

<p>要实现以集成的方式来进行配置管理（CM），开发团队不仅要习惯于在解决方案层级应用CM，还需要考虑自身的解决方案与组织的其余基础设施之间的
产品环境配置问题。对于一些开发人员而言这是个不小的转变，因为他们往往习惯于只考虑当前他们工作的解决方案的CM。在DevOps环境中，开发人员需要拥有企业级视角，在更高的层次看待问题。他们的解决方案如何能在产品环境结合其它资源带来优势？其它资源是否能支持被开发的解决方案？言外之意是开发团队需要了解及管理他们产品的所有范围的依赖。集成配置管理也使得运营人员了解新的发布潜在的影响，从而更容易决定进行发布的时间。</p>

<h2><strong>实践4：综合变更管理</strong></h2>

<p>从IT的角度来看，变更管理是一门确保IT基础设施的演化能对整体组织的支持成功及有意义的艺术。但是对于项目-团队层级则颇具挑战。这是因为非常多的技术，甚至相似技术的多个版本会被使用在单个解决方案的开发过程中。由于DevOps引入了与运营有关的企业级问题，综合变更管理策略会变得越来越复杂，因为需要考虑大量的解决方案能够在产品环境中同时运行和交互。为了实现综合变更管理，开发团队必须与运营团队紧密合作，来从组织层面了解任何技术的改变带来的影响。该方式依赖于前面的实践-利益相关者的积极参与，集成配置管理及自动化测试。</p>

<h2><strong>实践5：持续集成</strong></h2>

<p>持续集成（CI）是构建及验证项目的规范，当有代码更新被迁入到版本控制系统时，会进行自动化的回归测试及代码分析。CI是与DevOps相关的性感的敏捷开发实践之一（至少从开发人员角度来说是如此）。CI确保开发人员以较小的，可以对代码缺陷立即反馈的常规步骤来开发一个高质量的可以工作的解决方案。</p>

<h2><strong>实践6：集成部署计划</strong></h2>

<p>从开发团队角度而言，部署计划总是需要与该组织的运营人员交互。有些情况下，与运营人员接口的专家被特称为发布工程师。经验丰富的团队将使开发，运营及支持团队这些利益相关者一起持续的制定部署计划。当你采用了DevOps策略，你会很快意识到需要一种跨团队的方式来完成发布计划，因为需要运营人员与整个开发团队一起工作。对于运营人员来说这不是什么新鲜事，但是对于只习惯工作于孤立环境的开发团队来说却很惊奇。如果你的团队还没有这样做，你需要开始从组织层面来考虑部署时间表。更远一步，为了支持持续部署，发布工程师需要增加发布次数，因为敏捷团队已经可以持续及一致地达到发布的质量要求。</p>

<h2><strong>实践7：持续部署</strong></h2>

<p>持续部署是持续集成实践的扩展。对于持续部署，当集成在一个沙盒中成功完成时，变更会被自动升迁到另一个沙盒中，集成会自动的在这里进行。自动升迁一直持续，直到有人验证了所有的变更，特别是开发向运营的过渡期。</p>

<p>持续部署使得开发团队减少了新功能从被验证到部署到产品环境的时间，使得业务更具响应性。然而，持续部署增加了运营风险，因为如果开发团队没严格遵守规范，会增加缺陷被引入到产品环境的潜在风险。在企业级环境中成功的执行持续部署要求实现前面介绍的所有实践。</p>

<h2><strong>实践8：产品支持</strong></h2>

<p>企业级环境中，大多数的应用程序开发团队工作在已经存在于产品环境的解决方案的新的功能上。他们不仅工作于该新功能，还有解决严重的产品问题的职责。开发团队往往被称为产品的“第3级支持”，因为他们是解决棘手的产品问题的第三个（也是最后一个）团队。尽管做第三级产品支持的需要是普遍的，但是看板和规范敏捷交付（Disciplined Agile Delivery， DAD）则是例外，很多敏捷方法只解决传递这些影响。该实践的一个重要的副作用是给予了开发者发生在产品中的此类问题的鉴别能力，提供给他们一种学习机会，从而在设计解决方案时就考虑到相应的问题。</p>

<h2><strong>实践9：应用监控</strong></h2>

<p>正如其名称所示，这是一个运营实践，监控已经发布到产品的环境的正在运行的解决方案和应用程序。技术基础设施平台（比如操作系统），应用程序服务器，以及通讯服务通常提供监控功能，可以工作于一些监控工具（比如微软管理终端，IBM Tivoli 监控， 以及jManage）。然而，为了监控特定应用程序的功能，比如只给特定用户使用的用户界面，仪表化该信息需要与你组织的监控基础设施兼容，这需要构建到应用程序中。开发团队需要知道该运营要求，或者，更好的方式是可以访问一个框架，该框架可以直接提供相应的仪表化。</p>

<h2><strong>实践10：自动化的仪表盘</strong></h2>

<p>使用自动化仪表盘的实践是IT领域的商业智能（business intelligence， BI）。该实践分为两个方面,开发智能以及运营智能。开发智能需要使用开发工具来仪表化产生的指标。例如，你的配置管理（CM）工具已经记录了谁以及什么时候迁入代码。持续集成工具可能同样记录了构建发生的时间，运行了多少个测试，测试运行的时间，构建是成功还是失败，运行成功的测试数量等。这些原始数据会被分析并显示在一个自动化的仪表盘中。运营智能是之前讨论过的应用程序监控的一个方面。使用了自动化仪表盘，组织的整体指标开销将被显著降低（但是不能完全淘汰，因为不是所有的事情都能被自动化）。自动化仪表盘提供了实时的对组织的管理团队的洞察。</p>

<h2><strong>DevOps与文化息息相关</strong></h2>

<p>在讨论了这些苛刻的支持DevOps的实践之后，我需要强调主要的限制成功的因素是能否建立一个贯穿整个IT组织的相互协作的相互尊敬的文化。我的经验是，当决定采用高效的DevOps策略时，人及他们相互工作的方式是成功的主要决定因素。不幸的是，在组织中带来文化变迁比采用一些新的实践要难得多。在接下来的文章中会讨论这些。</p>

<h2><strong>更多信息</strong></h2>

<p><a href="http://www.drdobbs.com/architecture-and-design/what-exactly-is-devops/240009147">DevOps究竟是什么？</a> 解释了DevOps为什么对开发人员如此重要。</p>

<p><a href="http://www.drdobbs.com/architecture-and-design/getting-devops-right-the-lay-of-the-land/240062639">正确采用DevOps：落地</a> 描述了采用DevOsp策略相关的一些挑战。</p>

<p><a href="http://www.drdobbs.com/architecture-and-design/disciplined-agile-change-management/240001474">规范敏捷变更管理</a> 讨论了修改管理选项。</p>

<p><a href="http://www.discipinedagiledelivery.com/">规范敏捷交付</a> 讲述了DAA流程框架的更多信息。</p>

<p>Scott Ambler是Dr. Dobb&rsquo;s 的长期撰稿人，也是<a href="http://www.amazon.com/Disciplined-Agile-Delivery-Practitioners-Enterprise/dp/0132810131/?tag=drdos-20">Disciplined Agile Delivery: A Practitioner&rsquo;s Guide to Agile Software Delivery in the Enterprise</a>一书的核心作者。你可以在<a href="http://twitter.com/scottwambler/">Twitter</a>上follow他。</p>
]]></content>
  </entry>
  
</feed>
