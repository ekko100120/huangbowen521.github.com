<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: CI | 黄博文的地盘]]></title>
  <link href="http://www.huangbowen.net/blog/categories/ci/atom.xml" rel="self"/>
  <link href="http://www.huangbowen.net/"/>
  <updated>2014-09-13T20:29:25+10:00</updated>
  <id>http://www.huangbowen.net/</id>
  <author>
    <name><![CDATA[黄博文]]></name>
    <email><![CDATA[huangbowen521@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[让你的CI跑起来-《持续集成》读书总结]]></title>
    <link href="http://www.huangbowen.net/blog/2013/09/22/continous-integration/"/>
    <updated>2013-09-22T16:49:00+10:00</updated>
    <id>http://www.huangbowen.net/blog/2013/09/22/continous-integration</id>
    <content type="html"><![CDATA[<p>持续集成已经被公认为极具价值的一项工程实践。在初始化一个项目时一个重要的任务就是搭建持续集成服务器，编写构建脚本。在我工作的所有项目中都引入了持续集成机制。它已经像氧气一样成为软件开发过程中的一项工程活动。</p>

<!-- more -->


<p>《持续集成》站在理论的角度阐述了持续集成能够解决什么样的问题，如何解决，需要遵循那些原则等。这本书的副标题是-软件质量改进和风险降低之道（Improving Software Quality and Reducing Risk）。副标题直指持续集成的两个好处：提高软件质量及降低项目风险。</p>

<h2>当前面临的问题</h2>

<p>当前软件开发一直存在两大难题：<strong>一是确定软件的需求，即确定目标。</strong>究竟软件要做成什么样子，在客户的头脑里可能是个三角形，在业务分析员的头脑中可能是个正方形，在开发者的头脑中可能是个圆形，而最终出来的产品或多或少都会给客户带来“惊喜”。</p>

<p><strong>二是确定目前离目标还有好远，即确定剩余的工作量。</strong>这个问题就是项目缺少可见性的问题。当一个程序员告诉他的经理说这个功能只剩下20%的工作量时，具体指什么那？这个20%的比例是怎么得到的？是还要再花20%的时间？&hellip;&hellip;</p>

<p>持续集成虽然解决不了第一个问题，但是关于第二个问题，持续集成向我们介绍了一种增加项目可见性，提高开发效率，降低项目失败风险的有效实践经验。</p>

<p>其实持续集成蕴含有哲学思想：分而治之。即我们通常说的 “滴水穿石，跬步千里”。</p>

<p>传统瀑布方法一般将系统集成放置到开发完成后，这样会导致一系列的问题。</p>

<ul>
<li><p><strong>没有一致的、可部署的软件。</strong>只有等到集成完成之后，我们才能够拿到一个可以使用的软件。</p></li>
<li><p><strong>很晚才发现缺陷。</strong>接口不一致、接口不满足实际需求、开发人员对功能理解有偏差….这些问题在集成测试时统统暴露出来。由于软件根基已经建立，这时候修改容易伤筋动骨。</p></li>
<li><p><strong>低品质的软件。</strong>正如上条所说，缺陷发现的越晚，修改的代价越大。在交付的压力下，各种猴子补丁散落在系统的各个地方，软件的品质自然也很难提高。</p></li>
<li><p><strong>缺少项目可见性。</strong>直到系统集成之前，你都拿不出可用的软件。而且系统集成之时，往往是项目中最棘手、最紧张的时刻，你很难预估集成什么时候能够彻底完成。这样的项目自然谈不上什么可见性了。</p></li>
</ul>


<h2>CI的价值</h2>

<p>引入了CI（Continuos Integration，即持续集成）以后，每个开发人员在提交代码的时候都会自动进行构建，包括代码审查、编译、单元测试、打包、功能测试等。这样保证了开发人员的每次提交都是安全的。打包生成的文件随时可以被测试人员拿去测试。如果需要给客户演示功能，也只需从CI服务器上直接获取指定的打包完成的文件即可。</p>

<p>CI的好处多多。</p>

<ul>
<li><strong>减少风险</strong></li>
</ul>


<p>缺陷的检测和修复变得更快，让寻找和修改bug的工作变简单（只修改系统一小部分，无需看太多代码。由于提交后就可以得到反馈，记忆很新鲜，可以进行差异调试。）同时过早的引入集成，使我们能更好的审视各个模块的接口是否满足要求，减少项目中的假定。</p>

<ul>
<li><strong>减少重复过程</strong></li>
</ul>


<p>由于CI将大量的工作给自动化了，那么可以让人们有时间做更多的需要动脑筋的、更高价值的工作。而且通过对重要过程自动化，克服了项目中某些成员对实现改进的抵制，有利于持续集成的推进。这样就形成了一个良性循环。</p>

<ul>
<li><strong>在任何时间、任何地点生成可部署的软件</strong></li>
</ul>


<p>对于客户来说，可以部署的软件是最实际的资产。而CI则可以轻松做到这一点。</p>

<ul>
<li><strong>增强项目的可见性</strong></li>
</ul>


<p>通过对CI服务器的监控，可以随时了解项目的趋势。CI上的红色或绿色表示了当前项目的健康程度。每一个功能的交付都经历了单元测试或集成测试的考验。</p>

<ul>
<li><strong>对开发团队的软件产品建立起更强大的产品信心</strong></li>
</ul>


<p>CI可以防止破窗综合症，让开发团队一点点积累起对产品的信息。</p>

<h2>CI的特征</h2>

<p><img src="/images/CIOverView.png"></p>

<p>从上述图中可以看出CI有四个特征：</p>

<ul>
<li><strong>与版本控制系统的连接</strong></li>
</ul>


<p>当开发者提交代码时，就会触发CI系统的运行。</p>

<ul>
<li><strong>构建脚本</strong></li>
</ul>


<p>构建脚本继承了审查、编译、测试、打包、功能测试等环节，保证了产品的质量与可用性。</p>

<ul>
<li><strong>某种类型的反馈机制</strong></li>
</ul>


<p>集成的结果要能很容易的获取到。可以通过一个web页面来呈现，也可以给团队人员发Email。我们公司有些团队做了一些有意思的插件，比如将build的结果映射到一个灯上，或者当构建失败时播放一段音乐等，随时提醒团队成员对build的关注。</p>

<ul>
<li><strong>集成源代码变更的过程</strong></li>
</ul>


<p>代码变更会触发构建,保证了CI能够经常性的运行。</p>

<h2>CI对团队的要求</h2>

<p>很多团队说我们引入了持续集成，但是收到的效果并不好。比如遇到了CI持续失败、没人关注构建结果、没有及时修复build等。那是因为开发团队没有遵循一定的原则。</p>

<ul>
<li><p><strong>经常提交代码</strong></p></li>
<li><p><strong>不要提交无法构建的代码</strong></p></li>
<li><p><strong>立即修复无法集成的构建</strong></p></li>
<li><p><strong>编写自动化的开发者测试</strong></p></li>
<li><p><strong>必须通过所有测试和审查</strong></p></li>
<li><p><strong>执行私有构建</strong></p></li>
<li><p><strong>避免迁出无法构建的代码</strong></p></li>
</ul>


<hr />

<p>持续集成是一个实践性很强的工程活动，其实发展到现在也遇到了一些新的挑战。比如如何减少构建时间、怎样实现分阶段分布式构建、如何应用在有Branch的代码库中、从持续集成进阶到持续交付等。这本书基本没怎么涉及这些话题，毕竟它出版有些年头了，但这仍不失为一本好书。</p>

<p>如果你理解了持续集成的好处，那么在应用过程中就不会有抵触心理，而且也更容易理解持续交付。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[将AngularJS的单元测试和端到端测试集成到gradle构建脚本中]]></title>
    <link href="http://www.huangbowen.net/blog/2013/05/07/integrate-javascript-tests-to-gradle/"/>
    <updated>2013-05-07T15:55:00+10:00</updated>
    <id>http://www.huangbowen.net/blog/2013/05/07/integrate-javascript-tests-to-gradle</id>
    <content type="html"><![CDATA[<p>我目前工作的一个项目后端使用java和spring建立了一个restful service,前端使用<a href="http://angularjs.org/">AngularJS</a>来渲染页面，提供用户接口。在前端的<a href="http://angularjs.org/">AngularJS</a>项目中，我们使用<a href="http://pivotal.github.io/jasmine/">Jasmine</a>来写单元测试，使用<a href="http://angularjs.org/">AngularJS</a>自带的Angular_scenario来写端到端测试。运行这些测试则使用的是<a href="http://karma-runner.github.io/">Karma</a>。</p>

<p>虽然使用<a href="http://karma-runner.github.io/">Karma</a>在命令行下可以很方便的运行所有的测试，但是我们想将这些集成到<a href="http://www.gradle.org/">gradle</a>的构建脚本中，从而将<a href="http://angularjs.org/">AngularJS</a>的所有测试加入到CI的构建中。同时为了保证运行测试的效率，我们决定使用<a href="http://phantomjs.org/">PhantomJS</a>作为运行测试的浏览器环境。</p>

<!-- more -->


<h2>环境搭建</h2>

<ul>
<li><p><strong>安装<a href="http://nodejs.org/">nodeJS</a>。</strong> 直接去官网&lt;<a href="http://nodejs.org/">http://nodejs.org/</a> >下载最新的安装包进行安装。</p></li>
<li><p><strong>安装<a href="http://karma-runner.github.io/">Karma</a>。</strong> 可以使用nodeJS提供的npm(node package manager)来安装。</p></li>
</ul>


<pre><code class="bash">$ npm install -g karma
</code></pre>

<p>如果想安装最新的开发者版本，则运行：</p>

<pre><code class="bash">$ npm install -g karma@canary
</code></pre>

<ul>
<li><strong>安装<a href="http://phantomjs.org/">PhantomJS</a>。</strong></li>
</ul>


<p>方式一：使用npm来安装:</p>

<pre><code class="bash">
$ npm install -g phantomjs
</code></pre>

<p>方式二：从官网上下载最新的安装包自行安装。地址是<a href="http://phantomjs.org/">http://phantomjs.org/</a> 。</p>

<p>不过为了方便其它人的使用，我将<a href="http://phantomjs.org/">PhantomJS</a>的文件直接放置到了项目的codebase中，并加入了svn管理。这样当setup一个新的工作电脑时就不需要安装它了，直接checkout项目代码就行。最大的原因是当<a href="http://karma-runner.github.io/">Karma</a>运行测试时会根据环境变量寻找<a href="http://phantomjs.org/">PhantomJS</a>的执行文件，将<a href="http://phantomjs.org/">PhantomJS</a>的执行文件放置在统一的地方方便管理，减少环境变量依赖。</p>

<h2>配置<a href="http://karma-runner.github.io/">Karma</a>运行测试的配置文件</h2>

<p>方式一：在项目根目录下运行<code>Karma init</code>,根据提示一步步创建配置文件。</p>

<p>方式二：如果对<a href="http://karma-runner.github.io/">Karma</a>的配置文件较为熟悉的话，可以自行创建一个。</p>

<p>以下是我为unit test创建的配置文件。</p>

<pre><code class="JavaScript">
// Sample Karma configuration file, that contain pretty much all the available options
// It's used for running client tests on Travis (http://travis-ci.org/#!/karma-runner/karma)
// Most of the options can be overriden by cli arguments (see karma --help)
//
// For all available config options and default values, see:
// https://github.com/karma-runner/karma/blob/stable/lib/config.js#L54


// base path, that will be used to resolve files and exclude
basePath = '';

frameworks = ['jasmine'];

// list of files / patterns to load in the browser
files = [
    'spec/*.spec.js'
];

// list of files to exclude
exclude = [];

// web server port
// CLI --port 9876
port = 9876;

// cli runner port
// CLI --runner-port 9100
runnerPort = 9100;

// enable / disable colors in the output (reporters and logs)
// CLI --colors --no-colors
colors = true;

// level of logging
// possible values: LOG_DISABLE || LOG_ERROR || LOG_WARN || LOG_INFO || LOG_DEBUG
// CLI --log-level debug
logLevel = LOG_INFO;

// enable / disable watching file and executing tests whenever any file changes
// CLI --auto-watch --no-auto-watch
autoWatch = false;

// Start these browsers, currently available:
// - Chrome
// - ChromeCanary
// - Firefox
// - Opera
// - Safari (only Mac)
// - PhantomJS
// - IE (only Windows)
// CLI --browsers Chrome,Firefox,Safari
browsers = ['PhantomJS'];

// If browser does not capture in given timeout [ms], kill it
// CLI --capture-timeout 5000
captureTimeout = 10000;

// Auto run tests on start (when browsers are captured) and exit
// CLI --single-run --no-single-run
singleRun = true;

// report which specs are slower than 500ms
// CLI --report-slower-than 500
reportSlowerThan = 500;

// compile coffee scripts
preprocessors = {
    '**/*.coffee': 'coffee'
};

plugins = [
    'karma-jasmine',
    'karma-chrome-launcher',
    'karma-firefox-launcher',
    'karma-phantomjs-launcher',
    'karma-junit-reporter'
]
</code></pre>

<p>由于需要在CI中运行测试，所以应当将autoWatch设置为false,将singleRun设置为true。这样<a href="http://karma-runner.github.io/">Karma</a>只会运行一遍测试。</p>

<p>由于我们将<a href="http://phantomjs.org/">PhantomJS</a>放置在工程目录下，为了让<a href="http://karma-runner.github.io/">Karma</a>能找到<a href="http://phantomjs.org/">PhantomJS</a>的执行文件，需要设置环境变量PHANTOMJS_BIN。在Karma.conf.js中加入如下代码:</p>

<pre><code class="javaScript">
process.env.PHANTOMJS = require('path').resolve(__dirname, 'tools/PhantomJS/phantomjs.exe';
</code></pre>

<p>如果Karma运行测试时找不到浏览器的执行文件，会报一个错误。</p>

<pre><code class="bash">
INFO [karma]: Karma v0.9.2 server started at http://localhost:9876/
INFO [launcher]: Starting browser PhantomJS
ERROR [karma]: { [Error: spawn ENOENT] code: 'ENOENT', errno: 'ENOENT', syscall: 'spawn' }
Error: spawn ENOENT
    at errnoException (child_process.js:977:11)
    at Process.ChildProcess._handle.onexit (child_process.js:768:34)
</code></pre>

<p>当时我花了好长时间来寻找原因，最后使用<code>karma start karma.conf.js --log-level=debug</code>来查看运行日志。</p>

<pre><code class="bash">
INFO [launcher]: Starting browser PhantomJS
DEBUG [launcher]: Creating temp dir at C:\Users\bowen\AppData\Local\2\karma-28747846
DEBUG [launcher]: C:\Program Files\PhantomJS\phamtomjs.exe  C:\Users\bowen\AppData\Local\2\karma-28747846capture.js
INFO [karma]: To run via this server, use "karma run --runner-port 9101"
ERROR [karma]: { [Error: spawn ENOENT] code: 'ENOENT', errno: 'ENOENT', syscall: 'spawn' }
Error: spawn ENOENT
</code></pre>

<p>通过DEBUG的log我发现<code>C:\Program Files\PhantomJS\phamtomjs.exe</code>下并未有该文件，最后使用上述的方法来设置<a href="http://phantomjs.org/">PhantomJS</a>的环境变量。（奇怪的是我已经在PowerShell里设置了该环境变量，并且Karma命令行也是在PowerShell运行的，但是<a href="http://nodejs.org/">nodeJS</a>并未获取正确的环境变量值）。</p>

<h2>在build.gradle中加入运行Karma的task</h2>

<p>由于我们的开发机以及CI服务器都是Windows环境，所以需要调用CMD来执行<a href="http://karma-runner.github.io/">Karma</a>命令。</p>

<p>配置如下：</p>

<pre><code class="java">
task jsUnit(type: Exec, description: 'JS unit tests') {
     workingDir './src/test/scripts'
     commandLine 'cmd', '/c', 'karma start karma.conf.js'
}


task e2eTest(type: Exec, description: ' e2e tests') {
     workingDir './src/test/scripts'
     commandLine 'cmd', '/c', 'karma start karma-e2e.conf.js'
}
</code></pre>

<p>注意运行端到端测试前要将restful服务器setup起来。</p>

<p>当时在Windows上配置<a href="http://karma-runner.github.io/">Karma</a>花了很多功夫，使用Firefox浏览器发现会同时打开3个tab页，并且将singRun改为true不能运行成功，使用Chrome浏览器则测试运行完毕后浏览器无法关闭，使用<a href="http://phantomjs.org/">PhantomJS</a>又由于环境变量的问题花了一些时间来找原因。但是在我自己的苹果笔记本上各个浏览器都工作良好，真想说Windows是个奇葩。</p>

<p>对于普通用户来说可能Windows系统更适合他们，但是对于程序员来说MAC系统真的非常棒，反应迅速，配置简单，能让你的开发效率提升一个档次。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用MANIFEST.MF文件来track war包做持续部署]]></title>
    <link href="http://www.huangbowen.net/blog/2013/04/18/use-manifest-dot-mf-to-track-war-file/"/>
    <updated>2013-04-18T12:40:00+10:00</updated>
    <id>http://www.huangbowen.net/blog/2013/04/18/use-manifest-dot-mf-to-track-war-file</id>
    <content type="html"><![CDATA[<p>在我工作的项目中有这样一个需求。当通过自动部署脚本将当前一个CI构建的WAR包部署到指定服务器后，需要验证该WAR包是否被部署成功。</p>

<p>在这个项目中，持续集成服务器使用的是<a href="http://jenkins-ci.org/">Jenkins</a>，构建脚本使用的是<a href="http://maven.apache.org/">maven</a>，向服务器的部署使用的是Groovy写的部署脚本，调用了<a href="http://www.incanica.com/tour/whytableaux">Tableuax</a> API。</p>

<p>在<a href="http://jenkins-ci.org/">Jenkins</a>上有两个job，一个CI job，一个dev job。
每次提交代码都会在<a href="http://jenkins-ci.org/">Jenkins</a>上trigger CI ob，这个job会执行配置的<a href="http://maven.apache.org/">maven</a>命令<code>mvn clean install</code>，如果构建成功，会自动trigger dev job。这个job会执行部署脚本，部署脚本负责调用<a href="http://www.incanica.com/tour/whytableaux">Tableuax</a> API将前一个job构建的war包部署到服务器上。</p>

<!-- more -->


<p>由于部署是调用<a href="http://www.incanica.com/tour/whytableaux">Tableuax</a> API来实现的，我们需要在部署完成以后验证此次部署是否成功。如何进行那？可以分为如下几个步骤。</p>

<p><strong>首先, 当<a href="http://jenkins-ci.org/">Jenkins</a>的第一个job构建war包时，将这次构建的一些信息写入到MANIFEST.MF文件中。</strong></p>

<p>MANIFEST.MF文件是Java平台下的Jar包或者war包中都普遍存在的一个文件。这个文件通常被放置在META-INF文件夹下，名称通常为MANIFEST.MF。它其实相当于一个properties文件，里面都是一些键值对，特殊之处是每个jar包或者war包至多只能有一个MANIFEST.MF文件。</p>

<p>那么如何在<a href="http://jenkins-ci.org/">Jenkins</a>运行build时将本次构建的相关信息写入到MANIFEST.MF文件那？那要借助于maven.war.plugin插件。</p>

<p>当一个<a href="http://jenkins-ci.org/">Jenkins</a> job被执行时，会自动设置一些环境变量，这些环境变量可以在shell script, batch command或者Maven POM中被访问。（查看所有的环境变量请看<a href="https://wiki.jenkins-ci.org/display/JENKINS/Building+a+software+project#Buildingasoftwareproject-JenkinsSetEnvironmentVariables">这里</a>）。
所以我们可以在项目的pom.xml加入以下的plugin来设置一些build信息到MANIFEST.MF文件中。</p>

<pre><code class="xml">
    &lt;plugin&gt;
        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
        &lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt;
        &lt;version&gt;2.2&lt;/version&gt;
        &lt;configuration&gt;
            &lt;archive&gt;
                &lt;manifest&gt;
                    &lt;addDefaultImplementationEntries&gt;true&lt;/addDefaultImplementationEntries&gt;
                &lt;/manifest&gt;
                &lt;manifestEntries&gt;
                    &lt;Build-Number&gt;${BUILD_NUMBER}&lt;/Build-Number&gt;
                    &lt;Job-Name&gt;${JOB_NAME}&lt;/Job-Name&gt;
                    &lt;Build-Url&gt;${BUILD_URL}&lt;/Build-Url&gt;
                    &lt;Svn-Revision&gt;${SVN_REVISION}&lt;/Svn-Revision&gt;
                    &lt;Timestamp&gt;${maven.build.timestamp}&lt;/Timestamp&gt;
                &lt;/manifestEntries&gt;
            &lt;/archive&gt;
        &lt;/configuration&gt;
    &lt;/plugin&gt;
</code></pre>

<p><a href="http://jenkins-ci.org/">Jenkins</a> job执行完毕后，在打包好的WAR包中就含有一个MANIFEST.MF文件了。以下是一个示例。</p>

<pre><code class="xml">
Manifest-Version: 1.0
Implementation-Title: myWebApp
Implementation-Version: 1.1-SNAPSHOT
Job-Name: myWebApp-CI
Built-By: bowen
Created-By: Apache Maven
Timestamp: 20130417-1654
Build-Number: 118
Svn-Revision: 5606
Implementation-Vendor-Id: myWebApp
Build-Url: http://10.70.21.74:80/job/myWebApp/118/
Build-Jdk: 1.6.0_18
Implementation-Build: 2013-04-17 16:54:54
Archiver-Version: Plexus Archiver
</code></pre>

<p><strong>然后，创建一个页面来显示这些build信息，以便能随时查看当前部署在服务器上的war包的build number是多少，是由谁构建的，构建时间等信息。第二个job的部署脚本也可以通过这个页面得到build number，以此来判别部署的是否是想要的版本。</strong></p>

<p>这就牵扯到对MANIFEST.MF文件的读取了。有一个现成的库用于读取jar包或者war包中的MANIFEST.MF文件信息。</p>

<p>在项目的pom.xml文件中加入对这个库的依赖。</p>

<pre><code class="xml">
&lt;dependency&gt;  
    &lt;groupId&gt;com.jcabi&lt;/groupId&gt;  
    &lt;artifactId&gt;jcabi-manifests&lt;/artifactId&gt;  
    &lt;version&gt;0.7.17&lt;/version&gt; 
&lt;/dependency&gt;
</code></pre>

<p>对于war包而言，需要通过SevletContext来获取当前的MANIFEST.MF文件。首先需要创建一个继承自<code>ServletContextListener</code>接口的类来将ServletContext设置给Manifests对象。</p>

<pre><code class="java">
package com.thoughtworks

public class ContextListener implements ServletContextListener {  

    @Override  
    public void contextInitialized(ServletContextEvent event {    
        Manifests.append(event.getServletContext());  
    } 
}
</code></pre>

<p>然后需要在web.xml配置文件中将这个Listener加入到Listener列表中。</p>

<pre><code class="xml">
&lt;listener&gt;
&lt;listener-class&gt;com.thoughtworks.ContextListener&lt;/listener-class&gt;
&lt;/listener&gt;
</code></pre>

<p>这样就可以在Controller里直接使用Manifests对象来获取MANIFEST.MF文件记录的各种值了。</p>

<pre><code class="java">
String buildNumber = Manifests.read("Build-Number");
String buildJdk = Manifests.read("Build-Jdk");
String BuiltBy = Manifests.read("Built-By");
String timestamp = Manifests.read("Timestamp");
...
</code></pre>

<p>再建立一个jsp页面用于显示这些值即可。</p>

<p><strong>最后，部署脚本获取该页面的内容，判断页面内容中的build number是否为期望部署的build number。</strong></p>

<p>这只是判断部署的war包是不是期望的war包。如果想要验证其是完全可以工作的，就需要部署脚本调用smoke test来进行功能性测试了。这个留到下次再讲。</p>
]]></content>
  </entry>
  
</feed>
