<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: AWS | 黄博文的地盘]]></title>
  <link href="http://www.huangbowen.net/blog/categories/aws/atom.xml" rel="self"/>
  <link href="http://www.huangbowen.net/"/>
  <updated>2014-07-31T01:20:47+10:00</updated>
  <id>http://www.huangbowen.net/</id>
  <author>
    <name><![CDATA[黄博文]]></name>
    <email><![CDATA[huangbowen521@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用亚马逊的Route53服务]]></title>
    <link href="http://www.huangbowen.net/blog/2014/04/24/use-aws-route53/"/>
    <updated>2014-04-24T01:36:22+10:00</updated>
    <id>http://www.huangbowen.net/blog/2014/04/24/use-aws-route53</id>
    <content type="html"><![CDATA[<p>自从自己的博客从github迁移到AWS以上，再也不用担心Github被墙了。再加上CloudFront的CDN功能，那访问速度真是杠杆的，无论是在中国内陆，还是澳洲海边，秒开无压力。</p>

<!-- more -->


<p>但是这几天突然发现博客打不开了。这可是切换到AWS上这么久以来的头一次。仔细研究了一下发现是自己的独立域名解析不到地址。我的独立域名买的是国内某公司的，使用的DNS服务器也是他们默认提供的。给他们技术人员反映以后，发现问题更有意思了。我在澳洲无法访问，而他在国内访问一切正常。这真是奇葩啊。</p>

<p>痛定思痛，决定将自己的域名解析服务迁移到AWS上来，使用Route53服务。</p>

<p>进入AWS Management Console以后，选择Route 53.</p>

<p><img src="/images/route53.png" width="700"></p>

<p>在主界面点击<code>Create Hosted Zone</code>，输入Domain name和comments。Domain name是你的域名，comments是描述。</p>

<p><img src="/images/create_hosted_zone.png" width="800"></p>

<p>完成以后就会看到有一个条目显示在表格中。双击这条记录。可以看到AWS已经为你创建了NS和SOA两种类型的Record Set。NS类型中的4个地址以后会用到，需要将你的域名提供商的DNS服务器换为这里列出的四个。</p>

<p><img src="/images/hosted_zone_list.png" width="800"></p>

<p>我们先为WWW创建一个Rcord Set。点击<code>Create Record Set</code>按钮，在在右侧输入相应的信息。</p>

<p><img src="/images/create_record_set.png" width="800"></p>

<p>AWS支持多种类型，由于我想让www.huangbowen.net指向我cloudfront的endpoint，所以选择CNAME，Value为我cloud front中的endpoint。最后点击<code>create</code>按钮。</p>

<p>这样在AWS这边就配置完成了。最后是需要登录到域名提供商的后台中，将域名解析服务器给换掉。</p>

<p><img src="/images/change_DNS.png" width="800"></p>

<p>在这里，将DNS换为之前AWS自动生成的NS地址。</p>

<p>这样就大功告成了，要等待2小时到1天来让新的解析方式生效。这下可以达到全年99.99%可访问率了吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[亚马逊云服务之CloudFormation]]></title>
    <link href="http://www.huangbowen.net/blog/2013/10/23/aws-cloudformation/"/>
    <updated>2013-10-23T16:07:00+10:00</updated>
    <id>http://www.huangbowen.net/blog/2013/10/23/aws-cloudformation</id>
    <content type="html"><![CDATA[<p>亚马逊的Web Service其实包含了一套云服务。云服务主要分为三种:</p>

<ul>
<li><p>IaaS: Infrastructure as a service,基础设施即服务。</p></li>
<li><p>PaaS: Platform as a service, 平台即服务。</p></li>
<li><p>SaaS: Software as a service, 软件即服务。</p></li>
</ul>


<p>而亚马逊提供的云服务至少涵盖了前面两种。以下是亚马逊提供的各种服务。</p>

<!-- more -->


<p><img src="/images/cloudformation1.png" width="680"></p>

<p>以上的图中S3、EC2等就属于IaaS，RDS、DynamoDB等就属于PaaS。</p>

<p>今天分享的是亚马逊的CloudFormation，亚马逊将其归类为Deployment&amp;Management（部署及管理类别）。为什么亚马逊要推出这项服务那？我们可以假设一个场景。如果你要将一个WordPress网站部署到亚马逊上，你需要以下几步:创建一个EC2实例->在此EC2实例上配置WordPress->创建RDS数据库实例->在WordPress中配置与该RDS的连接。整个过程耗时耗力，需要在亚马逊不同的云服务间跳转。这些操作关联性很强，不具备自动化。如果你使用了CloudFormation以后，只需要在页面上点几个按钮，输入一些参数，就可以创建一个博客，省时省力,甚至完全不用任何UI，直接通过命令行完成。</p>

<p><strong>CloudFormation给予了用户一种简单的方法来创建和管理一系列有关联的AWS的资源,可以有序的及可预见的初始化和更新这些资源。</strong></p>

<p>要了解CloudFomation之前，先要了解几个概念。</p>

<h3>Template - 模板</h3>

<p>Template是CloudFormation的一个重要概念。Template本质上是一个json格式的文件。该文件定义了你需要使用那些AWS的资源，并且如何初始化这些资源。CloudFormation支持的资源如下图所示。</p>

<p><img src="/images/cloudformation2.png" width="680"></p>

<p>一个Template文件至少包含一下几个属性:</p>

<pre><code class="json">
{
    "AWSTemplateFormatVersion" : "2010-09-09",  //Template版本

    "Description" : "描述该Template的用途",

    "Parameters": {        // 应用该Template需要配置的参数
    },

    "Resources" : {        // 使用到的AWS的资源及它们之间的关系
    },

    "Outputs" : {        // stack创建完毕后的一系列返回值
    }
}
</code></pre>

<p>这个Template就是用来创建一个EC2的虚拟机。</p>

<pre><code class="json">
{ "AWSTemplateFormatVersion" : "2010-09-09",
  "Description" : "Create an EC2 instance running the Amazon Linux 32 bit AMI.",
  "Outputs" : { "InstanceId" : { "Description" : "The InstanceId of the newly created EC2 instance",
          "Value" : { "Ref" : "Ec2Instance" }
        } },
  "Parameters" : { "KeyPair" : { "Description" : "The EC2 Key Pair to allow SSH access to the instance",
          "Type" : "String"
        } },
  "Resources" : { "Ec2Instance" : { "Properties" : { "ImageId" : "ami-3b355a52",
              "KeyName" : { "Ref" : "KeyPair" }
            },
          "Type" : "AWS::EC2::Instance"
        } }
}
</code></pre>

<p>AWS官方提供了很多Template的资源，我们可以直接使用，当然也可以按需修改，甚至自己手动编写自己的Template。&lt;<a href="http://aws.amazon.com/cloudformation/aws-cloudformation-templates/">http://aws.amazon.com/cloudformation/aws-cloudformation-templates/</a> >列出了一系列可供使用的Template。</p>

<h3>Stack - 堆</h3>

<p>Template只是一个json格式的文件，如果想要使用它的话，需要创建一个Stack,在Stack中指定你要使用的Template,然后亚马逊才会按照Template中的定义来创建及初始化资源。可以在AWS Management Console中或通过命令行调用API的方式来创建Stack。</p>

<h2>实战</h2>

<p>接下来，我们就通过AWS Management Console，使用CloudFormation来创建一个部署在EC2上、使用RDS作为数据库的WordPress网站。</p>

<p>首先，需要登录到AWS Management Console，选择EC2服务，点击左侧菜单的Key Pair,创建一个Key Pair。这个Key Pair将在接下来被使用，主要使AWS能够ssh到创建的EC2机器上。当然你也可以使用已有的Key Pair。</p>

<p><img src="/images/cloudformation3.png" width="680"></p>

<p>然后选择CloudFormation服务，点击<code>Create Stack</code>按钮。</p>

<p>然后输入Stack名称，并选择一个Template。由于我们要创建一个WordPress的站点，可以选择<code>use a sample temple</code>,并选择WordPress这个模板。</p>

<p><img src="/images/cloudformation4.png" width="680"></p>

<p><img src="/images/cloudformation5.png" width="680"></p>

<p>然后点击<code>continue</code>按钮，配置相关的参数。注意在KeyName一项中输入我们第一步创建的Key Pair。</p>

<p><img src="/images/cloudformation6.png" width="680"></p>

<p>然后点击<code>continue</code>按钮，配置此Stack的标签，这个是可选项，可以跳过。再点一下<code>continue</code>，将会再次确认想要的创建的资源信息，继续后就可以看到资源正在创建了。</p>

<p><img src="/images/cloudformation7.png" width="680"></p>

<p>页面下半部分有很多标签，你可以随时查看该Stack的描述、资源、事件、参数、输出等各项信息。</p>

<p>等待大约20分钟，Stack就会执行完毕，在Outputs标签中你会看到有一个url。</p>

<p><img src="/images/cloudformation8.png" width="680"></p>

<p>这个就是我们创建的WordPress的入口地址，访问该链接会进入WordPress的初始化设置页面。</p>

<p><img src="/images/cloudformation9.png" width="680"></p>

<p>配置完以后，一个新的WordPress就诞生了，重新访问URL，你会看到你的博客首页。</p>

<p><img src="/images/cloudformation10.png" width="680"></p>

<h2>CloudFormer</h2>

<p>提到CloudFormation就不得不说CloudFormer。CloudFormer是亚马逊提供的一个工具，用来给已有的AWS资源创建CloudFormation Template。这样你在以后创建相同的AWS资源时就可以直接使用这个Template了。</p>

<p>要使用CloudFormer首先要创建一个Stack，CloudFormer就被部署到一台EC2机器上，通过这个Stack返回的Outputs的URL我们可以一步步勾选使用到的资源，最终生成一个Template，该Template会自动放置到你的S3中。</p>

<p>首先创建Stack,Template选择use a sample template,并选择CloudFormer。</p>

<p><img src="/images/cloudformation11.png" width="680"></p>

<p>然后点击<code>continue</code>，配置其他参数，直到走完创建Stack这个流程。</p>

<p><img src="/images/cloudformation12.png" width="680"></p>

<p>等待这个Stack创建完毕后，就可以从Outputs标签得到一个URL。这个URL是执行CloudFormer工具的入口地址。</p>

<p><img src="/images/cloudformation13.png" width="680"></p>

<p>点击此URL,即可按照配置一步步配置自己的Template。</p>

<p><img src="/images/cloudformation14.png" width="680"></p>

<p>流程走完后，生成的Template会存放到你的S3 bucket中。</p>

<hr />

<p>由于CloudFormation支持对几乎所有的AWS资源进行创建和配置，并且能够按照指定顺序创建，其Template简洁易懂、容易配置、可重用，所以是你使用AWS的不可多得的好帮手。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[将我的博客迁移到亚马逊云端（2）]]></title>
    <link href="http://www.huangbowen.net/blog/2013/10/01/migrate-octopress-to-aws-step-2/"/>
    <updated>2013-10-01T21:54:00+10:00</updated>
    <id>http://www.huangbowen.net/blog/2013/10/01/migrate-octopress-to-aws-step-2</id>
    <content type="html"><![CDATA[<p><img src="/images/edgelocation.png"></p>

<p>上篇文章中讲了将我的Octopress博客部署到亚马逊的S3上。而这篇文章则主要讲如何使用亚马逊提供的CloudFront作为内容分发并将自己的独立域名绑定到此CloudFront上。</p>

<!-- more -->


<p>首先，需要启用亚马逊的CloudFront。我刚开始以为只需要‘sign up’就行。但是当我在'AWS Management Console'中点击‘Services’中的CloudFront时，却得到了‘Account Blocked’错误。</p>

<p><img src="/images/accountblocked.png" width="780"></p>

<p>这个问题很奇怪，CloudFront明明已经在' Services You&rsquo;re Signed Up For' list中了，但是咋个无法使用那？我只好使用gmail给Amazon客服中心发了邮件询问，结果客服中心告诉我需要使用一个business email(商业邮箱)来发送激活申请。我只好使用公司邮箱发送了申请，过了几个小时就收到了回信，告诉我已经可以使用了。</p>

<p>登陆'AWS Management Console'后，点击'Services'中的‘CloudFront’，就可以看到控制界面了。</p>

<p><img src="/images/cloudfront.png" width="780"></p>

<p>点击'Create Distribution'按钮，Delivery method选择Download。 Download主要针对一些html，css,js等静态文件，而Streaming则主要是一些音视频文件。</p>

<p><img src="/images/deliverymethod.png" width="780"></p>

<p>下一步，要选择Origin,即要进行内容分发的源。虽然亚马逊会自动列出你的S3 bucket，但是千万不要选。而是自己手动输入example.com这个Bucket的Endpoint(Endpoint在S3 Console的Properties标签下的Static Website hosting里看得到)。为什么不直接选S3 bucket那?这是因为当我们访问一个目录时，我们期望能返回默认的object。虽然CouldFront有个Default Root Object设置，只是对根目录起作用，对子目录不起作用。如果使用Bucket的Endpoint，再加上之前已经给该Bucket配置了Default Object，就可以解决这个问题。</p>

<p><img src="/images/originname.png" width="780"></p>

<p>在CNAMEs项中输入自己的域名，多个域名以逗号分隔。</p>

<p><img src="/images/alternatedomain.png" width="780"></p>

<p>这样子CoudFront就算配置好了。通过管理页面也可以配置Error page等。</p>

<p><img src="/images/cloudfrontoverview.png" width="780"></p>

<p>接下来，需要登录自己域名的提供商的管理后台，添加一条自己独立域名的转发，转发到这个CloudFront的Domain Name上。</p>

<p><img src="/images/domainnamechange.png" width="780"></p>

<p>一般需要10分钟到2个小时等待新的域名转发设置生效。</p>

<p>另外要专门提一下CloudFront的cache机制。CloudFront主要通过检测Origin中的http header中的cache-control属性。根据cache-control的值来设置cache时间。但是CloudFront最长只保留24小时的cache，过后就会清空并重新cache。对于我的小博客来说24小时太长了，那如何给Octopress注入cache-control这个http header那？其实在上篇文章已经提过了。S3支持给每个object设置 http header，我们可以通过s3cmd来自动设置，这就是为什么在S3 task中要加入这个参数。</p>

<pre><code class="ruby">

desc "Deploy website via s3cmd"
task :s3 do
  puts "## Deploying website via s3cmd"
  ok_failed system("s3cmd sync --acl-public --reduced-redundancy --add-header \"Cache-Control: max-age=#{s3_cache_secs}\"  public/* s3://#{s3_bucket}/")
end
</code></pre>

<p>其中S3_cache_secs就是设置cache时间，我把它设置为3600,也就是一个小时。</p>

<p>至此，我的Octopress博客已经在云端了。感觉访问速度比以前快不少。以前我是部署在github pages，服务器放置在美国。现在使用了CloudFront，亚马逊会自动将请求转发到最近的CloudFront edge location。接下来我再研究下 Amazon Route 53,看看有什么好玩的。</p>

<p>我的博客地址: <a href="http://www.huangbowen.net">http://www.huangbowen.net</a></p>
]]></content>
  </entry>
  
</feed>
