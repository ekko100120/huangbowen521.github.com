<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: AWS | 黄博文的地盘]]></title>
  <link href="http://www.huangbowen.net/blog/categories/aws/atom.xml" rel="self"/>
  <link href="http://www.huangbowen.net/"/>
  <updated>2016-07-27T11:48:53+08:00</updated>
  <id>http://www.huangbowen.net/</id>
  <author>
    <name><![CDATA[黄博文]]></name>
    <email><![CDATA[huangbowen521@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AWS开发人员认证考试样题解析]]></title>
    <link href="http://www.huangbowen.net/blog/2016/07/27/aws-developer-exam-sample-questions/"/>
    <updated>2016-07-27T11:40:02+08:00</updated>
    <id>http://www.huangbowen.net/blog/2016/07/27/aws-developer-exam-sample-questions</id>
    <content type="html"><![CDATA[<p>最近在准备AWS的开发人员考试认证。所以特意做了一下考试样题。每道题尽量给出了文档出处以及解析。</p>

<!-- more -->


<hr />

<p>Which of the following statements about SQS is true?</p>

<ol type="a">
<li><p>Messages will be delivered exactly once and messages will be delivered in First in, First out order</p></li>
<li><p>Messages will be delivered exactly once and message delivery order is indeterminate</p></li>
<li><p>Messages will be delivered one or more times and messages will be delivered in First in, First out order</p></li>
<li><p>Messages will be delivered one or more times and message delivery order is indeterminate</p></li>
</ol>


<p>答案：D</p>

<p>参考文档：<a href="https://aws.amazon.com/sqs/faqs/">https://aws.amazon.com/sqs/faqs/</a></p>

<p>解析：SQS为了保持高可用，会在多个服务器间duplicate消息，所以消息可能会被delivery多次，但会保证至少被delivery一次；另外由于分布式的特性，所以消息的delivery顺序无法得到保证</p>

<hr />

<p>EC2 instances are launched from Amazon Machine Images (AMIs). A given public AMI:</p>

<ol type="a">
<li><p>can be used to launch EC2 instances in any AWS region</p></li>
<li><p>can only be used to launch EC2 instances in the same country as the AMI is stored</p></li>
<li><p>can only be used to launch EC2 instances in the same AWS region as the AMI is stored</p></li>
<li><p>can only be used to launch EC2 instances in the same AWS availability zone as the AMI is stored</p></li>
</ol>


<p>答案：C</p>

<p>参考文档：<a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AMIs.html">http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AMIs.html</a></p>

<p>解析：AMI只在当前region可用（不过AMI的ID是global范围内唯一的）；如果想跨region的话需要copy到其它region。</p>

<hr />

<p>Company B provides an online image recognition service and utilizes SQS to decouple system
components for scalability. The SQS consumers poll the imaging queue as often as possible to keep endto-end
throughput as high as possible. However, Company B is realizing that polling in tight loops is
burning CPU cycles and increasing costs with empty responses. How can Company B reduce the number
of empty responses?</p>

<ol type="a">
<li><p>Set the imaging queue VisibilityTimeout attribute to 20 seconds</p></li>
<li><p>Set the imaging queue ReceiveMessageWaitTimeSeconds attribute to 20 seconds</p></li>
<li><p>Set the imaging queue MessageRetentionPeriod attribute to 20 seconds</p></li>
<li><p>Set the DelaySeconds parameter of a message to 20 seconds</p></li>
</ol>


<p>答案：B</p>

<p>参考文档：<a href="http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-long-polling.html">http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-long-polling.html</a></p>

<p>解析：这个需要使用SQS的long pulling；方式之一就是设置queue的ReceiveMessageWaitTimeSeconds属性</p>

<hr />

<p>You attempt to store an object in the US-STANDARD region in Amazon S3, and receive a confirmation
that it has been successfully stored. You then immediately make another API call and attempt to read
this object. S3 tells you that the object does not exist. What could explain this behavior?</p>

<ol type="a">
<li><p>US-STANDARD uses eventual consistency and it can take time for an object to be readable in a bucket.</p></li>
<li><p>Objects in Amazon S3 do not become visible until they are replicated to a second region.</p></li>
<li><p>US-STANDARD imposes a 1 second delay before new objects are readable</p></li>
<li><p>You exceeded the bucket object limit, and once this limit is raised the object will be visible.</p></li>
</ol>


<p>答案：A</p>

<p>参考文档：<a href="http://docs.aws.amazon.com/AmazonS3/latest/dev/Introduction.html">http://docs.aws.amazon.com/AmazonS3/latest/dev/Introduction.html</a></p>

<p>解析：这道题有点过时了，当时US-STANDARD不支持read-after-write，使用的是eventual consistency，所以当写入一个object以后，不一定会立即读到。现在已经没有US-STANDARD region了（被重命名了）。而且所有region都支持read-after-write了。</p>

<hr />

<p>You have reached your account limit for the number of CloudFormation stacks in a region. How do you
increase your limit?</p>

<ol type="a">
<li><p>Make an API call</p></li>
<li><p>Contact AWS</p></li>
<li><p>Use the console</p></li>
<li><p>You cannot increase your limit</p></li>
</ol>


<p>答案：B</p>

<p>参考文档： <a href="http://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html#limits_cloudformation">http://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html#limits_cloudformation</a></p>

<p><a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cloudformation-limits.html">http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cloudformation-limits.html</a></p>

<p>解析：stack数量的限制只是一个软限制，所以可以通过向AWS发请求来放宽限制。</p>

<hr />

<p>Which statements about DynamoDB are true? (Pick 2 correct answers)</p>

<ol type="a">
<li><p>DynamoDB uses a pessimistic locking model</p></li>
<li><p>DynamoDB uses optimistic concurrency control</p></li>
<li><p>DynamoDB uses conditional writes for consistency</p></li>
<li><p>DynamoDB restricts item access during reads</p></li>
<li><p>DynamoDB restricts item access during writes</p></li>
</ol>


<p>答案：BC</p>

<p>参考文档： <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithItems.html">http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithItems.html</a>
解析：这个题目需要对DynamoDB有深入了解，具体可以查看相关文档</p>

<hr />

<p>What is one key difference between an Amazon EBS-backed and an instance-store backed instance?</p>

<ol type="a">
<li><p>Instance-store backed instances can be stopped and restarted</p></li>
<li><p>Auto scaling requires using Amazon EBS-backed instances</p></li>
<li><p>Amazon EBS-backed instances can be stopped and restarted</p></li>
<li><p>Virtual Private Cloud requires EBS backed instances</p></li>
</ol>


<p>答案：C</p>

<p>参考文档：<a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ComponentsAMIs.html">http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ComponentsAMIs.html</a></p>

<hr />

<p>A corporate web application is deployed within an Amazon VPC, and is connected to the corporate data
center via IPSec VPN. The application must authenticate against the on-premise LDAP server. Once
authenticated, logged-in users can only access an S3 keyspace specific to the user.
Which two approaches can satisfy the objectives?</p>

<ol type="a">
<li><p>The application authenticates against LDAP. The application then calls the IAM Security Service to login
to IAM using the LDAP credentials. The application can use the IAM temporary credentials to access the
appropriate S3 bucket.</p></li>
<li><p>The application authenticates against LDAP, and retrieves the name of an IAM role associated with the
user. The application then calls the IAM Security Token Service to assume that IAM Role. The application
can use the temporary credentials to access the appropriate S3 bucket.</p></li>
<li><p>The application authenticates against IAM Security Token Service using the LDAP credentials. The
application uses those temporary AWS security credentials to access the appropriate S3 bucket.</p></li>
<li><p>Develop an identity broker which authenticates against LDAP, and then calls IAM Security Token Service
to get IAM federated user credentials. The application calls the identity broker to get IAM federated user
credentials with access to the appropriate S3 bucket.</p></li>
<li><p>Develop an identity broker which authenticates against IAM Security Token Service to assume an IAM
Role to get temporary AWS security credentials. The application calls the identity broker to get AWS
temporary security credentials with access to the appropriate S3 bucket.</p></li>
</ol>


<p>答案：BD</p>

<p>参考文档：<a href="https://aws.amazon.com/blogs/aws/aws-identity-and-access-management-now-with-identity-federation/">https://aws.amazon.com/blogs/aws/aws-identity-and-access-management-now-with-identity-federation/</a></p>

<p>解析：IAM认证一向是考察的重点。B采用的是assume role的方式，D采用的是federated user的方式。
A错误在于没有login to IAM这个功能；C、E错误在于认证应该通过LDAP，而不是STS。</p>

<hr />

<p>You run an ad-supported photo sharing website using S3 to serve photos to visitors of your site. At some
point you find out that other sites have been linking to the photos on your site, causing loss to your
business. What is an effective method to mitigate this?</p>

<ol type="a">
<li><p>Use CloudFront distributions for static content.</p></li>
<li><p>Remove public read access and use signed URLs with expiry dates.</p></li>
<li><p>Block the IPs of the offending websites in Security Groups.</p></li>
<li><p>Store photos on an EBS volume of the web server.</p></li>
</ol>


<p>答案：B</p>

<p>参考文档：<a href="http://docs.aws.amazon.com/AmazonS3/latest/dev/ShareObjectPreSignedURL.html">http://docs.aws.amazon.com/AmazonS3/latest/dev/ShareObjectPreSignedURL.html</a></p>

<p>解析：使用signed URL或者创建bucket policy都可以防止盗链。</p>

<hr />

<p>Your application is trying to upload a 6 GB file to Simple Storage Service and receive a &ldquo;Your proposed
upload exceeds the maximum allowed object size.&rdquo; error message. What is a possible solution for this?</p>

<ol type="a">
<li><p>None, Simple Storage Service objects are limited to 5 GB</p></li>
<li><p>Use the multi-part upload API for this object</p></li>
<li><p>Use the large object upload API for this object</p></li>
<li><p>Contact support to increase your object size limit</p></li>
<li><p>Upload to a different region</p></li>
</ol>


<p>答案:B</p>

<p>参考文档：<a href="http://docs.aws.amazon.com/AmazonS3/latest/dev/UploadingObjects.html">http://docs.aws.amazon.com/AmazonS3/latest/dev/UploadingObjects.html</a></p>

<p>解析：所以S3能存放的最大对象是5T，但单个put操作支持的最大对象只有5G，超过5G的需要使用multi-part upload API上传。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在AWS中创建NAT节点]]></title>
    <link href="http://www.huangbowen.net/blog/2015/01/17/create-nat-node-in-aws/"/>
    <updated>2015-01-17T23:23:15+08:00</updated>
    <id>http://www.huangbowen.net/blog/2015/01/17/create-nat-node-in-aws</id>
    <content type="html"><![CDATA[<p>NAT, Network Address Translation,即网络地址转换。当内部网络的主机想要访问外网，但是又不想直接暴露给公网，可以通过NAT节点来访问外网。这样做有两个好处，第一是内网的主机无需拥有公网IP就可访问网络（NAT节点需要公网IP），节约了公网IP；第二是内网的主机由于没有公网IP，所以公网的电脑无法访问到它，这样就可以隐藏自己。一个很经典的示例是假如你有一台数据库服务器放置在内网中，为在同一个内网中的web服务器提供数据服务，为了安全性考虑你不会把它直接暴露在公网中。但是数据库服务器有时候自己是需要访问公网的，比如需要升级数据库服务器中的某些软件等。采用NAT方案可以很好的解决这个问题。</p>

<!-- more -->


<p>下图是NAT节点的功能示意图。</p>

<p><img src="/images/natnode.png"></p>

<p>一些路由器或者装有特定软件的主机都可以作为NAT节点。在AWS中如果你想创建一个NAT节点的话那是非常的方便，因为AWS直接提供了预装了NAT软件的AMI，你只需直接使用该AMI在你的公共子网中实例化一台机器，并进行相应的配置即可。</p>

<p>下面的图展示了在AWS中的一个经典的VPC架构。该VPC里面建立了两个子网，一个是公共子网，通过Intenet Geteway和公网连接；一个是私有子网，无法直接访问公网。然后在公共子网中建立了一个EC2机器，使用的是AWS提供的具有NAT功能的AMI，并为它分配了一个弹性IP，这样该EC2就是一个NAT节点。在私有子网的所有机器都具有了通过该NAT节点访问外网的能力。</p>

<p><img src="/images/vpcandnat.png"></p>

<p>为了创建这样一套网络及机器，最简便的方式当然是使用AWS提供的CloudFormation了。如果不了解CloudFormation，可以看我以前写过的一篇文章 <a href="http://www.huangbowen.net/blog/2013/10/23/aws-cloudformation/">《亚马逊云服务之CloudFormation》</a>。下面展示的是创建该整个VPC的CloudFormation脚本。</p>

<pre><code class="json">
{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Setup a vpc, which contains two subnets and one NAT machine",
  "Parameters": {
    "KeyName": {
      "Description": "Name of and existing EC2 KeyPair to enable SSH access to the instance",
      "Type": "String"
    },
    "VpcCidr": {
      "Description": "CIDR address for the VPC to be created.",
      "Type": "String",
      "Default": "10.2.0.0/16"
    },
    "AnyCidr": {
      "Description": "CIDR address for Any Where.",
      "Type": "String",
      "Default": "0.0.0.0/0"
    },
    "AvailabilityZone1": {
      "Description": "First AZ.",
      "Type": "String",
      "Default": "cn-north-1a"
    },
    "PublicSubnetCidr": {
      "Description": "Address range for a public subnet to be created in AZ1.",
      "Type": "String",
      "Default": "10.2.1.0/24"
    },
    "PrivateSubnetCidr": {
      "Description": "Address range for private subnet.",
      "Type": "String",
      "Default": "10.2.2.0/24"
    },
    "NATInstanceType": {
      "Description": "Instance type for NAT",
      "Type": "String",
      "Default": "t1.micro"
    }
  },
  "Mappings": {
    "AWSNATAMI": {
      "cn-north-1": {
        "AMI": "ami-eab220d3"
      }
    }
  },
  "Resources": {
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": {
          "Ref": "VpcCidr"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "VPC"
          }
        ]
      }
    },
    "InternetGateWay": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "INTERNET_GATEWAY"
          }
        ]
      }
    },
    "GatewayToInternet": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "InternetGatewayId": {
          "Ref": "InternetGateWay"
        },
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "PublicSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": {
          "Ref": "PublicSubnetCidr"
        },
        "AvailabilityZone": {
          "Ref": "AvailabilityZone1"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "PUBLIC_SUBNET"
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "PrivateSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": {
          "Ref": "PrivateSubnetCidr"
        },
        "AvailabilityZone": {
          "Ref": "AvailabilityZone1"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "PRIVATE_SUBNET"
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "DefaultSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Default Instance SecurityGroup",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "-1",
            "CidrIp": {
              "Ref": "VpcCidr"
            }
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "DEFAULT_SECURITY_GROUP"
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "PublicRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "PUBLIC_ROUTE_TABLE"
          }
        ]
      }
    },
    "PublicRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": {
          "Ref": "AnyCidr"
        },
        "GatewayId": {
          "Ref": "InternetGateWay"
        },
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        }
      }
    },
    "PublicSubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        },
        "SubnetId": {
          "Ref": "PublicSubnet"
        }
      }
    },
    "NATEIP": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "InstanceId": {
          "Ref": "NATInstance"
        }
      }
    },
    "NATInstance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "InstanceType": {
          "Ref": "NATInstanceType"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "SubnetId": {
          "Ref": "PublicSubnet"
        },
        "SourceDestCheck": false,
        "ImageId": {
          "Fn::FindInMap": [
            "AWSNATAMI",
            {
              "Ref": "AWS::Region"
            },
            "AMI"
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "NAT"
          }
        ],
        "SecurityGroupIds": [
          {
            "Ref": "NATSecurityGroup"
          }
        ]
      }
    },
    "PrivateSubnetRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "PRIVATE_SUBNET_ROUTE_TABLE"
          }
        ]
      }
    },
    "PrivateSubnetRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": {
          "Ref": "AnyCidr"
        },
        "InstanceId": {
          "Ref": "NATInstance"
        },
        "RouteTableId": {
          "Ref": "PrivateSubnetRouteTable"
        }
      }
    },
    "PrivateSubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "PrivateSubnetRouteTable"
        },
        "SubnetId": {
          "Ref": "PrivateSubnet"
        }
      }
    },
    "NATSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "NAT Instance SecurityGroup",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "-1",
            "CidrIp": {
              "Ref": "VpcCidr"
            }
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "NAT_SECURITY_GROUP"
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      }
    }
  },
  "Outputs": {
    "VPCId": {
      "Description": "VPC id",
      "Value": {
        "Ref": "VPC"
      }
    },
    "PublicSubnetId": {
      "Description": "public subnet id",
      "Value": {
        "Ref": "PublicSubnet"
      }
    },
    "PrivateSubnetId": {
      "Description": "private subnet id",
      "Value": {
        "Ref": "PrivateSubnet"
      }
    },
    "NATSecurityGroupId": {
      "Description": "NAT SG id",
      "Value": {
        "Ref": "NATSecurityGroup"
      }
    },
    "NATEIP": {
      "Description": "NAT Server EIP.",
      "Value": {
        "Ref": "NATEIP"
      }
    }
  }
}
</code></pre>

<p>你可以通过AWS提供的图形化界面AWS Management Console来使用该CloudFormation脚本，也可以通过AWS CLI来使用。使用以上的CloudFormation脚本创建的VPC可以一键创建你AWS中的基础网络架构。从此再也不用为配置网络发愁了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AWS助理架构师样题解析]]></title>
    <link href="http://www.huangbowen.net/blog/2014/10/22/aws-cert-sample-question/"/>
    <updated>2014-10-22T20:33:42+08:00</updated>
    <id>http://www.huangbowen.net/blog/2014/10/22/aws-cert-sample-question</id>
    <content type="html"><![CDATA[<p>AWS 认证是对其在 AWS 平台上设计、部署和管理应用程序所需的技能和技术知识的一种认可。获得证书有助于证明您使用 AWS 的丰富经验和可信度，同时还能提升您所在的组织熟练使用基于 AWS 云服务应用的整体水平。</p>

<!-- more -->


<p>目前亚马逊推出了Solutions Architect,Developer和SysOps Administrator三个方向的认证。每个方向又分为Associate Level(助理级)，Professional Level（专家级）和Master Level（大师级）。当然目前只有Solutions Architect开放了Professional Level,其他层级会逐步开放中。</p>

<p><img src="/images/cert_roadmap_Q214_EN.png"></p>

<p>最近在打算备考AWS的Solutions Architect的Associate Level。关于这个考试AWS出了一个考试样题。下载链接：<a href="http://awstrainingandcertification.s3.amazonaws.com/production/AWS_certified_solutions_architect_associate_blueprint.pdf">http://awstrainingandcertification.s3.amazonaws.com/production/AWS_certified_solutions_architect_associate_blueprint.pdf</a></p>

<p>我把样题都做了一遍，并且都尽力找到了答案在AWS文档中的出处。以下是样题和解答。</p>

<p>Amazon Glacier is designed for: (Choose 2 answers)</p>

<p>A.active database storage.</p>

<p>B.infrequently accessed data.</p>

<p>C.data archives.</p>

<p>D.frequently accessed data.</p>

<p>E.cached session data.</p>

<p>答案：B和C</p>

<p>出处文档：<a href="http://aws.amazon.com/glacier/?nc2=h_ls">http://aws.amazon.com/glacier/?nc2=h_ls</a></p>

<blockquote><blockquote><p>Amazon Glacier is an extremely low-cost cloud archive storage service that provides secure and durable storage for data archiving and online backup. In order to keep costs low, Amazon Glacier is optimized for data that is infrequently accessed and for which retrieval times of several hours are suitable.</p></blockquote></blockquote>

<p>Your web application front end consists of multiple EC2 instances behind an Elastic Load Balancer. You
configured ELB to perform health checks on these EC2 instances. If an instance fails to pass health
checks, which statement will be true?</p>

<p>A.The instance is replaced automatically by the ELB.</p>

<p>B.The instance gets terminated automatically by the ELB.</p>

<p>C.The ELB stops sending traffic to the instance that failed its health check.</p>

<p>D.The instance gets quarantined by the ELB for root cause analysis.</p>

<p>答案：C</p>

<p>出处文档：<a href="http://aws.amazon.com/elasticloadbalancing/?nc2=h_ls">http://aws.amazon.com/elasticloadbalancing/?nc2=h_ls</a></p>

<blockquote><blockquote><p>Elastic Load Balancing ensures that only healthy Amazon EC2 instances receive traffic by detecting unhealthy instances and rerouting traffic across the remaining healthy instances.</p></blockquote></blockquote>

<p>You are building a system to distribute confidential training videos to employees. Using CloudFront, what
method could be used to serve content that is stored in S3, but not publically accessible from S3
directly?</p>

<p>A.Create an Origin Access Identity (OAI) for CloudFront and grant access to the objects in your S3
bucket to that OAI.</p>

<p>B.Add the CloudFront account security group “amazon-cf/amazon-cf-sg” to the appropriate S3 bucket
policy.</p>

<p>C.Create an Identity and Access Management (IAM) User for CloudFront and grant access to the
objects in your S3 bucket to that IAM User.</p>

<p>D.Create a S3 bucket policy that lists the CloudFront distribution ID as the Principal and the target
bucket as the Amazon Resource Name (ARN).</p>

<p>答案：A</p>

<p>OAI介绍：<a href="http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-restricting-access-to-s3.html">http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-restricting-access-to-s3.html</a></p>

<p>OAI基本上就是专为这个场景引入的。</p>

<p>Which of the following will occur when an EC2 instance in a VPC (Virtual Private Cloud) with an
associated Elastic IP is stopped and started? (Choose 2 answers)</p>

<p>A.The Elastic IP will be dissociated from the instance</p>

<p>B.All data on instance-store devices will be lost</p>

<p>C.All data on EBS (Elastic Block Store) devices will be lost</p>

<p>D.The ENI (Elastic Network Interface) is detached</p>

<p>E.The underlying host for the instance is changed</p>

<p>答案：B E</p>

<p>这个题难度比较高。可以用排除法，A，C，D肯定不能选，B是对的，那么剩下一个答案只有E了啊。</p>

<p>In the basic monitoring package for EC2, Amazon CloudWatch provides the following metrics:</p>

<p>A.web server visible metrics such as number failed transaction
requests</p>

<p>B.operating system visible metrics such as memory utilization</p>

<p>C.database visible metrics such as number of connections</p>

<p>D.hypervisor visible metrics such as CPU utilization</p>

<p>答案：D</p>

<p>注意题干说的是basic monitoring,A,B,C肯定不对。具体支持的监控指标可见<a href="http://docs.aws.amazon.com/zh_cn/AmazonCloudWatch/latest/DeveloperGuide/ec2-metricscollected.html#ec2-metrics">http://docs.aws.amazon.com/zh_cn/AmazonCloudWatch/latest/DeveloperGuide/ec2-metricscollected.html#ec2-metrics</a>。D是唯一接近正确答案的，但是我对hypervisor了解不多，有些迷惑人。</p>

<p>Which is an operational process performed by AWS for data security?</p>

<p>A.AES-256 encryption of data stored on any shared storage device</p>

<p>B.Decommissioning of storage devices using industry-standard practices</p>

<p>C.Background virus scans of EBS volumes and EBS snapshots</p>

<p>D.Replication of data across multiple AWS Regions</p>

<p>E.Secure wiping of EBS data when an EBS volume is unmounted</p>

<p>答案：B</p>

<p>具体可以查看 was security whitepaper: <a href="https://media.amazonwebservices.com/pdf/AWS_Security_Whitepaper.pdf">https://media.amazonwebservices.com/pdf/AWS_Security_Whitepaper.pdf</a></p>

<p>Storage Device Decommissioning 小节里面有这么一句话：</p>

<blockquote><blockquote><p>All decommissioned magnetic storage devices are
degaussed and physically destroyed in accordance with industry-standard practices.</p></blockquote></blockquote>

<p>To protect S3 data from both accidental deletion and accidental overwriting, you should:</p>

<p>A.enable S3 versioning on the bucket</p>

<p>B.access S3 data using only signed URLs</p>

<p>C.disable S3 delete using an IAM bucket policy</p>

<p>D.enable S3 Reduced Redundancy Storage</p>

<p>E.enable Multi-Factor Authentication (MFA) protected access</p>

<p>答案：A</p>

<p>出处文档:<a href="http://docs.aws.amazon.com/AmazonS3/latest/dev/Versioning.html">http://docs.aws.amazon.com/AmazonS3/latest/dev/Versioning.html</a></p>

<blockquote><blockquote><p>Versioning-enabled buckets enable you to recover objects from accidental deletion or overwrite.</p></blockquote></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用亚马逊的Route53服务]]></title>
    <link href="http://www.huangbowen.net/blog/2014/04/23/use-aws-route53/"/>
    <updated>2014-04-23T23:36:22+08:00</updated>
    <id>http://www.huangbowen.net/blog/2014/04/23/use-aws-route53</id>
    <content type="html"><![CDATA[<p>自从自己的博客从github迁移到AWS以上，再也不用担心Github被墙了。再加上CloudFront的CDN功能，那访问速度真是杠杆的，无论是在中国内陆，还是澳洲海边，秒开无压力。</p>

<!-- more -->


<p>但是这几天突然发现博客打不开了。这可是切换到AWS上这么久以来的头一次。仔细研究了一下发现是自己的独立域名解析不到地址。我的独立域名买的是国内某公司的，使用的DNS服务器也是他们默认提供的。给他们技术人员反映以后，发现问题更有意思了。我在澳洲无法访问，而他在国内访问一切正常。这真是奇葩啊。</p>

<p>痛定思痛，决定将自己的域名解析服务迁移到AWS上来，使用Route53服务。</p>

<p>进入AWS Management Console以后，选择Route 53.</p>

<p><img src="/images/route53.png" width="700"></p>

<p>在主界面点击<code>Create Hosted Zone</code>，输入Domain name和comments。Domain name是你的域名，comments是描述。</p>

<p><img src="/images/create_hosted_zone.png" width="800"></p>

<p>完成以后就会看到有一个条目显示在表格中。双击这条记录。可以看到AWS已经为你创建了NS和SOA两种类型的Record Set。NS类型中的4个地址以后会用到，需要将你的域名提供商的DNS服务器换为这里列出的四个。</p>

<p><img src="/images/hosted_zone_list.png" width="800"></p>

<p>我们先为WWW创建一个Rcord Set。点击<code>Create Record Set</code>按钮，在在右侧输入相应的信息。</p>

<p><img src="/images/create_record_set.png" width="800"></p>

<p>AWS支持多种类型，由于我想让www.huangbowen.net指向我cloudfront的endpoint，所以选择CNAME，Value为我cloud front中的endpoint。最后点击<code>create</code>按钮。</p>

<p>这样在AWS这边就配置完成了。最后是需要登录到域名提供商的后台中，将域名解析服务器给换掉。</p>

<p><img src="/images/change_DNS.png" width="800"></p>

<p>在这里，将DNS换为之前AWS自动生成的NS地址。</p>

<p>这样就大功告成了，要等待2小时到1天来让新的解析方式生效。这下可以达到全年99.99%可访问率了吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[亚马逊云服务之CloudFormation]]></title>
    <link href="http://www.huangbowen.net/blog/2013/10/23/aws-cloudformation/"/>
    <updated>2013-10-23T16:07:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/10/23/aws-cloudformation</id>
    <content type="html"><![CDATA[<p>亚马逊的Web Service其实包含了一套云服务。云服务主要分为三种:</p>

<ul>
<li><p>IaaS: Infrastructure as a service,基础设施即服务。</p></li>
<li><p>PaaS: Platform as a service, 平台即服务。</p></li>
<li><p>SaaS: Software as a service, 软件即服务。</p></li>
</ul>


<p>而亚马逊提供的云服务至少涵盖了前面两种。以下是亚马逊提供的各种服务。</p>

<!-- more -->


<p><img src="/images/cloudformation1.png" width="680"></p>

<p>以上的图中S3、EC2等就属于IaaS，RDS、DynamoDB等就属于PaaS。</p>

<p>今天分享的是亚马逊的CloudFormation，亚马逊将其归类为Deployment&amp;Management（部署及管理类别）。为什么亚马逊要推出这项服务那？我们可以假设一个场景。如果你要将一个WordPress网站部署到亚马逊上，你需要以下几步:创建一个EC2实例->在此EC2实例上配置WordPress->创建RDS数据库实例->在WordPress中配置与该RDS的连接。整个过程耗时耗力，需要在亚马逊不同的云服务间跳转。这些操作关联性很强，不具备自动化。如果你使用了CloudFormation以后，只需要在页面上点几个按钮，输入一些参数，就可以创建一个博客，省时省力,甚至完全不用任何UI，直接通过命令行完成。</p>

<p><strong>CloudFormation给予了用户一种简单的方法来创建和管理一系列有关联的AWS的资源,可以有序的及可预见的初始化和更新这些资源。</strong></p>

<p>要了解CloudFomation之前，先要了解几个概念。</p>

<h3>Template - 模板</h3>

<p>Template是CloudFormation的一个重要概念。Template本质上是一个json格式的文件。该文件定义了你需要使用那些AWS的资源，并且如何初始化这些资源。CloudFormation支持的资源如下图所示。</p>

<p><img src="/images/cloudformation2.png" width="680"></p>

<p>一个Template文件至少包含一下几个属性:</p>

<pre><code class="json">
{
    "AWSTemplateFormatVersion" : "2010-09-09",  //Template版本

    "Description" : "描述该Template的用途",

    "Parameters": {        // 应用该Template需要配置的参数
    },

    "Resources" : {        // 使用到的AWS的资源及它们之间的关系
    },

    "Outputs" : {        // stack创建完毕后的一系列返回值
    }
}
</code></pre>

<p>这个Template就是用来创建一个EC2的虚拟机。</p>

<pre><code class="json">
{ "AWSTemplateFormatVersion" : "2010-09-09",
  "Description" : "Create an EC2 instance running the Amazon Linux 32 bit AMI.",
  "Outputs" : { "InstanceId" : { "Description" : "The InstanceId of the newly created EC2 instance",
          "Value" : { "Ref" : "Ec2Instance" }
        } },
  "Parameters" : { "KeyPair" : { "Description" : "The EC2 Key Pair to allow SSH access to the instance",
          "Type" : "String"
        } },
  "Resources" : { "Ec2Instance" : { "Properties" : { "ImageId" : "ami-3b355a52",
              "KeyName" : { "Ref" : "KeyPair" }
            },
          "Type" : "AWS::EC2::Instance"
        } }
}
</code></pre>

<p>AWS官方提供了很多Template的资源，我们可以直接使用，当然也可以按需修改，甚至自己手动编写自己的Template。&lt;<a href="http://aws.amazon.com/cloudformation/aws-cloudformation-templates/">http://aws.amazon.com/cloudformation/aws-cloudformation-templates/</a> >列出了一系列可供使用的Template。</p>

<h3>Stack - 堆</h3>

<p>Template只是一个json格式的文件，如果想要使用它的话，需要创建一个Stack,在Stack中指定你要使用的Template,然后亚马逊才会按照Template中的定义来创建及初始化资源。可以在AWS Management Console中或通过命令行调用API的方式来创建Stack。</p>

<h2>实战</h2>

<p>接下来，我们就通过AWS Management Console，使用CloudFormation来创建一个部署在EC2上、使用RDS作为数据库的WordPress网站。</p>

<p>首先，需要登录到AWS Management Console，选择EC2服务，点击左侧菜单的Key Pair,创建一个Key Pair。这个Key Pair将在接下来被使用，主要使AWS能够ssh到创建的EC2机器上。当然你也可以使用已有的Key Pair。</p>

<p><img src="/images/cloudformation3.png" width="680"></p>

<p>然后选择CloudFormation服务，点击<code>Create Stack</code>按钮。</p>

<p>然后输入Stack名称，并选择一个Template。由于我们要创建一个WordPress的站点，可以选择<code>use a sample temple</code>,并选择WordPress这个模板。</p>

<p><img src="/images/cloudformation4.png" width="680"></p>

<p><img src="/images/cloudformation5.png" width="680"></p>

<p>然后点击<code>continue</code>按钮，配置相关的参数。注意在KeyName一项中输入我们第一步创建的Key Pair。</p>

<p><img src="/images/cloudformation6.png" width="680"></p>

<p>然后点击<code>continue</code>按钮，配置此Stack的标签，这个是可选项，可以跳过。再点一下<code>continue</code>，将会再次确认想要的创建的资源信息，继续后就可以看到资源正在创建了。</p>

<p><img src="/images/cloudformation7.png" width="680"></p>

<p>页面下半部分有很多标签，你可以随时查看该Stack的描述、资源、事件、参数、输出等各项信息。</p>

<p>等待大约20分钟，Stack就会执行完毕，在Outputs标签中你会看到有一个url。</p>

<p><img src="/images/cloudformation8.png" width="680"></p>

<p>这个就是我们创建的WordPress的入口地址，访问该链接会进入WordPress的初始化设置页面。</p>

<p><img src="/images/cloudformation9.png" width="680"></p>

<p>配置完以后，一个新的WordPress就诞生了，重新访问URL，你会看到你的博客首页。</p>

<p><img src="/images/cloudformation10.png" width="680"></p>

<h2>CloudFormer</h2>

<p>提到CloudFormation就不得不说CloudFormer。CloudFormer是亚马逊提供的一个工具，用来给已有的AWS资源创建CloudFormation Template。这样你在以后创建相同的AWS资源时就可以直接使用这个Template了。</p>

<p>要使用CloudFormer首先要创建一个Stack，CloudFormer就被部署到一台EC2机器上，通过这个Stack返回的Outputs的URL我们可以一步步勾选使用到的资源，最终生成一个Template，该Template会自动放置到你的S3中。</p>

<p>首先创建Stack,Template选择use a sample template,并选择CloudFormer。</p>

<p><img src="/images/cloudformation11.png" width="680"></p>

<p>然后点击<code>continue</code>，配置其他参数，直到走完创建Stack这个流程。</p>

<p><img src="/images/cloudformation12.png" width="680"></p>

<p>等待这个Stack创建完毕后，就可以从Outputs标签得到一个URL。这个URL是执行CloudFormer工具的入口地址。</p>

<p><img src="/images/cloudformation13.png" width="680"></p>

<p>点击此URL,即可按照配置一步步配置自己的Template。</p>

<p><img src="/images/cloudformation14.png" width="680"></p>

<p>流程走完后，生成的Template会存放到你的S3 bucket中。</p>

<hr />

<p>由于CloudFormation支持对几乎所有的AWS资源进行创建和配置，并且能够按照指定顺序创建，其Template简洁易懂、容易配置、可重用，所以是你使用AWS的不可多得的好帮手。</p>
]]></content>
  </entry>
  
</feed>
