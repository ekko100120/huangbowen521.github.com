<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: 继续集成 | 黄博文的地盘]]></title>
  <link href="http://www.huangbowen.net/blog/tags/继续集成/atom.xml" rel="self"/>
  <link href="http://www.huangbowen.net/"/>
  <updated>2014-09-23T23:54:31+10:00</updated>
  <id>http://www.huangbowen.net/</id>
  <author>
    <name><![CDATA[黄博文]]></name>
    <email><![CDATA[huangbowen521@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用MANIFEST.MF文件来track war包做持续部署]]></title>
    <link href="http://www.huangbowen.net/blog/2013/04/18/use-manifest-dot-mf-to-track-war-file/"/>
    <updated>2013-04-18T12:40:00+10:00</updated>
    <id>http://www.huangbowen.net/blog/2013/04/18/use-manifest-dot-mf-to-track-war-file</id>
    <content type="html"><![CDATA[<p>在我工作的项目中有这样一个需求。当通过自动部署脚本将当前一个CI构建的WAR包部署到指定服务器后，需要验证该WAR包是否被部署成功。</p>

<p>在这个项目中，持续集成服务器使用的是<a href="http://jenkins-ci.org/">Jenkins</a>，构建脚本使用的是<a href="http://maven.apache.org/">maven</a>，向服务器的部署使用的是Groovy写的部署脚本，调用了<a href="http://www.incanica.com/tour/whytableaux">Tableuax</a> API。</p>

<p>在<a href="http://jenkins-ci.org/">Jenkins</a>上有两个job，一个CI job，一个dev job。
每次提交代码都会在<a href="http://jenkins-ci.org/">Jenkins</a>上trigger CI ob，这个job会执行配置的<a href="http://maven.apache.org/">maven</a>命令<code>mvn clean install</code>，如果构建成功，会自动trigger dev job。这个job会执行部署脚本，部署脚本负责调用<a href="http://www.incanica.com/tour/whytableaux">Tableuax</a> API将前一个job构建的war包部署到服务器上。</p>

<!-- more -->


<p>由于部署是调用<a href="http://www.incanica.com/tour/whytableaux">Tableuax</a> API来实现的，我们需要在部署完成以后验证此次部署是否成功。如何进行那？可以分为如下几个步骤。</p>

<p><strong>首先, 当<a href="http://jenkins-ci.org/">Jenkins</a>的第一个job构建war包时，将这次构建的一些信息写入到MANIFEST.MF文件中。</strong></p>

<p>MANIFEST.MF文件是Java平台下的Jar包或者war包中都普遍存在的一个文件。这个文件通常被放置在META-INF文件夹下，名称通常为MANIFEST.MF。它其实相当于一个properties文件，里面都是一些键值对，特殊之处是每个jar包或者war包至多只能有一个MANIFEST.MF文件。</p>

<p>那么如何在<a href="http://jenkins-ci.org/">Jenkins</a>运行build时将本次构建的相关信息写入到MANIFEST.MF文件那？那要借助于maven.war.plugin插件。</p>

<p>当一个<a href="http://jenkins-ci.org/">Jenkins</a> job被执行时，会自动设置一些环境变量，这些环境变量可以在shell script, batch command或者Maven POM中被访问。（查看所有的环境变量请看<a href="https://wiki.jenkins-ci.org/display/JENKINS/Building+a+software+project#Buildingasoftwareproject-JenkinsSetEnvironmentVariables">这里</a>）。
所以我们可以在项目的pom.xml加入以下的plugin来设置一些build信息到MANIFEST.MF文件中。</p>

<pre><code class="xml">
    &lt;plugin&gt;
        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
        &lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt;
        &lt;version&gt;2.2&lt;/version&gt;
        &lt;configuration&gt;
            &lt;archive&gt;
                &lt;manifest&gt;
                    &lt;addDefaultImplementationEntries&gt;true&lt;/addDefaultImplementationEntries&gt;
                &lt;/manifest&gt;
                &lt;manifestEntries&gt;
                    &lt;Build-Number&gt;${BUILD_NUMBER}&lt;/Build-Number&gt;
                    &lt;Job-Name&gt;${JOB_NAME}&lt;/Job-Name&gt;
                    &lt;Build-Url&gt;${BUILD_URL}&lt;/Build-Url&gt;
                    &lt;Svn-Revision&gt;${SVN_REVISION}&lt;/Svn-Revision&gt;
                    &lt;Timestamp&gt;${maven.build.timestamp}&lt;/Timestamp&gt;
                &lt;/manifestEntries&gt;
            &lt;/archive&gt;
        &lt;/configuration&gt;
    &lt;/plugin&gt;
</code></pre>

<p><a href="http://jenkins-ci.org/">Jenkins</a> job执行完毕后，在打包好的WAR包中就含有一个MANIFEST.MF文件了。以下是一个示例。</p>

<pre><code class="xml">
Manifest-Version: 1.0
Implementation-Title: myWebApp
Implementation-Version: 1.1-SNAPSHOT
Job-Name: myWebApp-CI
Built-By: bowen
Created-By: Apache Maven
Timestamp: 20130417-1654
Build-Number: 118
Svn-Revision: 5606
Implementation-Vendor-Id: myWebApp
Build-Url: http://10.70.21.74:80/job/myWebApp/118/
Build-Jdk: 1.6.0_18
Implementation-Build: 2013-04-17 16:54:54
Archiver-Version: Plexus Archiver
</code></pre>

<p><strong>然后，创建一个页面来显示这些build信息，以便能随时查看当前部署在服务器上的war包的build number是多少，是由谁构建的，构建时间等信息。第二个job的部署脚本也可以通过这个页面得到build number，以此来判别部署的是否是想要的版本。</strong></p>

<p>这就牵扯到对MANIFEST.MF文件的读取了。有一个现成的库用于读取jar包或者war包中的MANIFEST.MF文件信息。</p>

<p>在项目的pom.xml文件中加入对这个库的依赖。</p>

<pre><code class="xml">
&lt;dependency&gt;  
    &lt;groupId&gt;com.jcabi&lt;/groupId&gt;  
    &lt;artifactId&gt;jcabi-manifests&lt;/artifactId&gt;  
    &lt;version&gt;0.7.17&lt;/version&gt; 
&lt;/dependency&gt;
</code></pre>

<p>对于war包而言，需要通过SevletContext来获取当前的MANIFEST.MF文件。首先需要创建一个继承自<code>ServletContextListener</code>接口的类来将ServletContext设置给Manifests对象。</p>

<pre><code class="java">
package com.thoughtworks

public class ContextListener implements ServletContextListener {  

    @Override  
    public void contextInitialized(ServletContextEvent event {    
        Manifests.append(event.getServletContext());  
    } 
}
</code></pre>

<p>然后需要在web.xml配置文件中将这个Listener加入到Listener列表中。</p>

<pre><code class="xml">
&lt;listener&gt;
&lt;listener-class&gt;com.thoughtworks.ContextListener&lt;/listener-class&gt;
&lt;/listener&gt;
</code></pre>

<p>这样就可以在Controller里直接使用Manifests对象来获取MANIFEST.MF文件记录的各种值了。</p>

<pre><code class="java">
String buildNumber = Manifests.read("Build-Number");
String buildJdk = Manifests.read("Build-Jdk");
String BuiltBy = Manifests.read("Built-By");
String timestamp = Manifests.read("Timestamp");
...
</code></pre>

<p>再建立一个jsp页面用于显示这些值即可。</p>

<p><strong>最后，部署脚本获取该页面的内容，判断页面内容中的build number是否为期望部署的build number。</strong></p>

<p>这只是判断部署的war包是不是期望的war包。如果想要验证其是完全可以工作的，就需要部署脚本调用smoke test来进行功能性测试了。这个留到下次再讲。</p>
]]></content>
  </entry>
  
</feed>
