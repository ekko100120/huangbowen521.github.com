<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: curry | 黄博文的地盘]]></title>
  <link href="http://www.huangbowen.net/blog/tags/curry/atom.xml" rel="self"/>
  <link href="http://www.huangbowen.net/"/>
  <updated>2014-02-17T00:48:37+08:00</updated>
  <id>http://www.huangbowen.net/</id>
  <author>
    <name><![CDATA[黄博文]]></name>
    <email><![CDATA[huangbowen521@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Haskell函数式编程之特性篇]]></title>
    <link href="http://www.huangbowen.net/blog/2013/03/17/haskell-functional-programming-feature/"/>
    <updated>2013-03-17T12:46:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/03/17/haskell-functional-programming-feature</id>
    <content type="html"><![CDATA[<p>函数式编程的定义是：</p>

<p>In computer science, functional programming is a programming paradigm that treats computation as the evaluation of mathematical functions and avoids stateand mutable data.
即：函数式编程是一种编程模型，他将计算机运算看做是数学中函数的计算，并且避免了引入状态及可变数据。</p>

<p>它更强调函数的应用，而不像命令式编程更强调状态的改变。</p>

<h2>无副作用（side effect）</h2>

<p>命令式函数可能会改变程序的状态，这就会对其产生<strong>副作用</strong>。在命令式编程中，在执行程序不同的状态下同一个函数的返回结果会发生改变。例如，下面是一个使用JavaScript写的函数。</p>

<p>```javascript</p>

<p>var state = true;
var getVal = function () [</p>

<pre><code> return state;
</code></pre>

<p>}</p>

<p><code>
</code>javascript</p>

<p>console.log(getVal()); //true
state = false;
console.log(getVal()); // false</p>

<p>```</p>

<!-- more -->


<p>注意我们调用了两次getVal(),但是其输出了不同的结果。而在Haskell中，对变量只有声明，没有赋值。即如果声明了一个值为true的state变量，就无法再将其修改为false。这叫做<strong>变量的不变性</strong>。</p>

<p>而函数式编程中如果描述状态的变化那，就是将状态变化作为函数的参数进行传递。</p>

<h2>延迟计算（lazy evaluation）</h2>

<p>正因为函数式编程无副作用，所以<strong>延迟计算</strong>（又称为惰性求值）就成为可能。
<strong>延迟计算</strong>指将一个表达式的值推迟到直到被需要时才进行计算。（delays the evaluation of an expression until its value is needed ）</p>

<p>它的优点是：</p>

<ul>
<li>避免了不需要的运算，从而提高的性能。</li>
<li>使创建无限的数据结构成为可能。</li>
</ul>


<p>例如，我们写一个将指定参数放置到一个无限长的数组中的函数。</p>

<p>```haskell</p>

<p>repeat' :: a -> [a]
repeat' x = x : repeat' x</p>

<p>```</p>

<p>第一行是对repeat'参数及返回值的定义，它接收一个类型a,返回a的数组。
第二行是repeat'函数的实现，它将x放置到一个无穷大的数组中。</p>

<p>在没有延迟计算特性的编程语言中，这种函数是根本无法使用的。因为一旦调用就会陷入死循环。
即使在支持延迟计算的编程语言中，我们直接输出这个数组:<code>print $ repeat' 10</code>,也会进入死循环。那么如何使用它那？我们可以写一个take函数，其可以返回数组中前几位元素。</p>

<p>```haskell
take' :: Int -> [a] -> [a]
take' 1 (x:xs) = [x]
take' index (x:xs) = x : (take' (index-1) xs)</p>

<p>```
我们这样调用它，</p>

<p>```bash</p>

<p>Prelude> take' 3 (repeat' 5)
[5,5,5]
Prelude> take' 3 (repeat' 'a')
"aaa"</p>

<p>```</p>

<p>Haskell对函数参数默认采取延迟计算的求值策略。所以这样在调用repeat'函数时并不是先将repeat'函数的结果数组计算出来，再进行take操作，而是take操作需要前几位元素，repeat'函数才会生成前几位元素。</p>

<h2>高阶函数(Higher-order function)</h2>

<p>一个函数成为<strong>高阶函数</strong>需要满足下面两条中的至少一条:</p>

<ol>
<li>将一个或多个函数作为输入。</li>
<li>输出是一个函数。</li>
</ol>


<p>换句话说，<strong>高阶函数就是将函数作为参数或者作为返回值的函数</strong>。其他函数都成<strong>为一阶函数</strong>(first order function)。其实这个概念最早来源于数学领域。</p>

<p>函数是Haskell世界中的一等公民，所以肯定支持高阶函数。举个例子，Haskell中有个map函数，它的定义是这样的:
map:: (a -> b) -> [a] -> [b]
它的作用是传入一个函数及一个数组，对该数组中的每一个元素应用此函数，从而转换为另一个数组。
我们可以自己实现一个map函数。</p>

<p>```haskell</p>

<p>map' :: (a -> b) -> [a] -> [b]
map' f [] = []
map' f (x:xs) =f x : map' f xs</p>

<p>```</p>

<p>map'函数接收两个参数，第一个参数是一个函数，该函数输入值为a类型的值，输出值为b类型的值，第二个参数为源数组。
我们调用ma p'函数时，可以直接写一个lambda表达式，对源数组进行各种操作。</p>

<p>```bash</p>

<p>Prelude> map' (\x -> x + 5)  [1,2,3]
[6,7,8]
Prelude> map' (\x -> x * x)  [1,2,3]
[1,4,9]</p>

<p>```</p>

<p>如果我们有这样一个需求，我们想通过map'函数对数组的每个对象都加上一个值n，这个n我不想直接定义在此lambda表达式中，能实现吗？答案是可以。</p>

<p>```haskell</p>

<p>outer = let n = 5 in map' (\x -> x + n) [1,2,3]
[6,7,8]</p>

<p>```</p>

<p>对于匿名函数(\x -> x + n)来说，n就是<strong>non-local variable</strong>。什么是<strong>non-local variable</strong>那？如果一个函数使用了一个变量，这个变量既不属于全局变量，也不属于在此函数中定义的变量，那这个变量对于此函数来说就是<strong>non-local variable</strong>。
所谓的闭包就是使用了non-local variable的函数。</p>

<h2>curry function</h2>

<p>curry function还真比较难翻译，先看看<a href="http://en.wikipedia.org/wiki/Currying">wiki</a>百科的翻译：</p>

<p>In mathematics and computer science, currying is the technique of transforming a function that takes multiple arguments (or a tuple of arguments) in such a way that it can be called as a chain of functions, each with a single argument (partial application).</p>

<p><strong>在数学领域和计算机科学领域，currying是一项将接收多个参数（或参数元组）函数转换为函数的链式调用的技术，链条中的每个函数接收单个参数。</strong></p>

<p>这句话看起来真费解。那么我用一个例子说明一个。</p>

<p>假设现在有一个函数为<code>f(x,y) = x/y</code>。那么<code>f(2,3)</code>的执行过程是什么样的那？ 首先，我们将x替换为2.那么得到了<code>f(2,y) = 2/y</code>。我们定义一个新的函数<code>g(y)= f(2,y) = 2/y</code>。再将y替换成3，那么得到了<code>g(3) = f(2,3) = 2/3</code>。这个<code>g(y)</code>函数就是<code>f(x,y)</code>的一个curried function.</p>

<p>举个例子。上文中我们构造了一个map'函数，它接收一个函数及一个数组。如果我们想实现一个名为doubleMe的函数，它接收一个数组，将数组中每个元素都翻一倍。这个可以这样写:</p>

<p>```haskell</p>

<p>doubleMe = map' (\x -> x * x)</p>

<p>```</p>

<p>注意看，定义doubleMe时我们使用了map'函数，但是给map'函数只传递了一个参数，并没有提供第二个参数。所以在调用doubleMe时，要给其传递一个数组。</p>

<p>```bash</p>

<p>Prelude> doubleMe [1,2,3]
[1,4,9]</p>

<p>```
doubleMe的函数完全等价于:</p>

<p>```haskell</p>

<p>doubleMe ary = map' (\x-> x * x) ary</p>

<p>```
换句话说，如果一个函数接收多个参数，那么接收部分参数的该函数也是一个函数。</p>
]]></content>
  </entry>
  
</feed>
