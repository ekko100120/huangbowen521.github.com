<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: blog | 黄博文的地盘]]></title>
  <link href="http://www.huangbowen.net/blog/tags/blog/atom.xml" rel="self"/>
  <link href="http://www.huangbowen.net/"/>
  <updated>2017-09-15T18:21:32+08:00</updated>
  <id>http://www.huangbowen.net/</id>
  <author>
    <name><![CDATA[黄博文]]></name>
    <email><![CDATA[huangbowen521@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[博客即代码]]></title>
    <link href="http://www.huangbowen.net/blog/2015/12/08/bloging-as-code/"/>
    <updated>2015-12-08T01:59:35+08:00</updated>
    <id>http://www.huangbowen.net/blog/2015/12/08/bloging-as-code</id>
    <content type="html"><![CDATA[<p>之前我写过一篇博客，<a href="http://www.huangbowen.net/blog/2013/04/01/min-jie-de-xie-bo-ke/">敏捷的写博客</a>，借鉴了敏捷看板的思想来管理博客。</p>

<!-- more -->


<p>而在DevOps领域有一个很火的技术实践叫做基础设施即代码。Kief对基础设施即代码的解释是这样子的：</p>

<blockquote><p>基础设施即代码是一种使用新的技术来构建和管理动态基础设施的方式。它把基础设施、工具和服务以及对基础设施的管理本身作为一个软件系统，采纳<strong>软件工程实践</strong>以结构化的安全的方式来管理对系统的变更。</p></blockquote>

<p>里面的关键一点是以<strong>软件工程实践</strong>的方式来管理基础设施。那么对于我们的博客可不可以也采纳软件工程实践的方式来管理那？答案是可行的。</p>

<ol>
<li><p>选取合适的<strong>语法</strong></p>

<p> 既然想写代码一样写博客，那么首先要选择一种语法了，这种语法就是<a href="(https://en.wikipedia.org/wiki/Markdown)">Markdown</a>。<a href="(https://en.wikipedia.org/wiki/Markdown)">Markdown</a>非常容易上手，包含的tag刚刚够用，尤其展示代码非常方便，自从用了它再也不用和烦人的CSS打交道了。人们不仅用<a href="(https://en.wikipedia.org/wiki/Markdown)">Markdown</a>在stackoverflow上发问题、解答问题，还在GITHUB上track issue，甚至现在写邮件也用<a href="(https://en.wikipedia.org/wiki/Markdown)">Markdown</a>了。拿它来写技术文章简直不用太爽。</p></li>
<li><p>选取合适的<strong>框架</strong></p>

<p> 实现基础设施代码需要选择一款基础设施自动化工具，这些工具的特点是全命令行操作，很容易实现自动化。那么建立自己的技术博客站点也需要选择一个博客框架，支持全命令行操作的博客框架有<a href="https://jekyllrb.com/">Jekyll</a>、<a href="http://octopress.org/">Octopress</a>、<a href="https://hexo.io/">Hexo</a>等。它们各自的特点不在本文的讨论范围。但我多说一句，我现在使用的是Octopress，我也用过Hexo，我更喜欢Hexo，原因有二，一是速度快，二是环境简单。</p></li>
<li><p>选取顺手的<strong>编辑器</strong></p>

<p> 这些博客框架的特点是可以Offline写作，然后一键发布。所以你可以选用任何你喜欢的编辑器来写文章，不用使用在线编辑器和各种样式问题、网络问题抗争了。Atom、Sublime或者专业编辑工具MacDown、Mou等都行。</p></li>
<li><p><strong>一切纳入版本管理</strong></p>

<p> 这些博客框架创建博客、生成博客、发布博客全部可以命令行操作。而且所有的配置（包括对站点的基本配置、插件的配置、主题的配置）都可以直接修改配置文本，博客也是以MarkDown的格式存储，所以整个站点都可以存放在GIT之类的版本控制库中。比如我的整站博客源码都放置在<a href="https://github.com/huangbowen521/huangbowen521.github.com/commits?author=huangbowen521">GitHub</a>上，从此再也不用更担心博客内容丢失了。</p></li>
<li><p><strong>灵活的发布策略</strong></p>

<p> 它们通过命令可以生成纯静态的博客，所以无需任何web服务器都可以运行。你可以将其放置到<a href="https://pages.github.com/">GitHub Pages</a>上，或者<a href="https://www.heroku.com/">Heroku</a>上都行，或者自己随便找台免费的云主机装个nignx即可。当然也有更高大上的做法，我把整个博客放置在AWS的S3上。S3是亚马逊推出的对象存储服务，并且我还是用了亚马逊提供的全球CDN加速功能CloudFront，对我的博客进行了全球CDN加速。无论是澳洲海边还是中国内陆，访问速度都是杠杠的。</p></li>
<li><p><strong>定制开发的能力</strong></p>

<p> 漂亮的主题风格也是选取一个博客框架需要考虑的一个因素。想要更换皮肤就太简单了，也是全命令行操作。拿Octopress举例，网上有很多热心用户制作的皮肤，都托管在github上，相中以后直接通过命令行操作就可以给你的博客换上最In的皮肤。</p>

<p> 另外还有对博客的定制化也是我们关心的。每款博客框架都有丰富的插件，这些插件的代码都放置在GitHub上，完全开源，安装配置插件也非常简单，命令行全部搞定。我自己也写了一些定制化的插件，比如当我发布一个新博客的时候，只需<code>rake deploy</code>一条命令就可以把我的博客推送到我的weibo和linkedin上，也可以把整个博客内容同步到我在博客园的<a href="http://www.cnblogs.com/huang0925/">博客站点</a>上。这些插件也开源在GitHub上，分别是<a href="https://github.com/huangbowen521/octopress-linkedin">octopress-linkedin</a>和<a href="https://github.com/huangbowen521/octopress-syncPost">octopress-syncPost</a>。</p></li>
</ol>


<hr />

<p>这样子，写博客变成了一种享受。进入咨询团队以后，坚持写博客也带来了其它一些好处。比如和客户讨论一个问题时，直接把我文章链接发给他说，说这个东西我之前专门写过博客，你看了就懂了。这样瞬间在客户面前树立了专业的形象。更有甚者，客户当着我的面搜索某个技术名词，第一页第一条赫然就是我写的博客。所以可以少费些口舌，把精力用到其它地方去。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[敏捷的写博客]]></title>
    <link href="http://www.huangbowen.net/blog/2013/04/01/min-jie-de-xie-bo-ke/"/>
    <updated>2013-04-01T12:49:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/04/01/min-jie-de-xie-bo-ke</id>
    <content type="html"><![CDATA[<h2>为什么写博客</h2>

<p>写技术博客对于程序员的提升是不可估量的。只要你坚持一段时间，你就会发现它给你带来的各种积极的变化。思考问题更加深入了，更容易关注细节了，表达能力也增强了&hellip;&hellip;</p>

<!-- more -->


<ol>
<li><p><strong>不断的总结自己。</strong>程序员面对的世界是非常复杂的，未知领域也很多，在解决问题时第一次的方式并不一定是最完美的，只有通过不断的总结，不断的反思，才更容易抓住事物的本质。随着程序员的水平提高，需要思考的问题就开始变的更深度，更抽象、更复杂。这个时候就会遇到瓶颈，而通过写博客的方式能将自己的经验整理成型，形成一个完善的体系。</p></li>
<li><p><strong>能够认识到自己的进步。</strong>编程是枯燥乏味的，持续学习更难坚持。而写博客能激励自己，让自己看到自己的进步，并逐步建立信心。</p></li>
<li><p><strong>加强记忆，方便回顾。</strong>对自己在平时的实践中的收获以博客的方式发表出来，本来就是一种记忆的强化。失败本身不能让人进步，而对失败的反思才能让人进步。使用博客记录下这些反思，才能保证不会在同一个地方跌倒两次。</p></li>
<li><p><strong>强化发散思维，跳出局部看问题。</strong>其实各种技术都有相似或想通的理论作支撑。这些如果只看别人博客，只从google上搜素一些得到一些只言片语是很难领悟出来的。而自己写作的过程中随着对自己思路的梳理，更容易提升看问题的高度，以观全貌。</p></li>
<li><p><strong>扩大个人影响力，获取更多机会。</strong>程序员从业有些年头以后，如果是喜欢技术的人，总会想与别人做些更深入、更高层次的交流，但毕竟水平越高，能进行这种交流的人就会越少、越分散。写作、演讲、著书立说，这都是让自己进入一个更高水平的交流圈的方式。进入了这个对话环境，你才发现：原来还有那么多可学、可发展的方向。很多人到了三十岁上下就开始惰怠、看不到发展方向，在我看来一个重要的原因就是眼界不开，没有进入一个更高水平的交流生态。（这一点感谢<a href="http://www.weibo.com/gigix">@JeffXiong</a>的总结）</p></li>
</ol>


<h2>写博客要端正心态</h2>

<p>很多人之所有不写博客，有各种各样的原因。有的说时间不够，有的说自己的积累不够，有的说没有文采…..</p>

<p>其实写博客就像一项业余爱好一样，看似不是工作中的分内事，但却更有助于自己的工作。</p>

<p>一个极端是怕写的幼稚，不敢下笔，不敢面对别人的评价。博客其实首先是写给自己看的，如果自己能有所收获，那就是值得的。</p>

<p>另一个极端是总想着不写则已，一写惊人。老想着自己的每篇博客都能博来大家的大量关注。其实再牛逼的作家总有几篇作品不尽如人意。但是没经历这些作品的历练，是无法揣摩出更深的意境。更何况我们是普通人，只要写出自己所感所想，虚心接收别人的意见、建议，就是巨大的进步。</p>

<h2>敏捷的写博客</h2>

<p>每个程序员都喜欢编码，但不是每个程序员都喜欢写博客。如果我们将写博客的过程与敏捷流程一一对应起来，使用编程的技法来写博客，那么能提起你的兴趣吗?</p>

<p>本人在写博客的过程中与敏捷手法结合起来，受益良多。</p>

<p>在一个敏捷团队中，一个典型的用户故事的声明周期是这样的。</p>

<p><img src="/images/t_storyLifeCycle.png" width="400"></p>

<p>其实我们可以将一篇博客看做一个用户故事。你既是IM(迭代经理),又是BA(业务分析师)，DEV（开发者）,QA(质量保证)，而阅读你博客的人就是你的产品的最终用户。你的目标是让你的产品大卖（有越来越多的人关注你的博客）。</p>

<ol>
<li><p><strong>扩充你的Backlog。</strong> 创建backlog的要点就是随时随地的记录你的idea。这有个一个很有趣的理论，大脑有两个工作模式，<a href="https://right-track-wrong-train.readthedocs.org/en/latest/thinking_and_learning/pragmatic_thinking_and_learning/chp3.html">线型模式(L型)和富模式（R型）</a>。L型在工作的时候经常被用到，其按部就班，抑制了发散思维。而工作之余大脑得到充分休息，更容易进入R型工作状态，更容易得到好的idea,这时候要赶快的记录下来。所以这就是我喜欢<a href="https://evernote.com/">evernote</a>原因之一:随时随地记录idea。比如我的backlog里面现在有很多打算完成的博客，其中有《重构手法解析》一篇。《重构手法解析》这篇是我在上班骑自行车的路上想到的idea，并在到办公室的第一件事就是把这个想法记下来，放到backlog中去。</p></li>
<li><p><strong>Analysis。</strong> 要点：先写大纲,再进行补充完善。对于某个idea，大概确定要写什么，想表达什么样的意思。无论是技术文章还是平时的一些反思总结文章，都要有一定的骨架。我们可以先将这些骨架确定，然后再填充内容，这就像软件的设计一样。比如《敏捷的写博客》这篇，我确定一个骨架就是：1，写博客的好处。 2，敏捷流程。 3，如何让写博客变得敏捷。有了这个大纲作为支撑，写的时候就不会漫无目的。</p></li>
<li><p><strong>Development。</strong> 要点：采用自由写技术。何为自由写？即针对当前的博客主题及大纲想到什么就写什么，而不用太纠结于用词造句。这就像你要修建一面墙壁，事先不需要计划收集特别的材料，只需要到处走走看看，捡一些好看的时候备用。直到准备造墙时，就从石头堆里面挑出匹配的石头安放。写一篇2000字的文章容易还是将4000字的草稿整理成为2000字的文章容易？相信大多数人会选择后者。</p></li>
<li><p><strong>Testing。</strong> 要点:斟酌语句，最后的检查，将草稿转化为定稿。</p></li>
<li><p><strong>Done。</strong>发表。</p></li>
</ol>


<p>是不是发表了以后就完了? NO。我们缺少了敏捷实践中最重要的一环，那就是retro（回顾会议）。我们需要吸收读者的评论，修正自己的观点，再对博客进行加工。</p>

<p>我的同事<a href="http://www.weibo.com/illusionking">@IM_ZhangYve</a>使用<a href="https://evernote.com/">evernote</a>来管理自己的文章。他将category建成了这个样子。</p>

<p><img src="http://images.cnblogs.com/cnblogs_com/huang0925/462982/o_evernote.jpg" alt="evernote category" /></p>

<p><img src="/images/t_evernote.jpg" width="400"></p>

<p>这样<a href="https://evernote.com/">evernote</a>就成了一个故事墙，每个用户故事就是一篇博客，当前那些处于backlog，那些处于WIP,一目了然。你所需要做的就是尽量把用户故事往done里面挪。</p>

<h2>使用敏捷的博客工具</h2>

<p>以上只是用敏捷的方法来管理博客，那有没有相应的工具来支持像敲代码一样的写博客？
有，那就是<a href="http://octopress.org/">octopress</a>。使用<a href="http://octopress.org/">octopress</a>博客框架写博客与写代码没什么两样。
具体如何使用<a href="http://octopress.org/">octopress</a>，请自行google或者直接去其官网。
下面简单讲下如何使用<a href="http://octopress.org/">octopress</a>发表一篇博客。</p>

<ul>
<li>创建一篇博客。</li>
</ul>


<pre><code class="bash">
:~/sourcecode/octopress$ rake new_post['敏捷的写博客']
mkdir -p source/_posts
Creating new post: source/_posts/2013-04-01-min-jie-de-xie-bo-ke.markdown
</code></pre>

<ul>
<li><p>编辑博客。</p>

<p>  使用任何你喜欢的编辑器打开<code>2013-04-01-min-jie-de-xie-bo-ke.markdown</code>文件，比如vim、emacs、sublime等。甚至编代码的ide都行。然后使用<a href="http://daringfireball.net/projects/markdown/">markdown</a>的语法来编辑你的博客。设置标题、设置列表、加粗、加下划线、代码高亮…一切根本无需借助html编辑器就可以轻松实现。</p></li>
<li><p>发布博客。</p></li>
</ul>


<pre><code class="bash">:~/sourcecode/octopress$ rake generate
:~/sourcecode/octopress$ rake deploy
</code></pre>

<p>不过毕竟将博客host在<a href="https://github.com">github</a>或<a href="http://www.heroku.com/">heroku</a>人气没有<a href="www.cnblogs.com">博客园</a>这么旺。我们可以通过同步的方式将博客同步到<a href="www.cnblogs.com">博客园</a>中。只要将screen.css文件引入到博客园中，就可以共用生成的html元素。我最喜欢的是<a href="https://github.com">github</a>显示代码的效果。</p>

<p>最后再推荐我们公司部分大牛的博客。</p>

<ul>
<li><p><a href="http://xiaopeng.me">明确思考</a></p></li>
<li><p><a href="http://dreamhead.blogbus.com">梦想风暴</a></p></li>
<li><p><a href="http://gigix.thoughtworkers.org">透明思考</a></p></li>
<li><p><a href="http://agiledon.github.com/">捷道</a></p></li>
<li><p><a href="http://www.iamhukai.com">I am Hu Kai</a></p></li>
<li><p><a href="http://michael.nona.name/">Michel Chen&rsquo;s Blog</a></p></li>
</ul>

]]></content>
  </entry>
  
</feed>
