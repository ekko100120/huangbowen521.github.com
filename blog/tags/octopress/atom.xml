<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Octopress | 黄博文的地盘]]></title>
  <link href="http://www.huangbowen.net/blog/tags/octopress/atom.xml" rel="self"/>
  <link href="http://www.huangbowen.net/"/>
  <updated>2017-06-08T22:58:17+08:00</updated>
  <id>http://www.huangbowen.net/</id>
  <author>
    <name><![CDATA[黄博文]]></name>
    <email><![CDATA[huangbowen521@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[分享最新的博客到LinkedIn Timeline]]></title>
    <link href="http://www.huangbowen.net/blog/2014/09/07/share-latest-post-to-linkedin/"/>
    <updated>2014-09-07T16:14:16+08:00</updated>
    <id>http://www.huangbowen.net/blog/2014/09/07/share-latest-post-to-linkedin</id>
    <content type="html"><![CDATA[<p>使用Octopress作为我的博客框架有两年了。使用起来一直很顺手，这个工具真正的把博客跟写代码等同起来，非常酷炫。再加上各种各样的定制化，简直是随心所欲。我针对自己的需求对Octopress框架进行了一些定制化，比如编写了一些插件自动将博客同步到博客园，以及部署时将博客部署到亚马逊云的S3上等。这个周末闲着无事，写了一个插件将最新的博客信息推送到LinkedIn的timeline上去。</p>

<!-- more -->


<p>代码已经放置到了Github上了，地址是<a href="https://github.com/huangbowen521/octopress-linkedin">https://github.com/huangbowen521/octopress-linkedin</a>。</p>

<p>先给一张图看看效果：</p>

<p><img src="/images/sharesample.png"></p>

<p>使用这个插件也挺简单。要做这么几步。</p>

<p>首先clone该repo，并复制repo里的_custom目录到你的Octopress根目录。</p>

<p>然后在<a href="https://developer.linkedin.com/">LinkedIn Developer Network</a>上<a href="https://www.linkedin.com/secure/developer?newapp=">注册一个应用程序</a>，注册完毕后在应用程序页面可以得到生成的api_key, api_secret, user_token, user_secret信息，把这些信息填到<code>_custom\linkedin_config.yml</code>文件中。</p>

<pre><code class="text _custom\linkedin_config.yml">
api_key: YOUR_API_KEY
api_secret: YOUR_API_SECRET
user_token: YOUR_USER_TOKEN
user_secret: YOUR_USER_SECRET
</code></pre>

<p><strong>注意:不要把linkedin_config.yml文件迁入到源代码管理工具中，因为这里面的数据不能泄露。</strong></p>

<p>在<code>Rakefile</code>文件中加入一个新的task。</p>

<pre><code class="ruby">
desc "Post the title and url of latest blog to LinkedIn"
task :linkedin do
  puts "Post the title and url of latest blog to LinkedIn"
  system "ruby _custom/post_linkedin.rb"
end
</code></pre>

<p>在<code>Gemfile</code>文件中添加一个新依赖: <code>gem oauth</code>，然后运行<code>bundle install</code>。</p>

<p>OK，大功告成，只需运行<code>rake linkedin</code>命名可以把最新的博客信息分享到你的LinkedIn中去。</p>

<p>你也可以定制化显示在LinkedIn上的信息，只需修改<code>_custom\linkedin.xml</code>文件即可。该文件的进一步解释可以参见<a href="https://developer.linkedin.com/documents/share-api#toggleview:id=xml">LinkedIn Share API文档</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[将我的博客迁移到亚马逊云端(1)]]></title>
    <link href="http://www.huangbowen.net/blog/2013/09/30/migrate-octopress-to-aws/"/>
    <updated>2013-09-30T14:09:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/09/30/migrate-octopress-to-aws</id>
    <content type="html"><![CDATA[<p><img src="/images/cloudcompute.png" width="400"></p>

<p><a href="http://octopress.org/">Octopress</a>已经被公认为Geeker的博客框架。它所拥有的特性都很符合Geeker的癖好:强大的命令行操作方式、简洁的MarkDown语法、灵活的插件配置、美轮美奂的theme（自带响应式设计哦）、完全可定义的部署&hellip;&hellip;</p>

<p>一般大家都喜欢把博客部署到github pages上，免费速度快，与<a href="http://octopress.org/">Octopress</a>无缝结合。但是自己最近迷上了AWS，就捉摸着将自己的<a href="http://octopress.org/">Octopress</a>博客部署到AWS的S3上，使用CloudFront做CDN，使用Amazon Route 53做域名映射。倒腾了两天，终于搞定了，也学到了很多东西。不敢私藏，拿出来和大家分享。</p>

<!-- more -->


<p>这篇文章主要讲如何将Octopress博客部署到S3上去。下一篇文章会讲如何将CloudFront做CDN,并与现有域名绑定。</p>

<p>在此之前先普及一些概念。</p>

<p>AWS - Amazon Web Service,亚马逊提供的云服务简称。</p>

<p>S3 - Amazon Simple Storage Service, 亚马逊提供的一种存储静态资源（如css、js、html文件，音视频文件）的服务。</p>

<p>CDN - Content Delivery Network, 内容分发网络。</p>

<p>Amazon CloudFront - 亚马逊提供的一种内容分发服务，提高你的网站访问速度。</p>

<p>Amazon Route 53 - 亚马逊提供的一种稳定高效的域名解析系统。</p>

<p>第一步，注册一个亚马逊的账号，注册地址是<a href="https://portal.aws.amazon.com/gp/aws/developer/registration/index.html">https://portal.aws.amazon.com/gp/aws/developer/registration/index.html</a>。注意注册的时候需要提供一张具备外币功能的信用卡。</p>

<p>第二步，登陆到Amazon management console里，单击右上角的名称，选择Security Credentials标签，然后点击左侧标签按照向导创建一个group,一个从属于这个group的user，并为该user生成一个Access key，记录下来Access key Id 及 Secret Access Key。亚马逊的文档还是非常详细的，不懂的可以多看看提示信息和帮助文档。</p>

<p>第三步，在Amazon management console里选择Services -> S3 service，并创建两个bucket。假如你的博客域名为example.com，那么两个bucket的名称分别为example.com,www.example.com。为什么要创建两个那？是因为我们要保证用户无论输入www.example.com还是example.com都可以访问我们的网站。</p>

<p><img src="/images/twobucket.png" width="780"></p>

<p>第四步，选择www.example.com这个bucket，点击properties标签，在Static Website Hosting中选择Redirect all requests to another host name，并配置‘Redirect all requests to:’为example.com。这样来自www.example.com bucket的访问都会自动转发给example.com这个bucket。我们只需为example.com这个bucket同步我们的博客文件即可。</p>

<p><img src="/images/redirectrequest.png" width="780"></p>

<p>第五步，选择example.com这个bucket，在Static Website Hosting中选择‘Enable Website Hosting’,并配置Index Document，我的是index.html。这个Index Document是默认返回的object名称。比如如果用户直接访问bucket的某个目录，系统会检测该目录下是否存在Index Document中配置的文件名，如果有则会自动返回这个object。</p>

<p><img src="/images/staticwebsitehosting.png" width="780"></p>

<p>第六步，选择'Permissions'标签，点击’add bucket policy‘按钮，加入如下的policy.</p>

<pre><code class="javascript">
{
     "Version": "2008-10-17",
     "Statement": [
          {
               "Sid": "AddPerm",
               "Effect": "Allow",
               "Principal": {
                    "AWS": "*"
               },
               "Action": "s3:GetObject",
               "Resource": "arn:aws:s3:::example.com/*"
          }
     ]
}
</code></pre>

<p>这个policy其实是给所有匿名用户访问该bucket里面文件的权限。</p>

<p><img src="/images/bucketpolicy.png" width="780"></p>

<p>第七步，还是在’Permissions‘标签里，点击’Add CORS configuration‘按钮，加入如下的配置：</p>

<pre><code class="xml">
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;CORSConfiguration xmlns="http://s3.amazonaws.com/doc/2006-03-01/"&gt;
    &lt;CORSRule&gt;
        &lt;AllowedOrigin&gt;*&lt;/AllowedOrigin&gt;
        &lt;AllowedMethod&gt;GET&lt;/AllowedMethod&gt;
        &lt;MaxAgeSeconds&gt;3000&lt;/MaxAgeSeconds&gt;
        &lt;AllowedHeader&gt;Authorization&lt;/AllowedHeader&gt;
    &lt;/CORSRule&gt;
&lt;/CORSConfiguration&gt;
</code></pre>

<p>这个是用来配置跨域访问的权限，即是否允许其他网站访问这个bucket上的资源。由于Octopress博客集成了很多插件，比如google analiycis, github等，都需要跨域加载JavaScript文件，执行JavaScript文件，所以要加入这些配置。</p>

<p><img src="/images/corsconfiguration.png" width="780"></p>

<p>第八步，下载安装<a href="http://s3tools.org/s3cmd">s3cmd</a>。<a href="http://s3tools.org/s3cmd">s3cmd</a>是一款操作AWS S3的命令行工具。通过它可以创建或删除bucket，上传或下载object，我们在部署octopress博客时，主要就是通过它来将博客上传到S3上去。如果是mac系统化可以通过HomeBrew直接安装。</p>

<pre><code class="bash">
# brew install s3cmd
</code></pre>

<p>如果是windows系统可以从<a href="http://s3tools.org/s3cmd">官网</a>下载安装包进行安装。</p>

<p>第九步，配置<a href="http://s3tools.org/s3cmd">s3cmd</a>与你的S3的连接。在命令行下输入<code>s3cmd --configure</code>，按照向导来配置与S3的连接。这时候在前面保存的Access key就派上用场了。所有的配置信息其实都存在当前用户名下的.s3cfg文件中。你也可以随后修改这些信息。运行<code>s3cmd ls</code>来检测是否配置成功。</p>

<pre><code class="bash">
$ s3cmd ls #列出所有的bucket
2013-09-27 05:05  s3://huangbowen.net
2013-09-28 03:24  s3://www.huangbowen.net
</code></pre>

<p>第十步，配置Octopress支持向S3的部署。在Octopress目录下找到Rakefile文件，修改或添加下述配置。</p>

<pre><code class="xml">
deploy_default = "s3"   #部署task
s3_bucket = "example.com" # bucket名称

s3_cache_secs = 3600  # header中的cache controll属性，即缓存时间，后面CloudFront要用到
</code></pre>

<p>然后添加一个新的task。</p>

<pre><code class="ruby">
desc "Deploy website via s3cmd"
task :s3 do
  puts "## Deploying website via s3cmd"
  ok_failed system("s3cmd sync --acl-public --reduced-redundancy --add-header \"Cache-Control: max-age=#{s3_cache_secs}\"  public/* s3://#{s3_bucket}/")
end
</code></pre>

<p>OK，大功告成，运行<code>rake generate</code>
及<code>&amp;&amp; rake deploy</code>就可以将生成的静态站点上传到S3中区。然后就可以通过S3的EndPoint来访问新站点了。（EndPoint可以在Amazon management console的S3 dashboard的
‘Static Website Hosting’ 标签中找到）</p>

<p>当然现在还不能使用自己的域名来访问，你可以通过配置CNAME来启用自己的域名。</p>

<p>下篇文章会讲如何将CloudFront作为内容分发，并且如何将自己的域名与CloudFront绑定。</p>

<p>现在我的博客已经在云端了，地址是<a href="http://www.huangbowen.net">http://www.huangbowen.net</a></p>
]]></content>
  </entry>
  
</feed>
