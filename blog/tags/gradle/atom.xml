<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Gradle | 黄博文的地盘]]></title>
  <link href="http://www.huangbowen.net/blog/tags/gradle/atom.xml" rel="self"/>
  <link href="http://www.huangbowen.net/"/>
  <updated>2017-04-24T16:52:12+08:00</updated>
  <id>http://www.huangbowen.net/</id>
  <author>
    <name><![CDATA[黄博文]]></name>
    <email><![CDATA[huangbowen521@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Maven和Gradle对比]]></title>
    <link href="http://www.huangbowen.net/blog/2016/02/23/gradle-vs-maven/"/>
    <updated>2016-02-23T11:30:27+08:00</updated>
    <id>http://www.huangbowen.net/blog/2016/02/23/gradle-vs-maven</id>
    <content type="html"><![CDATA[<p>Java世界中主要有三大构建工具：Ant、Maven和Gradle。经过几年的发展，Ant几乎销声匿迹、Maven也日薄西山，而Gradle的发展则如日中天。笔者有幸见证了Maven的没落和Gradle的兴起。Maven的主要功能主要分为5点，分别是依赖管理系统、多模块构建、一致的项目结构、一致的构建模型和插件机制。我们可以从这五个方面来分析一下Gradle比起Maven的先进之处。</p>

<!-- more -->


<h2>依赖管理系统</h2>

<p>Maven为Java世界引入了一个新的依赖管理系统。在Java世界中，可以用groupId、artifactId、version组成的Coordination（坐标）唯一标识一个依赖。任何基于Maven构建的项目自身也必须定义这三项属性，生成的包可以是Jar包，也可以是war包或者ear包。一个典型的依赖引用如下所示：</p>

<pre><code class="xml">&lt;dependency&gt;
    &lt;groupId&gt;junit&lt;/groupId&gt;
    &lt;artifactId&gt;junit&lt;/artifactId&gt;
    &lt;version&gt;4.12&lt;/version&gt;
    &lt;scope&gt;test&lt;/scope&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework&lt;/groupId&gt;
    &lt;artifactId&gt;spring-test&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre>

<p>从上面可以看出当引用一个依赖时，version可以省略掉，这样在获取依赖时会选择最新的版本。而存储这些组件的仓库有远程仓库和本地仓库之分。远程仓库可以使用世界公用的central仓库，也可以使用Apache Nexus自建私有仓库；本地仓库则在本地计算机上。通过Maven安装目录下的settings.xml文件可以配置本地仓库的路径，以及采用的远程仓库的地址。</p>

<p>Gradle在设计的时候基本沿用了Maven的这套依赖管理体系。不过它在引用依赖时还是进行了一些改进。首先引用依赖方面变得非常简洁。</p>

<pre><code class="groovy">
dependencies {
    compile 'org.hibernate:hibernate-core:3.6.7.Final'
    testCompile ‘junit:junit:4.+'
}
</code></pre>

<p>第二，Maven和Gradle对依赖项的scope有所不同。在Maven世界中，一个依赖项有6种scope，分别是complie(默认)、provided、runtime、test、system、import。而grade将其简化为了4种，compile、runtime、testCompile、testRuntime。那么如果想在gradle使用类似于provided的scope怎么办？别着急，由于gradle语言的强大表现力，我们可以轻松编写代码来实现类似于provided scope的概念（例如<a href="http://stackoverflow.com/questions/18738888/how-to-use-provided-scope-for-jar-file-in-gradle-build">How to use provided scope for jar file in Gradle build?</a>）。</p>

<p>第三点是Gradle支持动态的版本依赖。在版本号后面使用+号的方式可以实现动态的版本管理。</p>

<p>第四点是在解决依赖冲突方面Gradle的实现机制更加明确。使用Maven和Gradle进行依赖管理时都采用的是传递性依赖；而如果多个依赖项指向同一个依赖项的不同版本时就会引起依赖冲突。而Maven处理这种依赖关系往往是噩梦一般的存在。而Gradle在解决依赖冲突方面相对来说比较明确。在<a href="https://docs.gradle.org/current/userguide/dependency_management.html">Chapter 23. Dependency Management
</a>中的23.2.3章节详细解读了gradle是如何处理版本冲突的。</p>

<h2>多模块构建</h2>

<p>在SOA和微服务的浪潮下，将一个项目分解为多个模块已经是很通用的一种方式。在Maven中需要定义个parent POM作为一组module的聚合POM。在该POM中可以使用<code>&lt;modules&gt;</code>标签来定义一组子模块。parent POM不会有什么实际构建产出。而parent POM中的build配置以及依赖配置都会自动继承给子module。</p>

<p>而Gradle也支持多模块构建。而在parent的build.gradle中可以使用allprojects和subprojects代码块来分别定义里面的配置是应用于所有项目还是子项目。对于子模块的定义是放置在setttings.gradle文件中的。在gradle的设计当中，每个模块都是Project的对象实例。而在parent build.gradle中通过allprojects或subprojects可以对这些对象进行各种操作。这无疑比Maven要灵活的多。</p>

<p>比如在parent的build.gradle中有以下代码：</p>

<pre><code class="groovy">
allprojects {
    task hello &lt;&lt; { task -&gt; println "I'm $task.project.name" }
}
</code></pre>

<p>执行命令<code>gradle -q hello</code>会依次打印出父module以及各个submodule的项目名称。这种强大的能力能让gradle对各个模块具有更强的定制化。</p>

<h2>一致的项目结构</h2>

<p>在Ant时代大家创建Java项目目录时比较随意，然后通过Ant配置指定哪些属于source，那些属于testSource等。而Maven在设计之初的理念就是Conversion over configuration（约定大于配置）。其制定了一套项目目录结构作为标准的Java项目结构。一个典型的Maven项目结构如下：</p>

<p><img src="/images/project_structure.png" width="400"></p>

<p>Gradle也沿用了这一标准的目录结构。如果你在Gradle项目中使用了标准的Maven项目结构的话，那么在Gradle中也无需进行多余的配置,只需在文件中包含<code>apply plugin:'java'</code>,系统会自动识别source、resource、test srouce、 test resource等相应资源。不过Gradle作为JVM上的构建工具，也同时支持groovy、scala等源代码的构建，甚至支持Java、groovy、scala语言的混合构建。虽然Maven通过一些插件（比如<a href="http://scala-tools.org/mvnsites/maven-scala-plugin/">maven-scala-plugin</a>）也能达到相同目的，但配置方面显然Gradle要更优雅一些。</p>

<h2>一致的构建模型</h2>

<p>为了解决Ant中对项目构建活动缺乏标准化的问题，Maven特意设置了标准的项目构建周期，其默认的构建周期如下所示：</p>

<pre><code class="xml">
&lt;phases&gt;
  &lt;phase&gt;validate&lt;/phase&gt;
  &lt;phase&gt;initialize&lt;/phase&gt;
  &lt;phase&gt;generate-sources&lt;/phase&gt;
  &lt;phase&gt;process-sources&lt;/phase&gt;
  &lt;phase&gt;generate-resources&lt;/phase&gt;
  &lt;phase&gt;process-resources&lt;/phase&gt;
  &lt;phase&gt;compile&lt;/phase&gt;
  &lt;phase&gt;process-classes&lt;/phase&gt;
  &lt;phase&gt;generate-test-sources&lt;/phase&gt;
  &lt;phase&gt;process-test-sources&lt;/phase&gt;
  &lt;phase&gt;generate-test-resources&lt;/phase&gt;
  &lt;phase&gt;process-test-resources&lt;/phase&gt;
  &lt;phase&gt;test-compile&lt;/phase&gt;
  &lt;phase&gt;process-test-classes&lt;/phase&gt;
  &lt;phase&gt;test&lt;/phase&gt;
  &lt;phase&gt;prepare-package&lt;/phase&gt;
  &lt;phase&gt;package&lt;/phase&gt;
  &lt;phase&gt;pre-integration-test&lt;/phase&gt;
  &lt;phase&gt;integration-test&lt;/phase&gt;
  &lt;phase&gt;post-integration-test&lt;/phase&gt;
  &lt;phase&gt;verify&lt;/phase&gt;
  &lt;phase&gt;install&lt;/phase&gt;
  &lt;phase&gt;deploy&lt;/phase&gt;
&lt;/phases&gt;
</code></pre>

<p>而这种构建周期也是Maven最为人诟病的地方。因为Maven将项目的构建周期限制的太死，你无法在构建周期中添加新的phase，只能将插件绑定到已有的phase上。而现在项目的构建过程变得越来越复杂，而且多样化，显然Maven对这种复杂度缺少足够的应变能力。比如你想在项目构建过程中进行一项压缩所有javascript的任务，那么就要绑定到Maven的现有的某个phase上，而显然貌似放在哪个phase都不太合适。而且这些phase都是串行的，整个执行下来是一条线，这也限制了Maven的构建效率。而Gradle在构建模型上则非常灵活。在Gradle世界里可以轻松创建一个task，并随时通过<code>depends</code>语法建立与已有task的依赖关系。甚至对于Java项目的构建来说，Gradle是通过名为<code>java</code>的插件来包含了一个对Java项目的构建周期，这等于Gradle本身直接与项目构建周期是解耦的。</p>

<h2>插件机制</h2>

<p>Maven和Gradle设计时都采用了插件机制。但显然Gradle更胜一筹。主要原因在于Maven是基于XML进行配置。所以其配置语法太受限于XML。即使实现很小的功能都需要设计一个插件，建立其与XML配置的关联。比如想在Maven中执行一条shell命令，其配置如下：</p>

<pre><code class="xml">
&lt;plugin&gt;
  &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
  &lt;artifactId&gt;exec-maven-plugin&lt;/artifactId&gt;
  &lt;version&gt;1.2&lt;/version&gt;
  &lt;executions&gt;
    &lt;execution&gt;
      &lt;id&gt;drop DB =&gt; db_name&lt;/id&gt;
      &lt;phase&gt;pre-integration-test&lt;/phase&gt;
      &lt;goals&gt;
        &lt;goal&gt;exec&lt;/goal&gt;
      &lt;/goals&gt;
      &lt;configuration&gt;
        &lt;executable&gt;curl&lt;/executable&gt;
        &lt;arguments&gt;
          &lt;argument&gt;-s&lt;/argument&gt;
          &lt;argument&gt;-S&lt;/argument&gt;
          &lt;argument&gt;-X&lt;/argument&gt;
          &lt;argument&gt;DELETE&lt;/argument&gt;
          &lt;argument&gt;http://${db.server}:${db.port}/db_name&lt;/argument&gt;
        &lt;/arguments&gt;
      &lt;/configuration&gt;
    &lt;/execution&gt;
  &lt;/executions&gt;
&lt;/plugin&gt;
</code></pre>

<p>而在Gradle中则一切变得非常简单。</p>

<pre><code class="groovy">task dropDB(type: Exec) {
 commandLine ‘curl’,’-s’,’s’,’-x’,’DELETE’,"http://${db.server}:{db.port}/db_name"
}
</code></pre>

<p>在创建自定义插件方面，Maven和Gradle的机制都差不多，都是继承自插件基类，然后实现要求的方法。这里就不展开说明。</p>

<hr />

<p>从以上五个方面可以看出Maven和Gradle的主要差异。Maven的设计核心<code>Convention Over Configuration</code>被Gradle更加发扬光大，而Gradle的<code>配置即代码</code>又超越了Maven。在Gradle中任何配置都可以作为代码被执行的，我们也可以随时使用已有的Ant脚本（Ant task是Gradle中的一等公民）、Java类库、Groovy类库来辅助完成构建任务的编写。</p>

<p>这种采用本身语言实现的DSL对本身语言项目进行构建管理的例子比比皆是。比如Rake和Ruby、Grunt和JavaScript、Sbt和Ruby&hellip;..而Gradle之所以使用Groovy语言实现，是因为Groovy比Java语言更具表现力，其语法特性更丰富，又兼具函数式的特点。这几年兴起的语言（比如Scala、Go、Swift）都属于强类型的语言，兼具面向对象和函数式的特点。</p>

<p>最后想说的Gradle的命令行比Maven的要强大的多。以前写过一篇文章专门讲述了Gradle的命令行操作，详情请见<a href="http://www.huangbowen.net/blog/2013/09/01/command-line-of-gradle/">Gradle命令行黑魔法</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[理解Maven中的SNAPSHOT版本和正式版本]]></title>
    <link href="http://www.huangbowen.net/blog/2016/01/29/understand-official-version-and-snapshot-version-in-maven/"/>
    <updated>2016-01-29T16:56:44+08:00</updated>
    <id>http://www.huangbowen.net/blog/2016/01/29/understand-official-version-and-snapshot-version-in-maven</id>
    <content type="html"><![CDATA[<p>Maven中建立的依赖管理方式基本已成为Java语言依赖管理的事实标准，Maven的替代者Gradle也基本沿用了Maven的依赖管理机制。在Maven依赖管理中，唯一标识一个依赖项是由该依赖项的三个属性构成的，分别是groupId、artifactId以及version。这三个属性可以唯一确定一个组件（Jar包或者War包）。</p>

<!-- more -->


<p>其实在Nexus仓库中，一个仓库一般分为public(Release)仓和SNAPSHOT仓，前者存放正式版本，后者存放快照版本。如果在项目配置文件中（无论是build.gradle还是pom.xml）指定的版本号带有’-SNAPSHOT’后缀，比如版本号为'Junit-4.10-SNAPSHOT’，那么打出的包就是一个快照版本。</p>

<p>快照版本和正式版本的主要区别在于，本地获取这些依赖的机制有所不同。假设你依赖一个库的正式版本，构建的时候构建工具会先在本次仓库中查找是否已经有了这个依赖库，如果没有的话才会去远程仓库中去拉取。所以假设你发布了Junit-4.10.jar到了远程仓库，有一个项目依赖了这个库，它第一次构建的时候会把该库从远程仓库中下载到本地仓库缓存，以后再次构建都不会去访问远程仓库了。所以如果你修改了代码，向远程仓库中发布了新的软件包，但仍然叫Junit-4.10.jar，那么依赖这个库的项目就无法得到最新更新。你只有在重新发布的时候升级版本，比如叫做Junit-4.11.jar，然后通知依赖该库的项目组也修改依赖版本为Junit-4.11,这样才能使用到你最新添加的功能。</p>

<p>这种方式在团队内部开发的时候会变的特别蛋痛。假设有两个小组负责维护两个组件，example-service和example-ui,其中example-ui项目依赖于example-service。而这两个项目每天都会构建多次，如果每次构建你都要升级example-service的版本，那么你会疯掉。这个时候SNAPSHOT版本就派上用场了。每天日常构建时你可以构建example-service的快照版本，比如example-service-1.0-SNAPSHOT.jar，而example-ui依赖该快照版本。每次example-ui构建时，会优先去远程仓库中查看是否有最新的example-service-1.0-SNAPSHOT.jar，如果有则下载下来使用。即使本地仓库中已经有了example-service-1.0-SNAPSHOT.jar，它也会尝试去远程仓库中查看同名的jar是否是最新的。有的人可能会问，这样不就不能充分利用本地仓库的缓存机制了吗？别着急，Maven比我们想象中的要聪明。在配置Maven的Repository的时候中有个配置项，可以配置对于SNAPSHOT版本向远程仓库中查找的频率。频率共有四种，分别是always、daily、interval、never。当本地仓库中存在需要的依赖项目时，always是每次都去远程仓库查看是否有更新，daily是只在第一次的时候查看是否有更新，当天的其它时候则不会查看；interval允许设置一个分钟为单位的间隔时间，在这个间隔时间内只会去远程仓库中查找一次，never是不会去远程仓库中查找（这种就和正式版本的行为一样了）。</p>

<p>Maven版本的配置方式为：</p>

<pre><code class="xml">
&lt;repository&gt;
    &lt;id&gt;myRepository&lt;/id&gt;
    &lt;url&gt;...&lt;/url&gt;
    &lt;snapshots&gt;
        &lt;enabled&gt;true&lt;/enabled&gt;
        &lt;updatePolicy&gt;XXX&lt;/updatePolicy&gt;
    &lt;/snapshots&gt;
&lt;/repository&gt;
</code></pre>

<p>其中updatePolicy就是那4种类型之一。如果配置间隔时间更新，可以写作<code>interval:XX</code>(XX是间隔分钟数)。daily配置是默认值。</p>

<p>而在Gradle，可以设置本地缓存的更新策略。</p>

<pre><code class="xml">
configurations.all {

// check for updates every build
resolutionStrategy.cacheChangingModulesFor  0,'seconds'

}
</code></pre>

<p>当然也可以按照分钟或者小时来设置.</p>

<pre><code class="xml">
configurations.all {

resolutionStrategy.cacheChangingModulesFor  10, ‘minutes'

}
</code></pre>

<pre><code class="xml">
configurations.all {

resolutionStrategy.cacheChangingModulesFor  4, ‘hours'

}
</code></pre>

<p>所以一般在开发模式下，我们可以频繁的发布SNAPSHOT版本，以便让其它项目能实时的使用到最新的功能做联调；当版本趋于稳定时，再发布一个正式版本，供正式使用。当然在做正式发布时，也要确保当前项目的依赖项中不包含对任何SNAPSHOT版本的依赖，保证正式版本的稳定性。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gradle与Gatling脚本集成]]></title>
    <link href="http://www.huangbowen.net/blog/2014/07/23/integrate-gatling-with-gradle/"/>
    <updated>2014-07-23T14:12:23+08:00</updated>
    <id>http://www.huangbowen.net/blog/2014/07/23/integrate-gatling-with-gradle</id>
    <content type="html"><![CDATA[<p>Gatling作为次时代的性能测试工具，由于其API简洁明了、性能出众，越来越受欢迎。但是运行Gatling脚本却有诸多不便，其提供的默认方式不是很方便。考虑到Gatling脚本本质上是Scala类，运行的时候还是使用的是java虚拟机，我们可以将其脚本的运行与Gradle结合起来。这样子就可以通过Gradle来运行Gatling脚本了。</p>

<!-- more -->


<p>废话少说，接下来就讲述下如何来进行配置。</p>

<p>创建一个标准的maven结构的工程目录，如下图所示。</p>

<p><img src="/images/gradle-gatling.png" width="600"></p>

<p>conf目录存放Gatling的基本配置文件。
Gatling的脚本文件存放在src/test/scala/simulations包里面。可以自行在此包下对脚本文件再分类。</p>

<p>在build.gradle文件中引入scala插件。</p>

<pre><code class="groovy">
apply plugin: 'scala'
</code></pre>

<p>然后引入有gatling库的maven repo。</p>

<pre><code class="groovy">
repositories {
    mavenCentral ()
    maven {
        url 'http://repository.excilys.com/content/groups/public'
    }
}
</code></pre>

<p>再加入scala和gatling的依赖项。</p>

<pre><code class="groovy">
dependencies {
    compile 'org.scala-lang:scala-library:2.10.1'
    testCompile 'io.gatling.highcharts:gatling-charts-highcharts:2.0.0-M3a'
}
</code></pre>

<p>把conf文件夹作为test的source文件。</p>

<pre><code class="groovy">
sourceSets {
    test {
        resources {
            srcDir 'conf'
        }
    }
}
</code></pre>

<p>创建一个名为gatling的task，目的是运行所有的gatling脚本。</p>

<pre><code class="groovy">
task gatling (dependsOn: 'compileTestScala') &lt;&lt; {

    logger.lifecycle (" ---- Executing all Gatling scenarios from: ${sourceSets.test.output.classesDir} ----")

    sourceSets.test.output.classesDir.eachFileRecurse { file -&gt;
        if (file.isFile ()) {

            def gatlingScenarioClass = (file.getPath () - (sourceSets.test.output.classesDir.getPath () + File.separator) - '.class')
                    .replace (File.separator, '.')

            javaexec {
                main = 'io.gatling.app.Gatling'
                classpath = sourceSets.test.output + sourceSets.test.runtimeClasspath
                args '-sbf',
                        sourceSets.test.output.classesDir,
                        '-s',
                        gatlingScenarioClass,
                        '-rf',
                        'build/reports/gatling'
            }
        }

    }

    logger.lifecycle (" ---- Done executing all Gatling scenarios ----")
}
</code></pre>

<p>这是借助于Gatling的command line运行功能来实现的。具体参数指定官网上有，这里贴出原文。</p>

<blockquote><p>Command Line Options #
Gatling can be started with several options listed below:</p></blockquote>

<ul>
<li> -nr (&ndash;no-reports): Runs simulation but does not generate reports</li>
<li> -ro <folderName> (&ndash;reports-only <folderName>): Generates the reports for the simulation log file located in <gatling_home>/results/<folderName></li>
<li> -df <folderAbsolutePath> (&ndash;data-folder <folderAbsolutePath>): Uses <folderAbsolutePath> as the folder where feeders are stored</li>
<li> -rf <folderAbsolutePath> (&ndash;results-folder <folderAbsolutePath>): Uses <folderAbsolutePath> as the folder where results are stored</li>
<li> -bf <folderAbsolutePath> (&ndash;request-bodies-folder <folderAbsolutePath>): Uses <folderAbsolutePath> as the folder where request bodies are stored</li>
<li> -sf <folderAbsolutePath> (&ndash;simulations-folder <folderAbsolutePath>): Uses <folderAbsolutePath> as the folder where simulations are stored</li>
<li> -sbf <folderAbsolutePath> (&ndash;simulations-binaries-folder <folderAbsolutePath>): Uses <folderAbsolutePath> as the folder where simulation binaries are stored</li>
<li> -s <className> (&ndash;simulation <className>): Uses <className> as the name of the simulation to be run</li>
<li> -sd <text> (&ndash;simulation-description <text>): Uses <text> as simulation description</li>
</ul>


<p>我在github上创建了一个示例项目，请参见<a href="https://github.com/huangbowen521/gatling-gradle">https://github.com/huangbowen521/gatling-gradle</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Gradle运行集成测试]]></title>
    <link href="http://www.huangbowen.net/blog/2013/12/10/integration-test-in-gradle/"/>
    <updated>2013-12-10T13:17:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/12/10/integration-test-in-gradle</id>
    <content type="html"><![CDATA[<p>如果Gradle构建的项目是一个web项目的话，里面可能包含一些集成测试和功能性测试。这些测试和单元测试不同之处是在运行之前要先在本地将web服务启动起来，并且跑完测试后能够自动的关闭web服务。</p>

<!-- more -->


<p>在本地启动web服务我们可以使用Gradle内置的jetty插件。jetty是一个轻量级的web容器，其执行速度快，配置简单，远程调试方便。启用jetty只需在build.gradle中加入对这个插件的引用。</p>

<pre><code class="groovy build.gradle">
apply plugin: 'jetty'
</code></pre>

<p>之后可以配置war包的名称，启动的端口等属性。</p>

<pre><code class="groovy build.gradle">
apply plugin: 'jetty'

httpPort = 9876

[jettyRun, jettyRunWar, jettyStop]*.stopPort = 9966
[jettyRun, jettyRunWar, jettyStop]*.stopKey = 'stopKey'
</code></pre>

<p>我们需要将集成测试与一般的单元测试分开。因为单元测试并不需要事先启动web服务，保证其执行速度快，能够得到更快的反馈。一般做法是单元测试后缀名为Test.java，集成测试后缀名为IntegrationTest.java。</p>

<p>配置单元测试执行的测试集合。</p>

<pre><code class="groovy build.gradle">
test {
    include '**/*Test.class'
    exclude '**/*IntegrationTest.class'
}
</code></pre>

<p>然后新建一个Task，用于运行集成测试。</p>

<pre><code class="groovy build.gradle">
task intTest(type: Test, dependsOn: test) {

    include '**/*IntegrationTest.class'

    doFirst {

        jettyRun.daemon = true
        jettyRun.execute()

    }

    doLast {
        jettyStop.execute()
    }
}
</code></pre>

<p>上述代码首先是创建一个名为intTest的task，其类型为Test,依赖于test task。该集成测试只会运行后缀名为IntegrationTest的测试类。在运行测试之前，首先采用后台模式启动jetty服务器，运行完测试后再调用jettyStop task停止jetty服务。</p>

<p>为了使我们在运行<code>gradle build</code>时也会运行intTest task，可以添加对intTest的依赖。</p>

<pre><code class="groovy build.gradle">
build.dependsOn intTest
</code></pre>

<p>这样在运行<code>gradle build</code>时也会运行集成测试。并且在集成测试前后web服务会自动的启动和关闭。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gradle中使用idea插件的一些实践]]></title>
    <link href="http://www.huangbowen.net/blog/2013/12/04/use-idea-plugin-in-gradle/"/>
    <updated>2013-12-04T22:19:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/12/04/use-idea-plugin-in-gradle</id>
    <content type="html"><![CDATA[<p>如果你的项目使用了Gradle作为构建工具，那么你一定要使用Gradle来自动生成IDE的项目文件，无需再手动的将源代码导入到你的IDE中去了。</p>

<!-- more -->


<p>如果你使用的是eclipse，可以在build.gradle中加入这么一行.</p>

<pre><code class="groovy">
apply plugin: 'eclipse'
</code></pre>

<p>然后在命令行中输入<code>gradle eclipse</code>就可以生成eclipse的项目文件，直接使用eclipse打开生成的项目文件即可。</p>

<p>当然作为Java程序开发者，最好使的IDE还是Intellij,昨天听闻Intellij 13已经发布了，增加了不少新功能，看来又要掏腰包了。如果要让Gradle自动生成Intellij的项目文件，需要使用idea插件。</p>

<pre><code class="groovy">
apply plugin: 'idea'
</code></pre>

<p>命令行下输入<code>gradle idea</code>，就会生成Intellij的项目文件，真是省时省力。如果在已经存在Intellij的项目文件情况下，想根据build.gradle中的配置来更新项目文件，可以输入<code>gradle cleanIdea idea</code>。<code>cleanIdea</code>可以清除已有的Intellij项目文件。</p>

<p>Intellij项目文件主要有三种类型。</p>

<ul>
<li><p>.ipr Intellij工程文件</p></li>
<li><p>.iml Intellij 模块文件</p></li>
<li><p>.iws Intellij 工作区文件</p></li>
</ul>


<p>如果只简单的使用<code>gradle idea</code>生成Intellij的工程文件，其实在使用Intellij打开项目以后，我们还要做一些手工配置，比如指定JDK的版本，指定源代码管理工具等。Gradle的idea命令本质上就是生成这三个xml文件,所以Gradle提供了生成文件时的hook(钩子)，让我们可以方便的做定制化，实现最大程度的自动化。这就需要自定义idea这个任务了。</p>

<pre><code class="groovy">
idea.project {
     jdkName = '1.6'
     languageLevel = '1.6' 
}
</code></pre>

<p>这个用来配置项目的jdk及languageLevel。</p>

<p>如果要指定源代码管理工具类型，就需要调用hook修改生成的ipr文件。</p>

<pre><code class="groovy">
idea.project {

    ipr {
        withXml { provider -&gt;
            provider.node.component.find { it.@name == 'VcsDirectoryMappings' }.mapping.@vcs = 'Git'
        }
    }

}
</code></pre>

<p>通过这种方式可以最大限度的实现对Intellij项目文件的定制化。</p>
]]></content>
  </entry>
  
</feed>
