<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Gatling | 黄博文的地盘]]></title>
  <link href="http://www.huangbowen.net/blog/tags/gatling/atom.xml" rel="self"/>
  <link href="http://www.huangbowen.net/"/>
  <updated>2017-08-18T17:55:56+08:00</updated>
  <id>http://www.huangbowen.net/</id>
  <author>
    <name><![CDATA[黄博文]]></name>
    <email><![CDATA[huangbowen521@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Gradle与Gatling脚本集成]]></title>
    <link href="http://www.huangbowen.net/blog/2014/07/23/integrate-gatling-with-gradle/"/>
    <updated>2014-07-23T14:12:23+08:00</updated>
    <id>http://www.huangbowen.net/blog/2014/07/23/integrate-gatling-with-gradle</id>
    <content type="html"><![CDATA[<p>Gatling作为次时代的性能测试工具，由于其API简洁明了、性能出众，越来越受欢迎。但是运行Gatling脚本却有诸多不便，其提供的默认方式不是很方便。考虑到Gatling脚本本质上是Scala类，运行的时候还是使用的是java虚拟机，我们可以将其脚本的运行与Gradle结合起来。这样子就可以通过Gradle来运行Gatling脚本了。</p>

<!-- more -->


<p>废话少说，接下来就讲述下如何来进行配置。</p>

<p>创建一个标准的maven结构的工程目录，如下图所示。</p>

<p><img src="/images/gradle-gatling.png" width="600"></p>

<p>conf目录存放Gatling的基本配置文件。
Gatling的脚本文件存放在src/test/scala/simulations包里面。可以自行在此包下对脚本文件再分类。</p>

<p>在build.gradle文件中引入scala插件。</p>

<pre><code class="groovy">
apply plugin: 'scala'
</code></pre>

<p>然后引入有gatling库的maven repo。</p>

<pre><code class="groovy">
repositories {
    mavenCentral ()
    maven {
        url 'http://repository.excilys.com/content/groups/public'
    }
}
</code></pre>

<p>再加入scala和gatling的依赖项。</p>

<pre><code class="groovy">
dependencies {
    compile 'org.scala-lang:scala-library:2.10.1'
    testCompile 'io.gatling.highcharts:gatling-charts-highcharts:2.0.0-M3a'
}
</code></pre>

<p>把conf文件夹作为test的source文件。</p>

<pre><code class="groovy">
sourceSets {
    test {
        resources {
            srcDir 'conf'
        }
    }
}
</code></pre>

<p>创建一个名为gatling的task，目的是运行所有的gatling脚本。</p>

<pre><code class="groovy">
task gatling (dependsOn: 'compileTestScala') &lt;&lt; {

    logger.lifecycle (" ---- Executing all Gatling scenarios from: ${sourceSets.test.output.classesDir} ----")

    sourceSets.test.output.classesDir.eachFileRecurse { file -&gt;
        if (file.isFile ()) {

            def gatlingScenarioClass = (file.getPath () - (sourceSets.test.output.classesDir.getPath () + File.separator) - '.class')
                    .replace (File.separator, '.')

            javaexec {
                main = 'io.gatling.app.Gatling'
                classpath = sourceSets.test.output + sourceSets.test.runtimeClasspath
                args '-sbf',
                        sourceSets.test.output.classesDir,
                        '-s',
                        gatlingScenarioClass,
                        '-rf',
                        'build/reports/gatling'
            }
        }

    }

    logger.lifecycle (" ---- Done executing all Gatling scenarios ----")
}
</code></pre>

<p>这是借助于Gatling的command line运行功能来实现的。具体参数指定官网上有，这里贴出原文。</p>

<blockquote><p>Command Line Options #
Gatling can be started with several options listed below:</p></blockquote>

<ul>
<li> -nr (&ndash;no-reports): Runs simulation but does not generate reports</li>
<li> -ro <folderName> (&ndash;reports-only <folderName>): Generates the reports for the simulation log file located in <gatling_home>/results/<folderName></li>
<li> -df <folderAbsolutePath> (&ndash;data-folder <folderAbsolutePath>): Uses <folderAbsolutePath> as the folder where feeders are stored</li>
<li> -rf <folderAbsolutePath> (&ndash;results-folder <folderAbsolutePath>): Uses <folderAbsolutePath> as the folder where results are stored</li>
<li> -bf <folderAbsolutePath> (&ndash;request-bodies-folder <folderAbsolutePath>): Uses <folderAbsolutePath> as the folder where request bodies are stored</li>
<li> -sf <folderAbsolutePath> (&ndash;simulations-folder <folderAbsolutePath>): Uses <folderAbsolutePath> as the folder where simulations are stored</li>
<li> -sbf <folderAbsolutePath> (&ndash;simulations-binaries-folder <folderAbsolutePath>): Uses <folderAbsolutePath> as the folder where simulation binaries are stored</li>
<li> -s <className> (&ndash;simulation <className>): Uses <className> as the name of the simulation to be run</li>
<li> -sd <text> (&ndash;simulation-description <text>): Uses <text> as simulation description</li>
</ul>


<p>我在github上创建了一个示例项目，请参见<a href="https://github.com/huangbowen521/gatling-gradle">https://github.com/huangbowen521/gatling-gradle</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gatling->次时代性能测试利器]]></title>
    <link href="http://www.huangbowen.net/blog/2013/12/23/the-power-of-gatling/"/>
    <updated>2013-12-23T23:07:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/12/23/the-power-of-gatling</id>
    <content type="html"><![CDATA[<p>Gatling作为一款开源免费的性能测试工具越来越受到广大程序员的欢迎。免费当然是好的，最缺钱的就是程序员了;开源更好啊，缺啥功能、想做定制化的可以自己动手，丰衣足食。其实我最喜欢的原因是其提供了简洁强大的API，原生支持命令行运行，不像JMeter那样需要在界面上点来点去。另外其出色的扩展API和轻量级的HTML报表都值得让人称道。</p>

<!-- more -->


<h2>Gatling版本</h2>

<p>Gatling的的官方网站是<a href="http://gatling-tool.org/">http://gatling-tool.org/</a>。目前Gatling有两个主线版本，一个是Gatling 1,最新版本是1.5.3;一个是Gatling 2,最新版本是2.0.0-M3a。Gatling 2使用了JDK7进行编译，使用的Scala版本是2.10，它对Gatling的API进行了一些重构和重新设计,内部也有一些调整。 目前Gatling 2还在开发阶段，所以如果要在项目中使用的话最好还是使用Gatling 1.5.3。</p>

<h2>安装Gatling</h2>

<p>其实Gatling是款绿色软件，可以直接从<a href="https://github.com/excilys/gatling/wiki/Downloads">https://github.com/excilys/gatling/wiki/Downloads</a>下载指定的版本。下载下来解压缩以后，我们可以看到其目录结构。</p>

<pre><code class="bash">
twer@bowen-huang:~/sourcecode/GatlingWorkShop/gatling-charts-highcharts-1.5.2$ tree -L 2
.
├── bin                             //可执行文件目录
│   ├── gatling.bat
│   ├── gatling.sh
│   ├── recorder.bat
│   └── recorder.sh
├── conf                            //配置目录
│   ├── application.conf
│   ├── gatling.conf
│   └── logback.xml
├── lib                             //依赖的程序库
│   ├── akka-actor-2.0.4.jar
│   ├── async-http-client-1.7.18.20130621.jar
│   ├── commons-io-2.4.jar
│   ├── commons-lang-2.6.jar
│   ├── commons-math3-3.1.1.jar
│   ├── commons-pool-1.6.jar
│   ├── compiler-interface-0.12.3-sources.jar
│   ├── config-1.0.1.jar
│   ├── gatling-app-1.5.2.jar
│   ├── gatling-charts-1.5.2.jar
│   ├── gatling-charts-highcharts-1.5.2.jar
│   ├── gatling-core-1.5.2.jar
│   ├── gatling-http-1.5.2.jar
│   ├── gatling-jdbc-1.5.2.jar
│   ├── gatling-metrics-1.5.2.jar
│   ├── gatling-recorder-1.5.2.jar
│   ├── gatling-redis-1.5.2.jar
│   ├── grizzled-slf4j_2.9.2-0.6.10.jar
│   ├── incremental-compiler-0.12.3.jar
│   ├── jaxen-1.1.6.jar
│   ├── joda-convert-1.2.jar
│   ├── joda-time-2.2.jar
│   ├── jodd-core-3.4.4.jar
│   ├── jodd-lagarto-3.4.4.jar
│   ├── json-path-0.8.2.fix24.jar
│   ├── json-smart-1.1.1.jar
│   ├── jsoup-1.7.2.jar
│   ├── logback-classic-1.0.12.jar
│   ├── logback-core-1.0.12.jar
│   ├── netty-3.6.6.Final.jar
│   ├── opencsv-2.3.jar
│   ├── redisclient_2.9.2-2.10.jar
│   ├── scala-compiler-2.9.3.jar
│   ├── scala-library-2.9.3.jar
│   ├── scalate-core_2.9-1.6.1.jar
│   ├── scalate-util_2.9-1.6.1.jar
│   ├── scopt_2.9.2-2.1.0.jar
│   ├── slf4j-api-1.7.5.jar
│   ├── xercesImpl-2.11.0.jar
│   ├── xml-apis-1.4.01.jar
│   ├── xstream-1.4.3.jar
│   └── zinc-0.2.5.jar
├── results            //性能测试结果存放目录
│   └── blogsimulation-20131218210445
├── target             //性能测试脚本编译结果    
│   ├── cache
│   ├── classes
│   └── zincCache
└── user-files     //性能测试脚本源文件
    ├── data
    ├── request-bodies
    └── simulations 
</code></pre>

<p>Gatling在user-files目录中提供了几个性能测试脚本的示例。不过由于脚本中被测试的网站已经无法访问，所以我自己写了几个简单的测试脚本，已经放置到了Github上，可以通过<a href="https://github.com/huangbowen521/GatlingWorkShop">https://github.com/huangbowen521/GatlingWorkShop</a>下载。</p>

<pre><code class="bash">
twer@bowen-huang:~/sourcecode/GatlingWorkShop/gatling-charts-highcharts-1.5.2/user-files$ tree simulations
simulations
└── blog
    ├── blog.scala
    └── github.scala

1 directory, 2 files 
</code></pre>

<p>可以看到在simulations目录下有两个文件，一个是我给自己的博客写的性能测试脚本，一个是给github写的一个性能测试脚本。</p>

<h2>运行Gatling</h2>

<p>在命令行下运行bin目录下的Gatling.sh(如果是windows用户，请运行Gatling.bat)。Gatling会自动列出当前所有的测试脚本供自己选择，然后会让填写simulation id(模拟Id)以及run description（运行描述）。输入完毕后按回车键测试即可启动。</p>

<pre><code class="bash">
twer@bowen-huang:~/sourcecode/GatlingWorkShop/gatling-charts-highcharts-1.5.2$ ./bin/gatling.sh
GATLING_HOME is set to /Users/twer/sourcecode/GatlingWorkShop/gatling-charts-highcharts-1.5.2
Choose a simulation number:
     [0] blog.BlogSimulation
     [1] blog.GithubSimulation
1
Select simulation id (default is 'githubsimulation'). Accepted characters are a-z, A-Z, 0-9, - and _
github
Select run description (optional)
testing github 

Simulation blog.GithubSimulation started…

……
……
……

Simulation finished.
Simulation successful.
Generating reports...
Reports generated in 0s.
Please open the following file : /Users/twer/sourcecode/GatlingWorkShop/gatling-charts-highcharts-1.5.2/results/github-20131223214957/index.html 
</code></pre>

<p>可以看到命令行中最后一行中标示了性能测试报表的存放路径。</p>

<h2>查看测试报告</h2>

<p>Gatling的测试报表其实就是一个html文件。Gatling使用了HighCharts这款JavaScript库来进行报表的展示。另外Gatling还提供了方便的接口用来自定义报告的展示。</p>

<p>以下是报表的部分截图。</p>

<p><img src="/images/gatlingReport1.png" width="800"></p>

<p><img src="/images/gatlingReport2.png" width="800"></p>

<h2>测试脚本示例</h2>

<p>这是GithubSimulation的性能测试脚本。其实它就是Scala的一个类，继承自Simulation。</p>

<pre><code class="scala">
package blog

import com.excilys.ebi.gatling.core.Predef._
import com.excilys.ebi.gatling.http.Predef._
import com.excilys.ebi.gatling.jdbc.Predef._
import com.excilys.ebi.gatling.http.Headers.Names._
import akka.util.duration._
import bootstrap._

class GithubSimulation extends Simulation {
     var httpConf = httpConfig.
     baseURL("https://github.com")

     var scn = scenario("search in github.com")
     .exec(
          http("home page")
          .get("/")
          .check(status.is(200)))
     .pause(0, 12)
     .exec(
          http("do search")
          .get("/search")
          .queryParam("q", "gatling")
          .check(status.is(200)))

     setUp(scn.users(500).ramp(10).protocolConfig(httpConf))
} 
</code></pre>

<p>在这个类中定义了一个httpConf，指定了被测网站的根目录。</p>

<pre><code class="scala">
     var httpConf = httpConfig.
     baseURL("https://github.com") 
</code></pre>

<p>然后定义了一个测试场景，用户先访问Github首页，检查http返回状态码是否为200，然后暂停一段时间后再执行一个查询操作，查询关键字是gatling，检查http返回状态码是否为200。</p>

<pre><code class="scala">
     var scn = scenario("search in github.com")
     .exec(
          http("home page")
          .get("/")
          .check(status.is(200)))
     .pause(0, 12)
     .exec(
          http("do search")
          .get("/search")
          .queryParam("q", "gatling")
          .check(status.is(200))) 
</code></pre>

<p>最后指定500个用户模拟该测试场景。500个用户以每秒50个递增，持续10秒。</p>

<pre><code class="scala">
     setUp(scn.users(500).ramp(10).protocolConfig(httpConf)) 
</code></pre>

<h2>技术栈</h2>

<p>这里列出了Gatling的一些主要的技术栈。</p>

<ul>
<li><p><strong>Akka Actors.</strong> Gatling 使用了Akka作为其并发编程的运行时。Akka的Actors模式能够有效的绕过JVM上多线程带来的性能问题。</p></li>
<li><p><strong>Scala.</strong>选择Scala最大的原因是因为Scala可以很好的集成Akka,另一原因是作为一款运行在JVM上的语言，Scala更容易提供给用户简洁强大的API设计。</p></li>
<li><p><strong>Async Http Client.</strong> 使用这款开源库来是实现异步http通讯。并且使用了Netty调用http。</p></li>
<li><p><strong>Highcharts及Highstock.</strong> Gatling使用Highcarts和Highstock这两款JavaScript库来进行测试结果报表的展示。</p></li>
</ul>


<hr />

<p>其实Gatling并不完美，比如目前支持的协议并不多，不支持对数据库的性能测试，不能进行分布式性能测试等。当然Gatling也在不断的进步，看好你哦！</p>
]]></content>
  </entry>
  
</feed>
