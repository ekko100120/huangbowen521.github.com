<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: agile | 黄博文的地盘]]></title>
  <link href="http://www.huangbowen.net/blog/tags/agile/atom.xml" rel="self"/>
  <link href="http://www.huangbowen.net/"/>
  <updated>2013-07-21T00:05:46+10:00</updated>
  <id>http://www.huangbowen.net/</id>
  <author>
    <name><![CDATA[黄博文]]></name>
    <email><![CDATA[huangbowen521@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[持续改进-《高效程序员的45个习惯》读后感]]></title>
    <link href="http://www.huangbowen.net/blog/2013/05/24/the-practices-of-an-agile-developer/"/>
    <updated>2013-05-24T11:23:00+10:00</updated>
    <id>http://www.huangbowen.net/blog/2013/05/24/the-practices-of-an-agile-developer</id>
    <content type="html"><![CDATA[<p>原书标题为<a href="http://www.amazon.cn/mn/detailApp/ref=asc_df_B0033WSFAO622894/?asin=B0033WSFAO&amp;tag=douban-23&amp;creative=2384&amp;creativeASIN=B0033WSFAO&amp;linkCode=asn">《Practices of An Agile Developer》</a>。中文名为<a href="http://book.douban.com/subject/4164024/">《高效程序员的45个习惯-敏捷开发修炼之道》</a>。敏捷这个词已经烂大街了，关于敏捷的书籍俯拾皆是。很多人是敏捷的狂热粉丝，而另一些人却讨厌敏捷，认为只是个噱头。我觉得很可能的原因之一是敏捷这个名字没起好。它的原名为“轻量型软件开发过程”（"lightweight process"），但后来阴差阳错成了agile(敏捷)。</p>

<!-- more -->


<p>既然书名是敏捷开发者的实践，那么就必须认识敏捷。只有深入的理解了这些实践的来源和目的，才能更好的践行甚至改进实践。</p>

<p><strong>敏捷可以用一句话来概括：敏捷开发就是在一个高度协作的环境中，不断的使用反馈进行自我调整和完善，最终交付用户想要的软件。</strong></p>

<p>从这句话中可以得出很多东西。</p>

<h2>首先，项目适不适合敏捷有两个先决条件：</h2>

<ol>
<li><p><strong>项目是以价值为导向的。</strong>也就是整个团队有一个总体一致的目标，那就是产出高质量、高价值、符合用户需求的软件。以价值为导向，看似简单，实则很难，甚至某些时候要要求公司的组织架构做出一定的调整。试想在一个等级森严、官僚化严重、各种无谓的考评泛滥的公司，有多少人能静下心来好好的搞开发，搞产品？只有打造一个相对扁平的组织，给予充分的信任和自由度，才有利于敏捷的实施。这反过来又要求团队中的每个人有高度的自律性。</p></li>
<li><p><strong>团队能够达到高度协作。</strong>必须能够保证团队中的成员能够流畅的交流。如果在团队中大搞一言堂，信息不透明，很容易打击团队人员工作的积极性，致使团队分崩离析。另外，客户也属于团队中的一员。我们做出的产品最终是给客户看的，如果客户不能保证与团队紧密的合作，那么很容易使产品偏离客户的期望，最终交付失败。</p></li>
</ol>


<h2>再次，可以看到敏捷的基础：反馈。</h2>

<p>一旦你意识到走错了路方向，就要立即做出决策。举个例子，办公室另个团队给我们分享了这样一个故事。在项目刚开始时他们设计了叫做CoreService的类来封装所有的服务。随着项目的进行，CoreService类由于需要处理的服务越来越多，导致类越来越庞大。每个人在修改这个类时，写单元测试要建立对N个服务的mock，苦不堪言。问题在于，没人及时的提出这个bad smell，导致了人们花费了大量的时间来维护它。</p>

<p>这说明了及时反馈的重要性。<strong>反馈包含提出反馈和接受反馈。</strong></p>

<p><strong>提出反馈需要勇气和时机。</strong>要勇敢的提出自己的想法，这既需要自身具有对项目负责的精神，还要团队提供安全的环境。要及时的指出项目中不好的地方，千里之堤，毁于蚁穴。大灾难是逐步演化而来的，项目中切忌温水煮青蛙。</p>

<p><strong>接受反馈需要气度和行动。</strong>这就要求团队成员做事要有专业的态度，对事不对人，重结果轻过程。同时要拿出具体的行动，否则很容易打击积极性。</p>

<h2>其次，可以看到敏捷的精髓：拥抱变化。</h2>

<p>软件开发行业是一个不停发展和永远变化的领域。现在没有将来也不会有一个人能够了解你的项目的方方面面。</p>

<p>变化无处不在，这就要求我们不断的学习。而迭代和增量式的学习则不失为一个好办法。一个学习型的团队才是较好的团队。当然，在学习的同时，你也要懂得丢弃。打破旧习惯很难，更难的是自己还没意识到这个问题。丢弃的第一步，首先是意识到你还在使用过时的方法，这也是最难的部分。</p>

<p>同时，变化意味着我们要主动应对。德国陆军元帅Helmuth von Moltke说过一句话“没有任何计划在遇敌后还能继续执行。”在软件开发中，我们可以这样理解，任何设计在开发中只是一个起点，它如何你的代码一样，会不停地进一步发展和提炼。</p>

<h2>最后，敏捷的目的：交付用户想要的软件。</h2>

<p>试想客户将需求交付给你，要你几年后交付系统。然后，你基于这些需求构建了系统并按时交付。客户看了软件以后连声称赞。从此你多了一个忠实客户，接着开心的投入到下个项目中。请问这样的事情在你的项目中发生过吗？</p>

<p>通常情况是客户看到后暴跳如雷，这根本不是我想要的。这是因为用户的需要、技术和我们对需求的理解，都会随着时间的推移而变化。</p>

<p>那么，如何解决这个问题那？方法之一就是采用敏捷的迭代式开发。每个迭代至少有两个活动不可或缺。一个是展示会议（show case），向客户展示目前的项目进展，已完成的功能，从而收集客户的反馈，即时对产品的方向做出调整。另一个是回顾会议（retro)。回顾会议则是提出反馈的一个好时机。通过回顾会议分析出这个迭代中的做的好的地方和不好的地方，并提出具体的改进行动。</p>

<p>要将团队带入新的领域，必须首先要以身作则。我们需要的是领导者，而不是管理者。无论你目前的项目是否是敏捷项目，这本书中你都可以找到能够借鉴和提高的地方。敏捷中的持续改进不仅局限于项目开发，其实更适合于个人。通过持续改进自己的习惯、处事方法，保持一颗好奇心，勇敢的尝试未知领域，只要自己能力提高了，何惧其他？</p>

<p>改变从自身做起，不能自暴自弃，而要奋起直追。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[敏捷的写博客]]></title>
    <link href="http://www.huangbowen.net/blog/2013/04/01/min-jie-de-xie-bo-ke/"/>
    <updated>2013-04-01T12:49:00+10:00</updated>
    <id>http://www.huangbowen.net/blog/2013/04/01/min-jie-de-xie-bo-ke</id>
    <content type="html"><![CDATA[<h2>为什么写博客</h2>

<p>写技术博客对于程序员的提升是不可估量的。只要你坚持一段时间，你就会发现它给你带来的各种积极的变化。思考问题更加深入了，更容易关注细节了，表达能力也增强了......</p>

<!-- more -->


<ol>
<li><p><strong>不断的总结自己。</strong>程序员面对的世界是非常复杂的，未知领域也很多，在解决问题时第一次的方式并不一定是最完美的，只有通过不断的总结，不断的反思，才更容易抓住事物的本质。随着程序员的水平提高，需要思考的问题就开始变的更深度，更抽象、更复杂。这个时候就会遇到瓶颈，而通过写博客的方式能将自己的经验整理成型，形成一个完善的体系。</p></li>
<li><p><strong>能够认识到自己的进步。</strong>编程是枯燥乏味的，持续学习更难坚持。而写博客能激励自己，让自己看到自己的进步，并逐步建立信心。</p></li>
<li><p><strong>加强记忆，方便回顾。</strong>对自己在平时的实践中的收获以博客的方式发表出来，本来就是一种记忆的强化。失败本身不能让人进步，而对失败的反思才能让人进步。使用博客记录下这些反思，才能保证不会在同一个地方跌倒两次。</p></li>
<li><p><strong>强化发散思维，跳出局部看问题。</strong>其实各种技术都有相似或想通的理论作支撑。这些如果只看别人博客，只从google上搜素一些得到一些只言片语是很难领悟出来的。而自己写作的过程中随着对自己思路的梳理，更容易提升看问题的高度，以观全貌。</p></li>
<li><p><strong>扩大个人影响力，获取更多机会。</strong>程序员从业有些年头以后，如果是喜欢技术的人，总会想与别人做些更深入、更高层次的交流，但毕竟水平越高，能进行这种交流的人就会越少、越分散。写作、演讲、著书立说，这都是让自己进入一个更高水平的交流圈的方式。进入了这个对话环境，你才发现：原来还有那么多可学、可发展的方向。很多人到了三十岁上下就开始惰怠、看不到发展方向，在我看来一个重要的原因就是眼界不开，没有进入一个更高水平的交流生态。（这一点感谢<a href="http://www.weibo.com/gigix">@JeffXiong</a>的总结）</p></li>
</ol>


<h2>写博客要端正心态</h2>

<p>很多人之所有不写博客，有各种各样的原因。有的说时间不够，有的说自己的积累不够，有的说没有文采…..</p>

<p>其实写博客就像一项业余爱好一样，看似不是工作中的分内事，但却更有助于自己的工作。</p>

<p>一个极端是怕写的幼稚，不敢下笔，不敢面对别人的评价。博客其实首先是写给自己看的，如果自己能有所收获，那就是值得的。</p>

<p>另一个极端是总想着不写则已，一写惊人。老想着自己的每篇博客都能博来大家的大量关注。其实再牛逼的作家总有几篇作品不尽如人意。但是没经历这些作品的历练，是无法揣摩出更深的意境。更何况我们是普通人，只要写出自己所感所想，虚心接收别人的意见、建议，就是巨大的进步。</p>

<h2>敏捷的写博客</h2>

<p>每个程序员都喜欢编码，但不是每个程序员都喜欢写博客。如果我们将写博客的过程与敏捷流程一一对应起来，使用编程的技法来写博客，那么能提起你的兴趣吗?</p>

<p>本人在写博客的过程中与敏捷手法结合起来，受益良多。</p>

<p>在一个敏捷团队中，一个典型的用户故事的声明周期是这样的。</p>

<p><img src="http://images.cnblogs.com/cnblogs_com/huang0925/462982/o_storyLifeCycle.png" alt="story lifecycle" /></p>

<p>其实我们可以将一篇博客看做一个用户故事。你既是IM(迭代经理),又是BA(业务分析师)，DEV（开发者）,QA(质量保证)，而阅读你博客的人就是你的产品的最终用户。你的目标是让你的产品大卖（有越来越多的人关注你的博客）。</p>

<ol>
<li><p><strong>扩充你的Backlog。</strong> 创建backlog的要点就是随时随地的记录你的idea。这有个一个很有趣的理论，大脑有两个工作模式，<a href="https://right-track-wrong-train.readthedocs.org/en/latest/thinking_and_learning/pragmatic_thinking_and_learning/chp3.html">线型模式(L型)和富模式（R型）</a>。L型在工作的时候经常被用到，其按部就班，抑制了发散思维。而工作之余大脑得到充分休息，更容易进入R型工作状态，更容易得到好的idea,这时候要赶快的记录下来。所以这就是我喜欢<a href="https://evernote.com/">evernote</a>原因之一:随时随地记录idea。比如我的backlog里面现在有很多打算完成的博客，其中有《重构手法解析》一篇。《重构手法解析》这篇是我在上班骑自行车的路上想到的idea，并在到办公室的第一件事就是把这个想法记下来，放到backlog中去。</p></li>
<li><p><strong>Analysis。</strong> 要点：先写大纲,再进行补充完善。对于某个idea，大概确定要写什么，想表达什么样的意思。无论是技术文章还是平时的一些反思总结文章，都要有一定的骨架。我们可以先将这些骨架确定，然后再填充内容，这就像软件的设计一样。比如《敏捷的写博客》这篇，我确定一个骨架就是：1，写博客的好处。 2，敏捷流程。 3，如何让写博客变得敏捷。有了这个大纲作为支撑，写的时候就不会漫无目的。</p></li>
<li><p><strong>Development。</strong> 要点：采用自由写技术。何为自由写？即针对当前的博客主题及大纲想到什么就写什么，而不用太纠结于用词造句。这就像你要修建一面墙壁，事先不需要计划收集特别的材料，只需要到处走走看看，捡一些好看的时候备用。直到准备造墙时，就从石头堆里面挑出匹配的石头安放。写一篇2000字的文章容易还是将4000字的草稿整理成为2000字的文章容易？相信大多数人会选择后者。</p></li>
<li><p><strong>Testing。</strong> 要点:斟酌语句，最后的检查，将草稿转化为定稿。</p></li>
<li><p><strong>Done。</strong>发表。</p></li>
</ol>


<p>是不是发表了以后就完了? NO。我们缺少了敏捷实践中最重要的一环，那就是retro（回顾会议）。我们需要吸收读者的评论，修正自己的观点，再对博客进行加工。</p>

<p>我的同事<a href="http://www.weibo.com/illusionking">@IM_ZhangYve</a>使用<a href="https://evernote.com/">evernote</a>来管理自己的文章。他将category建成了这个样子。</p>

<p><img src="http://images.cnblogs.com/cnblogs_com/huang0925/462982/o_evernote.jpg" alt="evernote category" /></p>

<p>这样<a href="https://evernote.com/">evernote</a>就成了一个故事墙，每个用户故事就是一篇博客，当前那些处于backlog，那些处于WIP,一目了然。你所需要做的就是尽量把用户故事往done里面挪。</p>

<h2>使用敏捷的博客工具</h2>

<p>以上只是用敏捷的方法来管理博客，那有没有相应的工具来支持像敲代码一样的写博客？
有，那就是<a href="http://octopress.org/">octopress</a>。使用<a href="http://octopress.org/">octopress</a>博客框架写博客与写代码没什么两样。
具体如何使用<a href="http://octopress.org/">octopress</a>，请自行google或者直接去其官网。
下面简单讲下如何使用<a href="http://octopress.org/">octopress</a>发表一篇博客。</p>

<ul>
<li>创建一篇博客。</li>
</ul>


<p>```bash</p>

<p>:~/sourcecode/octopress$ rake new_post['敏捷的写博客']
mkdir -p source/<em>posts
Creating new post: source/</em>posts/2013-04-01-min-jie-de-xie-bo-ke.markdown</p>

<p>```</p>

<ul>
<li><p>编辑博客。</p>

<p>  使用任何你喜欢的编辑器打开<code>2013-04-01-min-jie-de-xie-bo-ke.markdown</code>文件，比如vim、emacs、sublime等。甚至编代码的ide都行。然后使用<a href="http://daringfireball.net/projects/markdown/">markdown</a>的语法来编辑你的博客。设置标题、设置列表、加粗、加下划线、代码高亮…一切根本无需借助html编辑器就可以轻松实现。</p></li>
<li><p>发布博客。</p></li>
</ul>


<p>```bash
:~/sourcecode/octopress$ rake generate
:~/sourcecode/octopress$ rake deploy</p>

<p>```</p>

<p>不过毕竟将博客host在<a href="https://github.com">github</a>或<a href="http://www.heroku.com/">heroku</a>人气没有<a href="www.cnblogs.com">博客园</a>这么旺。我们可以通过同步的方式将博客同步到<a href="www.cnblogs.com">博客园</a>中。只要将screen.css文件引入到博客园中，就可以共用生成的html元素。我最喜欢的是<a href="https://github.com">github</a>显示代码的效果。</p>

<p>最后再推荐我们公司部分大牛的博客。</p>

<ul>
<li><p><a href="http://xiaopeng.me">明确思考</a></p></li>
<li><p><a href="http://dreamhead.blogbus.com">梦想风暴</a></p></li>
<li><p><a href="http://gigix.thoughtworkers.org">透明思考</a></p></li>
<li><p><a href="http://agiledon.github.com/">捷道</a></p></li>
<li><p><a href="http://www.iamhukai.com">I am Hu Kai</a></p></li>
<li><p><a href="http://michael.nona.name/">Michel Chen's Blog</a></p></li>
</ul>

]]></content>
  </entry>
  
</feed>
