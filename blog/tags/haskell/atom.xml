<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: haskell | 黄博文的地盘]]></title>
  <link href="http://www.huangbowen.net/blog/tags/haskell/atom.xml" rel="self"/>
  <link href="http://www.huangbowen.net/"/>
  <updated>2017-04-20T17:04:49+08:00</updated>
  <id>http://www.huangbowen.net/</id>
  <author>
    <name><![CDATA[黄博文]]></name>
    <email><![CDATA[huangbowen521@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Haskell函数式编程之List操作]]></title>
    <link href="http://www.huangbowen.net/blog/2013/04/05/haskell-list-processing/"/>
    <updated>2013-04-05T01:20:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/04/05/haskell-list-processing</id>
    <content type="html"><![CDATA[<p>List在函数式语言中是一个重要的抽象，很多事情离了它就很难做到。函数式语言的鼻祖Lisp名称就来自List processing。</p>

<p>Haskell本身也给List操作提供了一系列的操作符以及库函数。</p>

<!-- more -->


<h2>对列表操作的运算符</h2>

<p><strong><code>:</code>将一个元素放置到列表的前端。</strong></p>

<pre><code class="bash">Prelude&gt; 1 : []
[1]
Prelude&gt; 2 : [3,4,5]
[2,3,4,5]
Prelude&gt; 'a' : ['g','h','d']
"aghd"
Prelude&gt; 'a' : "ghd"
"aghd"
</code></pre>

<p>从上面例子可以看出一个字符串其实就是Char型的列表。
我们可以这样验证。</p>

<pre><code class="bash">Prelude&gt; "abc" == ['a','b','c']
True
</code></pre>

<p><strong><code>++</code> 连接两个列表。</strong>
<code>bash
Prelude&gt; [1,2,3] ++ [4,5,6]
[1,2,3,4,5,6]
Prelude&gt; "abc" ++ "efg"
"abcefg"
</code></p>

<h2>使用Range</h2>

<p>如果要声明一个1到20的数组，除了将这些数字一一列举出来，我们还可以使用Range来实现，操作符是<code>..</code>。</p>

<pre><code class="bash">Prelude&gt; [1..10]
[1,2,3,4,5,6,7,8,9,10]
Prelude&gt; ['a'..'h']
"abcdefgh"
</code></pre>

<p>Range的默认步长是1，我们可以指定其步长。方法就是给出前两个元素再加上结尾元素，Haskell会根据前两个元素推断出步长，并应用。</p>

<pre><code class="bash">Prelude&gt; [1,3..21]
[1,3,5,7,9,11,13,15,17,19,21]
Prelude&gt; [1,3..20]
[1,3,5,7,9,11,13,15,17,19]
Prelude&gt; ['a','c'..'k']
"acegik"
Prelude&gt; [20,18..0]
[20,18,16,14,12,10,8,6,4,2,0]
</code></pre>

<h2>使用集合生成新的列表</h2>

<p>Haskell对List的操作还有一种神奇的方式。下面是一个数学公式，我们在初中肯定学过。</p>

<pre><code class="console">S = { x | x ∈ N, x &lt; 10}
</code></pre>

<p>S是一个目标集合，N是源集合，S中的元素是属于集合N,并且小于10的元素。</p>

<p>而在Haskell中可以直接使用这种语法。</p>

<pre><code class="bash">Prelude&gt; let list = [1,2,3,4,5,6]
Prelude&gt; [x | x &lt;- list, x &lt; 3]
[1,2]
Prelude&gt; [x | x &lt;- list, x &lt; 3, x &gt; 1]
[2]
Prelude&gt; [x * 2 | x &lt;- list, x &lt; 3]
[2,4]
</code></pre>

<h2>常用的列表操作函数</h2>

<p>在<a href="http://huangbowen.net/blog/2013/03/17/haskell-functional-programming-feature/">《Haskell函数式编程之特性篇》</a>中我们定义了一个map函数。它就是对列表的每个元素进行一个函数元素生成另一个列表。</p>

<pre><code class="haskell">
map' :: (a -&gt; b) -&gt; [a] -&gt; [b]

map' f [] = []
map' f (x:xs) =f x : map' f xs
</code></pre>

<p>我们可以再定义一个filter函数，用于对列表进行过滤。</p>

<pre><code class="haskell">
filter' :: (a -&gt; Bool) -&gt; [a] -&gt; [a]

filter' f [] = []
filter' f (x:xs)
     | f x       = x : filter' f xs
     | otherwise = filter' f xs
</code></pre>

<p>除此之外，Haskell还有大量的库函数用于对list进行操作。我们可以自己一一实现它。</p>

<p>head函数用于获取列表的第一个元素。</p>

<pre><code class="haskell">head' (x:xs) = x
</code></pre>

<p>tail函数获取列表的除第一个元素外的所有元素。</p>

<pre><code class="haskell">tail' (x:xs) = xs
</code></pre>

<p>last函数是获取列表的最后一个元素。</p>

<pre><code class="haskell">last' (x:xs)
     | null xs = x
     | otherwise = last' xs
</code></pre>

<p>init函数返回列表中除最后一个的其他元素。</p>

<pre><code class="haskell">init' (x:xs)
     | null xs = []
     | otherwise = x : init' xs
</code></pre>

<p>你看使用Haskell实现这样的函数是如此的简单。注意这些函数都没有做对空列表的处理。如果给这些函数传递一个空列表会抛出异常。使用Haskll提供的库函数也一样。</p>

<pre><code class="haskell">Prelude&gt; head []
*** Exception: Prelude.head: empty list
</code></pre>

<h2>fold</h2>

<p>对list的操作中我们经常会有这样一个情况，就是给定一个初始值，对list的每个元素进行一个操作，最后得出一个结果,这就像将列表折叠起来一样。比如求数组的最大值、最小值、求和都是这样的模式。Haskell中有相应的函数来实现这种pattern。我们可以自己实现一下。</p>

<pre><code class="haskell">
foldl' :: (a -&gt; b -&gt; a) -&gt; a -&gt; [b] -&gt; a

foldl' f s [] = s
foldl' f s (x:xs) = foldl' f (f s x) xs
</code></pre>

<p>foldl'函数接收一个函数（这个函数接收一个a类型的值，b类型的值，并返回一个a类型值），一个a类型的值，一个b类型的列表，返回值为a类型的值。 （注意其中的a，b类型并不是确定的类型，它只是代表某类型，这有点像其他编程语言中的泛型。a,b的具体类型是由调用fold'时传入的具体参数推断出来的。）</p>

<p>我们可以用它来计算一个数组的和。</p>

<pre><code class="bash">*Main&gt; foldl' (\ s x -&gt; s + x)  0 [1,2,3]
6
</code></pre>

<p>它与我们在Haskell函数式编程之2中提到的sum' 函数是等价的。
注意这是一个左flod。即它是对列表的每个元素按照从左到右的顺序进行函数运算。</p>

<p>我们也可以实现一个右fold。</p>

<pre><code class="haskell">
foldr' :: (a -&gt; b -&gt; a) -&gt; a -&gt; [b] -&gt; a
foldr' f s [] = s
foldr' f s (x:xs) = f (foldr' f s xs) x
</code></pre>

<pre><code class="bash">*Main&gt; foldr' (\ s x -&gt; s + x)  0 [1,2,3]
6
</code></pre>

<p>在右fold中，对列表进行函数运算的顺序是从右到左。其实我们可以使用左fold来构造一个右fold。</p>

<pre><code class="haskell">foldr2 f s [] = s
foldr2 f s (x:xs) = f s (foldl' f x xs)
</code></pre>

<pre><code class="bash">*Main&gt; foldr2 (\ s x -&gt; s + x)  0 [1,2,3]
6
</code></pre>

<p>只不过这个右fold有个局限性，那就是a，b两个必须是同一个类型。</p>

<p>我们甚至可以用fold来实现map及filter等函数。</p>

<p>使用左fold实现map和filter。</p>

<pre><code class="haskell">map2 :: (a -&gt; b) -&gt; [a] -&gt; [b]
map2 f xs =foldl' (\s x -&gt; s ++ [f x]) [] xs

filter2 :: (a -&gt; Bool) -&gt; [a] -&gt; [a]
filter2 f [] = []
filter2 f (x:xs) = foldl' (\s x -&gt; if f x then s ++ [x] else s ) [] xs
</code></pre>

<p>使用右fold来实现map和filter。</p>

<pre><code class="haskell">map3 :: (a -&gt; b) -&gt; [a] -&gt; [b
map3 f xs =foldr' (\s x -&gt; f x : s) [] xs

filter3 :: (a -&gt; Bool) -&gt; [a] -&gt; [a]
filter3 f [] = []
filter3 f (x:xs) = foldr' (\s x -&gt; if f x then x : s else s) [] xs
</code></pre>

<p>由于<code>++</code>效率没有<code>:</code>高，所以生成结果为list的时候最好使用右fold。</p>

<p>以上就是关于List操作的各种知识了。其实Haskell中的列表就是一个函数，一个包装了一系列元素的函数。我们甚至可以自己实现自己的List函数。等有空的时候一起实现下。</p>

<p>另外，本篇文章所有源码被我放置在github中，地址是<a href="https://github.com/huangbowen521/HaskellLearning">https://github.com/huangbowen521/HaskellLearning</a>,想要源码的可以自行下载。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Haskell函数式编程之递归]]></title>
    <link href="http://www.huangbowen.net/blog/2013/03/14/haskell-recursion/"/>
    <updated>2013-03-14T21:46:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/03/14/haskell-recursion</id>
    <content type="html"><![CDATA[<p>在Haskell的世界中，没有变量赋值，流程跳转，如果要实现一些简单的功能，比如求一个数组中的最大值，都需要借助递归实现。</p>

<p><strong>递归函数的定义:</strong></p>

<p><strong>A function may be partly defined in terms of itself.</strong>
<strong>即如果一个函数的定义中使用了其自身，这个函数就叫做递归函数。</strong></p>

<h2>普通递归(traditional recursion)</h2>

<p>我们就写一个简单的对数组求和的函数。</p>

<pre><code class="haskell">
sum' :: (Num a) =&gt; [a] -&gt; a 
sum' (x:xs) = x + sum' xs
sum' [] = 0
</code></pre>

<!-- more -->


<p>第一行定义了了一个名为<code>sum'</code>的函数的参数及返回值。这个函数接收一个类型为Num的数组并返回一个Num型的数值。（这里的<code>'</code>是函数名的一部分，因为Haskell允许<code>'</code>作为函数名的一部分。由于系统已经有了sum函数，所以我们加个<code>'</code>与标准sum函数区分开。）</p>

<p>第二行的(x:xs)就是我们传入的数组参数。我们这里使用了Haskell的pattern matching。x表示的是数组中的第一个元素，xs表示数组中的其它元素。我们可以描述求数组中值的和的行为为：数组中的第一个元素与数组中剩余元素的和。所以这就是我们的实现。</p>

<p>第三行则说明了如果给一个空的数组则直接返回0。这也叫做递归的退出条件，否则递归会没完没了。</p>

<p>第二行和第三行共同完成了这个<code>sum'</code>函数的定义。当你传递给它一个参数时，它会根据参数的情况自动选择调用那个实现。</p>

<p>假设我们这样调用它：<code>sum'  [1,2,3]</code>,程序的执行过程是这样子的：</p>

<pre><code class="console">
sum' [1,2,3] -&gt;

1 + sum' [2,3] -&gt;

1 + (2 + sum' [3]) -&gt;

1 + (2 + (3 + sum' [])) -&gt;

1 + (2 + (3 + 0)) -&gt;

1 + (2 + 3) -&gt;

1 + 5 -&gt;

6
</code></pre>

<p>这种递归有个问题就是我们一直到等到递归结束才进行算术运算，这样在执行过程既要保存函数调用的堆栈，还要保存中间计算结果的堆栈，如果递归过深，很容易引起stackOverFlow.</p>

<h2><strong>尾递归</strong>(tail recursion)</h2>

<p>针对上述问题，我们可以换种写法。</p>

<pre><code class="haskell">
sum' :: (Num a) =&gt; [a] -&gt; a -&gt; a 

sum' (x:xs) temp = sum' xs x+ temp 

sum' [] temp = temp
</code></pre>

<p>我们这样调用它: <code>sum' [1,2,3] 0</code>。</p>

<p>它的执行顺序是这样的:</p>

<pre><code class="console">
sum' [1,2,3] 0 -&gt;

sum' [2,3] 1 -&gt;

sum' [3] 3 -&gt;

sum' []  6 -&gt;

6
</code></pre>

<p>第二种写法其实就是尾递归。</p>

<p><strong>尾递归的定义：</strong></p>

<p><strong>A recursive function is tail recursive if the final result of the recursive call is the final result of the function itself.</strong></p>

<p><strong>即:如果一个递归函数，它的最终的递归调用结果就是这个函数的最终结果，那它就是尾递归的。</strong></p>

<p>所以我们可以明显看出，第一个不是尾递归，第二个是。</p>

<h3>尾递归优化(tail recursion optimization)</h3>

<p>在大多数编程语言中，调用函数需要消费堆栈空间，一个实现了尾递归的递归函数在进行递归调用时，其实只关心递归调用的结果，所以当我们调用下层函数时，可以舍去上层函数的堆栈调用情况，下层递归调用可以重用这个堆栈空间，这种就叫做<strong>尾递归优化</strong>。一个可能的实现方式是：只需要把汇编代码call改成jmp, 并放弃所有 局部变量压栈处理，就可以了。</p>

<p>尽管尾递归比递归更节省堆栈空间，但并非所有的递归算法都可以转成尾递归的，因为尾递归本质上执行的是迭代的计算过程。这与并非所有的递归算法都可以转成迭代算法的原因是一样的。</p>

<h2>互递归(mutual recursion)</h2>

<p>互递归就是多个递归函数之间相互调用。互递归的一个简单的例子就是判断一个自然数是偶数还是还是奇数。</p>

<pre><code class="haskell">
isOdd :: Int -&gt; Bool
isOdd x
 | x == 0 = False
 | otherwise = isEven (x-1)


isEven :: Int -&gt; Bool
isEven x
 | x == 0 = True
 | otherwise = isOdd (x-1)
</code></pre>

<p>这个实现很有意思。</p>

<p>任何一个互递归都可以被转变为<strong>直接递归</strong>(direct recursion)，即将另一个调用inline到当前递归函数中。</p>

<p>下面是isOdd和isEven的<strong>直接递归</strong>版本。</p>

<pre><code class="haskell">
isOdd :: Int -&gt; Bool
isOdd x
 | x == 0 = False
 | x == 1 = True
 | otherwise = isOdd (x-2)


isEven :: Int -&gt; Bool
isEven x
 | x == 0 = True
 | x == 1 = False
 | otherwise = isEven (x-2)
</code></pre>
]]></content>
  </entry>
  
</feed>
