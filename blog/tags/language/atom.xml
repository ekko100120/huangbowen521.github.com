<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Language | 黄博文的地盘]]></title>
  <link href="http://www.huangbowen.net/blog/tags/language/atom.xml" rel="self"/>
  <link href="http://www.huangbowen.net/"/>
  <updated>2013-08-13T17:52:03+10:00</updated>
  <id>http://www.huangbowen.net/</id>
  <author>
    <name><![CDATA[黄博文]]></name>
    <email><![CDATA[huangbowen521@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Haskell-函数式编程语言之初体验]]></title>
    <link href="http://www.huangbowen.net/blog/2013/03/02/haskell-programming-language-first-touch/"/>
    <updated>2013-03-02T14:55:00+10:00</updated>
    <id>http://www.huangbowen.net/blog/2013/03/02/haskell-programming-language-first-touch</id>
    <content type="html"><![CDATA[<p>如果你是使用面向对像语言进行编程的程序员，那么你应该去了解掌握一门动态语言。而动态语言的魔力之一就是函数式编程。而要学习了解函数式编程，那么haskell是一个不错的选择。</p>

<p>Haskell是是一门纯函数式编程语言(purely functional programming language)。在其世界中函数是第一等对象。并且在haskell中没有赋值，例如你指派a的值为5，然后你无法再给a分配其它的值。所以你不能像命令式语言那样命令电脑“要做什么”，而是通过函数来描述出问题“是什么”。</p>

<p>作为一个纯的函数式编程语言，它支持惰性求值、模式匹配、列表解析、类型类、类型多态……</p>

<p>别着急，让我们慢慢来解开函数式编程的面纱。</p>

<!-- more -->


<h2>安装Haskell</h2>

<ol>
<li><p>可以去<a href="http://www.Haskell.org/Haskellwiki/Haskell">官网</a>下载安装包进行安装。</p></li>
<li><p>mac平台的用户可以通过<a href="http://mxcl.github.com/homebrew/">homebrew</a>进行安装。</p></li>
</ol>


<p>在terminal下输入<code>brew install haskell-platform</code>即可。</p>

<h2>使用Haskell</h2>

<p>安装完毕后haskell platform的解释器GHC就已经在你的电脑上了。GHC可以解释执行Haskell脚本，即后缀名为.hs的文件。你可可以通过在terminal输入<code>ghci</code>进入交互模式。</p>

<p>``` bash</p>

<p>twer@bowen-huang:~$ ghci
GHCi, version 7.4.2: http://www.haskell.org/ghc/ :? for help
Loading package ghc-prim ... linking … done.
Loading package integer-gmp ... linking … done.
Loading package base ... linking … done.
Prelude> 1+2
3
Prelude> 3*4
12
Prelude> 5/1
5.0</p>

<p>```</p>

<p>关于Haskell的编辑器你可以使用任何喜欢的编辑器:Vim、Emacs、Sublime、TextMate…..我比较喜欢Sublime。因为在Sublime自带Haskell的快捷编译执行。只需要按Ctrl+B来直接运行Scripts脚本。</p>

<p>在ghci交互模式下可以使用<code>:l</code>命令来load一个Haskell脚本，然后就可以调用此脚本中的函数。我们先写一个'Hello world!’程序，然后通过ghci来load和调用.</p>

<p>``` haskell HelloWorld.hs</p>

<p>main = print $ "Hello world!"</p>

<p>```</p>

<p>``` bash
Prelude> :l HelloWorld.hs
[1 of 1] Compiling Main ( HelloWorld.hs, interpreted )
Ok, modules loaded: Main.
*Main> main
"Hello world!"</p>

<p>```</p>

<p>如果对文件进行了修改，也可以直接通过<code>:r</code>来重新加载文件。</p>

<h2>Haskell的基本语法</h2>

<h3>加减乘除操作</h3>

<p>``` bash</p>

<p>Prelude> 1 + 2
3
Prelude> 3 - 1
2
Prelude> 3 * 4
12
Prelude> 5 / 1
5.0
Prelude> 10 / (-5)
-2.0</p>

<p>```</p>

<p>注意对负数进行操作时要将其用()括起来，否则系统会报错。</p>

<h3>判等与比较操作</h3>

<p>``` bash</p>

<p>Prelude> 5 == 5
True
Prelude> 10 == 8
False
Prelude> 5 /= 5
False
Prelude> 10 /= 8
True
Prelude> 5 >= 3
True
Prelude> 5 &lt;= 3
False
Prelude> True &amp;&amp; True
True
Prelude> True &amp;&amp; False
False
Prelude> False || False
False
Prelude> True || False
True
Prelude> not True
False
Prelude> not False
True</p>

<p>```</p>

<h3>控制流转</h3>

<p>``` bash</p>

<p>Prelude> let isHello x = if x == "Hello" then True else False
Prelude> isHello "Hello"
True
Prelude> isHello "World"
False</p>

<p>```</p>

<p>注意这里的条件判断中的else是不可以省略的，这样保证条件语句总会返回一个值。所以我们可以将整个<code>if..then..else</code> pattern看做一个表达式。</p>

<p>如果在脚本文件中写的话不需要使用<code>let</code>关键字。并且也可以采用另一个写法。</p>

<p>``` haskell isHello.hs</p>

<p>isHello x
 | x == "Hello" = True
 | otherwise     = False</p>

<p>```</p>

<p>|表示或，otherwise关键字表示其它的情况。当然你也可以将这三行代码写成一行，这样也是能够正常运行的。分成三行只是为了更加可读。</p>

<p>还有第三种写法，实际上与面对对象语言中的<code>switch…case</code>语句有些类似。</p>

<p>``` haskell isHello.hs</p>

<p>isHello x = case x of
 "Hello" -> True
 otherwise -> False</p>

<p>```</p>

<p>这和第二种写法很类似。其实第二种写法本质上就是<code>case</code>语句，它只是<code>case</code>语句的一个语法糖而已。</p>

<p>另外，在Haskell中是没有各种循环语句的，如果要实现相似的特性当然要使用递归了。</p>

<p>第二节中，我们会讨论这个问题。</p>
]]></content>
  </entry>
  
</feed>
