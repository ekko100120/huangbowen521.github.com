<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: xsd | 黄博文的地盘]]></title>
  <link href="http://www.huangbowen.net/blog/tags/xsd/atom.xml" rel="self"/>
  <link href="http://www.huangbowen.net/"/>
  <updated>2016-06-07T10:37:05+08:00</updated>
  <id>http://www.huangbowen.net/</id>
  <author>
    <name><![CDATA[黄博文]]></name>
    <email><![CDATA[huangbowen521@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[XML相关知识全接触（一）]]></title>
    <link href="http://www.huangbowen.net/blog/2013/10/14/xml-knowledge/"/>
    <updated>2013-10-14T00:32:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/10/14/xml-knowledge</id>
    <content type="html"><![CDATA[<p><img src="/images/xml.png" width="400"></p>

<p>XML文件格式已经出来很久了。他的风头如今在JSON、YAML等新兴文件格式的冲击下已经显的不那么强劲。但是XML仍然是当今世界上使用最广泛的文件格式。围绕着它也有一大堆的概念和知识点。所以我们还是很有必要全面了解下。</p>

<!-- more -->


<h2>XML</h2>

<p>XML全称为eXtensible Markup Language，即可扩展标记语言。其被设计用来传输及存储数据。</p>

<p>XML与HTML看似比较相似，但是其设计目的并不相同。</p>

<ul>
<li><p>XML用来传输及存储数据，主要关注数据是什么。</p></li>
<li><p>HTML用来显示数据，主要关注数据看起来是什么样。</p></li>
<li><p>HTML的tag是预定义的，比如说table标签，浏览器会知道它是什么含义。</p></li>
<li><p>XML的tag不是预定义的，需要自己设计tag并描述tag的含义。XML中的tag如果不借助XSLT文件，浏览器只会以简单的文本方式展示。</p></li>
</ul>


<p>很多人认为HTML是XML文件的一个子集。其实这种观点是错误的，因为HTML的实现并未严格遵循XML的语法。比如XML要求每个tag必须要有闭合标记，XML的tag是大小写敏感的，XML给tag添加的属性必须要使用引号包起来…这些语法要求HTML都不满足。</p>

<p>请看XML的一个示例。</p>

<pre><code class="xml book.xml ">
&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
&lt;book&gt;
    &lt;name&gt;Effective JavaScript&lt;/name&gt;
    &lt;category&gt;Program Language&lt;/category&gt;
    &lt;author&gt;Bowen&lt;/author&gt;
    &lt;description&gt;This book is about JavaScript Language.&lt;/description&gt;
&lt;/book&gt;
</code></pre>

<p>这是一个简单的XML文件。第一行说明了xml的版本及编码类型。接下来是一个根节点book，根节点可以包含很多子节点。</p>

<h3>XML命名空间</h3>

<p>由于XML的tag并不像HTML那样是预定义的，那么很有可能两个XML中的同名tag具有不同的含义。那么在合并XML等操作时势必会造成冲突。解决的办法就是给XML的tag加上命名空间（即namespace），每一个namespace都可以指定一个前缀。这些前缀会区分同名tag。</p>

<p>假设这里有另一个xml文件。</p>

<pre><code class="xml anotherBook.xml">
&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
&lt;book&gt;
    &lt;name&gt;Rework&lt;/name&gt;
    &lt;page&gt;120&lt;/page&gt;
    &lt;publishDate&gt;2013-10-08&lt;/publishDate&gt;
&lt;/book&gt;
</code></pre>

<p>如果我们要合并这两个xml节点到同一个xml文件中时，不加namespace会发生冲突，因为含有同名的tag，其子节点的结构并不相同。接下来我们给其加上命名空间并合并。</p>

<pre><code class="xml combined.xml">
&lt;root&gt;
&lt;ns1:book xmlns:ns1="http://www.huangbowen.net/ns1"&gt;
    &lt;ns1:name&gt;Effective JavaScript&lt;/ns1:name&gt;
    &lt;ns1:category&gt;Program Language&lt;/ns1:category&gt;
    &lt;ns1:author&gt;Bowen&lt;/ns1:author&gt;
    &lt;ns1:description&gt;This book is about JavaScript Language.&lt;/ns1:description&gt;
&lt;/ns1:book&gt;

&lt;ns2:book xmlns:ns2="http://www.huangbowen.net/ns2"&gt;
     &lt;ns2:name&gt;Rework&lt;/ns2:name&gt;
    &lt;ns2:page&gt;120&lt;/ns2:page&gt;
    &lt;ns2:publishDate&gt;2013-10-08&lt;/ns2:publishDate&gt;
     &lt;/ns2:book&gt;
&lt;/root&gt;
</code></pre>

<p>xmlns是xml namespace的缩写。引号后面是tag的前缀。这个前缀可以省略，比如<code>xmlns="http://www.huangbowen.net/ns1"</code>,相当于没有前缀的tag自动应用默认的命名空间。需要注意的是命名空间的URI只是给命名空间提供一个唯一的标识，xml解析器并不会访问这个URI来获取任何信息。很多公司习惯将这个URI一个web页面，该web页面描述了该namespace的相关信息。</p>

<h2>XSD</h2>

<p>XSD全称为XML Schema Definition,即XML结构定义语言。每个XSD文件是对一个XML文件的结构定义。
由于XML中的tag并不是预定义的，那么每人都可以创建自己的XML结构文档。如果你想让别人按照你的标准创建一份xml文件，你可以使用XSD文件来描述你的标准。</p>

<p>这是针对本文示例book.xml文件的一个XSD文件。</p>

<pre><code class="xml book.xsd">
&lt;xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified"
           xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;
    &lt;xs:element name="book"&gt;
        &lt;xs:complexType&gt;
            &lt;xs:sequence&gt;
                &lt;xs:element type="xs:string" name="name"/&gt;
                &lt;xs:element type="xs:string" name="category"/&gt;
                &lt;xs:element type="xs:string" name="author"/&gt;
                &lt;xs:element type="xs:string" name="description"/&gt;
            &lt;/xs:sequence&gt;
        &lt;/xs:complexType&gt;
    &lt;/xs:element&gt;
&lt;/xs:schema&gt;
</code></pre>

<p>从上可以看出其实XSD文件本身就是一个XML文件，它遵循XML语法，比如每个tag都需要有结束标记，必须有且只有一个根节点等。</p>

<p>在一个XML文件中可以添加其Schema的引用信息。</p>

<pre><code class="xml book.xml">
&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
&lt;ns1:book xmlns:ns1="http://www.huangbowen.net/ns1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:targetLocation="http://www.huangbowen.net/book.xsd"&gt;
    &lt;ns1:name&gt;Effective JavaScript&lt;/ns1:name&gt;
    &lt;ns1:category&gt;Program Language&lt;/ns1:category&gt;
    &lt;ns1:author&gt;Bowen&lt;/ns1:author&gt;
    &lt;ns1:description&gt;This book is about JavaScript Language.&lt;/ns1:description&gt;
&lt;/ns1:book&gt;
</code></pre>

<p>在IDE中，如果你的XML节点没有遵守你引用的Schema中的定义，就会给出错误提醒。</p>

<h2>XSLT</h2>

<p>XSLT全称为EXtensible Stylesheet Language Transformations。 XSLT用于将XML文档转换为XHTML或其他XML文档。</p>

<p>在讲XSLT之前我们先讲讲XSL。XSL全称为Extensible Stylesheet Language,即可扩展样式表语言。众所周知，CSS是HTML文件的样式表，而XSL则是XML文件的样式表。XSL文件描述了XML文件应该如何被显示。</p>

<p>其实XSL不仅仅是样式表语言，它主要包含3部分:</p>

<ul>
<li><p>XSLT - 用来转换XML文档</p></li>
<li><p>XPath - 查询和操作XML文档中的节点</p></li>
<li><p>XSL-FO - 格式化XML文档</p></li>
</ul>


<p>XSLT使用XPath来查找XML中的元素。</p>

<p>XSLT通过一个xml文件来定义源xml文件与目标文件之间的转换关系。该xml文件必须以<code>&lt;xsl:stylesheet&gt;</code>或<code>&lt;xsl:transform&gt;</code>作为根节点。</p>

<p>对于本文的示例book.xml,如果我们使用浏览器打开显示效果如下。</p>

<p><img src="/images/bookxml.png" width="600"></p>

<p>现在我们创建一个XSLT文件将其转换为一个HTML文件。</p>

<pre><code class="html book.xsl">
&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
&lt;xsl:stylesheet version="1.0"
xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;

&lt;xsl:template match="/"&gt;
  &lt;html&gt;
  &lt;body&gt;
  &lt;h2&gt;My Book&lt;/h2&gt;
  &lt;table border="1"&gt;
    &lt;tr&gt;
      &lt;td&gt;name&lt;/td&gt;
      &lt;td&gt;&lt;xsl:value-of select="book/name" /&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;category&lt;/td&gt;
      &lt;td&gt;&lt;xsl:value-of select="book/category" /&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;author&lt;/td&gt;
      &lt;td&gt;&lt;xsl:value-of select="book/author" /&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;description&lt;/td&gt;
      &lt;td&gt;&lt;xsl:value-of select="book/description" /&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
  &lt;/body&gt;
  &lt;/html&gt;
&lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;
</code></pre>

<p>然后我们在book.xml文件中加入对这个XSLT文件的引用。</p>

<pre><code class="xml book.xml">
&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
&lt;?xml-stylesheet type="text/xsl" href="book.xsl"?&gt;
&lt;book&gt;
    &lt;name&gt;Effective JavaScript&lt;/name&gt;
    &lt;category&gt;Program Language&lt;/category&gt;
    &lt;author&gt;Bowen&lt;/author&gt;
    &lt;description&gt;This book is about JavaScript Language.&lt;/description&gt;
&lt;/book&gt;
</code></pre>

<p>接下来我们再用浏览器打开book.xml文件，发现显示变成了这样。是不是很神奇？</p>

<p><img src="/images/bookxmlwithxslt.png" width="600"></p>

<p>注意如果你使用chrome打开该book.xml文件，请设置chrome的<code>--allow-file-access-from-files</code>属性，这样chrome才允许加载本地的xsl文件。解决方案看这里：<a href="http://stackoverflow.com/questions/3828898/can-chrome-be-made-to-perform-an-xsl-transform-on-a-local-file">http://stackoverflow.com/questions/3828898/can-chrome-be-made-to-perform-an-xsl-transform-on-a-local-file</a></p>

<p>OK，这篇文章讲的够多了，下篇接着讲XPath，XML to Object以及XML文档格式与近来风头强劲的JSON、YAML格式的比较。</p>
]]></content>
  </entry>
  
</feed>
