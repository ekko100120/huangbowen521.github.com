<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: generic | 黄博文的地盘]]></title>
  <link href="http://www.huangbowen.net/blog/tags/generic/atom.xml" rel="self"/>
  <link href="http://www.huangbowen.net/"/>
  <updated>2014-02-17T00:36:17+08:00</updated>
  <id>http://www.huangbowen.net/</id>
  <author>
    <name><![CDATA[黄博文]]></name>
    <email><![CDATA[huangbowen521@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Java基础知识之泛型]]></title>
    <link href="http://www.huangbowen.net/blog/2013/03/23/java-generic-type/"/>
    <updated>2013-03-23T00:26:00+08:00</updated>
    <id>http://www.huangbowen.net/blog/2013/03/23/java-generic-type</id>
    <content type="html"><![CDATA[<p><strong>当我们在定义类，接口和方法时，可以接收一个类型作为参数，这就叫做泛型</strong>。</p>

<p>函数可以传入普通的参数，也可以传入一个类型参数。不同之处是普通的参数就是值而已，但是类型参数却是个类型。</p>

<p>使用泛型的好处:</p>

<ul>
<li>强类型检查。在编译时就可以得到类型错误信息。</li>
<li>避免显式强制转换。</li>
<li>方便实现通用算法。</li>
</ul>


<!-- more -->


<h2>对类使用泛型</h2>

<p>我们可以创建一个简单的Class Box。它提供存取一个类型为Object的对象。</p>

<p>```java</p>

<p>public class Box {</p>

<pre><code>public Object getObject() {
    return object;
}

public void setObject(Object object) {
    this.object = object;
}

private Object object;
</code></pre>

<p>```</p>

<p>你可以传给它任何你想要的对象，比如对象String,Integer等，也可以传入自定义的一些对象。但是调用getObject方法返回的对象需要显式的强转为传入的类型，才能使用原来类型的一些方法。</p>

<p>我们可以使用泛型来构造这个对象。</p>

<p>```java</p>

<p>public class Box<T> {</p>

<pre><code>public T getObject() {
    return object;
}

private T object;

public void setObject(T object) {
    this.object = object;
}
</code></pre>

<p>}</p>

<p>```</p>

<p>我们可以看到，所有的Object被替换成了T。T代表了某种类型，你在实例化Box对象时，必须要给其指定一种类型，String,Integer或者自定义的类，并且调用getObject方法并不需要进行强转就可以使用该类型的方法。</p>

<p>一般来说，类型参数名称越简单越好，并且需要是大写的。为了方便，我们约定了一些命名使用。</p>

<ul>
<li>E Element</li>
<li>K key</li>
<li>N Number</li>
<li>T type</li>
<li>V value</li>
<li>S,U,V 第2，3，4个类型</li>
</ul>


<p>我们可以这样实例化一个Box类。</p>

<p>```java</p>

<p>Box<Integer> integerBox = new Box<Integer>();</p>

<p>```</p>

<p>同样，我们也支持在一个类中传入多个类型参数。例如下面的Pair对象</p>

<p>```java</p>

<p>public class Pair&lt;T, V> {</p>

<pre><code>private T key;
private V value;

public Pair(T key, V value) {
    this.key = key;
    this.value = value;
}

public T getKey() {
    return key;
}

public V getValue() {
    return value;
}
</code></pre>

<p>```</p>

<p>使用方法如下。</p>

<p>```java</p>

<p>Pair&lt;Integer, String> one = new Pair&lt;Integer, String>(1, "one");</p>

<p>Pair&lt;String, String> hello = new Pair&lt;String, String>("hello", "world");</p>

<p>```</p>

<h2>对方法使用泛型</h2>

<p>泛型可以作用与方法上，此时泛型参数只能在方法体中使用。而泛型作用于类时，则在整个类中可以使用。</p>

<p>在静态方法、非静态方法及构造函数都可以使用泛型。</p>

<p>```java</p>

<p>public class Util {</p>

<pre><code>public static &lt;T, U&gt; boolean compare(Pair&lt;T,U&gt; pair1, Pair&lt;T,U&gt; pair2)
{
    return pair1.getKey().equals(pair2.getKey()) &amp;&amp; pair1.getValue().equals(pair2.getValue());
}
</code></pre>

<p>}</p>

<p>```
下面是对该静态方法的使用。</p>

<p>```java</p>

<pre><code>   Pair one = new Pair("one", 1);
    Pair two = new Pair("two", 2);

    assertThat(Util.compare(one, two), is(false));
</code></pre>

<p>// pass</p>

<p>```</p>

<h2>对泛型进行限定</h2>

<p>默认情况下如果直接使用<T>的话，我们可以给其传任何值。有时候我们想值允许传入某个类及它的子类。这时候在声明泛型时可以使用<strong>extends</strong>关键字。</p>

<p>```java</p>

<p>public class Box<T extends Number> {</p>

<pre><code>public T getObject() {
    return object;
}

private T object;

public void setObject(T object) {
    this.object = object;
}
</code></pre>

<p>}</p>

<p><code>
</code>java</p>

<pre><code>  Box box = new Box();
    box.setObject(10);    //ok
    box.setObject("hello");  //compile-time error
</code></pre>

<p>```</p>

<p>我们也可以给类型参数加多个限定。</p>

<p>```java</p>

<p><T extends B1 & B2 & B3></p>

<p>```</p>

<p>加上限定类或接口以后，我们可以使用泛型参数变量调用该类或接口的方法。</p>

<h2>通配符的使用</h2>

<p>Java中的List<T>就是一个实现了泛型的类，假如我们写了一个方法，获取List<T>中元素的个数。只不过这个方法限定T类型为Number。</p>

<p>```java</p>

<p>  public static int getCount(List<Number> list)
  {</p>

<pre><code>  int i = 0;
  for(Number n : list)
  {
      i++;
  }
  return i;
</code></pre>

<p>  }</p>

<p>```
然后我们这样试图调用它。</p>

<p>```</p>

<pre><code>    List&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;(){
        {
            add(1);
            add(2);
            add(3);
        }
    };

    Util.getCount(list); //compile-time error
</code></pre>

<p>```</p>

<p>为什么会产生错误那？因为我们要求方法的参数是List<Number>,而我们实际传入的是List<Integer>。虽然Integer是Number的子类，但是List<Integer>却不是List<Number>的子类，他们其实是平等的关系。这点一定要注意。我们在方法定义时已经明确表示T的类型是Number了，所以只能接收List<Number>，而不能接收其它类型的参数。
这时候<code>?</code>通配符就起作用了。我们可以使用<code>？</code>通配符重新定义这个方法。</p>

<p>```java</p>

<p>public class Util {</p>

<p>  public static int getCount(List&lt;? extends Number> list)
  {</p>

<pre><code>  int i = 0;
  for(Number n : list)
  {
      i++;
  }
  return i;
</code></pre>

<p>  }
}</p>

<p>```</p>

<p>```java</p>

<pre><code>    List&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;(){
        {
            add(1);
            add(2);
            add(3);
        }
    };

    assertThat(Util.getCount(list), is(3));  // pass
</code></pre>

<p>```</p>

<p>既然能限定到一个类及其子类上，当然也能限定到一个类及其父类上。语法如下:</p>

<p>```java</p>

<p>&lt;? supper A></p>

<p>```</p>

<h2>对泛型使用的总结</h2>

<ul>
<li><p><strong>类型参数不能是原始类型</strong>（int, char，double）,只能传入这些类型的封转类(Integer,Char,Double)。</p></li>
<li><p><strong>不能直接创建类型参数的实例。</strong></p></li>
</ul>


<p>```java
public static <E> void append(List<E> list) {    E elem = new E();  // compile-time error    list.add(elem);
}</p>

<p>```</p>

<p>但有通过反射可以实现。</p>

<p>```java
public static <E> void append(List<E> list, Class<E> cls) throws Exception {    E elem = cls.newInstance();   // OK    list.add(elem);}</p>

<p>```
你可以这样调用它:</p>

<p>```java</p>

<p>List<String> ls = new ArrayList&lt;>();
append(ls, String.class);</p>

<p>```</p>

<ul>
<li><strong>静态字段的类型不能为类型参数。</strong></li>
</ul>


<p>```java</p>

<p>public class Box<T> {    private static T object; // compile-time error</p>

<p>}</p>

<p>```</p>

<ul>
<li><strong>不能创建类型参数变量的数组。</strong></li>
</ul>


<p>```java</p>

<p>List<Integer>[] arrayOfLists = new List<Integer>[2];  // compile-time error</p>

<p>```</p>

<ul>
<li><strong>不能重载一个方法，该方法的形参都来自于同一个类型参数对象。</strong></li>
</ul>


<p>```java</p>

<p>public class Example {</p>

<pre><code>public void print(List&lt;Integer&gt; integers) {}

public void print(List&lt;Double&gt; doubles) {}
</code></pre>

<p>}</p>

<p>```</p>

<p>参考文档：<a href="http://docs.oracle.com/javase/tutorial/java/generics/index.html">http://docs.oracle.com/javase/tutorial/java/generics/index.html</a></p>
]]></content>
  </entry>
  
</feed>
